
acc_rpm_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d91c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800da28  0800da28  0001da28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbc0  0800dbc0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800dbc0  0800dbc0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dbc0  0800dbc0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbc0  0800dbc0  0001dbc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dbc4  0800dbc4  0001dbc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dbc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015f8  200001e0  0800dda8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017d8  0800dda8  000217d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f2c5  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cd2  00000000  00000000  0003f511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d38  00000000  00000000  000441e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168d  00000000  00000000  00045f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e047  00000000  00000000  000475ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024c9f  00000000  00000000  000655f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009edb0  00000000  00000000  0008a293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fa4  00000000  00000000  00129044  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00130fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e0 	.word	0x200001e0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800da10 	.word	0x0800da10

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e4 	.word	0x200001e4
 8000148:	0800da10 	.word	0x0800da10

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000164:	4a04      	ldr	r2, [pc, #16]	; (8000178 <DS1307_Init+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800016a:	2000      	movs	r0, #0
 800016c:	f000 f806 	bl	800017c <DS1307_SetClockHalt>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	200001fc 	.word	0x200001fc

0800017c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <DS1307_SetClockHalt+0x14>
 800018c:	2380      	movs	r3, #128	; 0x80
 800018e:	e000      	b.n	8000192 <DS1307_SetClockHalt+0x16>
 8000190:	2300      	movs	r3, #0
 8000192:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000194:	2000      	movs	r0, #0
 8000196:	f000 f831 	bl	80001fc <DS1307_GetRegByte>
 800019a:	4603      	mov	r3, r0
 800019c:	b25b      	sxtb	r3, r3
 800019e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001a2:	b25a      	sxtb	r2, r3
 80001a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	b25b      	sxtb	r3, r3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	4619      	mov	r1, r3
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 f805 	bl	80001c0 <DS1307_SetRegByte>
}
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	460a      	mov	r2, r1
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	733b      	strb	r3, [r7, #12]
 80001d4:	79bb      	ldrb	r3, [r7, #6]
 80001d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <DS1307_SetRegByte+0x38>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f107 020c 	add.w	r2, r7, #12
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2302      	movs	r3, #2
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	f002 fa1b 	bl	8002624 <HAL_I2C_Master_Transmit>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	200001fc 	.word	0x200001fc

080001fc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <DS1307_GetRegByte+0x40>)
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	1dfa      	adds	r2, r7, #7
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	21d0      	movs	r1, #208	; 0xd0
 8000216:	f002 fa05 	bl	8002624 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <DS1307_GetRegByte+0x40>)
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	f107 020f 	add.w	r2, r7, #15
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	21d0      	movs	r1, #208	; 0xd0
 800022c:	f002 faf8 	bl	8002820 <HAL_I2C_Master_Receive>
	return val;
 8000230:	7bfb      	ldrb	r3, [r7, #15]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200001fc 	.word	0x200001fc

08000240 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffd9 	bl	80001fc <DS1307_GetRegByte>
 800024a:	4603      	mov	r3, r0
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f86c 	bl	800032a <DS1307_DecodeBCD>
 8000252:	4603      	mov	r3, r0
}
 8000254:	4618      	mov	r0, r3
 8000256:	bd80      	pop	{r7, pc}

08000258 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800025c:	2005      	movs	r0, #5
 800025e:	f7ff ffcd 	bl	80001fc <DS1307_GetRegByte>
 8000262:	4603      	mov	r3, r0
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f860 	bl	800032a <DS1307_DecodeBCD>
 800026a:	4603      	mov	r3, r0
}
 800026c:	4618      	mov	r0, r3
 800026e:	bd80      	pop	{r7, pc}

08000270 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000276:	2010      	movs	r0, #16
 8000278:	f7ff ffc0 	bl	80001fc <DS1307_GetRegByte>
 800027c:	4603      	mov	r3, r0
 800027e:	b29b      	uxth	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	0092      	lsls	r2, r2, #2
 8000284:	4413      	add	r3, r2
 8000286:	461a      	mov	r2, r3
 8000288:	0091      	lsls	r1, r2, #2
 800028a:	461a      	mov	r2, r3
 800028c:	460b      	mov	r3, r1
 800028e:	4413      	add	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000294:	2006      	movs	r0, #6
 8000296:	f7ff ffb1 	bl	80001fc <DS1307_GetRegByte>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f844 	bl	800032a <DS1307_DecodeBCD>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	4413      	add	r3, r2
 80002aa:	b29b      	uxth	r3, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80002b8:	2002      	movs	r0, #2
 80002ba:	f7ff ff9f 	bl	80001fc <DS1307_GetRegByte>
 80002be:	4603      	mov	r3, r0
 80002c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f82f 	bl	800032a <DS1307_DecodeBCD>
 80002cc:	4603      	mov	r3, r0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80002d6:	2001      	movs	r0, #1
 80002d8:	f7ff ff90 	bl	80001fc <DS1307_GetRegByte>
 80002dc:	4603      	mov	r3, r0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f823 	bl	800032a <DS1307_DecodeBCD>
 80002e4:	4603      	mov	r3, r0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	bd80      	pop	{r7, pc}

080002ea <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ff84 	bl	80001fc <DS1307_GetRegByte>
 80002f4:	4603      	mov	r3, r0
 80002f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f814 	bl	800032a <DS1307_DecodeBCD>
 8000302:	4603      	mov	r3, r0
}
 8000304:	4618      	mov	r0, r3
 8000306:	bd80      	pop	{r7, pc}

08000308 <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 800030c:	2008      	movs	r0, #8
 800030e:	f7ff ff75 	bl	80001fc <DS1307_GetRegByte>
 8000312:	4603      	mov	r3, r0
 8000314:	b25b      	sxtb	r3, r3
}
 8000316:	4618      	mov	r0, r3
 8000318:	bd80      	pop	{r7, pc}

0800031a <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 800031e:	2009      	movs	r0, #9
 8000320:	f7ff ff6c 	bl	80001fc <DS1307_GetRegByte>
 8000324:	4603      	mov	r3, r0
}
 8000326:	4618      	mov	r0, r3
 8000328:	bd80      	pop	{r7, pc}

0800032a <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	4603      	mov	r3, r0
 8000332:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	091b      	lsrs	r3, r3, #4
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	4413      	add	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	b2da      	uxtb	r2, r3
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4413      	add	r3, r2
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <read_Config>:

		HAL_Delay(5);  // Write cycle delay (5ms)
	}
}

void read_Config() {
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, CONFIG_ADDR, 2, &Config,
 8000362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	2311      	movs	r3, #17
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <read_Config+0x60>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2302      	movs	r3, #2
 8000372:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000376:	21a0      	movs	r1, #160	; 0xa0
 8000378:	4811      	ldr	r0, [pc, #68]	; (80003c0 <read_Config+0x64>)
 800037a:	f002 fcbd 	bl	8002cf8 <HAL_I2C_Mem_Read>
			sizeof(Config), 1000);
	uint8_t *x;
	x = &Config;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <read_Config+0x60>)
 8000380:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(Config); i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	e011      	b.n	80003ac <read_Config+0x50>
		sprintf(MSG, "Read %d = %d \r\n", i, *(x + i));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	490c      	ldr	r1, [pc, #48]	; (80003c4 <read_Config+0x68>)
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <read_Config+0x6c>)
 8000396:	f00c fe89 	bl	800d0ac <siprintf>
		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	2264      	movs	r2, #100	; 0x64
 800039e:	490a      	ldr	r1, [pc, #40]	; (80003c8 <read_Config+0x6c>)
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <read_Config+0x70>)
 80003a2:	f007 fbde 	bl	8007b62 <HAL_UART_Transmit>
	for (int i = 0; i < sizeof(Config); i++) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b10      	cmp	r3, #16
 80003b0:	d9ea      	bls.n	8000388 <read_Config+0x2c>
	}
}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000438 	.word	0x20000438
 80003c0:	20000258 	.word	0x20000258
 80003c4:	0800da28 	.word	0x0800da28
 80003c8:	2000044c 	.word	0x2000044c
 80003cc:	200003a8 	.word	0x200003a8

080003d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d2:	b0ab      	sub	sp, #172	; 0xac
 80003d4:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003d6:	f000 ff5f 	bl	8001298 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003da:	f000 f895 	bl	8000508 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003de:	f000 fb89 	bl	8000af4 <MX_GPIO_Init>
	MX_ADC1_Init();
 80003e2:	f000 f8f3 	bl	80005cc <MX_ADC1_Init>
	MX_CAN_Init();
 80003e6:	f000 f92f 	bl	8000648 <MX_CAN_Init>
	MX_I2C1_Init();
 80003ea:	f000 f961 	bl	80006b0 <MX_I2C1_Init>
	MX_RTC_Init();
 80003ee:	f000 f98d 	bl	800070c <MX_RTC_Init>
	MX_SPI1_Init();
 80003f2:	f000 f9d5 	bl	80007a0 <MX_SPI1_Init>
	MX_TIM1_Init();
 80003f6:	f000 fa09 	bl	800080c <MX_TIM1_Init>
	MX_TIM2_Init();
 80003fa:	f000 faa7 	bl	800094c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80003fe:	f000 fb25 	bl	8000a4c <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8000402:	f000 fb4d 	bl	8000aa0 <MX_USART2_UART_Init>
	MX_USB_DEVICE_Init();
 8000406:	f00c f9db 	bl	800c7c0 <MX_USB_DEVICE_Init>
	MX_FATFS_Init();
 800040a:	f00a f915 	bl	800a638 <MX_FATFS_Init>
	/* USER CODE BEGIN 2 */
//	write_Config();
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday",
 800040e:	4b39      	ldr	r3, [pc, #228]	; (80004f4 <main+0x124>)
 8000410:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000414:	461d      	mov	r5, r3
 8000416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800041a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Thursday", "Friday", "Saturday" };
	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
	DS1307_Init(&hi2c1);
 8000422:	4835      	ldr	r0, [pc, #212]	; (80004f8 <main+0x128>)
 8000424:	f7ff fe9a 	bl	800015c <DS1307_Init>
//	DS1307_SetMonth(10);
//	DS1307_SetYear(2024);
//	DS1307_SetHour(12);
//	DS1307_SetMinute(45);
//	DS1307_SetSecond(00);
	read_Config();
 8000428:	f7ff ff98 	bl	800035c <read_Config>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t date = DS1307_GetDate();
 800042c:	f7ff ff08 	bl	8000240 <DS1307_GetDate>
 8000430:	4603      	mov	r3, r0
 8000432:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t month = DS1307_GetMonth();
 8000436:	f7ff ff0f 	bl	8000258 <DS1307_GetMonth>
 800043a:	4603      	mov	r3, r0
 800043c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		uint16_t year = DS1307_GetYear();
 8000440:	f7ff ff16 	bl	8000270 <DS1307_GetYear>
 8000444:	4603      	mov	r3, r0
 8000446:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		uint8_t hour = DS1307_GetHour();
 800044a:	f7ff ff33 	bl	80002b4 <DS1307_GetHour>
 800044e:	4603      	mov	r3, r0
 8000450:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		uint8_t minute = DS1307_GetMinute();
 8000454:	f7ff ff3d 	bl	80002d2 <DS1307_GetMinute>
 8000458:	4603      	mov	r3, r0
 800045a:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		uint8_t second = DS1307_GetSecond();
 800045e:	f7ff ff44 	bl	80002ea <DS1307_GetSecond>
 8000462:	4603      	mov	r3, r0
 8000464:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		int8_t zone_hr = DS1307_GetTimeZoneHour();
 8000468:	f7ff ff4e 	bl	8000308 <DS1307_GetTimeZoneHour>
 800046c:	4603      	mov	r3, r0
 800046e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		uint8_t zone_min = DS1307_GetTimeZoneMin();
 8000472:	f7ff ff52 	bl	800031a <DS1307_GetTimeZoneMin>
 8000476:	4603      	mov	r3, r0
 8000478:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		char buffer[100] = { 0 };
 800047c:	2300      	movs	r3, #0
 800047e:	607b      	str	r3, [r7, #4]
 8000480:	f107 0308 	add.w	r3, r7, #8
 8000484:	2260      	movs	r2, #96	; 0x60
 8000486:	2100      	movs	r1, #0
 8000488:	4618      	mov	r0, r3
 800048a:	f00c fe2f 	bl	800d0ec <memset>
		sprintf(buffer,
 800048e:	f997 c088 	ldrsb.w	ip, [r7, #136]	; 0x88
 8000492:	f897 e087 	ldrb.w	lr, [r7, #135]	; 0x87
 8000496:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800049a:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800049e:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 80004a2:	f897 008b 	ldrb.w	r0, [r7, #139]	; 0x8b
 80004a6:	f897 408a 	ldrb.w	r4, [r7, #138]	; 0x8a
 80004aa:	f897 5089 	ldrb.w	r5, [r7, #137]	; 0x89
 80004ae:	1d3e      	adds	r6, r7, #4
 80004b0:	9505      	str	r5, [sp, #20]
 80004b2:	9404      	str	r4, [sp, #16]
 80004b4:	9003      	str	r0, [sp, #12]
 80004b6:	9102      	str	r1, [sp, #8]
 80004b8:	9201      	str	r2, [sp, #4]
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	4673      	mov	r3, lr
 80004be:	4662      	mov	r2, ip
 80004c0:	490e      	ldr	r1, [pc, #56]	; (80004fc <main+0x12c>)
 80004c2:	4630      	mov	r0, r6
 80004c4:	f00c fdf2 	bl	800d0ac <siprintf>
				"TIMEZONE:+%02d:%02d , %04d-%02d-%02d , %02d:%02d:%02d%  \n",
				zone_hr, zone_min, year, month, date, hour, minute, second);
		/* May show warning below. Ignore and proceed. */
//		CDC_Transmit_FS(buffer, strlen(buffer));
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 80004c8:	1d3b      	adds	r3, r7, #4
 80004ca:	4618      	mov	r0, r3
 80004cc:	f7ff fe3e 	bl	800014c <strlen>
 80004d0:	4603      	mov	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004da:	4809      	ldr	r0, [pc, #36]	; (8000500 <main+0x130>)
 80004dc:	f007 fb41 	bl	8007b62 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <main+0x134>)
 80004e6:	f001 ff3f 	bl	8002368 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80004ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ee:	f000 ff35 	bl	800135c <HAL_Delay>
	while (1) {
 80004f2:	e79b      	b.n	800042c <main+0x5c>
 80004f4:	0800dae8 	.word	0x0800dae8
 80004f8:	20000258 	.word	0x20000258
 80004fc:	0800da68 	.word	0x0800da68
 8000500:	200003a8 	.word	0x200003a8
 8000504:	40011000 	.word	0x40011000

08000508 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	; 0x50
 800050c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2228      	movs	r2, #40	; 0x28
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00c fde8 	bl	800d0ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800051c:	f107 0314 	add.w	r3, r7, #20
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 8000538:	2309      	movs	r3, #9
 800053a:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000540:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800054a:	2301      	movs	r3, #1
 800054c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054e:	2302      	movs	r3, #2
 8000550:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000552:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000556:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000558:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800055c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800055e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000562:	4618      	mov	r0, r3
 8000564:	f005 f816 	bl	8005594 <HAL_RCC_OscConfig>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <SystemClock_Config+0x6a>
		Error_Handler();
 800056e:	f000 fb57 	bl	8000c20 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000572:	230f      	movs	r3, #15
 8000574:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000582:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000584:	2300      	movs	r3, #0
 8000586:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	2102      	movs	r1, #2
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fa82 	bl	8005a98 <HAL_RCC_ClockConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
		Error_Handler();
 800059a:	f000 fb41 	bl	8000c20 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC
 800059e:	2313      	movs	r3, #19
 80005a0:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_USB;
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a6:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005ac:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f005 fbfd 	bl	8005db4 <HAL_RCCEx_PeriphCLKConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xbc>
		Error_Handler();
 80005c0:	f000 fb2e 	bl	8000c20 <Error_Handler>
	}
}
 80005c4:	bf00      	nop
 80005c6:	3750      	adds	r7, #80	; 0x50
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80005dc:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_ADC1_Init+0x74>)
 80005de:	4a19      	ldr	r2, [pc, #100]	; (8000644 <MX_ADC1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <MX_ADC1_Init+0x74>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_ADC1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <MX_ADC1_Init+0x74>)
 80005f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005fa:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_ADC1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_ADC1_Init+0x74>)
 8000604:	2201      	movs	r2, #1
 8000606:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000608:	480d      	ldr	r0, [pc, #52]	; (8000640 <MX_ADC1_Init+0x74>)
 800060a:	f000 fecb 	bl	80013a4 <HAL_ADC_Init>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000614:	f000 fb04 	bl	8000c20 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4619      	mov	r1, r3
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_ADC1_Init+0x74>)
 800062a:	f000 ff93 	bl	8001554 <HAL_ADC_ConfigChannel>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000634:	f000 faf4 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000200 	.word	0x20000200
 8000644:	40012400 	.word	0x40012400

08000648 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800064c:	4b16      	ldr	r3, [pc, #88]	; (80006a8 <MX_CAN_Init+0x60>)
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_CAN_Init+0x64>)
 8000650:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000652:	4b15      	ldr	r3, [pc, #84]	; (80006a8 <MX_CAN_Init+0x60>)
 8000654:	2210      	movs	r2, #16
 8000656:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_CAN_Init+0x60>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_CAN_Init+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_CAN_Init+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_CAN_Init+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_CAN_Init+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_CAN_Init+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_CAN_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_CAN_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_CAN_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_CAN_Init+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000694:	4804      	ldr	r0, [pc, #16]	; (80006a8 <MX_CAN_Init+0x60>)
 8000696:	f001 f896 	bl	80017c6 <HAL_CAN_Init>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_CAN_Init+0x5c>
		Error_Handler();
 80006a0:	f000 fabe 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	20000230 	.word	0x20000230
 80006ac:	40006400 	.word	0x40006400

080006b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C1_Init+0x50>)
 80006b6:	4a13      	ldr	r2, [pc, #76]	; (8000704 <MX_I2C1_Init+0x54>)
 80006b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C1_Init+0x50>)
 80006bc:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_I2C1_Init+0x58>)
 80006be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_I2C1_Init+0x50>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_I2C1_Init+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_I2C1_Init+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <MX_I2C1_Init+0x50>)
 80006ee:	f001 fe55 	bl	800239c <HAL_I2C_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006f8:	f000 fa92 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000258 	.word	0x20000258
 8000704:	40005400 	.word	0x40005400
 8000708:	000186a0 	.word	0x000186a0

0800070c <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	2100      	movs	r1, #0
 8000716:	460a      	mov	r2, r1
 8000718:	801a      	strh	r2, [r3, #0]
 800071a:	460a      	mov	r2, r1
 800071c:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <MX_RTC_Init+0x8c>)
 8000724:	4a1d      	ldr	r2, [pc, #116]	; (800079c <MX_RTC_Init+0x90>)
 8000726:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <MX_RTC_Init+0x8c>)
 800072a:	f04f 32ff 	mov.w	r2, #4294967295
 800072e:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000730:	4b19      	ldr	r3, [pc, #100]	; (8000798 <MX_RTC_Init+0x8c>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000736:	4818      	ldr	r0, [pc, #96]	; (8000798 <MX_RTC_Init+0x8c>)
 8000738:	f005 fca8 	bl	800608c <HAL_RTC_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_RTC_Init+0x3a>
		Error_Handler();
 8000742:	f000 fa6d 	bl	8000c20 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 8000746:	2300      	movs	r3, #0
 8000748:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 800074a:	2300      	movs	r3, #0
 800074c:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 800074e:	2300      	movs	r3, #0
 8000750:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2201      	movs	r2, #1
 8000756:	4619      	mov	r1, r3
 8000758:	480f      	ldr	r0, [pc, #60]	; (8000798 <MX_RTC_Init+0x8c>)
 800075a:	f005 fd23 	bl	80061a4 <HAL_RTC_SetTime>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_RTC_Init+0x5c>
		Error_Handler();
 8000764:	f000 fa5c 	bl	8000c20 <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000768:	2301      	movs	r3, #1
 800076a:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 800076c:	2301      	movs	r3, #1
 800076e:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8000770:	2301      	movs	r3, #1
 8000772:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 8000774:	2300      	movs	r3, #0
 8000776:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 8000778:	463b      	mov	r3, r7
 800077a:	2201      	movs	r2, #1
 800077c:	4619      	mov	r1, r3
 800077e:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_RTC_Init+0x8c>)
 8000780:	f005 fda8 	bl	80062d4 <HAL_RTC_SetDate>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_RTC_Init+0x82>
		Error_Handler();
 800078a:	f000 fa49 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	200002ac 	.word	0x200002ac
 800079c:	40002800 	.word	0x40002800

080007a0 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_SPI1_Init+0x64>)
 80007a6:	4a18      	ldr	r2, [pc, #96]	; (8000808 <MX_SPI1_Init+0x68>)
 80007a8:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007b0:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_SPI1_Init+0x64>)
 80007cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007d0:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <MX_SPI1_Init+0x64>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_SPI1_Init+0x64>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_SPI1_Init+0x64>)
 80007f2:	f005 ffcf 	bl	8006794 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_SPI1_Init+0x60>
		Error_Handler();
 80007fc:	f000 fa10 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	bd80      	pop	{r7, pc}
 8000804:	200002c0 	.word	0x200002c0
 8000808:	40013000 	.word	0x40013000

0800080c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b096      	sub	sp, #88	; 0x58
 8000810:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000812:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000820:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800082a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
 800083a:	615a      	str	r2, [r3, #20]
 800083c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2220      	movs	r2, #32
 8000842:	2100      	movs	r1, #0
 8000844:	4618      	mov	r0, r3
 8000846:	f00c fc51 	bl	800d0ec <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800084a:	4b3e      	ldr	r3, [pc, #248]	; (8000944 <MX_TIM1_Init+0x138>)
 800084c:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <MX_TIM1_Init+0x13c>)
 800084e:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8000850:	4b3c      	ldr	r3, [pc, #240]	; (8000944 <MX_TIM1_Init+0x138>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b3b      	ldr	r3, [pc, #236]	; (8000944 <MX_TIM1_Init+0x138>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 800085c:	4b39      	ldr	r3, [pc, #228]	; (8000944 <MX_TIM1_Init+0x138>)
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b37      	ldr	r3, [pc, #220]	; (8000944 <MX_TIM1_Init+0x138>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800086a:	4b36      	ldr	r3, [pc, #216]	; (8000944 <MX_TIM1_Init+0x138>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000870:	4b34      	ldr	r3, [pc, #208]	; (8000944 <MX_TIM1_Init+0x138>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000876:	4833      	ldr	r0, [pc, #204]	; (8000944 <MX_TIM1_Init+0x138>)
 8000878:	f006 fbb7 	bl	8006fea <HAL_TIM_Base_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM1_Init+0x7a>
		Error_Handler();
 8000882:	f000 f9cd 	bl	8000c20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 800088c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000890:	4619      	mov	r1, r3
 8000892:	482c      	ldr	r0, [pc, #176]	; (8000944 <MX_TIM1_Init+0x138>)
 8000894:	f006 fd12 	bl	80072bc <HAL_TIM_ConfigClockSource>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_TIM1_Init+0x96>
		Error_Handler();
 800089e:	f000 f9bf 	bl	8000c20 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80008a2:	4828      	ldr	r0, [pc, #160]	; (8000944 <MX_TIM1_Init+0x138>)
 80008a4:	f006 fbf0 	bl	8007088 <HAL_TIM_PWM_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0xa6>
		Error_Handler();
 80008ae:	f000 f9b7 	bl	8000c20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80008ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008be:	4619      	mov	r1, r3
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <MX_TIM1_Init+0x138>)
 80008c2:	f007 f84f 	bl	8007964 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xc4>
			!= HAL_OK) {
		Error_Handler();
 80008cc:	f000 f9a8 	bl	8000c20 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	4813      	ldr	r0, [pc, #76]	; (8000944 <MX_TIM1_Init+0x138>)
 80008f6:	f006 fc1f 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xf8>
			!= HAL_OK) {
		Error_Handler();
 8000900:	f000 f98e 	bl	8000c20 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM1_Init+0x138>)
 8000928:	f007 f87a 	bl	8007a20 <HAL_TIMEx_ConfigBreakDeadTime>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM1_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8000932:	f000 f975 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8000936:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM1_Init+0x138>)
 8000938:	f000 fb2a 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 800093c:	bf00      	nop
 800093e:	3758      	adds	r7, #88	; 0x58
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000318 	.word	0x20000318
 8000948:	40012c00 	.word	0x40012c00

0800094c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000952:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000960:	f107 0320 	add.w	r3, r7, #32
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800097c:	4b32      	ldr	r3, [pc, #200]	; (8000a48 <MX_TIM2_Init+0xfc>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8000984:	4b30      	ldr	r3, [pc, #192]	; (8000a48 <MX_TIM2_Init+0xfc>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b2f      	ldr	r3, [pc, #188]	; (8000a48 <MX_TIM2_Init+0xfc>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000990:	4b2d      	ldr	r3, [pc, #180]	; (8000a48 <MX_TIM2_Init+0xfc>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b2b      	ldr	r3, [pc, #172]	; (8000a48 <MX_TIM2_Init+0xfc>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b2a      	ldr	r3, [pc, #168]	; (8000a48 <MX_TIM2_Init+0xfc>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80009a4:	4828      	ldr	r0, [pc, #160]	; (8000a48 <MX_TIM2_Init+0xfc>)
 80009a6:	f006 fb20 	bl	8006fea <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x68>
		Error_Handler();
 80009b0:	f000 f936 	bl	8000c20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80009ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009be:	4619      	mov	r1, r3
 80009c0:	4821      	ldr	r0, [pc, #132]	; (8000a48 <MX_TIM2_Init+0xfc>)
 80009c2:	f006 fc7b 	bl	80072bc <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM2_Init+0x84>
		Error_Handler();
 80009cc:	f000 f928 	bl	8000c20 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80009d0:	481d      	ldr	r0, [pc, #116]	; (8000a48 <MX_TIM2_Init+0xfc>)
 80009d2:	f006 fb59 	bl	8007088 <HAL_TIM_PWM_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM2_Init+0x94>
		Error_Handler();
 80009dc:	f000 f920 	bl	8000c20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80009e8:	f107 0320 	add.w	r3, r7, #32
 80009ec:	4619      	mov	r1, r3
 80009ee:	4816      	ldr	r0, [pc, #88]	; (8000a48 <MX_TIM2_Init+0xfc>)
 80009f0:	f006 ffb8 	bl	8007964 <HAL_TIMEx_MasterConfigSynchronization>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0xb2>
			!= HAL_OK) {
		Error_Handler();
 80009fa:	f000 f911 	bl	8000c20 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fe:	2360      	movs	r3, #96	; 0x60
 8000a00:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2208      	movs	r2, #8
 8000a12:	4619      	mov	r1, r3
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_TIM2_Init+0xfc>)
 8000a16:	f006 fb8f 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_TIM2_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000a20:	f000 f8fe 	bl	8000c20 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	220c      	movs	r2, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4807      	ldr	r0, [pc, #28]	; (8000a48 <MX_TIM2_Init+0xfc>)
 8000a2c:	f006 fb84 	bl	8007138 <HAL_TIM_PWM_ConfigChannel>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000a36:	f000 f8f3 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8000a3a:	4803      	ldr	r0, [pc, #12]	; (8000a48 <MX_TIM2_Init+0xfc>)
 8000a3c:	f000 faa8 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000a40:	bf00      	nop
 8000a42:	3738      	adds	r7, #56	; 0x38
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000360 	.word	0x20000360

08000a4c <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <MX_USART1_UART_Init+0x50>)
 8000a54:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_USART1_UART_Init+0x4c>)
 8000a84:	f007 f81d 	bl	8007ac2 <HAL_UART_Init>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000a8e:	f000 f8c7 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200003a8 	.word	0x200003a8
 8000a9c:	40013800 	.word	0x40013800

08000aa0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART2_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART2_UART_Init+0x4c>)
 8000ad8:	f006 fff3 	bl	8007ac2 <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000ae2:	f000 f89d 	bl	8000c20 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200003f0 	.word	0x200003f0
 8000af0:	40004400 	.word	0x40004400

08000af4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b088      	sub	sp, #32
 8000af8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000afa:	f107 0310 	add.w	r3, r7, #16
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b41      	ldr	r3, [pc, #260]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b3e      	ldr	r3, [pc, #248]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b20:	4b3b      	ldr	r3, [pc, #236]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a3a      	ldr	r2, [pc, #232]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b26:	f043 0320 	orr.w	r3, r3, #32
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0320 	and.w	r3, r3, #32
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b38:	4b35      	ldr	r3, [pc, #212]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a34      	ldr	r2, [pc, #208]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b32      	ldr	r3, [pc, #200]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0304 	and.w	r3, r3, #4
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b50:	4b2f      	ldr	r3, [pc, #188]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a2e      	ldr	r2, [pc, #184]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b56:	f043 0308 	orr.w	r3, r3, #8
 8000b5a:	6193      	str	r3, [r2, #24]
 8000b5c:	4b2c      	ldr	r3, [pc, #176]	; (8000c10 <MX_GPIO_Init+0x11c>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	f003 0308 	and.w	r3, r3, #8
 8000b64:	603b      	str	r3, [r7, #0]
 8000b66:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIGNAL_LAMP_Pin_GPIO_Port, SIGNAL_LAMP_Pin_Pin,
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6e:	4829      	ldr	r0, [pc, #164]	; (8000c14 <MX_GPIO_Init+0x120>)
 8000b70:	f001 fbe2 	bl	8002338 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TM_CLK_Pin | TM_DIO_Pin | GPIO_PIN_2,
 8000b74:	2200      	movs	r2, #0
 8000b76:	2107      	movs	r1, #7
 8000b78:	4827      	ldr	r0, [pc, #156]	; (8000c18 <MX_GPIO_Init+0x124>)
 8000b7a:	f001 fbdd 	bl	8002338 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : SIGNAL_LAMP_Pin_Pin */
	GPIO_InitStruct.Pin = SIGNAL_LAMP_Pin_Pin;
 8000b7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b82:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SIGNAL_LAMP_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	481f      	ldr	r0, [pc, #124]	; (8000c14 <MX_GPIO_Init+0x120>)
 8000b98:	f001 fa4a 	bl	8002030 <HAL_GPIO_Init>

	/*Configure GPIO pins : TM_CLK_Pin TM_DIO_Pin PB2 */
	GPIO_InitStruct.Pin = TM_CLK_Pin | TM_DIO_Pin | GPIO_PIN_2;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4819      	ldr	r0, [pc, #100]	; (8000c18 <MX_GPIO_Init+0x124>)
 8000bb4:	f001 fa3c 	bl	8002030 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB3
	 Bt_UP_Pin Bt_DOWN_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_3
 8000bb8:	f247 0338 	movw	r3, #28728	; 0x7038
 8000bbc:	613b      	str	r3, [r7, #16]
			| Bt_UP_Pin | Bt_DOWN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	f107 0310 	add.w	r3, r7, #16
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <MX_GPIO_Init+0x124>)
 8000bce:	f001 fa2f 	bl	8002030 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bd6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_GPIO_Init+0x124>)
 8000be8:	f001 fa22 	bl	8002030 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bf0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfa:	f107 0310 	add.w	r3, r7, #16
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_GPIO_Init+0x128>)
 8000c02:	f001 fa15 	bl	8002030 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3720      	adds	r7, #32
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40011000 	.word	0x40011000
 8000c18:	40010c00 	.word	0x40010c00
 8000c1c:	40010800 	.word	0x40010800

08000c20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c34:	699b      	ldr	r3, [r3, #24]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6193      	str	r3, [r2, #24]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c40:	699b      	ldr	r3, [r3, #24]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x5c>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c62:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_MspInit+0x60>)
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	4a04      	ldr	r2, [pc, #16]	; (8000c8c <HAL_MspInit+0x60>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	40010000 	.word	0x40010000

08000c90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c98:	f107 0310 	add.w	r3, r7, #16
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a14      	ldr	r2, [pc, #80]	; (8000cfc <HAL_ADC_MspInit+0x6c>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d121      	bne.n	8000cf4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cb2:	699b      	ldr	r3, [r3, #24]
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cba:	6193      	str	r3, [r2, #24]
 8000cbc:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cce:	f043 0304 	orr.w	r3, r3, #4
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <HAL_ADC_MspInit+0x70>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0304 	and.w	r3, r3, #4
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ce4:	2303      	movs	r3, #3
 8000ce6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	4619      	mov	r1, r3
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <HAL_ADC_MspInit+0x74>)
 8000cf0:	f001 f99e 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40012400 	.word	0x40012400
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010800 	.word	0x40010800

08000d08 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4a29      	ldr	r2, [pc, #164]	; (8000dc8 <HAL_CAN_MspInit+0xc0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d14b      	bne.n	8000dc0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a27      	ldr	r2, [pc, #156]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d40:	4b22      	ldr	r3, [pc, #136]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d46:	f043 0308 	orr.w	r3, r3, #8
 8000d4a:	6193      	str	r3, [r2, #24]
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_CAN_MspInit+0xc4>)
 8000d4e:	699b      	ldr	r3, [r3, #24]
 8000d50:	f003 0308 	and.w	r3, r3, #8
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	f107 0314 	add.w	r3, r7, #20
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <HAL_CAN_MspInit+0xc8>)
 8000d6e:	f001 f95f 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <HAL_CAN_MspInit+0xc8>)
 8000d88:	f001 f952 	bl	8002030 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d8c:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_CAN_MspInit+0xcc>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_CAN_MspInit+0xcc>)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2014      	movs	r0, #20
 8000db6:	f001 f904 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000dba:	2014      	movs	r0, #20
 8000dbc:	f001 f91d 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	3728      	adds	r7, #40	; 0x28
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40006400 	.word	0x40006400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a15      	ldr	r2, [pc, #84]	; (8000e48 <HAL_I2C_MspInit+0x70>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d123      	bne.n	8000e40 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b14      	ldr	r3, [pc, #80]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000dfa:	699b      	ldr	r3, [r3, #24]
 8000dfc:	4a13      	ldr	r2, [pc, #76]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6193      	str	r3, [r2, #24]
 8000e04:	4b11      	ldr	r3, [pc, #68]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000e06:	699b      	ldr	r3, [r3, #24]
 8000e08:	f003 0308 	and.w	r3, r3, #8
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e10:	23c0      	movs	r3, #192	; 0xc0
 8000e12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e14:	2312      	movs	r3, #18
 8000e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e18:	2303      	movs	r3, #3
 8000e1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 0310 	add.w	r3, r7, #16
 8000e20:	4619      	mov	r1, r3
 8000e22:	480b      	ldr	r0, [pc, #44]	; (8000e50 <HAL_I2C_MspInit+0x78>)
 8000e24:	f001 f904 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e28:	4b08      	ldr	r3, [pc, #32]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	4a07      	ldr	r2, [pc, #28]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000e2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e32:	61d3      	str	r3, [r2, #28]
 8000e34:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <HAL_I2C_MspInit+0x74>)
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e40:	bf00      	nop
 8000e42:	3720      	adds	r7, #32
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40005400 	.word	0x40005400
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40010c00 	.word	0x40010c00

08000e54 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <HAL_RTC_MspInit+0x3c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d110      	bne.n	8000e88 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e66:	f004 fb89 	bl	800557c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e6a:	4b0a      	ldr	r3, [pc, #40]	; (8000e94 <HAL_RTC_MspInit+0x40>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_RTC_MspInit+0x40>)
 8000e70:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_RTC_MspInit+0x40>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e7e:	60fb      	str	r3, [r7, #12]
 8000e80:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_RTC_MspInit+0x44>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3710      	adds	r7, #16
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40002800 	.word	0x40002800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	4242043c 	.word	0x4242043c

08000e9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b088      	sub	sp, #32
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0310 	add.w	r3, r7, #16
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a1b      	ldr	r2, [pc, #108]	; (8000f24 <HAL_SPI_MspInit+0x88>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d12f      	bne.n	8000f1c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a13      	ldr	r2, [pc, #76]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <HAL_SPI_MspInit+0x8c>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000eec:	23b0      	movs	r3, #176	; 0xb0
 8000eee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	4619      	mov	r1, r3
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <HAL_SPI_MspInit+0x90>)
 8000f00:	f001 f896 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4619      	mov	r1, r3
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <HAL_SPI_MspInit+0x90>)
 8000f18:	f001 f88a 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f1c:	bf00      	nop
 8000f1e:	3720      	adds	r7, #32
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40013000 	.word	0x40013000
 8000f28:	40021000 	.word	0x40021000
 8000f2c:	40010800 	.word	0x40010800

08000f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b085      	sub	sp, #20
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <HAL_TIM_Base_MspInit+0x58>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d10c      	bne.n	8000f5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f5a:	e010      	b.n	8000f7e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d10b      	bne.n	8000f7e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	61d3      	str	r3, [r2, #28]
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <HAL_TIM_Base_MspInit+0x5c>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr
 8000f88:	40012c00 	.word	0x40012c00
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a28      	ldr	r2, [pc, #160]	; (800104c <HAL_TIM_MspPostInit+0xbc>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d119      	bne.n	8000fe4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb0:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	4a26      	ldr	r2, [pc, #152]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000fb6:	f043 0304 	orr.w	r3, r3, #4
 8000fba:	6193      	str	r3, [r2, #24]
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	481d      	ldr	r0, [pc, #116]	; (8001054 <HAL_TIM_MspPostInit+0xc4>)
 8000fde:	f001 f827 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fe2:	e02f      	b.n	8001044 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fec:	d12a      	bne.n	8001044 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_TIM_MspPostInit+0xc0>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001006:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2302      	movs	r3, #2
 8001012:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	4619      	mov	r1, r3
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <HAL_TIM_MspPostInit+0xc8>)
 800101c:	f001 f808 	bl	8002030 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_TIM_MspPostInit+0xcc>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001030:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
 8001036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_TIM_MspPostInit+0xcc>)
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	6053      	str	r3, [r2, #4]
}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800
 8001058:	40010c00 	.word	0x40010c00
 800105c:	40010000 	.word	0x40010000

08001060 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a37      	ldr	r2, [pc, #220]	; (8001158 <HAL_UART_MspInit+0xf8>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d132      	bne.n	80010e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001080:	4b36      	ldr	r3, [pc, #216]	; (800115c <HAL_UART_MspInit+0xfc>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	4a35      	ldr	r2, [pc, #212]	; (800115c <HAL_UART_MspInit+0xfc>)
 8001086:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108a:	6193      	str	r3, [r2, #24]
 800108c:	4b33      	ldr	r3, [pc, #204]	; (800115c <HAL_UART_MspInit+0xfc>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001098:	4b30      	ldr	r3, [pc, #192]	; (800115c <HAL_UART_MspInit+0xfc>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	4a2f      	ldr	r2, [pc, #188]	; (800115c <HAL_UART_MspInit+0xfc>)
 800109e:	f043 0304 	orr.w	r3, r3, #4
 80010a2:	6193      	str	r3, [r2, #24]
 80010a4:	4b2d      	ldr	r3, [pc, #180]	; (800115c <HAL_UART_MspInit+0xfc>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0304 	and.w	r3, r3, #4
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010ba:	2303      	movs	r3, #3
 80010bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 0318 	add.w	r3, r7, #24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4826      	ldr	r0, [pc, #152]	; (8001160 <HAL_UART_MspInit+0x100>)
 80010c6:	f000 ffb3 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4619      	mov	r1, r3
 80010de:	4820      	ldr	r0, [pc, #128]	; (8001160 <HAL_UART_MspInit+0x100>)
 80010e0:	f000 ffa6 	bl	8002030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010e4:	e034      	b.n	8001150 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_UART_MspInit+0x104>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d12f      	bne.n	8001150 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f0:	4b1a      	ldr	r3, [pc, #104]	; (800115c <HAL_UART_MspInit+0xfc>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a19      	ldr	r2, [pc, #100]	; (800115c <HAL_UART_MspInit+0xfc>)
 80010f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010fa:	61d3      	str	r3, [r2, #28]
 80010fc:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_UART_MspInit+0xfc>)
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001104:	60fb      	str	r3, [r7, #12]
 8001106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_UART_MspInit+0xfc>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	4a13      	ldr	r2, [pc, #76]	; (800115c <HAL_UART_MspInit+0xfc>)
 800110e:	f043 0304 	orr.w	r3, r3, #4
 8001112:	6193      	str	r3, [r2, #24]
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <HAL_UART_MspInit+0xfc>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	f003 0304 	and.w	r3, r3, #4
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001120:	2304      	movs	r3, #4
 8001122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4619      	mov	r1, r3
 8001132:	480b      	ldr	r0, [pc, #44]	; (8001160 <HAL_UART_MspInit+0x100>)
 8001134:	f000 ff7c 	bl	8002030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001138:	2308      	movs	r3, #8
 800113a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001144:	f107 0318 	add.w	r3, r7, #24
 8001148:	4619      	mov	r1, r3
 800114a:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_UART_MspInit+0x100>)
 800114c:	f000 ff70 	bl	8002030 <HAL_GPIO_Init>
}
 8001150:	bf00      	nop
 8001152:	3728      	adds	r7, #40	; 0x28
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	40013800 	.word	0x40013800
 800115c:	40021000 	.word	0x40021000
 8001160:	40010800 	.word	0x40010800
 8001164:	40004400 	.word	0x40004400

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	e7fe      	b.n	800116c <NMI_Handler+0x4>

0800116e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001172:	e7fe      	b.n	8001172 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	e7fe      	b.n	8001178 <MemManage_Handler+0x4>

0800117a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <BusFault_Handler+0x4>

08001180 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <UsageFault_Handler+0x4>

08001186 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr

08001192 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	bc80      	pop	{r7}
 800119c:	4770      	bx	lr

0800119e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ae:	f000 f8b9 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011bc:	4803      	ldr	r0, [pc, #12]	; (80011cc <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80011be:	f000 fbfd 	bl	80019bc <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 80011c4:	f002 fd95 	bl	8003cf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000230 	.word	0x20000230
 80011d0:	20001198 	.word	0x20001198

080011d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011dc:	4a14      	ldr	r2, [pc, #80]	; (8001230 <_sbrk+0x5c>)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <_sbrk+0x60>)
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <_sbrk+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d102      	bne.n	80011f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <_sbrk+0x64>)
 80011f2:	4a12      	ldr	r2, [pc, #72]	; (800123c <_sbrk+0x68>)
 80011f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <_sbrk+0x64>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4413      	add	r3, r2
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	429a      	cmp	r2, r3
 8001202:	d207      	bcs.n	8001214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001204:	f00b ff7a 	bl	800d0fc <__errno>
 8001208:	4603      	mov	r3, r0
 800120a:	220c      	movs	r2, #12
 800120c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800120e:	f04f 33ff 	mov.w	r3, #4294967295
 8001212:	e009      	b.n	8001228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <_sbrk+0x64>)
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4413      	add	r3, r2
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <_sbrk+0x64>)
 8001224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001226:	68fb      	ldr	r3, [r7, #12]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3718      	adds	r7, #24
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20005000 	.word	0x20005000
 8001234:	00000400 	.word	0x00000400
 8001238:	200004b0 	.word	0x200004b0
 800123c:	200017d8 	.word	0x200017d8

08001240 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff fff8 	bl	8001240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001252:	490c      	ldr	r1, [pc, #48]	; (8001284 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001254:	4a0c      	ldr	r2, [pc, #48]	; (8001288 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a09      	ldr	r2, [pc, #36]	; (800128c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001268:	4c09      	ldr	r4, [pc, #36]	; (8001290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f00b ff47 	bl	800d108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800127a:	f7ff f8a9 	bl	80003d0 <main>
  bx lr
 800127e:	4770      	bx	lr
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001288:	0800dbc8 	.word	0x0800dbc8
  ldr r2, =_sbss
 800128c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001290:	200017d8 	.word	0x200017d8

08001294 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC1_2_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800129c:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <HAL_Init+0x28>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a07      	ldr	r2, [pc, #28]	; (80012c0 <HAL_Init+0x28>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 fe7f 	bl	8001fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ae:	200f      	movs	r0, #15
 80012b0:	f000 f808 	bl	80012c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012b4:	f7ff fcba 	bl	8000c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40022000 	.word	0x40022000

080012c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <HAL_InitTick+0x54>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b12      	ldr	r3, [pc, #72]	; (800131c <HAL_InitTick+0x58>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 fe97 	bl	8002016 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00e      	b.n	8001310 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b0f      	cmp	r3, #15
 80012f6:	d80a      	bhi.n	800130e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f8:	2200      	movs	r2, #0
 80012fa:	6879      	ldr	r1, [r7, #4]
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f000 fe5f 	bl	8001fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <HAL_InitTick+0x5c>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
 800130c:	e000      	b.n	8001310 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000000 	.word	0x20000000
 800131c:	20000008 	.word	0x20000008
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4413      	add	r3, r2
 8001334:	4a03      	ldr	r2, [pc, #12]	; (8001344 <HAL_IncTick+0x20>)
 8001336:	6013      	str	r3, [r2, #0]
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	20000008 	.word	0x20000008
 8001344:	200004b4 	.word	0x200004b4

08001348 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	; (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bc80      	pop	{r7}
 8001356:	4770      	bx	lr
 8001358:	200004b4 	.word	0x200004b4

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff0 	bl	8001348 <HAL_GetTick>
 8001368:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001382:	bf00      	nop
 8001384:	f7ff ffe0 	bl	8001348 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop
 8001398:	3710      	adds	r7, #16
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000008 	.word	0x20000008

080013a4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013ac:	2300      	movs	r3, #0
 80013ae:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013b0:	2300      	movs	r3, #0
 80013b2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0be      	b.n	8001544 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d109      	bne.n	80013e8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fc54 	bl	8000c90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f9ab 	bl	8001744 <ADC_ConversionStop_Disable>
 80013ee:	4603      	mov	r3, r0
 80013f0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f040 8099 	bne.w	8001532 <HAL_ADC_Init+0x18e>
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f040 8095 	bne.w	8001532 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001410:	f023 0302 	bic.w	r3, r3, #2
 8001414:	f043 0202 	orr.w	r2, r3, #2
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001424:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7b1b      	ldrb	r3, [r3, #12]
 800142a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800142c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4313      	orrs	r3, r2
 8001432:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800143c:	d003      	beq.n	8001446 <HAL_ADC_Init+0xa2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d102      	bne.n	800144c <HAL_ADC_Init+0xa8>
 8001446:	f44f 7380 	mov.w	r3, #256	; 0x100
 800144a:	e000      	b.n	800144e <HAL_ADC_Init+0xaa>
 800144c:	2300      	movs	r3, #0
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4313      	orrs	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d119      	bne.n	8001490 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7b1b      	ldrb	r3, [r3, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	3b01      	subs	r3, #1
 800146a:	035a      	lsls	r2, r3, #13
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	e00b      	b.n	8001490 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800147c:	f043 0220 	orr.w	r2, r3, #32
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001488:	f043 0201 	orr.w	r2, r3, #1
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	4b28      	ldr	r3, [pc, #160]	; (800154c <HAL_ADC_Init+0x1a8>)
 80014ac:	4013      	ands	r3, r2
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014c0:	d003      	beq.n	80014ca <HAL_ADC_Init+0x126>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	2b01      	cmp	r3, #1
 80014c8:	d104      	bne.n	80014d4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	051b      	lsls	r3, r3, #20
 80014d2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014da:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_ADC_Init+0x1ac>)
 80014f0:	4013      	ands	r3, r2
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d10b      	bne.n	8001510 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2200      	movs	r2, #0
 80014fc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001502:	f023 0303 	bic.w	r3, r3, #3
 8001506:	f043 0201 	orr.w	r2, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800150e:	e018      	b.n	8001542 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	f023 0312 	bic.w	r3, r3, #18
 8001518:	f043 0210 	orr.w	r2, r3, #16
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001524:	f043 0201 	orr.w	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001530:	e007      	b.n	8001542 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f043 0210 	orr.w	r2, r3, #16
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	ffe1f7fd 	.word	0xffe1f7fd
 8001550:	ff1f0efe 	.word	0xff1f0efe

08001554 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001562:	2300      	movs	r3, #0
 8001564:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <HAL_ADC_ConfigChannel+0x20>
 8001570:	2302      	movs	r3, #2
 8001572:	e0dc      	b.n	800172e <HAL_ADC_ConfigChannel+0x1da>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	2b06      	cmp	r3, #6
 8001582:	d81c      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	3b05      	subs	r3, #5
 8001596:	221f      	movs	r2, #31
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6818      	ldr	r0, [r3, #0]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685a      	ldr	r2, [r3, #4]
 80015a8:	4613      	mov	r3, r2
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	3b05      	subs	r3, #5
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
 80015bc:	e03c      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b0c      	cmp	r3, #12
 80015c4:	d81c      	bhi.n	8001600 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b23      	subs	r3, #35	; 0x23
 80015d8:	221f      	movs	r2, #31
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43db      	mvns	r3, r3
 80015e0:	4019      	ands	r1, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	3b23      	subs	r3, #35	; 0x23
 80015f2:	fa00 f203 	lsl.w	r2, r0, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	430a      	orrs	r2, r1
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
 80015fe:	e01b      	b.n	8001638 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	3b41      	subs	r3, #65	; 0x41
 8001612:	221f      	movs	r2, #31
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	4019      	ands	r1, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	4613      	mov	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	3b41      	subs	r3, #65	; 0x41
 800162c:	fa00 f203 	lsl.w	r2, r0, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	430a      	orrs	r2, r1
 8001636:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d91c      	bls.n	800167a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	68d9      	ldr	r1, [r3, #12]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	3b1e      	subs	r3, #30
 8001652:	2207      	movs	r2, #7
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6898      	ldr	r0, [r3, #8]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	3b1e      	subs	r3, #30
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	60da      	str	r2, [r3, #12]
 8001678:	e019      	b.n	80016ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6919      	ldr	r1, [r3, #16]
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4613      	mov	r3, r2
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4413      	add	r3, r2
 800168a:	2207      	movs	r2, #7
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	4019      	ands	r1, r3
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	6898      	ldr	r0, [r3, #8]
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	fa00 f203 	lsl.w	r2, r0, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b10      	cmp	r3, #16
 80016b4:	d003      	beq.n	80016be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016ba:	2b11      	cmp	r3, #17
 80016bc:	d132      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <HAL_ADC_ConfigChannel+0x1e4>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d125      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d126      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b10      	cmp	r3, #16
 80016ec:	d11a      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016ee:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_ADC_ConfigChannel+0x1e8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <HAL_ADC_ConfigChannel+0x1ec>)
 80016f4:	fba2 2303 	umull	r2, r3, r2, r3
 80016f8:	0c9a      	lsrs	r2, r3, #18
 80016fa:	4613      	mov	r3, r2
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4413      	add	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001704:	e002      	b.n	800170c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3b01      	subs	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1f9      	bne.n	8001706 <HAL_ADC_ConfigChannel+0x1b2>
 8001712:	e007      	b.n	8001724 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f043 0220 	orr.w	r2, r3, #32
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800172c:	7bfb      	ldrb	r3, [r7, #15]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	40012400 	.word	0x40012400
 800173c:	20000000 	.word	0x20000000
 8001740:	431bde83 	.word	0x431bde83

08001744 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	2b01      	cmp	r3, #1
 800175c:	d12e      	bne.n	80017bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 0201 	bic.w	r2, r2, #1
 800176c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800176e:	f7ff fdeb 	bl	8001348 <HAL_GetTick>
 8001772:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001774:	e01b      	b.n	80017ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001776:	f7ff fde7 	bl	8001348 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d914      	bls.n	80017ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b01      	cmp	r3, #1
 8001790:	d10d      	bne.n	80017ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f043 0210 	orr.w	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	f043 0201 	orr.w	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e007      	b.n	80017be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d0dc      	beq.n	8001776 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b084      	sub	sp, #16
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d101      	bne.n	80017d8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e0ed      	b.n	80019b4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff fa8f 	bl	8000d08 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f042 0201 	orr.w	r2, r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017fa:	f7ff fda5 	bl	8001348 <HAL_GetTick>
 80017fe:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001800:	e012      	b.n	8001828 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001802:	f7ff fda1 	bl	8001348 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b0a      	cmp	r3, #10
 800180e:	d90b      	bls.n	8001828 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2205      	movs	r2, #5
 8001820:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e0c5      	b.n	80019b4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0e5      	beq.n	8001802 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 0202 	bic.w	r2, r2, #2
 8001844:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001846:	f7ff fd7f 	bl	8001348 <HAL_GetTick>
 800184a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800184c:	e012      	b.n	8001874 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800184e:	f7ff fd7b 	bl	8001348 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b0a      	cmp	r3, #10
 800185a:	d90b      	bls.n	8001874 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001860:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2205      	movs	r2, #5
 800186c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e09f      	b.n	80019b4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1e5      	bne.n	800184e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7e1b      	ldrb	r3, [r3, #24]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	e007      	b.n	80018ac <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	7e5b      	ldrb	r3, [r3, #25]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d108      	bne.n	80018c6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	e007      	b.n	80018d6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	7e9b      	ldrb	r3, [r3, #26]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d108      	bne.n	80018f0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 0220 	orr.w	r2, r2, #32
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e007      	b.n	8001900 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0220 	bic.w	r2, r2, #32
 80018fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7edb      	ldrb	r3, [r3, #27]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d108      	bne.n	800191a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0210 	bic.w	r2, r2, #16
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e007      	b.n	800192a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0210 	orr.w	r2, r2, #16
 8001928:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7f1b      	ldrb	r3, [r3, #28]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d108      	bne.n	8001944 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0208 	orr.w	r2, r2, #8
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e007      	b.n	8001954 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0208 	bic.w	r2, r2, #8
 8001952:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	7f5b      	ldrb	r3, [r3, #29]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f042 0204 	orr.w	r2, r2, #4
 800196a:	601a      	str	r2, [r3, #0]
 800196c:	e007      	b.n	800197e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0204 	bic.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	431a      	orrs	r2, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	431a      	orrs	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	ea42 0103 	orr.w	r1, r2, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	1e5a      	subs	r2, r3, #1
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d07c      	beq.n	8001afc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d023      	beq.n	8001a54 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2201      	movs	r2, #1
 8001a12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a14:	69bb      	ldr	r3, [r7, #24]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f000 f983 	bl	8001d2a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a24:	e016      	b.n	8001a54 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d004      	beq.n	8001a3a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e00c      	b.n	8001a54 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 0308 	and.w	r3, r3, #8
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4c:	e002      	b.n	8001a54 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 f986 	bl	8001d60 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d024      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f962 	bl	8001d3c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a78:	e016      	b.n	8001aa8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a86:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	e00c      	b.n	8001aa8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d004      	beq.n	8001aa2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa0:	e002      	b.n	8001aa8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f965 	bl	8001d72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d024      	beq.n	8001afc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f941 	bl	8001d4e <HAL_CAN_TxMailbox2CompleteCallback>
 8001acc:	e016      	b.n	8001afc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d004      	beq.n	8001ae2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ade:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae0:	e00c      	b.n	8001afc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e002      	b.n	8001afc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f944 	bl	8001d84 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f003 0308 	and.w	r3, r3, #8
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00c      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d007      	beq.n	8001b20 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	f003 0304 	and.w	r3, r3, #4
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00b      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0308 	and.w	r3, r3, #8
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d006      	beq.n	8001b42 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2208      	movs	r2, #8
 8001b3a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b3c:	6878      	ldr	r0, [r7, #4]
 8001b3e:	f000 f933 	bl	8001da8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b42:	6a3b      	ldr	r3, [r7, #32]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f91b 	bl	8001d96 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00c      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d007      	beq.n	8001b84 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2210      	movs	r2, #16
 8001b82:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b84:	6a3b      	ldr	r3, [r7, #32]
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00b      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d006      	beq.n	8001ba6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f000 f913 	bl	8001dcc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ba6:	6a3b      	ldr	r3, [r7, #32]
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d009      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d002      	beq.n	8001bc4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f000 f8fb 	bl	8001dba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d00b      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0310 	and.w	r3, r3, #16
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f000 f8fc 	bl	8001dde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001be6:	6a3b      	ldr	r3, [r7, #32]
 8001be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d00b      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d006      	beq.n	8001c08 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2208      	movs	r2, #8
 8001c00:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f8f4 	bl	8001df0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d07b      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d072      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d008      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	f043 0302 	orr.w	r3, r3, #2
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d008      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d043      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03e      	beq.n	8001d02 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c8a:	2b60      	cmp	r3, #96	; 0x60
 8001c8c:	d02b      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x32a>
 8001c8e:	2b60      	cmp	r3, #96	; 0x60
 8001c90:	d82e      	bhi.n	8001cf0 <HAL_CAN_IRQHandler+0x334>
 8001c92:	2b50      	cmp	r3, #80	; 0x50
 8001c94:	d022      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x320>
 8001c96:	2b50      	cmp	r3, #80	; 0x50
 8001c98:	d82a      	bhi.n	8001cf0 <HAL_CAN_IRQHandler+0x334>
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d019      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x316>
 8001c9e:	2b40      	cmp	r3, #64	; 0x40
 8001ca0:	d826      	bhi.n	8001cf0 <HAL_CAN_IRQHandler+0x334>
 8001ca2:	2b30      	cmp	r3, #48	; 0x30
 8001ca4:	d010      	beq.n	8001cc8 <HAL_CAN_IRQHandler+0x30c>
 8001ca6:	2b30      	cmp	r3, #48	; 0x30
 8001ca8:	d822      	bhi.n	8001cf0 <HAL_CAN_IRQHandler+0x334>
 8001caa:	2b10      	cmp	r3, #16
 8001cac:	d002      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x2f8>
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d005      	beq.n	8001cbe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001cb2:	e01d      	b.n	8001cf0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cbc:	e019      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	f043 0310 	orr.w	r3, r3, #16
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cc6:	e014      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd0:	e00f      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cda:	e00a      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ce4:	e005      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cee:	e000      	b.n	8001cf2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001cf0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699a      	ldr	r2, [r3, #24]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001d00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2204      	movs	r2, #4
 8001d08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f870 	bl	8001e02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d22:	bf00      	nop
 8001d24:	3728      	adds	r7, #40	; 0x28
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d2a:	b480      	push	{r7}
 8001d2c:	b083      	sub	sp, #12
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr

08001d3c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr

08001d4e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d56:	bf00      	nop
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bc80      	pop	{r7}
 8001d70:	4770      	bx	lr

08001d72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr

08001d96 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001dc2:	bf00      	nop
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr

08001dcc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bc80      	pop	{r7}
 8001ddc:	4770      	bx	lr

08001dde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr

08001e02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001e02:	b480      	push	{r7}
 8001e04:	b083      	sub	sp, #12
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001e0a:	bf00      	nop
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e46:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	60d3      	str	r3, [r2, #12]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bc80      	pop	{r7}
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	e000ed00 	.word	0xe000ed00

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4906      	ldr	r1, [pc, #24]	; (8001eac <__NVIC_EnableIRQ+0x34>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	e000e100 	.word	0xe000e100

08001eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	6039      	str	r1, [r7, #0]
 8001eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db0a      	blt.n	8001eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	490c      	ldr	r1, [pc, #48]	; (8001efc <__NVIC_SetPriority+0x4c>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	0112      	lsls	r2, r2, #4
 8001ed0:	b2d2      	uxtb	r2, r2
 8001ed2:	440b      	add	r3, r1
 8001ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed8:	e00a      	b.n	8001ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <__NVIC_SetPriority+0x50>)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	3b04      	subs	r3, #4
 8001ee8:	0112      	lsls	r2, r2, #4
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	440b      	add	r3, r1
 8001eee:	761a      	strb	r2, [r3, #24]
}
 8001ef0:	bf00      	nop
 8001ef2:	370c      	adds	r7, #12
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	f1c3 0307 	rsb	r3, r3, #7
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	bf28      	it	cs
 8001f22:	2304      	movcs	r3, #4
 8001f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3304      	adds	r3, #4
 8001f2a:	2b06      	cmp	r3, #6
 8001f2c:	d902      	bls.n	8001f34 <NVIC_EncodePriority+0x30>
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	3b03      	subs	r3, #3
 8001f32:	e000      	b.n	8001f36 <NVIC_EncodePriority+0x32>
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f38:	f04f 32ff 	mov.w	r2, #4294967295
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43da      	mvns	r2, r3
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	401a      	ands	r2, r3
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	fa01 f303 	lsl.w	r3, r1, r3
 8001f56:	43d9      	mvns	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	4313      	orrs	r3, r2
         );
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3724      	adds	r7, #36	; 0x24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f78:	d301      	bcc.n	8001f7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00f      	b.n	8001f9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <SysTick_Config+0x40>)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3b01      	subs	r3, #1
 8001f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f86:	210f      	movs	r1, #15
 8001f88:	f04f 30ff 	mov.w	r0, #4294967295
 8001f8c:	f7ff ff90 	bl	8001eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f90:	4b05      	ldr	r3, [pc, #20]	; (8001fa8 <SysTick_Config+0x40>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f96:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SysTick_Config+0x40>)
 8001f98:	2207      	movs	r2, #7
 8001f9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	e000e010 	.word	0xe000e010

08001fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f7ff ff2d 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fba:	bf00      	nop
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	4603      	mov	r3, r0
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd4:	f7ff ff42 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	6978      	ldr	r0, [r7, #20]
 8001fe0:	f7ff ff90 	bl	8001f04 <NVIC_EncodePriority>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fea:	4611      	mov	r1, r2
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff ff5f 	bl	8001eb0 <__NVIC_SetPriority>
}
 8001ff2:	bf00      	nop
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	4603      	mov	r3, r0
 8002002:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff35 	bl	8001e78 <__NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffa2 	bl	8001f68 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	; 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002042:	e169      	b.n	8002318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002044:	2201      	movs	r2, #1
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8158 	bne.w	8002312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a9a      	ldr	r2, [pc, #616]	; (80022d0 <HAL_GPIO_Init+0x2a0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d05e      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800206c:	4a98      	ldr	r2, [pc, #608]	; (80022d0 <HAL_GPIO_Init+0x2a0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d875      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002072:	4a98      	ldr	r2, [pc, #608]	; (80022d4 <HAL_GPIO_Init+0x2a4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d058      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002078:	4a96      	ldr	r2, [pc, #600]	; (80022d4 <HAL_GPIO_Init+0x2a4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d86f      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800207e:	4a96      	ldr	r2, [pc, #600]	; (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d052      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002084:	4a94      	ldr	r2, [pc, #592]	; (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d869      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800208a:	4a94      	ldr	r2, [pc, #592]	; (80022dc <HAL_GPIO_Init+0x2ac>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04c      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002090:	4a92      	ldr	r2, [pc, #584]	; (80022dc <HAL_GPIO_Init+0x2ac>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d863      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002096:	4a92      	ldr	r2, [pc, #584]	; (80022e0 <HAL_GPIO_Init+0x2b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d046      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800209c:	4a90      	ldr	r2, [pc, #576]	; (80022e0 <HAL_GPIO_Init+0x2b0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d85d      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d82a      	bhi.n	80020fc <HAL_GPIO_Init+0xcc>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d859      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <HAL_GPIO_Init+0x80>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	0800212b 	.word	0x0800212b
 80020b4:	08002105 	.word	0x08002105
 80020b8:	08002117 	.word	0x08002117
 80020bc:	08002159 	.word	0x08002159
 80020c0:	0800215f 	.word	0x0800215f
 80020c4:	0800215f 	.word	0x0800215f
 80020c8:	0800215f 	.word	0x0800215f
 80020cc:	0800215f 	.word	0x0800215f
 80020d0:	0800215f 	.word	0x0800215f
 80020d4:	0800215f 	.word	0x0800215f
 80020d8:	0800215f 	.word	0x0800215f
 80020dc:	0800215f 	.word	0x0800215f
 80020e0:	0800215f 	.word	0x0800215f
 80020e4:	0800215f 	.word	0x0800215f
 80020e8:	0800215f 	.word	0x0800215f
 80020ec:	0800215f 	.word	0x0800215f
 80020f0:	0800215f 	.word	0x0800215f
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	08002121 	.word	0x08002121
 80020fc:	4a79      	ldr	r2, [pc, #484]	; (80022e4 <HAL_GPIO_Init+0x2b4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002102:	e02c      	b.n	800215e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e029      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e024      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	3308      	adds	r3, #8
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e01f      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	330c      	adds	r3, #12
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e01a      	b.n	8002160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002132:	2304      	movs	r3, #4
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e013      	b.n	8002160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002140:	2308      	movs	r3, #8
 8002142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	611a      	str	r2, [r3, #16]
          break;
 800214a:	e009      	b.n	8002160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	615a      	str	r2, [r3, #20]
          break;
 8002156:	e003      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x130>
          break;
 800215e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d801      	bhi.n	800216a <HAL_GPIO_Init+0x13a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	e001      	b.n	800216e <HAL_GPIO_Init+0x13e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2bff      	cmp	r3, #255	; 0xff
 8002174:	d802      	bhi.n	800217c <HAL_GPIO_Init+0x14c>
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x152>
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	3b08      	subs	r3, #8
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	210f      	movs	r1, #15
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	6a39      	ldr	r1, [r7, #32]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80b1 	beq.w	8002312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b0:	4b4d      	ldr	r3, [pc, #308]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b4a      	ldr	r3, [pc, #296]	; (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c8:	4a48      	ldr	r2, [pc, #288]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a40      	ldr	r2, [pc, #256]	; (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_GPIO_Init+0x1ec>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3f      	ldr	r2, [pc, #252]	; (80022f4 <HAL_GPIO_Init+0x2c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <HAL_GPIO_Init+0x1e8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	; (80022f8 <HAL_GPIO_Init+0x2c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0x1e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <HAL_GPIO_Init+0x2cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_GPIO_Init+0x1e0>
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002210:	2304      	movs	r3, #4
 8002212:	e004      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002214:	2302      	movs	r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 800221c:	2300      	movs	r3, #0
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222e:	492f      	ldr	r1, [pc, #188]	; (80022ec <HAL_GPIO_Init+0x2bc>)
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	492c      	ldr	r1, [pc, #176]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002256:	4b2a      	ldr	r3, [pc, #168]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	4928      	ldr	r1, [pc, #160]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002260:	4013      	ands	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002270:	4b23      	ldr	r3, [pc, #140]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4922      	ldr	r1, [pc, #136]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	491e      	ldr	r1, [pc, #120]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4918      	ldr	r1, [pc, #96]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4914      	ldr	r1, [pc, #80]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e021      	b.n	8002312 <HAL_GPIO_Init+0x2e2>
 80022ce:	bf00      	nop
 80022d0:	10320000 	.word	0x10320000
 80022d4:	10310000 	.word	0x10310000
 80022d8:	10220000 	.word	0x10220000
 80022dc:	10210000 	.word	0x10210000
 80022e0:	10120000 	.word	0x10120000
 80022e4:	10110000 	.word	0x10110000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40010800 	.word	0x40010800
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	40011000 	.word	0x40011000
 80022fc:	40011400 	.word	0x40011400
 8002300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_GPIO_Init+0x304>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	43db      	mvns	r3, r3
 800230c:	4909      	ldr	r1, [pc, #36]	; (8002334 <HAL_GPIO_Init+0x304>)
 800230e:	4013      	ands	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f47f ae8e 	bne.w	8002044 <HAL_GPIO_Init+0x14>
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	372c      	adds	r7, #44	; 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	611a      	str	r2, [r3, #16]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	460b      	mov	r3, r1
 8002372:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	041a      	lsls	r2, r3, #16
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	43d9      	mvns	r1, r3
 8002386:	887b      	ldrh	r3, [r7, #2]
 8002388:	400b      	ands	r3, r1
 800238a:	431a      	orrs	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	611a      	str	r2, [r3, #16]
}
 8002390:	bf00      	nop
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	bc80      	pop	{r7}
 8002398:	4770      	bx	lr
	...

0800239c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e12b      	b.n	8002606 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d106      	bne.n	80023c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fd08 	bl	8000dd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2224      	movs	r2, #36	; 0x24
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0201 	bic.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002400:	f003 fc92 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 8002404:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <HAL_I2C_Init+0x274>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d807      	bhi.n	8002420 <HAL_I2C_Init+0x84>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a80      	ldr	r2, [pc, #512]	; (8002614 <HAL_I2C_Init+0x278>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	e006      	b.n	800242e <HAL_I2C_Init+0x92>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_I2C_Init+0x27c>)
 8002424:	4293      	cmp	r3, r2
 8002426:	bf94      	ite	ls
 8002428:	2301      	movls	r3, #1
 800242a:	2300      	movhi	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e0e7      	b.n	8002606 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4a78      	ldr	r2, [pc, #480]	; (800261c <HAL_I2C_Init+0x280>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	0c9b      	lsrs	r3, r3, #18
 8002440:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	4a6a      	ldr	r2, [pc, #424]	; (8002610 <HAL_I2C_Init+0x274>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d802      	bhi.n	8002470 <HAL_I2C_Init+0xd4>
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3301      	adds	r3, #1
 800246e:	e009      	b.n	8002484 <HAL_I2C_Init+0xe8>
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002476:	fb02 f303 	mul.w	r3, r2, r3
 800247a:	4a69      	ldr	r2, [pc, #420]	; (8002620 <HAL_I2C_Init+0x284>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002496:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	495c      	ldr	r1, [pc, #368]	; (8002610 <HAL_I2C_Init+0x274>)
 80024a0:	428b      	cmp	r3, r1
 80024a2:	d819      	bhi.n	80024d8 <HAL_I2C_Init+0x13c>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e59      	subs	r1, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80024b2:	1c59      	adds	r1, r3, #1
 80024b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b8:	400b      	ands	r3, r1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00a      	beq.n	80024d4 <HAL_I2C_Init+0x138>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e59      	subs	r1, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024cc:	3301      	adds	r3, #1
 80024ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d2:	e051      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d4:	2304      	movs	r3, #4
 80024d6:	e04f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d111      	bne.n	8002504 <HAL_I2C_Init+0x168>
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	1e58      	subs	r0, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6859      	ldr	r1, [r3, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	bf0c      	ite	eq
 80024fc:	2301      	moveq	r3, #1
 80024fe:	2300      	movne	r3, #0
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e012      	b.n	800252a <HAL_I2C_Init+0x18e>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	1e58      	subs	r0, r3, #1
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6859      	ldr	r1, [r3, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	0099      	lsls	r1, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b00      	cmp	r3, #0
 8002522:	bf0c      	ite	eq
 8002524:	2301      	moveq	r3, #1
 8002526:	2300      	movne	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x196>
 800252e:	2301      	movs	r3, #1
 8002530:	e022      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10e      	bne.n	8002558 <HAL_I2C_Init+0x1bc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1e58      	subs	r0, r3, #1
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6859      	ldr	r1, [r3, #4]
 8002542:	460b      	mov	r3, r1
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	440b      	add	r3, r1
 8002548:	fbb0 f3f3 	udiv	r3, r0, r3
 800254c:	3301      	adds	r3, #1
 800254e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002556:	e00f      	b.n	8002578 <HAL_I2C_Init+0x1dc>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	1e58      	subs	r0, r3, #1
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6859      	ldr	r1, [r3, #4]
 8002560:	460b      	mov	r3, r1
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	0099      	lsls	r1, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	fbb0 f3f3 	udiv	r3, r0, r3
 800256e:	3301      	adds	r3, #1
 8002570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002574:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	6809      	ldr	r1, [r1, #0]
 800257c:	4313      	orrs	r3, r2
 800257e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69da      	ldr	r2, [r3, #28]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6911      	ldr	r1, [r2, #16]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68d2      	ldr	r2, [r2, #12]
 80025b2:	4311      	orrs	r1, r2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	430b      	orrs	r3, r1
 80025ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695a      	ldr	r2, [r3, #20]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	699b      	ldr	r3, [r3, #24]
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	000186a0 	.word	0x000186a0
 8002614:	001e847f 	.word	0x001e847f
 8002618:	003d08ff 	.word	0x003d08ff
 800261c:	431bde83 	.word	0x431bde83
 8002620:	10624dd3 	.word	0x10624dd3

08002624 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b088      	sub	sp, #32
 8002628:	af02      	add	r7, sp, #8
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	461a      	mov	r2, r3
 8002630:	460b      	mov	r3, r1
 8002632:	817b      	strh	r3, [r7, #10]
 8002634:	4613      	mov	r3, r2
 8002636:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7fe fe86 	bl	8001348 <HAL_GetTick>
 800263c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b20      	cmp	r3, #32
 8002648:	f040 80e0 	bne.w	800280c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2319      	movs	r3, #25
 8002652:	2201      	movs	r2, #1
 8002654:	4970      	ldr	r1, [pc, #448]	; (8002818 <HAL_I2C_Master_Transmit+0x1f4>)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 fffa 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002662:	2302      	movs	r3, #2
 8002664:	e0d3      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_I2C_Master_Transmit+0x50>
 8002670:	2302      	movs	r3, #2
 8002672:	e0cc      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d007      	beq.n	800269a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2221      	movs	r2, #33	; 0x21
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2210      	movs	r2, #16
 80026b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2200      	movs	r2, #0
 80026be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	893a      	ldrh	r2, [r7, #8]
 80026ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a50      	ldr	r2, [pc, #320]	; (800281c <HAL_I2C_Master_Transmit+0x1f8>)
 80026da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026dc:	8979      	ldrh	r1, [r7, #10]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f000 fd7c 	bl	80031e0 <I2C_MasterRequestWrite>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e08d      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	613b      	str	r3, [r7, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	613b      	str	r3, [r7, #16]
 8002706:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002708:	e066      	b.n	80027d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6a39      	ldr	r1, [r7, #32]
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f001 f8b8 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b29a      	uxth	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_I2C_Master_Transmit+0x188>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d017      	beq.n	80027ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	6a39      	ldr	r1, [r7, #32]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f001 f8af 	bl	8003914 <I2C_WaitOnBTFFlagUntilTimeout>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00d      	beq.n	80027d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d107      	bne.n	80027d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e01a      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d194      	bne.n	800270a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000

08002820 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	; 0x30
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	607a      	str	r2, [r7, #4]
 800282a:	461a      	mov	r2, r3
 800282c:	460b      	mov	r3, r1
 800282e:	817b      	strh	r3, [r7, #10]
 8002830:	4613      	mov	r3, r2
 8002832:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002838:	f7fe fd86 	bl	8001348 <HAL_GetTick>
 800283c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002844:	b2db      	uxtb	r3, r3
 8002846:	2b20      	cmp	r3, #32
 8002848:	f040 824b 	bne.w	8002ce2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	2319      	movs	r3, #25
 8002852:	2201      	movs	r2, #1
 8002854:	497f      	ldr	r1, [pc, #508]	; (8002a54 <HAL_I2C_Master_Receive+0x234>)
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 fefa 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	e23e      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800286c:	2b01      	cmp	r3, #1
 800286e:	d101      	bne.n	8002874 <HAL_I2C_Master_Receive+0x54>
 8002870:	2302      	movs	r3, #2
 8002872:	e237      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b01      	cmp	r3, #1
 8002888:	d007      	beq.n	800289a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2222      	movs	r2, #34	; 0x22
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2210      	movs	r2, #16
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2200      	movs	r2, #0
 80028be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	893a      	ldrh	r2, [r7, #8]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <HAL_I2C_Master_Receive+0x238>)
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028dc:	8979      	ldrh	r1, [r7, #10]
 80028de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 fcfe 	bl	80032e4 <I2C_MasterRequestRead>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1f8      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d113      	bne.n	8002922 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	e1cc      	b.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002926:	2b01      	cmp	r3, #1
 8002928:	d11e      	bne.n	8002968 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002938:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800293a:	b672      	cpsid	i
}
 800293c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002962:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002964:	b662      	cpsie	i
}
 8002966:	e035      	b.n	80029d4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296c:	2b02      	cmp	r3, #2
 800296e:	d11e      	bne.n	80029ae <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002980:	b672      	cpsid	i
}
 8002982:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	e012      	b.n	80029d4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029be:	2300      	movs	r3, #0
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	613b      	str	r3, [r7, #16]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029d4:	e172      	b.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029da:	2b03      	cmp	r3, #3
 80029dc:	f200 811f 	bhi.w	8002c1e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d123      	bne.n	8002a30 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029ec:	68f8      	ldr	r0, [r7, #12]
 80029ee:	f000 ffd9 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d001      	beq.n	80029fc <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e173      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691a      	ldr	r2, [r3, #16]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	b2d2      	uxtb	r2, r2
 8002a08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	1c5a      	adds	r2, r3, #1
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a2e:	e145      	b.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d152      	bne.n	8002ade <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a3e:	2200      	movs	r2, #0
 8002a40:	4906      	ldr	r1, [pc, #24]	; (8002a5c <HAL_I2C_Master_Receive+0x23c>)
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fe04 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d008      	beq.n	8002a60 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e148      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
 8002a52:	bf00      	nop
 8002a54:	00100002 	.word	0x00100002
 8002a58:	ffff0000 	.word	0xffff0000
 8002a5c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a60:	b672      	cpsid	i
}
 8002a62:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa6:	b662      	cpsie	i
}
 8002aa8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002adc:	e0ee      	b.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	4981      	ldr	r1, [pc, #516]	; (8002cec <HAL_I2C_Master_Receive+0x4cc>)
 8002ae8:	68f8      	ldr	r0, [r7, #12]
 8002aea:	f000 fdb1 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0f5      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b08:	b672      	cpsid	i
}
 8002b0a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691a      	ldr	r2, [r3, #16]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b3e:	4b6c      	ldr	r3, [pc, #432]	; (8002cf0 <HAL_I2C_Master_Receive+0x4d0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	08db      	lsrs	r3, r3, #3
 8002b44:	4a6b      	ldr	r2, [pc, #428]	; (8002cf4 <HAL_I2C_Master_Receive+0x4d4>)
 8002b46:	fba2 2303 	umull	r2, r3, r2, r3
 8002b4a:	0a1a      	lsrs	r2, r3, #8
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4413      	add	r3, r2
 8002b52:	00da      	lsls	r2, r3, #3
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d118      	bne.n	8002b96 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2200      	movs	r2, #0
 8002b68:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2220      	movs	r2, #32
 8002b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f043 0220 	orr.w	r2, r3, #32
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b86:	b662      	cpsie	i
}
 8002b88:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e0a6      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b04      	cmp	r3, #4
 8002ba2:	d1d9      	bne.n	8002b58 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	1c5a      	adds	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002be6:	b662      	cpsie	i
}
 8002be8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	691a      	ldr	r2, [r3, #16]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	b2d2      	uxtb	r2, r2
 8002bf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	3b01      	subs	r3, #1
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c1c:	e04e      	b.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 febe 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e058      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	b29a      	uxth	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	f003 0304 	and.w	r3, r3, #4
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d124      	bne.n	8002cbc <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c88:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	691a      	ldr	r2, [r3, #16]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c94:	b2d2      	uxtb	r2, r2
 8002c96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	1c5a      	adds	r2, r3, #1
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f47f ae88 	bne.w	80029d6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2220      	movs	r2, #32
 8002cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e000      	b.n	8002ce4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002ce2:	2302      	movs	r3, #2
  }
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3728      	adds	r7, #40	; 0x28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	00010004 	.word	0x00010004
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	14f8b589 	.word	0x14f8b589

08002cf8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08c      	sub	sp, #48	; 0x30
 8002cfc:	af02      	add	r7, sp, #8
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	4608      	mov	r0, r1
 8002d02:	4611      	mov	r1, r2
 8002d04:	461a      	mov	r2, r3
 8002d06:	4603      	mov	r3, r0
 8002d08:	817b      	strh	r3, [r7, #10]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	813b      	strh	r3, [r7, #8]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d16:	f7fe fb17 	bl	8001348 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b20      	cmp	r3, #32
 8002d26:	f040 8250 	bne.w	80031ca <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	2319      	movs	r3, #25
 8002d30:	2201      	movs	r2, #1
 8002d32:	4982      	ldr	r1, [pc, #520]	; (8002f3c <HAL_I2C_Mem_Read+0x244>)
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 fc8b 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d40:	2302      	movs	r3, #2
 8002d42:	e243      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Mem_Read+0x5a>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e23c      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d007      	beq.n	8002d78 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d86:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2222      	movs	r2, #34	; 0x22
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002da8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4a62      	ldr	r2, [pc, #392]	; (8002f40 <HAL_I2C_Mem_Read+0x248>)
 8002db8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002dba:	88f8      	ldrh	r0, [r7, #6]
 8002dbc:	893a      	ldrh	r2, [r7, #8]
 8002dbe:	8979      	ldrh	r1, [r7, #10]
 8002dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	4603      	mov	r3, r0
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fb58 	bl	8003480 <I2C_RequestMemoryRead>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1f8      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d113      	bne.n	8002e0a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de2:	2300      	movs	r3, #0
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e06:	601a      	str	r2, [r3, #0]
 8002e08:	e1cc      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d11e      	bne.n	8002e50 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e22:	b672      	cpsid	i
}
 8002e24:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e26:	2300      	movs	r3, #0
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	61bb      	str	r3, [r7, #24]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e4c:	b662      	cpsie	i
}
 8002e4e:	e035      	b.n	8002ebc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11e      	bne.n	8002e96 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e68:	b672      	cpsid	i
}
 8002e6a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e92:	b662      	cpsie	i
}
 8002e94:	e012      	b.n	8002ebc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ea4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	695b      	ldr	r3, [r3, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	699b      	ldr	r3, [r3, #24]
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002ebc:	e172      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	f200 811f 	bhi.w	8003106 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d123      	bne.n	8002f18 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f000 fd65 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e173      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	b2d2      	uxtb	r2, r2
 8002ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	1c5a      	adds	r2, r3, #1
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f16:	e145      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d152      	bne.n	8002fc6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	9300      	str	r3, [sp, #0]
 8002f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f26:	2200      	movs	r2, #0
 8002f28:	4906      	ldr	r1, [pc, #24]	; (8002f44 <HAL_I2C_Mem_Read+0x24c>)
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb90 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d008      	beq.n	8002f48 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e148      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
 8002f3a:	bf00      	nop
 8002f3c:	00100002 	.word	0x00100002
 8002f40:	ffff0000 	.word	0xffff0000
 8002f44:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f48:	b672      	cpsid	i
}
 8002f4a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	3b01      	subs	r3, #1
 8002f88:	b29a      	uxth	r2, r3
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f8e:	b662      	cpsie	i
}
 8002f90:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fc4:	e0ee      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	2200      	movs	r2, #0
 8002fce:	4981      	ldr	r1, [pc, #516]	; (80031d4 <HAL_I2C_Mem_Read+0x4dc>)
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fb3d 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0f5      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ff0:	b672      	cpsid	i
}
 8002ff2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003010:	3b01      	subs	r3, #1
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003026:	4b6c      	ldr	r3, [pc, #432]	; (80031d8 <HAL_I2C_Mem_Read+0x4e0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	08db      	lsrs	r3, r3, #3
 800302c:	4a6b      	ldr	r2, [pc, #428]	; (80031dc <HAL_I2C_Mem_Read+0x4e4>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a1a      	lsrs	r2, r3, #8
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003040:	6a3b      	ldr	r3, [r7, #32]
 8003042:	3b01      	subs	r3, #1
 8003044:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d118      	bne.n	800307e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2220      	movs	r2, #32
 8003056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f043 0220 	orr.w	r2, r3, #32
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800306e:	b662      	cpsie	i
}
 8003070:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0a6      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d1d9      	bne.n	8003040 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691a      	ldr	r2, [r3, #16]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a6:	b2d2      	uxtb	r2, r2
 80030a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ae:	1c5a      	adds	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b8:	3b01      	subs	r3, #1
 80030ba:	b29a      	uxth	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030ce:	b662      	cpsie	i
}
 80030d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	1c5a      	adds	r2, r3, #1
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	3b01      	subs	r3, #1
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	3b01      	subs	r3, #1
 80030fe:	b29a      	uxth	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003104:	e04e      	b.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003108:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800310a:	68f8      	ldr	r0, [r7, #12]
 800310c:	f000 fc4a 	bl	80039a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003110:	4603      	mov	r3, r0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e058      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	b2d2      	uxtb	r2, r2
 8003126:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	1c5a      	adds	r2, r3, #1
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003136:	3b01      	subs	r3, #1
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b04      	cmp	r3, #4
 8003158:	d124      	bne.n	80031a4 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003170:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f47f ae88 	bne.w	8002ebe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	e000      	b.n	80031cc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80031ca:	2302      	movs	r3, #2
  }
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	; 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	00010004 	.word	0x00010004
 80031d8:	20000000 	.word	0x20000000
 80031dc:	14f8b589 	.word	0x14f8b589

080031e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	607a      	str	r2, [r7, #4]
 80031ea:	603b      	str	r3, [r7, #0]
 80031ec:	460b      	mov	r3, r1
 80031ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d006      	beq.n	800320a <I2C_MasterRequestWrite+0x2a>
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d003      	beq.n	800320a <I2C_MasterRequestWrite+0x2a>
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003208:	d108      	bne.n	800321c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e00b      	b.n	8003234 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003220:	2b12      	cmp	r3, #18
 8003222:	d107      	bne.n	8003234 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003232:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 fa05 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800325a:	d103      	bne.n	8003264 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003262:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e035      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003270:	d108      	bne.n	8003284 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003272:	897b      	ldrh	r3, [r7, #10]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003280:	611a      	str	r2, [r3, #16]
 8003282:	e01b      	b.n	80032bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	11db      	asrs	r3, r3, #7
 8003288:	b2db      	uxtb	r3, r3
 800328a:	f003 0306 	and.w	r3, r3, #6
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f063 030f 	orn	r3, r3, #15
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	490e      	ldr	r1, [pc, #56]	; (80032dc <I2C_MasterRequestWrite+0xfc>)
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f000 fa4e 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e010      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032b2:	897b      	ldrh	r3, [r7, #10]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <I2C_MasterRequestWrite+0x100>)
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fa3e 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e000      	b.n	80032d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3718      	adds	r7, #24
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	00010008 	.word	0x00010008
 80032e0:	00010002 	.word	0x00010002

080032e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b088      	sub	sp, #32
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	603b      	str	r3, [r7, #0]
 80032f0:	460b      	mov	r3, r1
 80032f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003308:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d006      	beq.n	800331e <I2C_MasterRequestRead+0x3a>
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d003      	beq.n	800331e <I2C_MasterRequestRead+0x3a>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800331c:	d108      	bne.n	8003330 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e00b      	b.n	8003348 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	2b11      	cmp	r3, #17
 8003336:	d107      	bne.n	8003348 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003346:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	9300      	str	r3, [sp, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f97b 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00d      	beq.n	800337c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d103      	bne.n	8003378 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e079      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	691b      	ldr	r3, [r3, #16]
 8003380:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003384:	d108      	bne.n	8003398 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003386:	897b      	ldrh	r3, [r7, #10]
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	e05f      	b.n	8003458 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003398:	897b      	ldrh	r3, [r7, #10]
 800339a:	11db      	asrs	r3, r3, #7
 800339c:	b2db      	uxtb	r3, r3
 800339e:	f003 0306 	and.w	r3, r3, #6
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f063 030f 	orn	r3, r3, #15
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4930      	ldr	r1, [pc, #192]	; (8003478 <I2C_MasterRequestRead+0x194>)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9c4 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e054      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033c6:	897b      	ldrh	r3, [r7, #10]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	4929      	ldr	r1, [pc, #164]	; (800347c <I2C_MasterRequestRead+0x198>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9b4 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e044      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	613b      	str	r3, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	613b      	str	r3, [r7, #16]
 80033fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800340a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f919 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00d      	beq.n	8003440 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003432:	d103      	bne.n	800343c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800343a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e017      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003440:	897b      	ldrh	r3, [r7, #10]
 8003442:	11db      	asrs	r3, r3, #7
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0306 	and.w	r3, r3, #6
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f063 030e 	orn	r3, r3, #14
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	4907      	ldr	r1, [pc, #28]	; (800347c <I2C_MasterRequestRead+0x198>)
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 f970 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e000      	b.n	8003470 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	00010008 	.word	0x00010008
 800347c:	00010002 	.word	0x00010002

08003480 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af02      	add	r7, sp, #8
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4603      	mov	r3, r0
 8003490:	817b      	strh	r3, [r7, #10]
 8003492:	460b      	mov	r3, r1
 8003494:	813b      	strh	r3, [r7, #8]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	6a3b      	ldr	r3, [r7, #32]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f8c2 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00d      	beq.n	80034ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034e0:	d103      	bne.n	80034ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e0aa      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034ee:	897b      	ldrh	r3, [r7, #10]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	6a3a      	ldr	r2, [r7, #32]
 8003502:	4952      	ldr	r1, [pc, #328]	; (800364c <I2C_RequestMemoryRead+0x1cc>)
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f91d 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e097      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	617b      	str	r3, [r7, #20]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	6a39      	ldr	r1, [r7, #32]
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f9a8 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00d      	beq.n	8003556 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	2b04      	cmp	r3, #4
 8003540:	d107      	bne.n	8003552 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003550:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e076      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003556:	88fb      	ldrh	r3, [r7, #6]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800355c:	893b      	ldrh	r3, [r7, #8]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]
 8003566:	e021      	b.n	80035ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003568:	893b      	ldrh	r3, [r7, #8]
 800356a:	0a1b      	lsrs	r3, r3, #8
 800356c:	b29b      	uxth	r3, r3
 800356e:	b2da      	uxtb	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6a39      	ldr	r1, [r7, #32]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f982 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e050      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a2:	893b      	ldrh	r3, [r7, #8]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035ae:	6a39      	ldr	r1, [r7, #32]
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f967 	bl	8003884 <I2C_WaitOnTXEFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00d      	beq.n	80035d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d107      	bne.n	80035d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e035      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f82b 	bl	8003650 <I2C_WaitOnFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00d      	beq.n	800361c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360e:	d103      	bne.n	8003618 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003616:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e013      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800361c:	897b      	ldrh	r3, [r7, #10]
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	6a3a      	ldr	r2, [r7, #32]
 8003630:	4906      	ldr	r1, [pc, #24]	; (800364c <I2C_RequestMemoryRead+0x1cc>)
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f000 f886 	bl	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d001      	beq.n	8003642 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	00010002 	.word	0x00010002

08003650 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b084      	sub	sp, #16
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003660:	e048      	b.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003668:	d044      	beq.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366a:	f7fd fe6d 	bl	8001348 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	429a      	cmp	r2, r3
 8003678:	d302      	bcc.n	8003680 <I2C_WaitOnFlagUntilTimeout+0x30>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d139      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	0c1b      	lsrs	r3, r3, #16
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10d      	bne.n	80036a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	43da      	mvns	r2, r3
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	4013      	ands	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	bf0c      	ite	eq
 800369c:	2301      	moveq	r3, #1
 800369e:	2300      	movne	r3, #0
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	e00c      	b.n	80036c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	43da      	mvns	r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	4013      	ands	r3, r2
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	bf0c      	ite	eq
 80036b8:	2301      	moveq	r3, #1
 80036ba:	2300      	movne	r3, #0
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	461a      	mov	r2, r3
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d116      	bne.n	80036f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e0:	f043 0220 	orr.w	r2, r3, #32
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e023      	b.n	800373c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	0c1b      	lsrs	r3, r3, #16
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d10d      	bne.n	800371a <I2C_WaitOnFlagUntilTimeout+0xca>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	43da      	mvns	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4013      	ands	r3, r2
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	461a      	mov	r2, r3
 8003718:	e00c      	b.n	8003734 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	43da      	mvns	r2, r3
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4013      	ands	r3, r2
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	bf0c      	ite	eq
 800372c:	2301      	moveq	r3, #1
 800372e:	2300      	movne	r3, #0
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	79fb      	ldrb	r3, [r7, #7]
 8003736:	429a      	cmp	r2, r3
 8003738:	d093      	beq.n	8003662 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003752:	e071      	b.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003762:	d123      	bne.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003772:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800377c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f043 0204 	orr.w	r2, r3, #4
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e067      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d041      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fd fdc8 	bl	8001348 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d302      	bcc.n	80037ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d136      	bne.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	0c1b      	lsrs	r3, r3, #16
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d10c      	bne.n	80037ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	43da      	mvns	r2, r3
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	4013      	ands	r3, r2
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	bf14      	ite	ne
 80037e6:	2301      	movne	r3, #1
 80037e8:	2300      	moveq	r3, #0
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	e00b      	b.n	8003806 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	699b      	ldr	r3, [r3, #24]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf14      	ite	ne
 8003800:	2301      	movne	r3, #1
 8003802:	2300      	moveq	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	f043 0220 	orr.w	r2, r3, #32
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e021      	b.n	800387c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	0c1b      	lsrs	r3, r3, #16
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	d10c      	bne.n	800385c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	695b      	ldr	r3, [r3, #20]
 8003848:	43da      	mvns	r2, r3
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4013      	ands	r3, r2
 800384e:	b29b      	uxth	r3, r3
 8003850:	2b00      	cmp	r3, #0
 8003852:	bf14      	ite	ne
 8003854:	2301      	movne	r3, #1
 8003856:	2300      	moveq	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	e00b      	b.n	8003874 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	43da      	mvns	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4013      	ands	r3, r2
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	f47f af6d 	bne.w	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003890:	e034      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f8e3 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e034      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a8:	d028      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038aa:	f7fd fd4d 	bl	8001348 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d302      	bcc.n	80038c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d11d      	bne.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e007      	b.n	800390c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003906:	2b80      	cmp	r3, #128	; 0x80
 8003908:	d1c3      	bne.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003920:	e034      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003922:	68f8      	ldr	r0, [r7, #12]
 8003924:	f000 f89b 	bl	8003a5e <I2C_IsAcknowledgeFailed>
 8003928:	4603      	mov	r3, r0
 800392a:	2b00      	cmp	r3, #0
 800392c:	d001      	beq.n	8003932 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e034      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003938:	d028      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800393a:	f7fd fd05 	bl	8001348 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	429a      	cmp	r2, r3
 8003948:	d302      	bcc.n	8003950 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d11d      	bne.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b04      	cmp	r3, #4
 800395c:	d016      	beq.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e007      	b.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b04      	cmp	r3, #4
 8003998:	d1c3      	bne.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039b0:	e049      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0310 	and.w	r3, r3, #16
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d119      	bne.n	80039f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f06f 0210 	mvn.w	r2, #16
 80039c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e030      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7fd fca8 	bl	8001348 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d11d      	bne.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b40      	cmp	r3, #64	; 0x40
 8003a16:	d016      	beq.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e007      	b.n	8003a56 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a50:	2b40      	cmp	r3, #64	; 0x40
 8003a52:	d1ae      	bne.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}

08003a5e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d11b      	bne.n	8003aae <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a7e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9a:	f043 0204 	orr.w	r2, r3, #4
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e000      	b.n	8003ab0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr

08003aba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b084      	sub	sp, #16
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0e8      	b.n	8003c9e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f009 f839 	bl	800cb58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f004 fa2a 	bl	8007f52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b08:	f004 fa00 	bl	8007f0c <USB_CoreInit>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d005      	beq.n	8003b1e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e0bf      	b.n	8003c9e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2100      	movs	r1, #0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f004 fa2e 	bl	8007f86 <USB_SetCurrentMode>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0b0      	b.n	8003c9e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	73fb      	strb	r3, [r7, #15]
 8003b40:	e03e      	b.n	8003bc0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b42:	7bfa      	ldrb	r2, [r7, #15]
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	4613      	mov	r3, r2
 8003b48:	009b      	lsls	r3, r3, #2
 8003b4a:	4413      	add	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	440b      	add	r3, r1
 8003b50:	3311      	adds	r3, #17
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	440b      	add	r3, r1
 8003b64:	3310      	adds	r3, #16
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b6a:	7bfa      	ldrb	r2, [r7, #15]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	440b      	add	r3, r1
 8003b78:	3313      	adds	r3, #19
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b7e:	7bfa      	ldrb	r2, [r7, #15]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3320      	adds	r3, #32
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3324      	adds	r3, #36	; 0x24
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	1c5a      	adds	r2, r3, #1
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bba:	7bfb      	ldrb	r3, [r7, #15]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	73fb      	strb	r3, [r7, #15]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	791b      	ldrb	r3, [r3, #4]
 8003bc4:	7bfa      	ldrb	r2, [r7, #15]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d3bb      	bcc.n	8003b42 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bca:	2300      	movs	r3, #0
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e044      	b.n	8003c5a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bd0:	7bfa      	ldrb	r2, [r7, #15]
 8003bd2:	6879      	ldr	r1, [r7, #4]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	440b      	add	r3, r1
 8003bde:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	00db      	lsls	r3, r3, #3
 8003bf2:	440b      	add	r3, r1
 8003bf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	440b      	add	r3, r1
 8003c20:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c28:	7bfa      	ldrb	r2, [r7, #15]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	440b      	add	r3, r1
 8003c36:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c3e:	7bfa      	ldrb	r2, [r7, #15]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	00db      	lsls	r3, r3, #3
 8003c4a:	440b      	add	r3, r1
 8003c4c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	3301      	adds	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	791b      	ldrb	r3, [r3, #4]
 8003c5e:	7bfa      	ldrb	r2, [r7, #15]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d3b5      	bcc.n	8003bd0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6818      	ldr	r0, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c6e:	f004 f996 	bl	8007f9e <USB_DevInit>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d005      	beq.n	8003c84 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e00c      	b.n	8003c9e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f006 fc15 	bl	800a4c6 <USB_DevDisconnect>

  return HAL_OK;
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3710      	adds	r7, #16
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ca6:	b580      	push	{r7, lr}
 8003ca8:	b082      	sub	sp, #8
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_PCD_Start+0x16>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e016      	b.n	8003cea <HAL_PCD_Start+0x44>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f004 f92c 	bl	8007f26 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003cce:	2101      	movs	r1, #1
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f009 f9b4 	bl	800d03e <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f006 fbe9 	bl	800a4b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}

08003cf2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b088      	sub	sp, #32
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f006 fbeb 	bl	800a4da <USB_ReadInterrupts>
 8003d04:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 fb1a 	bl	800434a <PCD_EP_ISR_Handler>

    return;
 8003d16:	e119      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d013      	beq.n	8003d4a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d34:	b292      	uxth	r2, r2
 8003d36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f008 ff87 	bl	800cc4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d40:	2100      	movs	r1, #0
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f905 	bl	8003f52 <HAL_PCD_SetAddress>

    return;
 8003d48:	e100      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d5c:	b29a      	uxth	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d66:	b292      	uxth	r2, r2
 8003d68:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d6c:	e0ee      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00c      	beq.n	8003d92 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	b292      	uxth	r2, r2
 8003d8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d90:	e0dc      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d027      	beq.n	8003dec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f022 0204 	bic.w	r2, r2, #4
 8003dae:	b292      	uxth	r2, r2
 8003db0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0208 	bic.w	r2, r2, #8
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f008 ff77 	bl	800ccc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003de4:	b292      	uxth	r2, r2
 8003de6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dea:	e0af      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 8083 	beq.w	8003efe <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	77fb      	strb	r3, [r7, #31]
 8003dfc:	e010      	b.n	8003e20 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	461a      	mov	r2, r3
 8003e04:	7ffb      	ldrb	r3, [r7, #31]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	441a      	add	r2, r3
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	8812      	ldrh	r2, [r2, #0]
 8003e0e:	b292      	uxth	r2, r2
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	3320      	adds	r3, #32
 8003e14:	443b      	add	r3, r7
 8003e16:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	7ffb      	ldrb	r3, [r7, #31]
 8003e22:	2b07      	cmp	r3, #7
 8003e24:	d9eb      	bls.n	8003dfe <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f042 0201 	orr.w	r2, r2, #1
 8003e38:	b292      	uxth	r2, r2
 8003e3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	b292      	uxth	r2, r2
 8003e52:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003e56:	bf00      	nop
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f6      	beq.n	8003e58 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e72:	b29a      	uxth	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e7c:	b292      	uxth	r2, r2
 8003e7e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003e82:	2300      	movs	r3, #0
 8003e84:	77fb      	strb	r3, [r7, #31]
 8003e86:	e00f      	b.n	8003ea8 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003e88:	7ffb      	ldrb	r3, [r7, #31]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	4611      	mov	r1, r2
 8003e90:	7ffa      	ldrb	r2, [r7, #31]
 8003e92:	0092      	lsls	r2, r2, #2
 8003e94:	440a      	add	r2, r1
 8003e96:	005b      	lsls	r3, r3, #1
 8003e98:	3320      	adds	r3, #32
 8003e9a:	443b      	add	r3, r7
 8003e9c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003ea0:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003ea2:	7ffb      	ldrb	r3, [r7, #31]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	77fb      	strb	r3, [r7, #31]
 8003ea8:	7ffb      	ldrb	r3, [r7, #31]
 8003eaa:	2b07      	cmp	r3, #7
 8003eac:	d9ec      	bls.n	8003e88 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0208 	orr.w	r2, r2, #8
 8003ec0:	b292      	uxth	r2, r2
 8003ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ece:	b29a      	uxth	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ed8:	b292      	uxth	r2, r2
 8003eda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0204 	orr.w	r2, r2, #4
 8003ef0:	b292      	uxth	r2, r2
 8003ef2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f008 fec8 	bl	800cc8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003efc:	e026      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00f      	beq.n	8003f28 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f008 fe86 	bl	800cc32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f26:	e011      	b.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00c      	beq.n	8003f4c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f44:	b292      	uxth	r2, r2
 8003f46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f4a:	bf00      	nop
  }
}
 8003f4c:	3720      	adds	r7, #32
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_PCD_SetAddress+0x1a>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e012      	b.n	8003f92 <HAL_PCD_SetAddress+0x40>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	78fa      	ldrb	r2, [r7, #3]
 8003f80:	4611      	mov	r1, r2
 8003f82:	4618      	mov	r0, r3
 8003f84:	f006 fa82 	bl	800a48c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
 8003fa2:	4608      	mov	r0, r1
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	4603      	mov	r3, r0
 8003faa:	70fb      	strb	r3, [r7, #3]
 8003fac:	460b      	mov	r3, r1
 8003fae:	803b      	strh	r3, [r7, #0]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	da0e      	bge.n	8003fde <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 0207 	and.w	r2, r3, #7
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	3310      	adds	r3, #16
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	705a      	strb	r2, [r3, #1]
 8003fdc:	e00e      	b.n	8003ffc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fde:	78fb      	ldrb	r3, [r7, #3]
 8003fe0:	f003 0207 	and.w	r2, r3, #7
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ffc:	78fb      	ldrb	r3, [r7, #3]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b2da      	uxtb	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004008:	883a      	ldrh	r2, [r7, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	78ba      	ldrb	r2, [r7, #2]
 8004012:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004014:	78bb      	ldrb	r3, [r7, #2]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d102      	bne.n	8004020 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004026:	2b01      	cmp	r3, #1
 8004028:	d101      	bne.n	800402e <HAL_PCD_EP_Open+0x94>
 800402a:	2302      	movs	r3, #2
 800402c:	e00e      	b.n	800404c <HAL_PCD_EP_Open+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2201      	movs	r2, #1
 8004032:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	4618      	mov	r0, r3
 800403e:	f003 ffcb 	bl	8007fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800404a:	7afb      	ldrb	r3, [r7, #11]
}
 800404c:	4618      	mov	r0, r3
 800404e:	3710      	adds	r7, #16
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004060:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004064:	2b00      	cmp	r3, #0
 8004066:	da0e      	bge.n	8004086 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	f003 0207 	and.w	r2, r3, #7
 800406e:	4613      	mov	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4413      	add	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	3310      	adds	r3, #16
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	4413      	add	r3, r2
 800407c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2201      	movs	r2, #1
 8004082:	705a      	strb	r2, [r3, #1]
 8004084:	e00e      	b.n	80040a4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004086:	78fb      	ldrb	r3, [r7, #3]
 8004088:	f003 0207 	and.w	r2, r3, #7
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	4413      	add	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 0307 	and.w	r3, r3, #7
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_PCD_EP_Close+0x6a>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e00e      	b.n	80040dc <HAL_PCD_EP_Close+0x88>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68f9      	ldr	r1, [r7, #12]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 fb43 	bl	8008758 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	f003 0207 	and.w	r2, r3, #7
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2200      	movs	r2, #0
 8004122:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004124:	7afb      	ldrb	r3, [r7, #11]
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	b2da      	uxtb	r2, r3
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6979      	ldr	r1, [r7, #20]
 8004136:	4618      	mov	r0, r3
 8004138:	f004 fcfa 	bl	8008b30 <USB_EPStartXfer>

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
 800414e:	460b      	mov	r3, r1
 8004150:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004152:	78fb      	ldrb	r3, [r7, #3]
 8004154:	f003 0207 	and.w	r2, r3, #7
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004168:	681b      	ldr	r3, [r3, #0]
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr

08004174 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	460b      	mov	r3, r1
 8004182:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 0207 	and.w	r2, r3, #7
 800418a:	4613      	mov	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	3310      	adds	r3, #16
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2201      	movs	r2, #1
 80041be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041c0:	7afb      	ldrb	r3, [r7, #11]
 80041c2:	f003 0307 	and.w	r3, r3, #7
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6979      	ldr	r1, [r7, #20]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f004 fcac 	bl	8008b30 <USB_EPStartXfer>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3718      	adds	r7, #24
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041ee:	78fb      	ldrb	r3, [r7, #3]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	7912      	ldrb	r2, [r2, #4]
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e04c      	b.n	800429a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004200:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004204:	2b00      	cmp	r3, #0
 8004206:	da0e      	bge.n	8004226 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004208:	78fb      	ldrb	r3, [r7, #3]
 800420a:	f003 0207 	and.w	r2, r3, #7
 800420e:	4613      	mov	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	4413      	add	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	3310      	adds	r3, #16
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2201      	movs	r2, #1
 8004222:	705a      	strb	r2, [r3, #1]
 8004224:	e00c      	b.n	8004240 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4613      	mov	r3, r2
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004246:	78fb      	ldrb	r3, [r7, #3]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004258:	2b01      	cmp	r3, #1
 800425a:	d101      	bne.n	8004260 <HAL_PCD_EP_SetStall+0x7e>
 800425c:	2302      	movs	r3, #2
 800425e:	e01c      	b.n	800429a <HAL_PCD_EP_SetStall+0xb8>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68f9      	ldr	r1, [r7, #12]
 800426e:	4618      	mov	r0, r3
 8004270:	f006 f80f 	bl	800a292 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004274:	78fb      	ldrb	r3, [r7, #3]
 8004276:	f003 0307 	and.w	r3, r3, #7
 800427a:	2b00      	cmp	r3, #0
 800427c:	d108      	bne.n	8004290 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f006 f934 	bl	800a4f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	7912      	ldrb	r2, [r2, #4]
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e040      	b.n	8004342 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	da0e      	bge.n	80042e6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c8:	78fb      	ldrb	r3, [r7, #3]
 80042ca:	f003 0207 	and.w	r2, r3, #7
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	3310      	adds	r3, #16
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	705a      	strb	r2, [r3, #1]
 80042e4:	e00e      	b.n	8004304 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e6:	78fb      	ldrb	r3, [r7, #3]
 80042e8:	f003 0207 	and.w	r2, r3, #7
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	4413      	add	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800430a:	78fb      	ldrb	r3, [r7, #3]
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800431c:	2b01      	cmp	r3, #1
 800431e:	d101      	bne.n	8004324 <HAL_PCD_EP_ClrStall+0x82>
 8004320:	2302      	movs	r3, #2
 8004322:	e00e      	b.n	8004342 <HAL_PCD_EP_ClrStall+0xa0>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68f9      	ldr	r1, [r7, #12]
 8004332:	4618      	mov	r0, r3
 8004334:	f005 fffd 	bl	800a332 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b096      	sub	sp, #88	; 0x58
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004352:	e3bc      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800435c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004360:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004364:	b2db      	uxtb	r3, r3
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800436e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 8176 	bne.w	8004664 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004378:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800437c:	f003 0310 	and.w	r3, r3, #16
 8004380:	2b00      	cmp	r3, #0
 8004382:	d14f      	bne.n	8004424 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	881b      	ldrh	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004390:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004394:	81fb      	strh	r3, [r7, #14]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	89fb      	ldrh	r3, [r7, #14]
 800439c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3310      	adds	r3, #16
 80043ac:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4413      	add	r3, r2
 80043c2:	3302      	adds	r3, #2
 80043c4:	005b      	lsls	r3, r3, #1
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043d0:	881b      	ldrh	r3, [r3, #0]
 80043d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80043da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	441a      	add	r2, r3
 80043e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f008 fc07 	bl	800cbfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	7b5b      	ldrb	r3, [r3, #13]
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f000 8369 	beq.w	8004ace <PCD_EP_ISR_Handler+0x784>
 80043fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	2b00      	cmp	r3, #0
 8004402:	f040 8364 	bne.w	8004ace <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7b5b      	ldrb	r3, [r3, #13]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004410:	b2da      	uxtb	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	b292      	uxth	r2, r2
 8004418:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	735a      	strb	r2, [r3, #13]
 8004422:	e354      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800442a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004436:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800443a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800443e:	2b00      	cmp	r3, #0
 8004440:	d034      	beq.n	80044ac <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444a:	b29b      	uxth	r3, r3
 800444c:	461a      	mov	r2, r3
 800444e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	00db      	lsls	r3, r3, #3
 8004454:	4413      	add	r3, r2
 8004456:	3306      	adds	r3, #6
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800446a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800447c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800447e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004480:	b29b      	uxth	r3, r3
 8004482:	f006 f889 	bl	800a598 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	881b      	ldrh	r3, [r3, #0]
 800448c:	b29a      	uxth	r2, r3
 800448e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004492:	4013      	ands	r3, r2
 8004494:	823b      	strh	r3, [r7, #16]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	8a3a      	ldrh	r2, [r7, #16]
 800449c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044a0:	b292      	uxth	r2, r2
 80044a2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f008 fb7d 	bl	800cba4 <HAL_PCD_SetupStageCallback>
 80044aa:	e310      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80044ac:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f280 830c 	bge.w	8004ace <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	881b      	ldrh	r3, [r3, #0]
 80044bc:	b29a      	uxth	r2, r3
 80044be:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044c2:	4013      	ands	r3, r2
 80044c4:	83fb      	strh	r3, [r7, #30]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	8bfa      	ldrh	r2, [r7, #30]
 80044cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044d0:	b292      	uxth	r2, r2
 80044d2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	00db      	lsls	r3, r3, #3
 80044e6:	4413      	add	r3, r2
 80044e8:	3306      	adds	r3, #6
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6812      	ldr	r2, [r2, #0]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fe:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d019      	beq.n	800453c <PCD_EP_ISR_Handler+0x1f2>
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	695b      	ldr	r3, [r3, #20]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004516:	6959      	ldr	r1, [r3, #20]
 8004518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800451c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004520:	b29b      	uxth	r3, r3
 8004522:	f006 f839 	bl	800a598 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004528:	695a      	ldr	r2, [r3, #20]
 800452a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	441a      	add	r2, r3
 8004530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004532:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004534:	2100      	movs	r1, #0
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f008 fb46 	bl	800cbc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	881b      	ldrh	r3, [r3, #0]
 8004542:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004546:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800454a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800454e:	2b00      	cmp	r3, #0
 8004550:	f040 82bd 	bne.w	8004ace <PCD_EP_ISR_Handler+0x784>
 8004554:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004558:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800455c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004560:	f000 82b5 	beq.w	8004ace <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	61bb      	str	r3, [r7, #24]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	461a      	mov	r2, r3
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	4413      	add	r3, r2
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	881b      	ldrh	r3, [r3, #0]
 8004588:	b29b      	uxth	r3, r3
 800458a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800458e:	b29a      	uxth	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b3e      	cmp	r3, #62	; 0x3e
 800459a:	d91d      	bls.n	80045d8 <PCD_EP_ISR_Handler+0x28e>
 800459c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
 80045a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	f003 031f 	and.w	r3, r3, #31
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d102      	bne.n	80045b6 <PCD_EP_ISR_Handler+0x26c>
 80045b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b2:	3b01      	subs	r3, #1
 80045b4:	647b      	str	r3, [r7, #68]	; 0x44
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	881b      	ldrh	r3, [r3, #0]
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045be:	b29b      	uxth	r3, r3
 80045c0:	029b      	lsls	r3, r3, #10
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	801a      	strh	r2, [r3, #0]
 80045d6:	e026      	b.n	8004626 <PCD_EP_ISR_Handler+0x2dc>
 80045d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045da:	691b      	ldr	r3, [r3, #16]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d10a      	bne.n	80045f6 <PCD_EP_ISR_Handler+0x2ac>
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	801a      	strh	r2, [r3, #0]
 80045f4:	e017      	b.n	8004626 <PCD_EP_ISR_Handler+0x2dc>
 80045f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	085b      	lsrs	r3, r3, #1
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
 80045fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <PCD_EP_ISR_Handler+0x2c6>
 800460a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800460c:	3301      	adds	r3, #1
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29a      	uxth	r2, r3
 8004616:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004618:	b29b      	uxth	r3, r3
 800461a:	029b      	lsls	r3, r3, #10
 800461c:	b29b      	uxth	r3, r3
 800461e:	4313      	orrs	r3, r2
 8004620:	b29a      	uxth	r2, r3
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	881b      	ldrh	r3, [r3, #0]
 800462c:	b29b      	uxth	r3, r3
 800462e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004636:	827b      	strh	r3, [r7, #18]
 8004638:	8a7b      	ldrh	r3, [r7, #18]
 800463a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800463e:	827b      	strh	r3, [r7, #18]
 8004640:	8a7b      	ldrh	r3, [r7, #18]
 8004642:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004646:	827b      	strh	r3, [r7, #18]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	8a7b      	ldrh	r3, [r7, #18]
 800464e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004652:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800465a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800465e:	b29b      	uxth	r3, r3
 8004660:	8013      	strh	r3, [r2, #0]
 8004662:	e234      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	881b      	ldrh	r3, [r3, #0]
 8004674:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004678:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800467c:	2b00      	cmp	r3, #0
 800467e:	f280 80fc 	bge.w	800487a <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	4413      	add	r3, r2
 8004690:	881b      	ldrh	r3, [r3, #0]
 8004692:	b29a      	uxth	r2, r3
 8004694:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004698:	4013      	ands	r3, r2
 800469a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80046b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046b4:	b292      	uxth	r2, r2
 80046b6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046b8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80046bc:	4613      	mov	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4413      	add	r3, r2
 80046c2:	00db      	lsls	r3, r3, #3
 80046c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	4413      	add	r3, r2
 80046cc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80046ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d0:	7b1b      	ldrb	r3, [r3, #12]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d125      	bne.n	8004722 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046de:	b29b      	uxth	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046e4:	781b      	ldrb	r3, [r3, #0]
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	4413      	add	r3, r2
 80046ea:	3306      	adds	r3, #6
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046f8:	881b      	ldrh	r3, [r3, #0]
 80046fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046fe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8092 	beq.w	8004830 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004712:	6959      	ldr	r1, [r3, #20]
 8004714:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004716:	88da      	ldrh	r2, [r3, #6]
 8004718:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800471c:	f005 ff3c 	bl	800a598 <USB_ReadPMA>
 8004720:	e086      	b.n	8004830 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004724:	78db      	ldrb	r3, [r3, #3]
 8004726:	2b02      	cmp	r3, #2
 8004728:	d10a      	bne.n	8004740 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800472a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800472e:	461a      	mov	r2, r3
 8004730:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9d9 	bl	8004aea <HAL_PCD_EP_DB_Receive>
 8004738:	4603      	mov	r3, r0
 800473a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800473e:	e077      	b.n	8004830 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	461a      	mov	r2, r3
 8004746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	441a      	add	r2, r3
 800476c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800477c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	461a      	mov	r2, r3
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	4413      	add	r3, r2
 8004792:	881b      	ldrh	r3, [r3, #0]
 8004794:	b29b      	uxth	r3, r3
 8004796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d024      	beq.n	80047e8 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	00db      	lsls	r3, r3, #3
 80047b0:	4413      	add	r3, r2
 80047b2:	3302      	adds	r3, #2
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047c6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80047ca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d02e      	beq.n	8004830 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
 80047d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047d8:	6959      	ldr	r1, [r3, #20]
 80047da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047dc:	891a      	ldrh	r2, [r3, #8]
 80047de:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047e2:	f005 fed9 	bl	800a598 <USB_ReadPMA>
 80047e6:	e023      	b.n	8004830 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	3306      	adds	r3, #6
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004810:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004814:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004818:	2b00      	cmp	r3, #0
 800481a:	d009      	beq.n	8004830 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	6959      	ldr	r1, [r3, #20]
 8004824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004826:	895a      	ldrh	r2, [r3, #10]
 8004828:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800482c:	f005 feb4 	bl	800a598 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004832:	69da      	ldr	r2, [r3, #28]
 8004834:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004838:	441a      	add	r2, r3
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800483e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004840:	695a      	ldr	r2, [r3, #20]
 8004842:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004846:	441a      	add	r2, r3
 8004848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800484c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <PCD_EP_ISR_Handler+0x516>
 8004854:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	429a      	cmp	r2, r3
 800485e:	d206      	bcs.n	800486e <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004862:	781b      	ldrb	r3, [r3, #0]
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f008 f9ae 	bl	800cbc8 <HAL_PCD_DataOutStageCallback>
 800486c:	e005      	b.n	800487a <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004874:	4618      	mov	r0, r3
 8004876:	f004 f95b 	bl	8008b30 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800487a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800487e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8123 	beq.w	8004ace <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8004888:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	3310      	adds	r3, #16
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	4413      	add	r3, r2
 800489a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	461a      	mov	r2, r3
 80048a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	881b      	ldrh	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	461a      	mov	r2, r3
 80048c0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	441a      	add	r2, r3
 80048c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	78db      	ldrb	r3, [r3, #3]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	f040 80a2 	bne.w	8004a26 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80048e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048e4:	2200      	movs	r2, #0
 80048e6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80048e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ea:	7b1b      	ldrb	r3, [r3, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8093 	beq.w	8004a18 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d046      	beq.n	800498c <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004900:	785b      	ldrb	r3, [r3, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d126      	bne.n	8004954 <PCD_EP_ISR_Handler+0x60a>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	627b      	str	r3, [r7, #36]	; 0x24
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004914:	b29b      	uxth	r3, r3
 8004916:	461a      	mov	r2, r3
 8004918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491a:	4413      	add	r3, r2
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
 800491e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	011a      	lsls	r2, r3, #4
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	4413      	add	r3, r2
 8004928:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800492c:	623b      	str	r3, [r7, #32]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004938:	b29a      	uxth	r2, r3
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	801a      	strh	r2, [r3, #0]
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	801a      	strh	r2, [r3, #0]
 8004952:	e061      	b.n	8004a18 <PCD_EP_ISR_Handler+0x6ce>
 8004954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d15d      	bne.n	8004a18 <PCD_EP_ISR_Handler+0x6ce>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004970:	4413      	add	r3, r2
 8004972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	011a      	lsls	r2, r3, #4
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	4413      	add	r3, r2
 800497e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	2200      	movs	r2, #0
 8004988:	801a      	strh	r2, [r3, #0]
 800498a:	e045      	b.n	8004a18 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004994:	785b      	ldrb	r3, [r3, #1]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d126      	bne.n	80049e8 <PCD_EP_ISR_Handler+0x69e>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	637b      	str	r3, [r7, #52]	; 0x34
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	461a      	mov	r2, r3
 80049ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ae:	4413      	add	r3, r2
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
 80049b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	011a      	lsls	r2, r3, #4
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	4413      	add	r3, r2
 80049bc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049c0:	633b      	str	r3, [r7, #48]	; 0x30
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	801a      	strh	r2, [r3, #0]
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	881b      	ldrh	r3, [r3, #0]
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e4:	801a      	strh	r2, [r3, #0]
 80049e6:	e017      	b.n	8004a18 <PCD_EP_ISR_Handler+0x6ce>
 80049e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ea:	785b      	ldrb	r3, [r3, #1]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d113      	bne.n	8004a18 <PCD_EP_ISR_Handler+0x6ce>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	461a      	mov	r2, r3
 80049fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fe:	4413      	add	r3, r2
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	011a      	lsls	r2, r3, #4
 8004a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a10:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f008 f8ed 	bl	800cbfe <HAL_PCD_DataInStageCallback>
 8004a24:	e053      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a26:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d146      	bne.n	8004ac0 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	3302      	adds	r3, #2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6812      	ldr	r2, [r2, #0]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a60:	699a      	ldr	r2, [r3, #24]
 8004a62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d907      	bls.n	8004a7a <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a72:	1ad2      	subs	r2, r2, r3
 8004a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a76:	619a      	str	r2, [r3, #24]
 8004a78:	e002      	b.n	8004a80 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8004a7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004a80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a82:	699b      	ldr	r3, [r3, #24]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d106      	bne.n	8004a96 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f008 f8b5 	bl	800cbfe <HAL_PCD_DataInStageCallback>
 8004a94:	e01b      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a98:	695a      	ldr	r2, [r3, #20]
 8004a9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a9e:	441a      	add	r2, r3
 8004aa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa6:	69da      	ldr	r2, [r3, #28]
 8004aa8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004aac:	441a      	add	r2, r3
 8004aae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ab0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f004 f839 	bl	8008b30 <USB_EPStartXfer>
 8004abe:	e006      	b.n	8004ace <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ac0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f91b 	bl	8004d04 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f6ff ac3a 	blt.w	8004354 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3758      	adds	r7, #88	; 0x58
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004af8:	88fb      	ldrh	r3, [r7, #6]
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d07e      	beq.n	8004c00 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	4413      	add	r3, r2
 8004b16:	3302      	adds	r3, #2
 8004b18:	005b      	lsls	r3, r3, #1
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b2a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	8b7b      	ldrh	r3, [r7, #26]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d306      	bcc.n	8004b44 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	8b7b      	ldrh	r3, [r7, #26]
 8004b3c:	1ad2      	subs	r2, r2, r3
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	619a      	str	r2, [r3, #24]
 8004b42:	e002      	b.n	8004b4a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d123      	bne.n	8004b9a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	881b      	ldrh	r3, [r3, #0]
 8004b62:	b29b      	uxth	r3, r3
 8004b64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b6c:	833b      	strh	r3, [r7, #24]
 8004b6e:	8b3b      	ldrh	r3, [r7, #24]
 8004b70:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b74:	833b      	strh	r3, [r7, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	441a      	add	r2, r3
 8004b84:	8b3b      	ldrh	r3, [r7, #24]
 8004b86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d01f      	beq.n	8004be4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bbe:	82fb      	strh	r3, [r7, #22]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	441a      	add	r2, r3
 8004bce:	8afb      	ldrh	r3, [r7, #22]
 8004bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004be4:	8b7b      	ldrh	r3, [r7, #26]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 8087 	beq.w	8004cfa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6818      	ldr	r0, [r3, #0]
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	6959      	ldr	r1, [r3, #20]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	891a      	ldrh	r2, [r3, #8]
 8004bf8:	8b7b      	ldrh	r3, [r7, #26]
 8004bfa:	f005 fccd 	bl	800a598 <USB_ReadPMA>
 8004bfe:	e07c      	b.n	8004cfa <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4413      	add	r3, r2
 8004c14:	3306      	adds	r3, #6
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c28:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	8b7b      	ldrh	r3, [r7, #26]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d306      	bcc.n	8004c42 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	699a      	ldr	r2, [r3, #24]
 8004c38:	8b7b      	ldrh	r3, [r7, #26]
 8004c3a:	1ad2      	subs	r2, r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	619a      	str	r2, [r3, #24]
 8004c40:	e002      	b.n	8004c48 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2200      	movs	r2, #0
 8004c46:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d123      	bne.n	8004c98 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	461a      	mov	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	009b      	lsls	r3, r3, #2
 8004c5c:	4413      	add	r3, r2
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c6a:	83fb      	strh	r3, [r7, #30]
 8004c6c:	8bfb      	ldrh	r3, [r7, #30]
 8004c6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c72:	83fb      	strh	r3, [r7, #30]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	461a      	mov	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	441a      	add	r2, r3
 8004c82:	8bfb      	ldrh	r3, [r7, #30]
 8004c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c98:	88fb      	ldrh	r3, [r7, #6]
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d11f      	bne.n	8004ce2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbc:	83bb      	strh	r3, [r7, #28]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	441a      	add	r2, r3
 8004ccc:	8bbb      	ldrh	r3, [r7, #28]
 8004cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cda:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ce2:	8b7b      	ldrh	r3, [r7, #26]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	6959      	ldr	r1, [r3, #20]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	895a      	ldrh	r2, [r3, #10]
 8004cf4:	8b7b      	ldrh	r3, [r7, #26]
 8004cf6:	f005 fc4f 	bl	800a598 <USB_ReadPMA>
    }
  }

  return count;
 8004cfa:	8b7b      	ldrh	r3, [r7, #26]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0a4      	sub	sp, #144	; 0x90
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	4613      	mov	r3, r2
 8004d10:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d12:	88fb      	ldrh	r3, [r7, #6]
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 81dd 	beq.w	80050d8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	4413      	add	r3, r2
 8004d32:	3302      	adds	r3, #2
 8004d34:	005b      	lsls	r3, r3, #1
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	4413      	add	r3, r2
 8004d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d40:	881b      	ldrh	r3, [r3, #0]
 8004d42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d46:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d907      	bls.n	8004d66 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	619a      	str	r2, [r3, #24]
 8004d64:	e002      	b.n	8004d6c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	699b      	ldr	r3, [r3, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f040 80b9 	bne.w	8004ee8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d126      	bne.n	8004dcc <HAL_PCD_EP_DB_Transmit+0xc8>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d92:	4413      	add	r3, r2
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	011a      	lsls	r2, r3, #4
 8004d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9e:	4413      	add	r3, r2
 8004da0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	881b      	ldrh	r3, [r3, #0]
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	801a      	strh	r2, [r3, #0]
 8004dca:	e01a      	b.n	8004e02 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	785b      	ldrb	r3, [r3, #1]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d116      	bne.n	8004e02 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de8:	4413      	add	r3, r2
 8004dea:	637b      	str	r3, [r7, #52]	; 0x34
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	011a      	lsls	r2, r3, #4
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	4413      	add	r3, r2
 8004df6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	2200      	movs	r2, #0
 8004e00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d126      	bne.n	8004e5e <HAL_PCD_EP_DB_Transmit+0x15a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	4413      	add	r3, r2
 8004e26:	61fb      	str	r3, [r7, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	011a      	lsls	r2, r3, #4
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	4413      	add	r3, r2
 8004e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	801a      	strh	r2, [r3, #0]
 8004e5c:	e017      	b.n	8004e8e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d113      	bne.n	8004e8e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	4413      	add	r3, r2
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	011a      	lsls	r2, r3, #4
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	4413      	add	r3, r2
 8004e82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	4619      	mov	r1, r3
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f007 feb2 	bl	800cbfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e9a:	88fb      	ldrh	r3, [r7, #6]
 8004e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 82fc 	beq.w	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ec0:	82fb      	strh	r3, [r7, #22]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	441a      	add	r2, r3
 8004ed0:	8afb      	ldrh	r3, [r7, #22]
 8004ed2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ed6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ee2:	b29b      	uxth	r3, r3
 8004ee4:	8013      	strh	r3, [r2, #0]
 8004ee6:	e2da      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ee8:	88fb      	ldrh	r3, [r7, #6]
 8004eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d021      	beq.n	8004f36 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	881b      	ldrh	r3, [r3, #0]
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	441a      	add	r2, r3
 8004f1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	f040 82ae 	bne.w	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f4a:	441a      	add	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f58:	441a      	add	r2, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	6a1a      	ldr	r2, [r3, #32]
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d30b      	bcc.n	8004f82 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6a1a      	ldr	r2, [r3, #32]
 8004f76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f7a:	1ad2      	subs	r2, r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	621a      	str	r2, [r3, #32]
 8004f80:	e017      	b.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d108      	bne.n	8004f9c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004f8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f9a:	e00a      	b.n	8004fb2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	785b      	ldrb	r3, [r3, #1]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d165      	bne.n	8005086 <HAL_PCD_EP_DB_Transmit+0x382>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fce:	4413      	add	r3, r2
 8004fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	011a      	lsls	r2, r3, #4
 8004fd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fda:	4413      	add	r3, r2
 8004fdc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fec:	b29a      	uxth	r2, r3
 8004fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff0:	801a      	strh	r2, [r3, #0]
 8004ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff6:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff8:	d91d      	bls.n	8005036 <HAL_PCD_EP_DB_Transmit+0x332>
 8004ffa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	64bb      	str	r3, [r7, #72]	; 0x48
 8005002:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005006:	f003 031f 	and.w	r3, r3, #31
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <HAL_PCD_EP_DB_Transmit+0x310>
 800500e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005010:	3b01      	subs	r3, #1
 8005012:	64bb      	str	r3, [r7, #72]	; 0x48
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	b29a      	uxth	r2, r3
 800501a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800501c:	b29b      	uxth	r3, r3
 800501e:	029b      	lsls	r3, r3, #10
 8005020:	b29b      	uxth	r3, r3
 8005022:	4313      	orrs	r3, r2
 8005024:	b29b      	uxth	r3, r3
 8005026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800502a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800502e:	b29a      	uxth	r2, r3
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	801a      	strh	r2, [r3, #0]
 8005034:	e044      	b.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005036:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <HAL_PCD_EP_DB_Transmit+0x350>
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	b29b      	uxth	r3, r3
 8005044:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005048:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800504c:	b29a      	uxth	r2, r3
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	801a      	strh	r2, [r3, #0]
 8005052:	e035      	b.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005054:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005058:	085b      	lsrs	r3, r3, #1
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
 800505c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_PCD_EP_DB_Transmit+0x36a>
 8005068:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800506a:	3301      	adds	r3, #1
 800506c:	64bb      	str	r3, [r7, #72]	; 0x48
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29a      	uxth	r2, r3
 8005074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005076:	b29b      	uxth	r3, r3
 8005078:	029b      	lsls	r3, r3, #10
 800507a:	b29b      	uxth	r3, r3
 800507c:	4313      	orrs	r3, r2
 800507e:	b29a      	uxth	r2, r3
 8005080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	e01c      	b.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	785b      	ldrb	r3, [r3, #1]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d118      	bne.n	80050c0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	647b      	str	r3, [r7, #68]	; 0x44
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800509c:	b29b      	uxth	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050a2:	4413      	add	r3, r2
 80050a4:	647b      	str	r3, [r7, #68]	; 0x44
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	011a      	lsls	r2, r3, #4
 80050ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ae:	4413      	add	r3, r2
 80050b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050b4:	643b      	str	r3, [r7, #64]	; 0x40
 80050b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050be:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6818      	ldr	r0, [r3, #0]
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	6959      	ldr	r1, [r3, #20]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	891a      	ldrh	r2, [r3, #8]
 80050cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	f005 fa1c 	bl	800a50e <USB_WritePMA>
 80050d6:	e1e2      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e0:	b29b      	uxth	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	4413      	add	r3, r2
 80050ec:	3306      	adds	r3, #6
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005100:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800510c:	429a      	cmp	r2, r3
 800510e:	d307      	bcc.n	8005120 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	699a      	ldr	r2, [r3, #24]
 8005114:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005118:	1ad2      	subs	r2, r2, r3
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	619a      	str	r2, [r3, #24]
 800511e:	e002      	b.n	8005126 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2200      	movs	r2, #0
 8005124:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b00      	cmp	r3, #0
 800512c:	f040 80c0 	bne.w	80052b0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	785b      	ldrb	r3, [r3, #1]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d126      	bne.n	8005186 <HAL_PCD_EP_DB_Transmit+0x482>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005146:	b29b      	uxth	r3, r3
 8005148:	461a      	mov	r2, r3
 800514a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800514c:	4413      	add	r3, r2
 800514e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	011a      	lsls	r2, r3, #4
 8005156:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005158:	4413      	add	r3, r2
 800515a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800515e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800516a:	b29a      	uxth	r2, r3
 800516c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517e:	b29a      	uxth	r2, r3
 8005180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	e01a      	b.n	80051bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	785b      	ldrb	r3, [r3, #1]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d116      	bne.n	80051bc <HAL_PCD_EP_DB_Transmit+0x4b8>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	667b      	str	r3, [r7, #100]	; 0x64
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519c:	b29b      	uxth	r3, r3
 800519e:	461a      	mov	r2, r3
 80051a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051a2:	4413      	add	r3, r2
 80051a4:	667b      	str	r3, [r7, #100]	; 0x64
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	011a      	lsls	r2, r3, #4
 80051ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051b4:	663b      	str	r3, [r7, #96]	; 0x60
 80051b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051b8:	2200      	movs	r2, #0
 80051ba:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	677b      	str	r3, [r7, #116]	; 0x74
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	785b      	ldrb	r3, [r3, #1]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d12b      	bne.n	8005222 <HAL_PCD_EP_DB_Transmit+0x51e>
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051d8:	b29b      	uxth	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	4413      	add	r3, r2
 80051e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	011a      	lsls	r2, r3, #4
 80051e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ea:	4413      	add	r3, r2
 80051ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005200:	b29a      	uxth	r2, r3
 8005202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005206:	801a      	strh	r2, [r3, #0]
 8005208:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800520c:	881b      	ldrh	r3, [r3, #0]
 800520e:	b29b      	uxth	r3, r3
 8005210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005218:	b29a      	uxth	r2, r3
 800521a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e017      	b.n	8005252 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d113      	bne.n	8005252 <HAL_PCD_EP_DB_Transmit+0x54e>
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005232:	b29b      	uxth	r3, r3
 8005234:	461a      	mov	r2, r3
 8005236:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005238:	4413      	add	r3, r2
 800523a:	677b      	str	r3, [r7, #116]	; 0x74
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	011a      	lsls	r2, r3, #4
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	4413      	add	r3, r2
 8005246:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800524a:	673b      	str	r3, [r7, #112]	; 0x70
 800524c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524e:	2200      	movs	r2, #0
 8005250:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4619      	mov	r1, r3
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f007 fcd0 	bl	800cbfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 811a 	bne.w	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	009b      	lsls	r3, r3, #2
 8005276:	4413      	add	r3, r2
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	b29b      	uxth	r3, r3
 800527c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005280:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005284:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	441a      	add	r2, r3
 8005296:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800529a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800529e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	8013      	strh	r3, [r2, #0]
 80052ae:	e0f6      	b.n	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d121      	bne.n	80052fe <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	461a      	mov	r2, r3
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	441a      	add	r2, r3
 80052e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005304:	2b01      	cmp	r3, #1
 8005306:	f040 80ca 	bne.w	800549e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	695a      	ldr	r2, [r3, #20]
 800530e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005312:	441a      	add	r2, r3
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	69da      	ldr	r2, [r3, #28]
 800531c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005320:	441a      	add	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	429a      	cmp	r2, r3
 8005330:	d30b      	bcc.n	800534a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005342:	1ad2      	subs	r2, r2, r3
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	621a      	str	r2, [r3, #32]
 8005348:	e017      	b.n	800537a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d108      	bne.n	8005364 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005352:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005356:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005362:	e00a      	b.n	800537a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	657b      	str	r3, [r7, #84]	; 0x54
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d165      	bne.n	8005454 <HAL_PCD_EP_DB_Transmit+0x750>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005396:	b29b      	uxth	r3, r3
 8005398:	461a      	mov	r2, r3
 800539a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800539c:	4413      	add	r3, r2
 800539e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	011a      	lsls	r2, r3, #4
 80053a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a8:	4413      	add	r3, r2
 80053aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80053b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053be:	801a      	strh	r2, [r3, #0]
 80053c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c4:	2b3e      	cmp	r3, #62	; 0x3e
 80053c6:	d91d      	bls.n	8005404 <HAL_PCD_EP_DB_Transmit+0x700>
 80053c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053cc:	095b      	lsrs	r3, r3, #5
 80053ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053d4:	f003 031f 	and.w	r3, r3, #31
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d102      	bne.n	80053e2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80053dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053de:	3b01      	subs	r3, #1
 80053e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005400:	801a      	strh	r2, [r3, #0]
 8005402:	e041      	b.n	8005488 <HAL_PCD_EP_DB_Transmit+0x784>
 8005404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x71e>
 800540c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800540e:	881b      	ldrh	r3, [r3, #0]
 8005410:	b29b      	uxth	r3, r3
 8005412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541a:	b29a      	uxth	r2, r3
 800541c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e032      	b.n	8005488 <HAL_PCD_EP_DB_Transmit+0x784>
 8005422:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005426:	085b      	lsrs	r3, r3, #1
 8005428:	66bb      	str	r3, [r7, #104]	; 0x68
 800542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d002      	beq.n	800543c <HAL_PCD_EP_DB_Transmit+0x738>
 8005436:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005438:	3301      	adds	r3, #1
 800543a:	66bb      	str	r3, [r7, #104]	; 0x68
 800543c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800543e:	881b      	ldrh	r3, [r3, #0]
 8005440:	b29a      	uxth	r2, r3
 8005442:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29b      	uxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b29a      	uxth	r2, r3
 800544e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005450:	801a      	strh	r2, [r3, #0]
 8005452:	e019      	b.n	8005488 <HAL_PCD_EP_DB_Transmit+0x784>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	785b      	ldrb	r3, [r3, #1]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d115      	bne.n	8005488 <HAL_PCD_EP_DB_Transmit+0x784>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	4413      	add	r3, r2
 800546c:	657b      	str	r3, [r7, #84]	; 0x54
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	011a      	lsls	r2, r3, #4
 8005474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005476:	4413      	add	r3, r2
 8005478:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
 800547e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005482:	b29a      	uxth	r2, r3
 8005484:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005486:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	6959      	ldr	r1, [r3, #20]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	895a      	ldrh	r2, [r3, #10]
 8005494:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005498:	b29b      	uxth	r3, r3
 800549a:	f005 f838 	bl	800a50e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	881b      	ldrh	r3, [r3, #0]
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054b8:	82bb      	strh	r3, [r7, #20]
 80054ba:	8abb      	ldrh	r3, [r7, #20]
 80054bc:	f083 0310 	eor.w	r3, r3, #16
 80054c0:	82bb      	strh	r3, [r7, #20]
 80054c2:	8abb      	ldrh	r3, [r7, #20]
 80054c4:	f083 0320 	eor.w	r3, r3, #32
 80054c8:	82bb      	strh	r3, [r7, #20]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	441a      	add	r2, r3
 80054d8:	8abb      	ldrh	r3, [r7, #20]
 80054da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3790      	adds	r7, #144	; 0x90
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b087      	sub	sp, #28
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	607b      	str	r3, [r7, #4]
 8005502:	460b      	mov	r3, r1
 8005504:	817b      	strh	r3, [r7, #10]
 8005506:	4613      	mov	r3, r2
 8005508:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800550a:	897b      	ldrh	r3, [r7, #10]
 800550c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005510:	b29b      	uxth	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005516:	897b      	ldrh	r3, [r7, #10]
 8005518:	f003 0207 	and.w	r2, r3, #7
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	3310      	adds	r3, #16
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	e009      	b.n	8005542 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800552e:	897a      	ldrh	r2, [r7, #10]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800553c:	68fa      	ldr	r2, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005542:	893b      	ldrh	r3, [r7, #8]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d107      	bne.n	8005558 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2200      	movs	r2, #0
 800554c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	b29a      	uxth	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	80da      	strh	r2, [r3, #6]
 8005556:	e00b      	b.n	8005570 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2201      	movs	r2, #1
 800555c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	b29a      	uxth	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	0c1b      	lsrs	r3, r3, #16
 800556a:	b29a      	uxth	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	bc80      	pop	{r7}
 800557a:	4770      	bx	lr

0800557c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005580:	4b03      	ldr	r3, [pc, #12]	; (8005590 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005582:	2201      	movs	r2, #1
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	46bd      	mov	sp, r7
 800558a:	bc80      	pop	{r7}
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop
 8005590:	420e0020 	.word	0x420e0020

08005594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b086      	sub	sp, #24
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e272      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 8087 	beq.w	80056c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055b4:	4b92      	ldr	r3, [pc, #584]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f003 030c 	and.w	r3, r3, #12
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d00c      	beq.n	80055da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055c0:	4b8f      	ldr	r3, [pc, #572]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	f003 030c 	and.w	r3, r3, #12
 80055c8:	2b08      	cmp	r3, #8
 80055ca:	d112      	bne.n	80055f2 <HAL_RCC_OscConfig+0x5e>
 80055cc:	4b8c      	ldr	r3, [pc, #560]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055d8:	d10b      	bne.n	80055f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055da:	4b89      	ldr	r3, [pc, #548]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d06c      	beq.n	80056c0 <HAL_RCC_OscConfig+0x12c>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d168      	bne.n	80056c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e24c      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d106      	bne.n	800560a <HAL_RCC_OscConfig+0x76>
 80055fc:	4b80      	ldr	r3, [pc, #512]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a7f      	ldr	r2, [pc, #508]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	e02e      	b.n	8005668 <HAL_RCC_OscConfig+0xd4>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x98>
 8005612:	4b7b      	ldr	r3, [pc, #492]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a7a      	ldr	r2, [pc, #488]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b78      	ldr	r3, [pc, #480]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a77      	ldr	r2, [pc, #476]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005624:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e01d      	b.n	8005668 <HAL_RCC_OscConfig+0xd4>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005634:	d10c      	bne.n	8005650 <HAL_RCC_OscConfig+0xbc>
 8005636:	4b72      	ldr	r3, [pc, #456]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a71      	ldr	r2, [pc, #452]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800563c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005640:	6013      	str	r3, [r2, #0]
 8005642:	4b6f      	ldr	r3, [pc, #444]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a6e      	ldr	r2, [pc, #440]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	e00b      	b.n	8005668 <HAL_RCC_OscConfig+0xd4>
 8005650:	4b6b      	ldr	r3, [pc, #428]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a6a      	ldr	r2, [pc, #424]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005656:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565a:	6013      	str	r3, [r2, #0]
 800565c:	4b68      	ldr	r3, [pc, #416]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a67      	ldr	r2, [pc, #412]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005666:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d013      	beq.n	8005698 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005670:	f7fb fe6a 	bl	8001348 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005678:	f7fb fe66 	bl	8001348 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e200      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800568a:	4b5d      	ldr	r3, [pc, #372]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0xe4>
 8005696:	e014      	b.n	80056c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005698:	f7fb fe56 	bl	8001348 <HAL_GetTick>
 800569c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800569e:	e008      	b.n	80056b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80056a0:	f7fb fe52 	bl	8001348 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b64      	cmp	r3, #100	; 0x64
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e1ec      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056b2:	4b53      	ldr	r3, [pc, #332]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1f0      	bne.n	80056a0 <HAL_RCC_OscConfig+0x10c>
 80056be:	e000      	b.n	80056c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d063      	beq.n	8005796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056ce:	4b4c      	ldr	r3, [pc, #304]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f003 030c 	and.w	r3, r3, #12
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00b      	beq.n	80056f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056da:	4b49      	ldr	r3, [pc, #292]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f003 030c 	and.w	r3, r3, #12
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d11c      	bne.n	8005720 <HAL_RCC_OscConfig+0x18c>
 80056e6:	4b46      	ldr	r3, [pc, #280]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d116      	bne.n	8005720 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056f2:	4b43      	ldr	r3, [pc, #268]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d005      	beq.n	800570a <HAL_RCC_OscConfig+0x176>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d001      	beq.n	800570a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e1c0      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800570a:	4b3d      	ldr	r3, [pc, #244]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	00db      	lsls	r3, r3, #3
 8005718:	4939      	ldr	r1, [pc, #228]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800571a:	4313      	orrs	r3, r2
 800571c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800571e:	e03a      	b.n	8005796 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d020      	beq.n	800576a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005728:	4b36      	ldr	r3, [pc, #216]	; (8005804 <HAL_RCC_OscConfig+0x270>)
 800572a:	2201      	movs	r2, #1
 800572c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800572e:	f7fb fe0b 	bl	8001348 <HAL_GetTick>
 8005732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005734:	e008      	b.n	8005748 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005736:	f7fb fe07 	bl	8001348 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d901      	bls.n	8005748 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	e1a1      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005748:	4b2d      	ldr	r3, [pc, #180]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 0302 	and.w	r3, r3, #2
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005754:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	00db      	lsls	r3, r3, #3
 8005762:	4927      	ldr	r1, [pc, #156]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 8005764:	4313      	orrs	r3, r2
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	e015      	b.n	8005796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800576a:	4b26      	ldr	r3, [pc, #152]	; (8005804 <HAL_RCC_OscConfig+0x270>)
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005770:	f7fb fdea 	bl	8001348 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005778:	f7fb fde6 	bl	8001348 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e180      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800578a:	4b1d      	ldr	r3, [pc, #116]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 0302 	and.w	r3, r3, #2
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1f0      	bne.n	8005778 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03a      	beq.n	8005818 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d019      	beq.n	80057de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057aa:	4b17      	ldr	r3, [pc, #92]	; (8005808 <HAL_RCC_OscConfig+0x274>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057b0:	f7fb fdca 	bl	8001348 <HAL_GetTick>
 80057b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fb fdc6 	bl	8001348 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e160      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <HAL_RCC_OscConfig+0x26c>)
 80057cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d0f0      	beq.n	80057b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057d6:	2001      	movs	r0, #1
 80057d8:	f000 face 	bl	8005d78 <RCC_Delay>
 80057dc:	e01c      	b.n	8005818 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057de:	4b0a      	ldr	r3, [pc, #40]	; (8005808 <HAL_RCC_OscConfig+0x274>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057e4:	f7fb fdb0 	bl	8001348 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057ea:	e00f      	b.n	800580c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057ec:	f7fb fdac 	bl	8001348 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d908      	bls.n	800580c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e146      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
 80057fe:	bf00      	nop
 8005800:	40021000 	.word	0x40021000
 8005804:	42420000 	.word	0x42420000
 8005808:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800580c:	4b92      	ldr	r3, [pc, #584]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1e9      	bne.n	80057ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80a6 	beq.w	8005972 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800582a:	4b8b      	ldr	r3, [pc, #556]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	69db      	ldr	r3, [r3, #28]
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d10d      	bne.n	8005852 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005836:	4b88      	ldr	r3, [pc, #544]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	4a87      	ldr	r2, [pc, #540]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800583c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005840:	61d3      	str	r3, [r2, #28]
 8005842:	4b85      	ldr	r3, [pc, #532]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584a:	60bb      	str	r3, [r7, #8]
 800584c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800584e:	2301      	movs	r3, #1
 8005850:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005852:	4b82      	ldr	r3, [pc, #520]	; (8005a5c <HAL_RCC_OscConfig+0x4c8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585a:	2b00      	cmp	r3, #0
 800585c:	d118      	bne.n	8005890 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800585e:	4b7f      	ldr	r3, [pc, #508]	; (8005a5c <HAL_RCC_OscConfig+0x4c8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a7e      	ldr	r2, [pc, #504]	; (8005a5c <HAL_RCC_OscConfig+0x4c8>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800586a:	f7fb fd6d 	bl	8001348 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005870:	e008      	b.n	8005884 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fb fd69 	bl	8001348 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d901      	bls.n	8005884 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e103      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005884:	4b75      	ldr	r3, [pc, #468]	; (8005a5c <HAL_RCC_OscConfig+0x4c8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0f0      	beq.n	8005872 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	68db      	ldr	r3, [r3, #12]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d106      	bne.n	80058a6 <HAL_RCC_OscConfig+0x312>
 8005898:	4b6f      	ldr	r3, [pc, #444]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	4a6e      	ldr	r2, [pc, #440]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800589e:	f043 0301 	orr.w	r3, r3, #1
 80058a2:	6213      	str	r3, [r2, #32]
 80058a4:	e02d      	b.n	8005902 <HAL_RCC_OscConfig+0x36e>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x334>
 80058ae:	4b6a      	ldr	r3, [pc, #424]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	4a69      	ldr	r2, [pc, #420]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058b4:	f023 0301 	bic.w	r3, r3, #1
 80058b8:	6213      	str	r3, [r2, #32]
 80058ba:	4b67      	ldr	r3, [pc, #412]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	4a66      	ldr	r2, [pc, #408]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058c0:	f023 0304 	bic.w	r3, r3, #4
 80058c4:	6213      	str	r3, [r2, #32]
 80058c6:	e01c      	b.n	8005902 <HAL_RCC_OscConfig+0x36e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b05      	cmp	r3, #5
 80058ce:	d10c      	bne.n	80058ea <HAL_RCC_OscConfig+0x356>
 80058d0:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	4a60      	ldr	r2, [pc, #384]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	6213      	str	r3, [r2, #32]
 80058dc:	4b5e      	ldr	r3, [pc, #376]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	4a5d      	ldr	r2, [pc, #372]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	6213      	str	r3, [r2, #32]
 80058e8:	e00b      	b.n	8005902 <HAL_RCC_OscConfig+0x36e>
 80058ea:	4b5b      	ldr	r3, [pc, #364]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	4a5a      	ldr	r2, [pc, #360]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	6213      	str	r3, [r2, #32]
 80058f6:	4b58      	ldr	r3, [pc, #352]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4a57      	ldr	r2, [pc, #348]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80058fc:	f023 0304 	bic.w	r3, r3, #4
 8005900:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d015      	beq.n	8005936 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800590a:	f7fb fd1d 	bl	8001348 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005910:	e00a      	b.n	8005928 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005912:	f7fb fd19 	bl	8001348 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005920:	4293      	cmp	r3, r2
 8005922:	d901      	bls.n	8005928 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e0b1      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	4b4b      	ldr	r3, [pc, #300]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800592a:	6a1b      	ldr	r3, [r3, #32]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d0ee      	beq.n	8005912 <HAL_RCC_OscConfig+0x37e>
 8005934:	e014      	b.n	8005960 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005936:	f7fb fd07 	bl	8001348 <HAL_GetTick>
 800593a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800593e:	f7fb fd03 	bl	8001348 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e09b      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005954:	4b40      	ldr	r3, [pc, #256]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005956:	6a1b      	ldr	r3, [r3, #32]
 8005958:	f003 0302 	and.w	r3, r3, #2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d105      	bne.n	8005972 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005966:	4b3c      	ldr	r3, [pc, #240]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005968:	69db      	ldr	r3, [r3, #28]
 800596a:	4a3b      	ldr	r2, [pc, #236]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800596c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005970:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8087 	beq.w	8005a8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800597c:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f003 030c 	and.w	r3, r3, #12
 8005984:	2b08      	cmp	r3, #8
 8005986:	d061      	beq.n	8005a4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	2b02      	cmp	r3, #2
 800598e:	d146      	bne.n	8005a1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005990:	4b33      	ldr	r3, [pc, #204]	; (8005a60 <HAL_RCC_OscConfig+0x4cc>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005996:	f7fb fcd7 	bl	8001348 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800599e:	f7fb fcd3 	bl	8001348 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e06d      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059b0:	4b29      	ldr	r3, [pc, #164]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059c4:	d108      	bne.n	80059d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	4921      	ldr	r1, [pc, #132]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059d8:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6a19      	ldr	r1, [r3, #32]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	430b      	orrs	r3, r1
 80059ea:	491b      	ldr	r1, [pc, #108]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f0:	4b1b      	ldr	r3, [pc, #108]	; (8005a60 <HAL_RCC_OscConfig+0x4cc>)
 80059f2:	2201      	movs	r2, #1
 80059f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059f6:	f7fb fca7 	bl	8001348 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059fe:	f7fb fca3 	bl	8001348 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e03d      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d0f0      	beq.n	80059fe <HAL_RCC_OscConfig+0x46a>
 8005a1c:	e035      	b.n	8005a8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a1e:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_RCC_OscConfig+0x4cc>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7fb fc90 	bl	8001348 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a2c:	f7fb fc8c 	bl	8001348 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e026      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a3e:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_RCC_OscConfig+0x4c4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0x498>
 8005a4a:	e01e      	b.n	8005a8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d107      	bne.n	8005a64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e019      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	40007000 	.word	0x40007000
 8005a60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RCC_OscConfig+0x500>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d106      	bne.n	8005a86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d001      	beq.n	8005a8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	40021000 	.word	0x40021000

08005a98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0d0      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005aac:	4b6a      	ldr	r3, [pc, #424]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0307 	and.w	r3, r3, #7
 8005ab4:	683a      	ldr	r2, [r7, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d910      	bls.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aba:	4b67      	ldr	r3, [pc, #412]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f023 0207 	bic.w	r2, r3, #7
 8005ac2:	4965      	ldr	r1, [pc, #404]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aca:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0307 	and.w	r3, r3, #7
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d001      	beq.n	8005adc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e0b8      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d020      	beq.n	8005b2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005af4:	4b59      	ldr	r3, [pc, #356]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	4a58      	ldr	r2, [pc, #352]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005afa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005afe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d005      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005b0c:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	4a52      	ldr	r2, [pc, #328]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b18:	4b50      	ldr	r3, [pc, #320]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	494d      	ldr	r1, [pc, #308]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d040      	beq.n	8005bb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d107      	bne.n	8005b4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b3e:	4b47      	ldr	r3, [pc, #284]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d115      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e07f      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b02      	cmp	r3, #2
 8005b54:	d107      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b56:	4b41      	ldr	r3, [pc, #260]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e073      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b66:	4b3d      	ldr	r3, [pc, #244]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0302 	and.w	r3, r3, #2
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e06b      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f023 0203 	bic.w	r2, r3, #3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	4936      	ldr	r1, [pc, #216]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b88:	f7fb fbde 	bl	8001348 <HAL_GetTick>
 8005b8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b90:	f7fb fbda 	bl	8001348 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e053      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ba6:	4b2d      	ldr	r3, [pc, #180]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f003 020c 	and.w	r2, r3, #12
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d1eb      	bne.n	8005b90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005bb8:	4b27      	ldr	r3, [pc, #156]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0307 	and.w	r3, r3, #7
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d210      	bcs.n	8005be8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc6:	4b24      	ldr	r3, [pc, #144]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f023 0207 	bic.w	r2, r3, #7
 8005bce:	4922      	ldr	r1, [pc, #136]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd6:	4b20      	ldr	r3, [pc, #128]	; (8005c58 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	683a      	ldr	r2, [r7, #0]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d001      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e032      	b.n	8005c4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	4916      	ldr	r1, [pc, #88]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	00db      	lsls	r3, r3, #3
 8005c20:	490e      	ldr	r1, [pc, #56]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c26:	f000 f821 	bl	8005c6c <HAL_RCC_GetSysClockFreq>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	091b      	lsrs	r3, r3, #4
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	490a      	ldr	r1, [pc, #40]	; (8005c60 <HAL_RCC_ClockConfig+0x1c8>)
 8005c38:	5ccb      	ldrb	r3, [r1, r3]
 8005c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3e:	4a09      	ldr	r2, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1cc>)
 8005c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c42:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <HAL_RCC_ClockConfig+0x1d0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f7fb fb3c 	bl	80012c4 <HAL_InitTick>

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40022000 	.word	0x40022000
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	0800db4c 	.word	0x0800db4c
 8005c64:	20000000 	.word	0x20000000
 8005c68:	20000004 	.word	0x20000004

08005c6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b087      	sub	sp, #28
 8005c70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	2300      	movs	r3, #0
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	617b      	str	r3, [r7, #20]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f003 030c 	and.w	r3, r3, #12
 8005c92:	2b04      	cmp	r3, #4
 8005c94:	d002      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x30>
 8005c96:	2b08      	cmp	r3, #8
 8005c98:	d003      	beq.n	8005ca2 <HAL_RCC_GetSysClockFreq+0x36>
 8005c9a:	e027      	b.n	8005cec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c9e:	613b      	str	r3, [r7, #16]
      break;
 8005ca0:	e027      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	0c9b      	lsrs	r3, r3, #18
 8005ca6:	f003 030f 	and.w	r3, r3, #15
 8005caa:	4a17      	ldr	r2, [pc, #92]	; (8005d08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005cac:	5cd3      	ldrb	r3, [r2, r3]
 8005cae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d010      	beq.n	8005cdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005cba:	4b11      	ldr	r3, [pc, #68]	; (8005d00 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	0c5b      	lsrs	r3, r3, #17
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cc6:	5cd3      	ldrb	r3, [r2, r3]
 8005cc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a0d      	ldr	r2, [pc, #52]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cce:	fb03 f202 	mul.w	r2, r3, r2
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e004      	b.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a0c      	ldr	r2, [pc, #48]	; (8005d10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ce0:	fb02 f303 	mul.w	r3, r2, r3
 8005ce4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	613b      	str	r3, [r7, #16]
      break;
 8005cea:	e002      	b.n	8005cf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cec:	4b05      	ldr	r3, [pc, #20]	; (8005d04 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cee:	613b      	str	r3, [r7, #16]
      break;
 8005cf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cf2:	693b      	ldr	r3, [r7, #16]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	371c      	adds	r7, #28
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bc80      	pop	{r7}
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000
 8005d04:	007a1200 	.word	0x007a1200
 8005d08:	0800db64 	.word	0x0800db64
 8005d0c:	0800db74 	.word	0x0800db74
 8005d10:	003d0900 	.word	0x003d0900

08005d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d14:	b480      	push	{r7}
 8005d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d18:	4b02      	ldr	r3, [pc, #8]	; (8005d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr
 8005d24:	20000000 	.word	0x20000000

08005d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d2c:	f7ff fff2 	bl	8005d14 <HAL_RCC_GetHCLKFreq>
 8005d30:	4602      	mov	r2, r0
 8005d32:	4b05      	ldr	r3, [pc, #20]	; (8005d48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	0a1b      	lsrs	r3, r3, #8
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	4903      	ldr	r1, [pc, #12]	; (8005d4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d3e:	5ccb      	ldrb	r3, [r1, r3]
 8005d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40021000 	.word	0x40021000
 8005d4c:	0800db5c 	.word	0x0800db5c

08005d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d54:	f7ff ffde 	bl	8005d14 <HAL_RCC_GetHCLKFreq>
 8005d58:	4602      	mov	r2, r0
 8005d5a:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	0adb      	lsrs	r3, r3, #11
 8005d60:	f003 0307 	and.w	r3, r3, #7
 8005d64:	4903      	ldr	r1, [pc, #12]	; (8005d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d66:	5ccb      	ldrb	r3, [r1, r3]
 8005d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40021000 	.word	0x40021000
 8005d74:	0800db5c 	.word	0x0800db5c

08005d78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d80:	4b0a      	ldr	r3, [pc, #40]	; (8005dac <RCC_Delay+0x34>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a0a      	ldr	r2, [pc, #40]	; (8005db0 <RCC_Delay+0x38>)
 8005d86:	fba2 2303 	umull	r2, r3, r2, r3
 8005d8a:	0a5b      	lsrs	r3, r3, #9
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	fb02 f303 	mul.w	r3, r2, r3
 8005d92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d94:	bf00      	nop
  }
  while (Delay --);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	1e5a      	subs	r2, r3, #1
 8005d9a:	60fa      	str	r2, [r7, #12]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d1f9      	bne.n	8005d94 <RCC_Delay+0x1c>
}
 8005da0:	bf00      	nop
 8005da2:	bf00      	nop
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bc80      	pop	{r7}
 8005daa:	4770      	bx	lr
 8005dac:	20000000 	.word	0x20000000
 8005db0:	10624dd3 	.word	0x10624dd3

08005db4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b086      	sub	sp, #24
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d07d      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dd4:	4b4f      	ldr	r3, [pc, #316]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	69db      	ldr	r3, [r3, #28]
 8005dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10d      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de0:	4b4c      	ldr	r3, [pc, #304]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de2:	69db      	ldr	r3, [r3, #28]
 8005de4:	4a4b      	ldr	r2, [pc, #300]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dea:	61d3      	str	r3, [r2, #28]
 8005dec:	4b49      	ldr	r3, [pc, #292]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dee:	69db      	ldr	r3, [r3, #28]
 8005df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df4:	60bb      	str	r3, [r7, #8]
 8005df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dfc:	4b46      	ldr	r3, [pc, #280]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d118      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e08:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a42      	ldr	r2, [pc, #264]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e14:	f7fb fa98 	bl	8001348 <HAL_GetTick>
 8005e18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1a:	e008      	b.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e1c:	f7fb fa94 	bl	8001348 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b64      	cmp	r3, #100	; 0x64
 8005e28:	d901      	bls.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e06d      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e2e:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e3a:	4b36      	ldr	r3, [pc, #216]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d02e      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d027      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e58:	4b2e      	ldr	r3, [pc, #184]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e62:	4b2e      	ldr	r3, [pc, #184]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e68:	4b2c      	ldr	r3, [pc, #176]	; (8005f1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e6e:	4a29      	ldr	r2, [pc, #164]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d014      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e7e:	f7fb fa63 	bl	8001348 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e84:	e00a      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e86:	f7fb fa5f 	bl	8001348 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e036      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9c:	4b1d      	ldr	r3, [pc, #116]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ee      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ea8:	4b1a      	ldr	r3, [pc, #104]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4917      	ldr	r1, [pc, #92]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005eba:	7dfb      	ldrb	r3, [r7, #23]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d105      	bne.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ec0:	4b14      	ldr	r3, [pc, #80]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec2:	69db      	ldr	r3, [r3, #28]
 8005ec4:	4a13      	ldr	r2, [pc, #76]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d008      	beq.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	490b      	ldr	r1, [pc, #44]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d008      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ef6:	4b07      	ldr	r3, [pc, #28]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	4904      	ldr	r1, [pc, #16]	; (8005f14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	40021000 	.word	0x40021000
 8005f18:	40007000 	.word	0x40007000
 8005f1c:	42420440 	.word	0x42420440

08005f20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b088      	sub	sp, #32
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	617b      	str	r3, [r7, #20]
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
 8005f30:	2300      	movs	r3, #0
 8005f32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2b10      	cmp	r3, #16
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b10      	cmp	r3, #16
 8005f46:	f200 808a 	bhi.w	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d045      	beq.n	8005fdc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d075      	beq.n	8006042 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f56:	e082      	b.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005f58:	4b46      	ldr	r3, [pc, #280]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f5e:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d07b      	beq.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	0c9b      	lsrs	r3, r3, #18
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	4a41      	ldr	r2, [pc, #260]	; (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005f74:	5cd3      	ldrb	r3, [r2, r3]
 8005f76:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d015      	beq.n	8005fae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f82:	4b3c      	ldr	r3, [pc, #240]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	0c5b      	lsrs	r3, r3, #17
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	4a3b      	ldr	r2, [pc, #236]	; (800607c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005f8e:	5cd3      	ldrb	r3, [r2, r3]
 8005f90:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00d      	beq.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f9c:	4a38      	ldr	r2, [pc, #224]	; (8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	61fb      	str	r3, [r7, #28]
 8005fac:	e004      	b.n	8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	4a34      	ldr	r2, [pc, #208]	; (8006084 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005fb8:	4b2e      	ldr	r3, [pc, #184]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fc4:	d102      	bne.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	61bb      	str	r3, [r7, #24]
      break;
 8005fca:	e04a      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	005b      	lsls	r3, r3, #1
 8005fd0:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	61bb      	str	r3, [r7, #24]
      break;
 8005fda:	e042      	b.n	8006062 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005fdc:	4b25      	ldr	r3, [pc, #148]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fec:	d108      	bne.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d003      	beq.n	8006000 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005ff8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ffc:	61bb      	str	r3, [r7, #24]
 8005ffe:	e01f      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006006:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800600a:	d109      	bne.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800600c:	4b19      	ldr	r3, [pc, #100]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b00      	cmp	r3, #0
 8006016:	d003      	beq.n	8006020 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006018:	f649 4340 	movw	r3, #40000	; 0x9c40
 800601c:	61bb      	str	r3, [r7, #24]
 800601e:	e00f      	b.n	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006026:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800602a:	d11c      	bne.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006038:	f24f 4324 	movw	r3, #62500	; 0xf424
 800603c:	61bb      	str	r3, [r7, #24]
      break;
 800603e:	e012      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006040:	e011      	b.n	8006066 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006042:	f7ff fe85 	bl	8005d50 <HAL_RCC_GetPCLK2Freq>
 8006046:	4602      	mov	r2, r0
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	0b9b      	lsrs	r3, r3, #14
 800604e:	f003 0303 	and.w	r3, r3, #3
 8006052:	3301      	adds	r3, #1
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	fbb2 f3f3 	udiv	r3, r2, r3
 800605a:	61bb      	str	r3, [r7, #24]
      break;
 800605c:	e004      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800605e:	bf00      	nop
 8006060:	e002      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006062:	bf00      	nop
 8006064:	e000      	b.n	8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006066:	bf00      	nop
    }
  }
  return (frequency);
 8006068:	69bb      	ldr	r3, [r7, #24]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
 8006078:	0800db78 	.word	0x0800db78
 800607c:	0800db88 	.word	0x0800db88
 8006080:	007a1200 	.word	0x007a1200
 8006084:	003d0900 	.word	0x003d0900
 8006088:	aaaaaaab 	.word	0xaaaaaaab

0800608c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006094:	2300      	movs	r3, #0
 8006096:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e07a      	b.n	8006198 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7c5b      	ldrb	r3, [r3, #17]
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d105      	bne.n	80060b8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f7fa fece 	bl	8000e54 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 f9be 	bl	8006440 <HAL_RTC_WaitForSynchro>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e061      	b.n	8006198 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fa77 	bl	80065c8 <RTC_EnterInitMode>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d004      	beq.n	80060ea <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2204      	movs	r2, #4
 80060e4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e056      	b.n	8006198 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	685a      	ldr	r2, [r3, #4]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0207 	bic.w	r2, r2, #7
 80060f8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d005      	beq.n	800610e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8006102:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <HAL_RTC_Init+0x114>)
 8006104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006106:	4a26      	ldr	r2, [pc, #152]	; (80061a0 <HAL_RTC_Init+0x114>)
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <HAL_RTC_Init+0x114>)
 8006110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006112:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	4921      	ldr	r1, [pc, #132]	; (80061a0 <HAL_RTC_Init+0x114>)
 800611c:	4313      	orrs	r3, r2
 800611e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d003      	beq.n	8006132 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	e00e      	b.n	8006150 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006132:	2001      	movs	r0, #1
 8006134:	f7ff fef4 	bl	8005f20 <HAL_RCCEx_GetPeriphCLKFreq>
 8006138:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d104      	bne.n	800614a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2204      	movs	r2, #4
 8006144:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e026      	b.n	8006198 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3b01      	subs	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	0c1a      	lsrs	r2, r3, #16
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f002 020f 	and.w	r2, r2, #15
 800615c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68fa      	ldr	r2, [r7, #12]
 8006164:	b292      	uxth	r2, r2
 8006166:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 fa55 	bl	8006618 <RTC_ExitInitMode>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d004      	beq.n	800617e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2204      	movs	r2, #4
 8006178:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800617a:	2301      	movs	r3, #1
 800617c:	e00c      	b.n	8006198 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006196:	2300      	movs	r3, #0
  }
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40006c00 	.word	0x40006c00

080061a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80061a4:	b590      	push	{r4, r7, lr}
 80061a6:	b087      	sub	sp, #28
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
 80061b4:	2300      	movs	r3, #0
 80061b6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_RTC_SetTime+0x20>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e080      	b.n	80062ca <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	7c1b      	ldrb	r3, [r3, #16]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_RTC_SetTime+0x30>
 80061d0:	2302      	movs	r3, #2
 80061d2:	e07a      	b.n	80062ca <HAL_RTC_SetTime+0x126>
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2201      	movs	r2, #1
 80061d8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2202      	movs	r2, #2
 80061de:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d113      	bne.n	800620e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	461a      	mov	r2, r3
 80061ec:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80061f0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	4619      	mov	r1, r3
 80061fa:	460b      	mov	r3, r1
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a5b      	subs	r3, r3, r1
 8006200:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006202:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006208:	4413      	add	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
 800620c:	e01e      	b.n	800624c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fa28 	bl	8006668 <RTC_Bcd2ToByte>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006220:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	785b      	ldrb	r3, [r3, #1]
 8006228:	4618      	mov	r0, r3
 800622a:	f000 fa1d 	bl	8006668 <RTC_Bcd2ToByte>
 800622e:	4603      	mov	r3, r0
 8006230:	461a      	mov	r2, r3
 8006232:	4613      	mov	r3, r2
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800623a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	789b      	ldrb	r3, [r3, #2]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fa11 	bl	8006668 <RTC_Bcd2ToByte>
 8006246:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006248:	4423      	add	r3, r4
 800624a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800624c:	6979      	ldr	r1, [r7, #20]
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f000 f953 	bl	80064fa <RTC_WriteTimeCounter>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d007      	beq.n	800626a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2204      	movs	r2, #4
 800625e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e02f      	b.n	80062ca <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0205 	bic.w	r2, r2, #5
 8006278:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f964 	bl	8006548 <RTC_ReadAlarmCounter>
 8006280:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006288:	d018      	beq.n	80062bc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	429a      	cmp	r2, r3
 8006290:	d214      	bcs.n	80062bc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006298:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800629c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800629e:	6939      	ldr	r1, [r7, #16]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f96a 	bl	800657a <RTC_WriteAlarmCounter>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d007      	beq.n	80062bc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2204      	movs	r2, #4
 80062b0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	e006      	b.n	80062ca <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80062c8:	2300      	movs	r3, #0
  }
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd90      	pop	{r4, r7, pc}
	...

080062d4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	61fb      	str	r3, [r7, #28]
 80062e4:	2300      	movs	r3, #0
 80062e6:	61bb      	str	r3, [r7, #24]
 80062e8:	2300      	movs	r3, #0
 80062ea:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_RTC_SetDate+0x24>
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	e097      	b.n	800642c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	7c1b      	ldrb	r3, [r3, #16]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_RTC_SetDate+0x34>
 8006304:	2302      	movs	r3, #2
 8006306:	e091      	b.n	800642c <HAL_RTC_SetDate+0x158>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2202      	movs	r2, #2
 8006312:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10c      	bne.n	8006334 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	78da      	ldrb	r2, [r3, #3]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	785a      	ldrb	r2, [r3, #1]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	789a      	ldrb	r2, [r3, #2]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	739a      	strb	r2, [r3, #14]
 8006332:	e01a      	b.n	800636a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	78db      	ldrb	r3, [r3, #3]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f995 	bl	8006668 <RTC_Bcd2ToByte>
 800633e:	4603      	mov	r3, r0
 8006340:	461a      	mov	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	785b      	ldrb	r3, [r3, #1]
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f98c 	bl	8006668 <RTC_Bcd2ToByte>
 8006350:	4603      	mov	r3, r0
 8006352:	461a      	mov	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	789b      	ldrb	r3, [r3, #2]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 f983 	bl	8006668 <RTC_Bcd2ToByte>
 8006362:	4603      	mov	r3, r0
 8006364:	461a      	mov	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	7bdb      	ldrb	r3, [r3, #15]
 800636e:	4618      	mov	r0, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	7b59      	ldrb	r1, [r3, #13]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	7b9b      	ldrb	r3, [r3, #14]
 8006378:	461a      	mov	r2, r3
 800637a:	f000 f993 	bl	80066a4 <RTC_WeekDayNum>
 800637e:	4603      	mov	r3, r0
 8006380:	461a      	mov	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	7b1a      	ldrb	r2, [r3, #12]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800638e:	68f8      	ldr	r0, [r7, #12]
 8006390:	f000 f883 	bl	800649a <RTC_ReadTimeCounter>
 8006394:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	4a26      	ldr	r2, [pc, #152]	; (8006434 <HAL_RTC_SetDate+0x160>)
 800639a:	fba2 2303 	umull	r2, r3, r2, r3
 800639e:	0adb      	lsrs	r3, r3, #11
 80063a0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	2b18      	cmp	r3, #24
 80063a6:	d93a      	bls.n	800641e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	4a23      	ldr	r2, [pc, #140]	; (8006438 <HAL_RTC_SetDate+0x164>)
 80063ac:	fba2 2303 	umull	r2, r3, r2, r3
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	4a22      	ldr	r2, [pc, #136]	; (800643c <HAL_RTC_SetDate+0x168>)
 80063b4:	fb02 f303 	mul.w	r3, r2, r3
 80063b8:	69fa      	ldr	r2, [r7, #28]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80063be:	69f9      	ldr	r1, [r7, #28]
 80063c0:	68f8      	ldr	r0, [r7, #12]
 80063c2:	f000 f89a 	bl	80064fa <RTC_WriteTimeCounter>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d007      	beq.n	80063dc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2204      	movs	r2, #4
 80063d0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e027      	b.n	800642c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80063dc:	68f8      	ldr	r0, [r7, #12]
 80063de:	f000 f8b3 	bl	8006548 <RTC_ReadAlarmCounter>
 80063e2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ea:	d018      	beq.n	800641e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d214      	bcs.n	800641e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80063fa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80063fe:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006400:	69b9      	ldr	r1, [r7, #24]
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 f8b9 	bl	800657a <RTC_WriteAlarmCounter>
 8006408:	4603      	mov	r3, r0
 800640a:	2b00      	cmp	r3, #0
 800640c:	d007      	beq.n	800641e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2204      	movs	r2, #4
 8006412:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e006      	b.n	800642c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2201      	movs	r2, #1
 8006422:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800642a:	2300      	movs	r3, #0
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	91a2b3c5 	.word	0x91a2b3c5
 8006438:	aaaaaaab 	.word	0xaaaaaaab
 800643c:	00015180 	.word	0x00015180

08006440 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e01d      	b.n	8006492 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 0208 	bic.w	r2, r2, #8
 8006464:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006466:	f7fa ff6f 	bl	8001348 <HAL_GetTick>
 800646a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800646c:	e009      	b.n	8006482 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800646e:	f7fa ff6b 	bl	8001348 <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800647c:	d901      	bls.n	8006482 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e007      	b.n	8006492 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f003 0308 	and.w	r3, r3, #8
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0ee      	beq.n	800646e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}

0800649a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800649a:	b480      	push	{r7}
 800649c:	b087      	sub	sp, #28
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80064a2:	2300      	movs	r3, #0
 80064a4:	827b      	strh	r3, [r7, #18]
 80064a6:	2300      	movs	r3, #0
 80064a8:	823b      	strh	r3, [r7, #16]
 80064aa:	2300      	movs	r3, #0
 80064ac:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80064ae:	2300      	movs	r3, #0
 80064b0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80064ca:	8a7a      	ldrh	r2, [r7, #18]
 80064cc:	8a3b      	ldrh	r3, [r7, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d008      	beq.n	80064e4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80064d2:	8a3b      	ldrh	r3, [r7, #16]
 80064d4:	041a      	lsls	r2, r3, #16
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	69db      	ldr	r3, [r3, #28]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	4313      	orrs	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	e004      	b.n	80064ee <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80064e4:	8a7b      	ldrh	r3, [r7, #18]
 80064e6:	041a      	lsls	r2, r3, #16
 80064e8:	89fb      	ldrh	r3, [r7, #14]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80064ee:	697b      	ldr	r3, [r7, #20]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bc80      	pop	{r7}
 80064f8:	4770      	bx	lr

080064fa <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b084      	sub	sp, #16
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 f85d 	bl	80065c8 <RTC_EnterInitMode>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d002      	beq.n	800651a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
 8006518:	e011      	b.n	800653e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	0c12      	lsrs	r2, r2, #16
 8006522:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	b292      	uxth	r2, r2
 800652c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f872 	bl	8006618 <RTC_ExitInitMode>
 8006534:	4603      	mov	r3, r0
 8006536:	2b00      	cmp	r3, #0
 8006538:	d001      	beq.n	800653e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800653e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3710      	adds	r7, #16
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	81fb      	strh	r3, [r7, #14]
 8006554:	2300      	movs	r3, #0
 8006556:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006568:	89fb      	ldrh	r3, [r7, #14]
 800656a:	041a      	lsls	r2, r3, #16
 800656c:	89bb      	ldrh	r3, [r7, #12]
 800656e:	4313      	orrs	r3, r2
}
 8006570:	4618      	mov	r0, r3
 8006572:	3714      	adds	r7, #20
 8006574:	46bd      	mov	sp, r7
 8006576:	bc80      	pop	{r7}
 8006578:	4770      	bx	lr

0800657a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b084      	sub	sp, #16
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
 8006582:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006584:	2300      	movs	r3, #0
 8006586:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f81d 	bl	80065c8 <RTC_EnterInitMode>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d002      	beq.n	800659a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	73fb      	strb	r3, [r7, #15]
 8006598:	e011      	b.n	80065be <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	0c12      	lsrs	r2, r2, #16
 80065a2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	683a      	ldr	r2, [r7, #0]
 80065aa:	b292      	uxth	r2, r2
 80065ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f832 	bl	8006618 <RTC_ExitInitMode>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}

080065c8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80065d4:	f7fa feb8 	bl	8001348 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80065da:	e009      	b.n	80065f0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80065dc:	f7fa feb4 	bl	8001348 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065ea:	d901      	bls.n	80065f0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e00f      	b.n	8006610 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0ee      	beq.n	80065dc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0210 	orr.w	r2, r2, #16
 800660c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3710      	adds	r7, #16
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0210 	bic.w	r2, r2, #16
 8006632:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006634:	f7fa fe88 	bl	8001348 <HAL_GetTick>
 8006638:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800663a:	e009      	b.n	8006650 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800663c:	f7fa fe84 	bl	8001348 <HAL_GetTick>
 8006640:	4602      	mov	r2, r0
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	1ad3      	subs	r3, r2, r3
 8006646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800664a:	d901      	bls.n	8006650 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e007      	b.n	8006660 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0ee      	beq.n	800663c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006672:	2300      	movs	r3, #0
 8006674:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006676:	79fb      	ldrb	r3, [r7, #7]
 8006678:	091b      	lsrs	r3, r3, #4
 800667a:	b2db      	uxtb	r3, r3
 800667c:	461a      	mov	r2, r3
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	005b      	lsls	r3, r3, #1
 8006686:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006688:	79fb      	ldrb	r3, [r7, #7]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	4413      	add	r3, r2
 8006696:	b2db      	uxtb	r3, r3
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bc80      	pop	{r7}
 80066a0:	4770      	bx	lr
	...

080066a4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	70fb      	strb	r3, [r7, #3]
 80066b0:	4613      	mov	r3, r2
 80066b2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80066b4:	2300      	movs	r3, #0
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	2300      	movs	r3, #0
 80066ba:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80066c2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d82d      	bhi.n	8006726 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80066ca:	78fa      	ldrb	r2, [r7, #3]
 80066cc:	4613      	mov	r3, r2
 80066ce:	005b      	lsls	r3, r3, #1
 80066d0:	4413      	add	r3, r2
 80066d2:	00db      	lsls	r3, r3, #3
 80066d4:	1a9b      	subs	r3, r3, r2
 80066d6:	4a2c      	ldr	r2, [pc, #176]	; (8006788 <RTC_WeekDayNum+0xe4>)
 80066d8:	fba2 2303 	umull	r2, r3, r2, r3
 80066dc:	085a      	lsrs	r2, r3, #1
 80066de:	78bb      	ldrb	r3, [r7, #2]
 80066e0:	441a      	add	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	441a      	add	r2, r3
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	089b      	lsrs	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4926      	ldr	r1, [pc, #152]	; (800678c <RTC_WeekDayNum+0xe8>)
 80066f4:	fba1 1303 	umull	r1, r3, r1, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	1ad2      	subs	r2, r2, r3
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	4922      	ldr	r1, [pc, #136]	; (800678c <RTC_WeekDayNum+0xe8>)
 8006702:	fba1 1303 	umull	r1, r3, r1, r3
 8006706:	09db      	lsrs	r3, r3, #7
 8006708:	4413      	add	r3, r2
 800670a:	1d1a      	adds	r2, r3, #4
 800670c:	4b20      	ldr	r3, [pc, #128]	; (8006790 <RTC_WeekDayNum+0xec>)
 800670e:	fba3 1302 	umull	r1, r3, r3, r2
 8006712:	1ad1      	subs	r1, r2, r3
 8006714:	0849      	lsrs	r1, r1, #1
 8006716:	440b      	add	r3, r1
 8006718:	0899      	lsrs	r1, r3, #2
 800671a:	460b      	mov	r3, r1
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	1a5b      	subs	r3, r3, r1
 8006720:	1ad3      	subs	r3, r2, r3
 8006722:	60fb      	str	r3, [r7, #12]
 8006724:	e029      	b.n	800677a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006726:	78fa      	ldrb	r2, [r7, #3]
 8006728:	4613      	mov	r3, r2
 800672a:	005b      	lsls	r3, r3, #1
 800672c:	4413      	add	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	4a15      	ldr	r2, [pc, #84]	; (8006788 <RTC_WeekDayNum+0xe4>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	085a      	lsrs	r2, r3, #1
 800673a:	78bb      	ldrb	r3, [r7, #2]
 800673c:	441a      	add	r2, r3
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	441a      	add	r2, r3
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	089b      	lsrs	r3, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	4910      	ldr	r1, [pc, #64]	; (800678c <RTC_WeekDayNum+0xe8>)
 800674c:	fba1 1303 	umull	r1, r3, r1, r3
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	1ad2      	subs	r2, r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	490d      	ldr	r1, [pc, #52]	; (800678c <RTC_WeekDayNum+0xe8>)
 8006758:	fba1 1303 	umull	r1, r3, r1, r3
 800675c:	09db      	lsrs	r3, r3, #7
 800675e:	4413      	add	r3, r2
 8006760:	1c9a      	adds	r2, r3, #2
 8006762:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <RTC_WeekDayNum+0xec>)
 8006764:	fba3 1302 	umull	r1, r3, r3, r2
 8006768:	1ad1      	subs	r1, r2, r3
 800676a:	0849      	lsrs	r1, r1, #1
 800676c:	440b      	add	r3, r1
 800676e:	0899      	lsrs	r1, r3, #2
 8006770:	460b      	mov	r3, r1
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	1a5b      	subs	r3, r3, r1
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	b2db      	uxtb	r3, r3
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr
 8006788:	38e38e39 	.word	0x38e38e39
 800678c:	51eb851f 	.word	0x51eb851f
 8006790:	24924925 	.word	0x24924925

08006794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e076      	b.n	8006894 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d108      	bne.n	80067c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067b6:	d009      	beq.n	80067cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	61da      	str	r2, [r3, #28]
 80067be:	e005      	b.n	80067cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fa fb58 	bl	8000e9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2202      	movs	r2, #2
 80067f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006802:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006814:	431a      	orrs	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	431a      	orrs	r2, r3
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	431a      	orrs	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800683c:	431a      	orrs	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006846:	431a      	orrs	r2, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a1b      	ldr	r3, [r3, #32]
 800684c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006850:	ea42 0103 	orr.w	r1, r2, r3
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006858:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	0c1a      	lsrs	r2, r3, #16
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f002 0204 	and.w	r2, r2, #4
 8006872:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69da      	ldr	r2, [r3, #28]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006882:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068ac:	f7fa fd4c 	bl	8001348 <HAL_GetTick>
 80068b0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d001      	beq.n	80068c6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
 80068c4:	e12a      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0x36>
 80068cc:	88fb      	ldrh	r3, [r7, #6]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e122      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_SPI_Transmit+0x48>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e11b      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2203      	movs	r2, #3
 80068f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	88fa      	ldrh	r2, [r7, #6]
 800690a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006932:	d10f      	bne.n	8006954 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006942:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006952:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800695e:	2b40      	cmp	r3, #64	; 0x40
 8006960:	d007      	beq.n	8006972 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006970:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d152      	bne.n	8006a22 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <HAL_SPI_Transmit+0xee>
 8006984:	8b7b      	ldrh	r3, [r7, #26]
 8006986:	2b01      	cmp	r3, #1
 8006988:	d145      	bne.n	8006a16 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	881a      	ldrh	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	1c9a      	adds	r2, r3, #2
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	3b01      	subs	r3, #1
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80069ae:	e032      	b.n	8006a16 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d112      	bne.n	80069e4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	881a      	ldrh	r2, [r3, #0]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ce:	1c9a      	adds	r2, r3, #2
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069d8:	b29b      	uxth	r3, r3
 80069da:	3b01      	subs	r3, #1
 80069dc:	b29a      	uxth	r2, r3
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80069e2:	e018      	b.n	8006a16 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069e4:	f7fa fcb0 	bl	8001348 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d803      	bhi.n	80069fc <HAL_SPI_Transmit+0x160>
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d102      	bne.n	8006a02 <HAL_SPI_Transmit+0x166>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d109      	bne.n	8006a16 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e082      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1c7      	bne.n	80069b0 <HAL_SPI_Transmit+0x114>
 8006a20:	e053      	b.n	8006aca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d002      	beq.n	8006a30 <HAL_SPI_Transmit+0x194>
 8006a2a:	8b7b      	ldrh	r3, [r7, #26]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d147      	bne.n	8006ac0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	7812      	ldrb	r2, [r2, #0]
 8006a3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	3b01      	subs	r3, #1
 8006a50:	b29a      	uxth	r2, r3
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006a56:	e033      	b.n	8006ac0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f003 0302 	and.w	r3, r3, #2
 8006a62:	2b02      	cmp	r3, #2
 8006a64:	d113      	bne.n	8006a8e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	1c5a      	adds	r2, r3, #1
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	86da      	strh	r2, [r3, #54]	; 0x36
 8006a8c:	e018      	b.n	8006ac0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006a8e:	f7fa fc5b 	bl	8001348 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	69fb      	ldr	r3, [r7, #28]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d803      	bhi.n	8006aa6 <HAL_SPI_Transmit+0x20a>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa4:	d102      	bne.n	8006aac <HAL_SPI_Transmit+0x210>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e02d      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d1c6      	bne.n	8006a58 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aca:	69fa      	ldr	r2, [r7, #28]
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	f000 fa5a 	bl	8006f88 <SPI_EndRxTxTransaction>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d002      	beq.n	8006ae0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2220      	movs	r2, #32
 8006ade:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10a      	bne.n	8006afe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68db      	ldr	r3, [r3, #12]
 8006af2:	617b      	str	r3, [r7, #20]
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	617b      	str	r3, [r7, #20]
 8006afc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d001      	beq.n	8006b1a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006b16:	2301      	movs	r3, #1
 8006b18:	e000      	b.n	8006b1c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
  }
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3720      	adds	r7, #32
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b08a      	sub	sp, #40	; 0x28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	60f8      	str	r0, [r7, #12]
 8006b2c:	60b9      	str	r1, [r7, #8]
 8006b2e:	607a      	str	r2, [r7, #4]
 8006b30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006b32:	2301      	movs	r3, #1
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b36:	f7fa fc07 	bl	8001348 <HAL_GetTick>
 8006b3a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b42:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006b4a:	887b      	ldrh	r3, [r7, #2]
 8006b4c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006b4e:	7ffb      	ldrb	r3, [r7, #31]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d00c      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x4a>
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b5a:	d106      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d102      	bne.n	8006b6a <HAL_SPI_TransmitReceive+0x46>
 8006b64:	7ffb      	ldrb	r3, [r7, #31]
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d001      	beq.n	8006b6e <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e17f      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x5c>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <HAL_SPI_TransmitReceive+0x5c>
 8006b7a:	887b      	ldrh	r3, [r7, #2]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d101      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e174      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d101      	bne.n	8006b92 <HAL_SPI_TransmitReceive+0x6e>
 8006b8e:	2302      	movs	r3, #2
 8006b90:	e16d      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ba0:	b2db      	uxtb	r3, r3
 8006ba2:	2b04      	cmp	r3, #4
 8006ba4:	d003      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2205      	movs	r2, #5
 8006baa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	687a      	ldr	r2, [r7, #4]
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	887a      	ldrh	r2, [r7, #2]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	887a      	ldrh	r2, [r7, #2]
 8006bc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	887a      	ldrh	r2, [r7, #2]
 8006bd0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	887a      	ldrh	r2, [r7, #2]
 8006bd6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2200      	movs	r2, #0
 8006be2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d007      	beq.n	8006c02 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c0a:	d17e      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <HAL_SPI_TransmitReceive+0xf6>
 8006c14:	8afb      	ldrh	r3, [r7, #22]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d16c      	bne.n	8006cf4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c1e:	881a      	ldrh	r2, [r3, #0]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c2a:	1c9a      	adds	r2, r3, #2
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c3e:	e059      	b.n	8006cf4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f003 0302 	and.w	r3, r3, #2
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d11b      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x162>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d016      	beq.n	8006c86 <HAL_SPI_TransmitReceive+0x162>
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d113      	bne.n	8006c86 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c62:	881a      	ldrh	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c82:	2300      	movs	r3, #0
 8006c84:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	f003 0301 	and.w	r3, r3, #1
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d119      	bne.n	8006cc8 <HAL_SPI_TransmitReceive+0x1a4>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d014      	beq.n	8006cc8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68da      	ldr	r2, [r3, #12]
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ca8:	b292      	uxth	r2, r2
 8006caa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	1c9a      	adds	r2, r3, #2
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cc8:	f7fa fb3e 	bl	8001348 <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d80d      	bhi.n	8006cf4 <HAL_SPI_TransmitReceive+0x1d0>
 8006cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cde:	d009      	beq.n	8006cf4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e0bc      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1a0      	bne.n	8006c40 <HAL_SPI_TransmitReceive+0x11c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d19b      	bne.n	8006c40 <HAL_SPI_TransmitReceive+0x11c>
 8006d08:	e082      	b.n	8006e10 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <HAL_SPI_TransmitReceive+0x1f4>
 8006d12:	8afb      	ldrh	r3, [r7, #22]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d171      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	330c      	adds	r3, #12
 8006d22:	7812      	ldrb	r2, [r2, #0]
 8006d24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2a:	1c5a      	adds	r2, r3, #1
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	3b01      	subs	r3, #1
 8006d38:	b29a      	uxth	r2, r3
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d3e:	e05d      	b.n	8006dfc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f003 0302 	and.w	r3, r3, #2
 8006d4a:	2b02      	cmp	r3, #2
 8006d4c:	d11c      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x264>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d017      	beq.n	8006d88 <HAL_SPI_TransmitReceive+0x264>
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d114      	bne.n	8006d88 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	330c      	adds	r3, #12
 8006d68:	7812      	ldrb	r2, [r2, #0]
 8006d6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b29a      	uxth	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d119      	bne.n	8006dca <HAL_SPI_TransmitReceive+0x2a6>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d014      	beq.n	8006dca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68da      	ldr	r2, [r3, #12]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006daa:	b2d2      	uxtb	r2, r2
 8006dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dca:	f7fa fabd 	bl	8001348 <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d803      	bhi.n	8006de2 <HAL_SPI_TransmitReceive+0x2be>
 8006dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de0:	d102      	bne.n	8006de8 <HAL_SPI_TransmitReceive+0x2c4>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d109      	bne.n	8006dfc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e038      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d19c      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x21c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d197      	bne.n	8006d40 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e10:	6a3a      	ldr	r2, [r7, #32]
 8006e12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 f8b7 	bl	8006f88 <SPI_EndRxTxTransaction>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e01d      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	613b      	str	r3, [r7, #16]
 8006e4e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d001      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
  }
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3728      	adds	r7, #40	; 0x28
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b088      	sub	sp, #32
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	4613      	mov	r3, r2
 8006e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e88:	f7fa fa5e 	bl	8001348 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	1a9b      	subs	r3, r3, r2
 8006e92:	683a      	ldr	r2, [r7, #0]
 8006e94:	4413      	add	r3, r2
 8006e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e98:	f7fa fa56 	bl	8001348 <HAL_GetTick>
 8006e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e9e:	4b39      	ldr	r3, [pc, #228]	; (8006f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	015b      	lsls	r3, r3, #5
 8006ea4:	0d1b      	lsrs	r3, r3, #20
 8006ea6:	69fa      	ldr	r2, [r7, #28]
 8006ea8:	fb02 f303 	mul.w	r3, r2, r3
 8006eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006eae:	e054      	b.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb6:	d050      	beq.n	8006f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eb8:	f7fa fa46 	bl	8001348 <HAL_GetTick>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	69fa      	ldr	r2, [r7, #28]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d902      	bls.n	8006ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d13d      	bne.n	8006f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685a      	ldr	r2, [r3, #4]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ee6:	d111      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ef0:	d004      	beq.n	8006efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	689b      	ldr	r3, [r3, #8]
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d107      	bne.n	8006f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f14:	d10f      	bne.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f24:	601a      	str	r2, [r3, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e017      	b.n	8006f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f50:	2300      	movs	r3, #0
 8006f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	3b01      	subs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	bf0c      	ite	eq
 8006f6a:	2301      	moveq	r3, #1
 8006f6c:	2300      	movne	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	461a      	mov	r2, r3
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d19b      	bne.n	8006eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3720      	adds	r7, #32
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
 8006f82:	bf00      	nop
 8006f84:	20000000 	.word	0x20000000

08006f88 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b086      	sub	sp, #24
 8006f8c:	af02      	add	r7, sp, #8
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	9300      	str	r3, [sp, #0]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	2102      	movs	r1, #2
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f7ff ff6a 	bl	8006e78 <SPI_WaitFlagStateUntilTimeout>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d007      	beq.n	8006fba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fae:	f043 0220 	orr.w	r2, r3, #32
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e013      	b.n	8006fe2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	2180      	movs	r1, #128	; 0x80
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f7ff ff57 	bl	8006e78 <SPI_WaitFlagStateUntilTimeout>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fd4:	f043 0220 	orr.w	r2, r3, #32
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e000      	b.n	8006fe2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8006fe0:	2300      	movs	r3, #0
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b082      	sub	sp, #8
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d101      	bne.n	8006ffc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e041      	b.n	8007080 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7f9 ff8d 	bl	8000f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f000 fa0f 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e041      	b.n	800711e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f839 	bl	8007126 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3304      	adds	r3, #4
 80070c4:	4619      	mov	r1, r3
 80070c6:	4610      	mov	r0, r2
 80070c8:	f000 f9c0 	bl	800744c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3708      	adds	r7, #8
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007126:	b480      	push	{r7}
 8007128:	b083      	sub	sp, #12
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800712e:	bf00      	nop
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007144:	2300      	movs	r3, #0
 8007146:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007152:	2302      	movs	r3, #2
 8007154:	e0ae      	b.n	80072b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2b0c      	cmp	r3, #12
 8007162:	f200 809f 	bhi.w	80072a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007166:	a201      	add	r2, pc, #4	; (adr r2, 800716c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716c:	080071a1 	.word	0x080071a1
 8007170:	080072a5 	.word	0x080072a5
 8007174:	080072a5 	.word	0x080072a5
 8007178:	080072a5 	.word	0x080072a5
 800717c:	080071e1 	.word	0x080071e1
 8007180:	080072a5 	.word	0x080072a5
 8007184:	080072a5 	.word	0x080072a5
 8007188:	080072a5 	.word	0x080072a5
 800718c:	08007223 	.word	0x08007223
 8007190:	080072a5 	.word	0x080072a5
 8007194:	080072a5 	.word	0x080072a5
 8007198:	080072a5 	.word	0x080072a5
 800719c:	08007263 	.word	0x08007263
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	68b9      	ldr	r1, [r7, #8]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f000 f9be 	bl	8007528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699a      	ldr	r2, [r3, #24]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0208 	orr.w	r2, r2, #8
 80071ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699a      	ldr	r2, [r3, #24]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f022 0204 	bic.w	r2, r2, #4
 80071ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	691a      	ldr	r2, [r3, #16]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	430a      	orrs	r2, r1
 80071dc:	619a      	str	r2, [r3, #24]
      break;
 80071de:	e064      	b.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68b9      	ldr	r1, [r7, #8]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 fa04 	bl	80075f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	699a      	ldr	r2, [r3, #24]
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699a      	ldr	r2, [r3, #24]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800720a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6999      	ldr	r1, [r3, #24]
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	021a      	lsls	r2, r3, #8
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	430a      	orrs	r2, r1
 800721e:	619a      	str	r2, [r3, #24]
      break;
 8007220:	e043      	b.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	68b9      	ldr	r1, [r7, #8]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 fa4d 	bl	80076c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	69da      	ldr	r2, [r3, #28]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f042 0208 	orr.w	r2, r2, #8
 800723c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	69da      	ldr	r2, [r3, #28]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0204 	bic.w	r2, r2, #4
 800724c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	69d9      	ldr	r1, [r3, #28]
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	691a      	ldr	r2, [r3, #16]
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	430a      	orrs	r2, r1
 800725e:	61da      	str	r2, [r3, #28]
      break;
 8007260:	e023      	b.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68b9      	ldr	r1, [r7, #8]
 8007268:	4618      	mov	r0, r3
 800726a:	f000 fa97 	bl	800779c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	69da      	ldr	r2, [r3, #28]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800727c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	69da      	ldr	r2, [r3, #28]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800728c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69d9      	ldr	r1, [r3, #28]
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	021a      	lsls	r2, r3, #8
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	430a      	orrs	r2, r1
 80072a0:	61da      	str	r2, [r3, #28]
      break;
 80072a2:	e002      	b.n	80072aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80072a4:	2301      	movs	r3, #1
 80072a6:	75fb      	strb	r3, [r7, #23]
      break;
 80072a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072c6:	2300      	movs	r3, #0
 80072c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_TIM_ConfigClockSource+0x1c>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e0b4      	b.n	8007442 <HAL_TIM_ConfigClockSource+0x186>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	68ba      	ldr	r2, [r7, #8]
 8007306:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007310:	d03e      	beq.n	8007390 <HAL_TIM_ConfigClockSource+0xd4>
 8007312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007316:	f200 8087 	bhi.w	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 800731a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800731e:	f000 8086 	beq.w	800742e <HAL_TIM_ConfigClockSource+0x172>
 8007322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007326:	d87f      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007328:	2b70      	cmp	r3, #112	; 0x70
 800732a:	d01a      	beq.n	8007362 <HAL_TIM_ConfigClockSource+0xa6>
 800732c:	2b70      	cmp	r3, #112	; 0x70
 800732e:	d87b      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007330:	2b60      	cmp	r3, #96	; 0x60
 8007332:	d050      	beq.n	80073d6 <HAL_TIM_ConfigClockSource+0x11a>
 8007334:	2b60      	cmp	r3, #96	; 0x60
 8007336:	d877      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007338:	2b50      	cmp	r3, #80	; 0x50
 800733a:	d03c      	beq.n	80073b6 <HAL_TIM_ConfigClockSource+0xfa>
 800733c:	2b50      	cmp	r3, #80	; 0x50
 800733e:	d873      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007340:	2b40      	cmp	r3, #64	; 0x40
 8007342:	d058      	beq.n	80073f6 <HAL_TIM_ConfigClockSource+0x13a>
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d86f      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d064      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15a>
 800734c:	2b30      	cmp	r3, #48	; 0x30
 800734e:	d86b      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007350:	2b20      	cmp	r3, #32
 8007352:	d060      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15a>
 8007354:	2b20      	cmp	r3, #32
 8007356:	d867      	bhi.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
 8007358:	2b00      	cmp	r3, #0
 800735a:	d05c      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15a>
 800735c:	2b10      	cmp	r3, #16
 800735e:	d05a      	beq.n	8007416 <HAL_TIM_ConfigClockSource+0x15a>
 8007360:	e062      	b.n	8007428 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007372:	f000 fad8 	bl	8007926 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	609a      	str	r2, [r3, #8]
      break;
 800738e:	e04f      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073a0:	f000 fac1 	bl	8007926 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689a      	ldr	r2, [r3, #8]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073b2:	609a      	str	r2, [r3, #8]
      break;
 80073b4:	e03c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073c2:	461a      	mov	r2, r3
 80073c4:	f000 fa38 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2150      	movs	r1, #80	; 0x50
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fa8f 	bl	80078f2 <TIM_ITRx_SetConfig>
      break;
 80073d4:	e02c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80073e2:	461a      	mov	r2, r3
 80073e4:	f000 fa56 	bl	8007894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2160      	movs	r1, #96	; 0x60
 80073ee:	4618      	mov	r0, r3
 80073f0:	f000 fa7f 	bl	80078f2 <TIM_ITRx_SetConfig>
      break;
 80073f4:	e01c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007402:	461a      	mov	r2, r3
 8007404:	f000 fa18 	bl	8007838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2140      	movs	r1, #64	; 0x40
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fa6f 	bl	80078f2 <TIM_ITRx_SetConfig>
      break;
 8007414:	e00c      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4619      	mov	r1, r3
 8007420:	4610      	mov	r0, r2
 8007422:	f000 fa66 	bl	80078f2 <TIM_ITRx_SetConfig>
      break;
 8007426:	e003      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	73fb      	strb	r3, [r7, #15]
      break;
 800742c:	e000      	b.n	8007430 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800742e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007440:	7bfb      	ldrb	r3, [r7, #15]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
	...

0800744c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a2f      	ldr	r2, [pc, #188]	; (800751c <TIM_Base_SetConfig+0xd0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d00b      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d007      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <TIM_Base_SetConfig+0xd4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d003      	beq.n	800747c <TIM_Base_SetConfig+0x30>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4a2b      	ldr	r2, [pc, #172]	; (8007524 <TIM_Base_SetConfig+0xd8>)
 8007478:	4293      	cmp	r3, r2
 800747a:	d108      	bne.n	800748e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68fa      	ldr	r2, [r7, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a22      	ldr	r2, [pc, #136]	; (800751c <TIM_Base_SetConfig+0xd0>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d00b      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800749c:	d007      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a1f      	ldr	r2, [pc, #124]	; (8007520 <TIM_Base_SetConfig+0xd4>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d003      	beq.n	80074ae <TIM_Base_SetConfig+0x62>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a1e      	ldr	r2, [pc, #120]	; (8007524 <TIM_Base_SetConfig+0xd8>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d108      	bne.n	80074c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4313      	orrs	r3, r2
 80074be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	4313      	orrs	r3, r2
 80074cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	689a      	ldr	r2, [r3, #8]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a0d      	ldr	r2, [pc, #52]	; (800751c <TIM_Base_SetConfig+0xd0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d103      	bne.n	80074f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	691a      	ldr	r2, [r3, #16]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0301 	and.w	r3, r3, #1
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	691b      	ldr	r3, [r3, #16]
 800750a:	f023 0201 	bic.w	r2, r3, #1
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	611a      	str	r2, [r3, #16]
  }
}
 8007512:	bf00      	nop
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	bc80      	pop	{r7}
 800751a:	4770      	bx	lr
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40000400 	.word	0x40000400
 8007524:	40000800 	.word	0x40000800

08007528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007528:	b480      	push	{r7}
 800752a:	b087      	sub	sp, #28
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a1b      	ldr	r3, [r3, #32]
 800753c:	f023 0201 	bic.w	r2, r3, #1
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0303 	bic.w	r3, r3, #3
 800755e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4313      	orrs	r3, r2
 8007568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f023 0302 	bic.w	r3, r3, #2
 8007570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	689b      	ldr	r3, [r3, #8]
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a1c      	ldr	r2, [pc, #112]	; (80075f0 <TIM_OC1_SetConfig+0xc8>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10c      	bne.n	800759e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f023 0308 	bic.w	r3, r3, #8
 800758a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	4313      	orrs	r3, r2
 8007594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	f023 0304 	bic.w	r3, r3, #4
 800759c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	4a13      	ldr	r2, [pc, #76]	; (80075f0 <TIM_OC1_SetConfig+0xc8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d111      	bne.n	80075ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80075ae:	693b      	ldr	r3, [r7, #16]
 80075b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80075b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	4313      	orrs	r3, r2
 80075be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	699b      	ldr	r3, [r3, #24]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	693a      	ldr	r2, [r7, #16]
 80075ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	68fa      	ldr	r2, [r7, #12]
 80075d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685a      	ldr	r2, [r3, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	697a      	ldr	r2, [r7, #20]
 80075e2:	621a      	str	r2, [r3, #32]
}
 80075e4:	bf00      	nop
 80075e6:	371c      	adds	r7, #28
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bc80      	pop	{r7}
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	40012c00 	.word	0x40012c00

080075f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b087      	sub	sp, #28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a1b      	ldr	r3, [r3, #32]
 8007608:	f023 0210 	bic.w	r2, r3, #16
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	699b      	ldr	r3, [r3, #24]
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800762a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	4313      	orrs	r3, r2
 8007636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f023 0320 	bic.w	r3, r3, #32
 800763e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	011b      	lsls	r3, r3, #4
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4a1d      	ldr	r2, [pc, #116]	; (80076c4 <TIM_OC2_SetConfig+0xd0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d10d      	bne.n	8007670 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800765a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800766e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a14      	ldr	r2, [pc, #80]	; (80076c4 <TIM_OC2_SetConfig+0xd0>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d113      	bne.n	80076a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800767e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	009b      	lsls	r3, r3, #2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bc80      	pop	{r7}
 80076c2:	4770      	bx	lr
 80076c4:	40012c00 	.word	0x40012c00

080076c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	f023 0303 	bic.w	r3, r3, #3
 80076fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	68fa      	ldr	r2, [r7, #12]
 8007706:	4313      	orrs	r3, r2
 8007708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	697a      	ldr	r2, [r7, #20]
 800771a:	4313      	orrs	r3, r2
 800771c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a1d      	ldr	r2, [pc, #116]	; (8007798 <TIM_OC3_SetConfig+0xd0>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d10d      	bne.n	8007742 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800772c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	021b      	lsls	r3, r3, #8
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a14      	ldr	r2, [pc, #80]	; (8007798 <TIM_OC3_SetConfig+0xd0>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d113      	bne.n	8007772 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	bc80      	pop	{r7}
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	40012c00 	.word	0x40012c00

0800779c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800779c:	b480      	push	{r7}
 800779e:	b087      	sub	sp, #28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6a1b      	ldr	r3, [r3, #32]
 80077aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a1b      	ldr	r3, [r3, #32]
 80077b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	4313      	orrs	r3, r2
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	031b      	lsls	r3, r3, #12
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a0f      	ldr	r2, [pc, #60]	; (8007834 <TIM_OC4_SetConfig+0x98>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d109      	bne.n	8007810 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007802:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	695b      	ldr	r3, [r3, #20]
 8007808:	019b      	lsls	r3, r3, #6
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	697a      	ldr	r2, [r7, #20]
 8007814:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	685a      	ldr	r2, [r3, #4]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	621a      	str	r2, [r3, #32]
}
 800782a:	bf00      	nop
 800782c:	371c      	adds	r7, #28
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr
 8007834:	40012c00 	.word	0x40012c00

08007838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6a1b      	ldr	r3, [r3, #32]
 8007848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f023 0201 	bic.w	r2, r3, #1
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	699b      	ldr	r3, [r3, #24]
 800785a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	693a      	ldr	r2, [r7, #16]
 800786a:	4313      	orrs	r3, r2
 800786c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 030a 	bic.w	r3, r3, #10
 8007874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007876:	697a      	ldr	r2, [r7, #20]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	4313      	orrs	r3, r2
 800787c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	621a      	str	r2, [r3, #32]
}
 800788a:	bf00      	nop
 800788c:	371c      	adds	r7, #28
 800788e:	46bd      	mov	sp, r7
 8007890:	bc80      	pop	{r7}
 8007892:	4770      	bx	lr

08007894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	60f8      	str	r0, [r7, #12]
 800789c:	60b9      	str	r1, [r7, #8]
 800789e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6a1b      	ldr	r3, [r3, #32]
 80078a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a1b      	ldr	r3, [r3, #32]
 80078aa:	f023 0210 	bic.w	r2, r3, #16
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	031b      	lsls	r3, r3, #12
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	4313      	orrs	r3, r2
 80078c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	011b      	lsls	r3, r3, #4
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	4313      	orrs	r3, r2
 80078da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	621a      	str	r2, [r3, #32]
}
 80078e8:	bf00      	nop
 80078ea:	371c      	adds	r7, #28
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bc80      	pop	{r7}
 80078f0:	4770      	bx	lr

080078f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078f2:	b480      	push	{r7}
 80078f4:	b085      	sub	sp, #20
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	689b      	ldr	r3, [r3, #8]
 8007900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800790a:	683a      	ldr	r2, [r7, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4313      	orrs	r3, r2
 8007910:	f043 0307 	orr.w	r3, r3, #7
 8007914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	609a      	str	r2, [r3, #8]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	bc80      	pop	{r7}
 8007924:	4770      	bx	lr

08007926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007926:	b480      	push	{r7}
 8007928:	b087      	sub	sp, #28
 800792a:	af00      	add	r7, sp, #0
 800792c:	60f8      	str	r0, [r7, #12]
 800792e:	60b9      	str	r1, [r7, #8]
 8007930:	607a      	str	r2, [r7, #4]
 8007932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	021a      	lsls	r2, r3, #8
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	431a      	orrs	r2, r3
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	4313      	orrs	r3, r2
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4313      	orrs	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	609a      	str	r2, [r3, #8]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	bc80      	pop	{r7}
 8007962:	4770      	bx	lr

08007964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007974:	2b01      	cmp	r3, #1
 8007976:	d101      	bne.n	800797c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007978:	2302      	movs	r3, #2
 800797a:	e046      	b.n	8007a0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a16      	ldr	r2, [pc, #88]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d00e      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c8:	d009      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d004      	beq.n	80079de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a10      	ldr	r2, [pc, #64]	; (8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d10c      	bne.n	80079f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	68ba      	ldr	r2, [r7, #8]
 80079f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a08:	2300      	movs	r3, #0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3714      	adds	r7, #20
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bc80      	pop	{r7}
 8007a12:	4770      	bx	lr
 8007a14:	40012c00 	.word	0x40012c00
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800

08007a20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d101      	bne.n	8007a3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a38:	2302      	movs	r3, #2
 8007a3a:	e03d      	b.n	8007ab8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	695b      	ldr	r3, [r3, #20]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bc80      	pop	{r7}
 8007ac0:	4770      	bx	lr

08007ac2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007ac2:	b580      	push	{r7, lr}
 8007ac4:	b082      	sub	sp, #8
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e042      	b.n	8007b5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d106      	bne.n	8007aee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f7f9 fab9 	bl	8001060 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2224      	movs	r2, #36	; 0x24
 8007af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f972 	bl	8007df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691a      	ldr	r2, [r3, #16]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	695a      	ldr	r2, [r3, #20]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2220      	movs	r2, #32
 8007b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3708      	adds	r7, #8
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b08a      	sub	sp, #40	; 0x28
 8007b66:	af02      	add	r7, sp, #8
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	603b      	str	r3, [r7, #0]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007b72:	2300      	movs	r3, #0
 8007b74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b20      	cmp	r3, #32
 8007b80:	d175      	bne.n	8007c6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <HAL_UART_Transmit+0x2c>
 8007b88:	88fb      	ldrh	r3, [r7, #6]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e06e      	b.n	8007c70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2221      	movs	r2, #33	; 0x21
 8007b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ba0:	f7f9 fbd2 	bl	8001348 <HAL_GetTick>
 8007ba4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	88fa      	ldrh	r2, [r7, #6]
 8007baa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	88fa      	ldrh	r2, [r7, #6]
 8007bb0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bba:	d108      	bne.n	8007bce <HAL_UART_Transmit+0x6c>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d104      	bne.n	8007bce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	61bb      	str	r3, [r7, #24]
 8007bcc:	e003      	b.n	8007bd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007bd6:	e02e      	b.n	8007c36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	2200      	movs	r2, #0
 8007be0:	2180      	movs	r1, #128	; 0x80
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f848 	bl	8007c78 <UART_WaitOnFlagUntilTimeout>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2220      	movs	r2, #32
 8007bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e03a      	b.n	8007c70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10b      	bne.n	8007c18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	881b      	ldrh	r3, [r3, #0]
 8007c04:	461a      	mov	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	3302      	adds	r3, #2
 8007c14:	61bb      	str	r3, [r7, #24]
 8007c16:	e007      	b.n	8007c28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	781a      	ldrb	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	3301      	adds	r3, #1
 8007c26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	3b01      	subs	r3, #1
 8007c30:	b29a      	uxth	r2, r3
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1cb      	bne.n	8007bd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	2200      	movs	r2, #0
 8007c48:	2140      	movs	r1, #64	; 0x40
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f000 f814 	bl	8007c78 <UART_WaitOnFlagUntilTimeout>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d005      	beq.n	8007c62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e006      	b.n	8007c70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	e000      	b.n	8007c70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007c6e:	2302      	movs	r3, #2
  }
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3720      	adds	r7, #32
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	60f8      	str	r0, [r7, #12]
 8007c80:	60b9      	str	r1, [r7, #8]
 8007c82:	603b      	str	r3, [r7, #0]
 8007c84:	4613      	mov	r3, r2
 8007c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c88:	e03b      	b.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c90:	d037      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7f9 fb59 	bl	8001348 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	6a3a      	ldr	r2, [r7, #32]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ca8:	2303      	movs	r3, #3
 8007caa:	e03a      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f003 0304 	and.w	r3, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d023      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	2b80      	cmp	r3, #128	; 0x80
 8007cbe:	d020      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d01d      	beq.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d116      	bne.n	8007d02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	617b      	str	r3, [r7, #20]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	617b      	str	r3, [r7, #20]
 8007ce8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f81d 	bl	8007d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e00f      	b.n	8007d22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	4013      	ands	r3, r2
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	bf0c      	ite	eq
 8007d12:	2301      	moveq	r3, #1
 8007d14:	2300      	movne	r3, #0
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	461a      	mov	r2, r3
 8007d1a:	79fb      	ldrb	r3, [r7, #7]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d0b4      	beq.n	8007c8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3718      	adds	r7, #24
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b095      	sub	sp, #84	; 0x54
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	330c      	adds	r3, #12
 8007d38:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	e853 3f00 	ldrex	r3, [r3]
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	330c      	adds	r3, #12
 8007d50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d52:	643a      	str	r2, [r7, #64]	; 0x40
 8007d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5a:	e841 2300 	strex	r3, r2, [r1]
 8007d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1e5      	bne.n	8007d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	3314      	adds	r3, #20
 8007d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	f023 0301 	bic.w	r3, r3, #1
 8007d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3314      	adds	r3, #20
 8007d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d8e:	e841 2300 	strex	r3, r2, [r1]
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1e5      	bne.n	8007d66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d119      	bne.n	8007dd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	330c      	adds	r3, #12
 8007da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f023 0310 	bic.w	r3, r3, #16
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc2:	61ba      	str	r2, [r7, #24]
 8007dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6979      	ldr	r1, [r7, #20]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e5      	bne.n	8007da2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2220      	movs	r2, #32
 8007dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007de4:	bf00      	nop
 8007de6:	3754      	adds	r7, #84	; 0x54
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bc80      	pop	{r7}
 8007dec:	4770      	bx	lr
	...

08007df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b084      	sub	sp, #16
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	689a      	ldr	r2, [r3, #8]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	431a      	orrs	r2, r3
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	695b      	ldr	r3, [r3, #20]
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	68db      	ldr	r3, [r3, #12]
 8007e26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007e2a:	f023 030c 	bic.w	r3, r3, #12
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6812      	ldr	r2, [r2, #0]
 8007e32:	68b9      	ldr	r1, [r7, #8]
 8007e34:	430b      	orrs	r3, r1
 8007e36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	699a      	ldr	r2, [r3, #24]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	430a      	orrs	r2, r1
 8007e4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a2c      	ldr	r2, [pc, #176]	; (8007f04 <UART_SetConfig+0x114>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d103      	bne.n	8007e60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007e58:	f7fd ff7a 	bl	8005d50 <HAL_RCC_GetPCLK2Freq>
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	e002      	b.n	8007e66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007e60:	f7fd ff62 	bl	8005d28 <HAL_RCC_GetPCLK1Freq>
 8007e64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e66:	68fa      	ldr	r2, [r7, #12]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	009a      	lsls	r2, r3, #2
 8007e70:	441a      	add	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e7c:	4a22      	ldr	r2, [pc, #136]	; (8007f08 <UART_SetConfig+0x118>)
 8007e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e82:	095b      	lsrs	r3, r3, #5
 8007e84:	0119      	lsls	r1, r3, #4
 8007e86:	68fa      	ldr	r2, [r7, #12]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009a      	lsls	r2, r3, #2
 8007e90:	441a      	add	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8007e9c:	4b1a      	ldr	r3, [pc, #104]	; (8007f08 <UART_SetConfig+0x118>)
 8007e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8007ea2:	095b      	lsrs	r3, r3, #5
 8007ea4:	2064      	movs	r0, #100	; 0x64
 8007ea6:	fb00 f303 	mul.w	r3, r0, r3
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	011b      	lsls	r3, r3, #4
 8007eae:	3332      	adds	r3, #50	; 0x32
 8007eb0:	4a15      	ldr	r2, [pc, #84]	; (8007f08 <UART_SetConfig+0x118>)
 8007eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ebc:	4419      	add	r1, r3
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	4613      	mov	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	4413      	add	r3, r2
 8007ec6:	009a      	lsls	r2, r3, #2
 8007ec8:	441a      	add	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <UART_SetConfig+0x118>)
 8007ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	2064      	movs	r0, #100	; 0x64
 8007ede:	fb00 f303 	mul.w	r3, r0, r3
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	3332      	adds	r3, #50	; 0x32
 8007ee8:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <UART_SetConfig+0x118>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	f003 020f 	and.w	r2, r3, #15
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	440a      	add	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007efc:	bf00      	nop
 8007efe:	3710      	adds	r7, #16
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	40013800 	.word	0x40013800
 8007f08:	51eb851f 	.word	0x51eb851f

08007f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	4638      	mov	r0, r7
 8007f16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr

08007f26 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007f26:	b480      	push	{r7}
 8007f28:	b085      	sub	sp, #20
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f36:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007f3a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f46:	2300      	movs	r3, #0
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bc80      	pop	{r7}
 8007f50:	4770      	bx	lr

08007f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007f52:	b480      	push	{r7}
 8007f54:	b085      	sub	sp, #20
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007f5a:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007f5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007f66:	b29a      	uxth	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	43db      	mvns	r3, r3
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4013      	ands	r3, r2
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bc80      	pop	{r7}
 8007f84:	4770      	bx	lr

08007f86 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b083      	sub	sp, #12
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	460b      	mov	r3, r1
 8007f90:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007f92:	2300      	movs	r3, #0
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	370c      	adds	r7, #12
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	4638      	mov	r0, r7
 8007fa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3714      	adds	r7, #20
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bc80      	pop	{r7}
 8007fd6:	4770      	bx	lr

08007fd8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b09d      	sub	sp, #116	; 0x74
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	4413      	add	r3, r2
 8007ff2:	881b      	ldrh	r3, [r3, #0]
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffe:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	78db      	ldrb	r3, [r3, #3]
 8008006:	2b03      	cmp	r3, #3
 8008008:	d81f      	bhi.n	800804a <USB_ActivateEndpoint+0x72>
 800800a:	a201      	add	r2, pc, #4	; (adr r2, 8008010 <USB_ActivateEndpoint+0x38>)
 800800c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008010:	08008021 	.word	0x08008021
 8008014:	0800803d 	.word	0x0800803d
 8008018:	08008053 	.word	0x08008053
 800801c:	0800802f 	.word	0x0800802f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008020:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008024:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008028:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800802c:	e012      	b.n	8008054 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800802e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008032:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008036:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800803a:	e00b      	b.n	8008054 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800803c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008040:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008044:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008048:	e004      	b.n	8008054 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008050:	e000      	b.n	8008054 <USB_ActivateEndpoint+0x7c>
      break;
 8008052:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	441a      	add	r2, r3
 800805e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008062:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008066:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800806a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800806e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008072:	b29b      	uxth	r3, r3
 8008074:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	881b      	ldrh	r3, [r3, #0]
 8008082:	b29b      	uxth	r3, r3
 8008084:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808c:	b29a      	uxth	r2, r3
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	b29b      	uxth	r3, r3
 8008094:	4313      	orrs	r3, r2
 8008096:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	441a      	add	r2, r3
 80080a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80080a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	7b1b      	ldrb	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 8178 	bne.w	80083b6 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	785b      	ldrb	r3, [r3, #1]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8084 	beq.w	80081d8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	61bb      	str	r3, [r7, #24]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80080da:	b29b      	uxth	r3, r3
 80080dc:	461a      	mov	r2, r3
 80080de:	69bb      	ldr	r3, [r7, #24]
 80080e0:	4413      	add	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	011a      	lsls	r2, r3, #4
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	4413      	add	r3, r2
 80080ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080f2:	617b      	str	r3, [r7, #20]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	085b      	lsrs	r3, r3, #1
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	b29a      	uxth	r2, r3
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	827b      	strh	r3, [r7, #18]
 8008112:	8a7b      	ldrh	r3, [r7, #18]
 8008114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01b      	beq.n	8008154 <USB_ActivateEndpoint+0x17c>
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	009b      	lsls	r3, r3, #2
 8008124:	4413      	add	r3, r2
 8008126:	881b      	ldrh	r3, [r3, #0]
 8008128:	b29b      	uxth	r3, r3
 800812a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	823b      	strh	r3, [r7, #16]
 8008134:	687a      	ldr	r2, [r7, #4]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	009b      	lsls	r3, r3, #2
 800813c:	441a      	add	r2, r3
 800813e:	8a3b      	ldrh	r3, [r7, #16]
 8008140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008150:	b29b      	uxth	r3, r3
 8008152:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	78db      	ldrb	r3, [r3, #3]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d020      	beq.n	800819e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	4413      	add	r3, r2
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	b29b      	uxth	r3, r3
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008172:	81bb      	strh	r3, [r7, #12]
 8008174:	89bb      	ldrh	r3, [r7, #12]
 8008176:	f083 0320 	eor.w	r3, r3, #32
 800817a:	81bb      	strh	r3, [r7, #12]
 800817c:	687a      	ldr	r2, [r7, #4]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	441a      	add	r2, r3
 8008186:	89bb      	ldrh	r3, [r7, #12]
 8008188:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800818c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008198:	b29b      	uxth	r3, r3
 800819a:	8013      	strh	r3, [r2, #0]
 800819c:	e2d5      	b.n	800874a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b4:	81fb      	strh	r3, [r7, #14]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	89fb      	ldrh	r3, [r7, #14]
 80081c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	8013      	strh	r3, [r2, #0]
 80081d6:	e2b8      	b.n	800874a <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	633b      	str	r3, [r7, #48]	; 0x30
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	461a      	mov	r2, r3
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	4413      	add	r3, r2
 80081ea:	633b      	str	r3, [r7, #48]	; 0x30
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	011a      	lsls	r2, r3, #4
 80081f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f4:	4413      	add	r3, r2
 80081f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80081fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	88db      	ldrh	r3, [r3, #6]
 8008200:	085b      	lsrs	r3, r3, #1
 8008202:	b29b      	uxth	r3, r3
 8008204:	005b      	lsls	r3, r3, #1
 8008206:	b29a      	uxth	r2, r3
 8008208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800820a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008216:	b29b      	uxth	r3, r3
 8008218:	461a      	mov	r2, r3
 800821a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800821c:	4413      	add	r3, r2
 800821e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	011a      	lsls	r2, r3, #4
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	4413      	add	r3, r2
 800822a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800822e:	627b      	str	r3, [r7, #36]	; 0x24
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	b29b      	uxth	r3, r3
 8008236:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800823a:	b29a      	uxth	r2, r3
 800823c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823e:	801a      	strh	r2, [r3, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b3e      	cmp	r3, #62	; 0x3e
 8008246:	d91d      	bls.n	8008284 <USB_ActivateEndpoint+0x2ac>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	095b      	lsrs	r3, r3, #5
 800824e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <USB_ActivateEndpoint+0x28a>
 800825c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800825e:	3b01      	subs	r3, #1
 8008260:	66bb      	str	r3, [r7, #104]	; 0x68
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	b29a      	uxth	r2, r3
 8008268:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800826a:	b29b      	uxth	r3, r3
 800826c:	029b      	lsls	r3, r3, #10
 800826e:	b29b      	uxth	r3, r3
 8008270:	4313      	orrs	r3, r2
 8008272:	b29b      	uxth	r3, r3
 8008274:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008278:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800827c:	b29a      	uxth	r2, r3
 800827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008280:	801a      	strh	r2, [r3, #0]
 8008282:	e026      	b.n	80082d2 <USB_ActivateEndpoint+0x2fa>
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	691b      	ldr	r3, [r3, #16]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10a      	bne.n	80082a2 <USB_ActivateEndpoint+0x2ca>
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	881b      	ldrh	r3, [r3, #0]
 8008290:	b29b      	uxth	r3, r3
 8008292:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008296:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800829a:	b29a      	uxth	r2, r3
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	e017      	b.n	80082d2 <USB_ActivateEndpoint+0x2fa>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	085b      	lsrs	r3, r3, #1
 80082a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <USB_ActivateEndpoint+0x2e4>
 80082b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082b8:	3301      	adds	r3, #1
 80082ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80082bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	029b      	lsls	r3, r3, #10
 80082c8:	b29b      	uxth	r3, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	881b      	ldrh	r3, [r3, #0]
 80082de:	847b      	strh	r3, [r7, #34]	; 0x22
 80082e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d01b      	beq.n	8008322 <USB_ActivateEndpoint+0x34a>
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	881b      	ldrh	r3, [r3, #0]
 80082f6:	b29b      	uxth	r3, r3
 80082f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008300:	843b      	strh	r3, [r7, #32]
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	441a      	add	r2, r3
 800830c:	8c3b      	ldrh	r3, [r7, #32]
 800830e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008312:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008316:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800831a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800831e:	b29b      	uxth	r3, r3
 8008320:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d124      	bne.n	8008374 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	4413      	add	r3, r2
 8008334:	881b      	ldrh	r3, [r3, #0]
 8008336:	b29b      	uxth	r3, r3
 8008338:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800833c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008340:	83bb      	strh	r3, [r7, #28]
 8008342:	8bbb      	ldrh	r3, [r7, #28]
 8008344:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008348:	83bb      	strh	r3, [r7, #28]
 800834a:	8bbb      	ldrh	r3, [r7, #28]
 800834c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008350:	83bb      	strh	r3, [r7, #28]
 8008352:	687a      	ldr	r2, [r7, #4]
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	441a      	add	r2, r3
 800835c:	8bbb      	ldrh	r3, [r7, #28]
 800835e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800836a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800836e:	b29b      	uxth	r3, r3
 8008370:	8013      	strh	r3, [r2, #0]
 8008372:	e1ea      	b.n	800874a <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	881b      	ldrh	r3, [r3, #0]
 8008380:	b29b      	uxth	r3, r3
 8008382:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838a:	83fb      	strh	r3, [r7, #30]
 800838c:	8bfb      	ldrh	r3, [r7, #30]
 800838e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008392:	83fb      	strh	r3, [r7, #30]
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	781b      	ldrb	r3, [r3, #0]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	441a      	add	r2, r3
 800839e:	8bfb      	ldrh	r3, [r7, #30]
 80083a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	8013      	strh	r3, [r2, #0]
 80083b4:	e1c9      	b.n	800874a <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80083b6:	683b      	ldr	r3, [r7, #0]
 80083b8:	78db      	ldrb	r3, [r3, #3]
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d11e      	bne.n	80083fc <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80083be:	687a      	ldr	r2, [r7, #4]
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	4413      	add	r3, r2
 80083c8:	881b      	ldrh	r3, [r3, #0]
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80083e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083ee:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80083f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	8013      	strh	r3, [r2, #0]
 80083fa:	e01d      	b.n	8008438 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	881b      	ldrh	r3, [r3, #0]
 8008408:	b29b      	uxth	r3, r3
 800840a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800840e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008412:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	009b      	lsls	r3, r3, #2
 800841e:	441a      	add	r2, r3
 8008420:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800842c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008434:	b29b      	uxth	r3, r3
 8008436:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008442:	b29b      	uxth	r3, r3
 8008444:	461a      	mov	r2, r3
 8008446:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008448:	4413      	add	r3, r2
 800844a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	011a      	lsls	r2, r3, #4
 8008452:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008454:	4413      	add	r3, r2
 8008456:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800845a:	65bb      	str	r3, [r7, #88]	; 0x58
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	891b      	ldrh	r3, [r3, #8]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	b29b      	uxth	r3, r3
 8008464:	005b      	lsls	r3, r3, #1
 8008466:	b29a      	uxth	r2, r3
 8008468:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800846a:	801a      	strh	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	657b      	str	r3, [r7, #84]	; 0x54
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008476:	b29b      	uxth	r3, r3
 8008478:	461a      	mov	r2, r3
 800847a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847c:	4413      	add	r3, r2
 800847e:	657b      	str	r3, [r7, #84]	; 0x54
 8008480:	683b      	ldr	r3, [r7, #0]
 8008482:	781b      	ldrb	r3, [r3, #0]
 8008484:	011a      	lsls	r2, r3, #4
 8008486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008488:	4413      	add	r3, r2
 800848a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800848e:	653b      	str	r3, [r7, #80]	; 0x50
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	895b      	ldrh	r3, [r3, #10]
 8008494:	085b      	lsrs	r3, r3, #1
 8008496:	b29b      	uxth	r3, r3
 8008498:	005b      	lsls	r3, r3, #1
 800849a:	b29a      	uxth	r2, r3
 800849c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800849e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	785b      	ldrb	r3, [r3, #1]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8093 	bne.w	80085d0 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084aa:	687a      	ldr	r2, [r7, #4]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4413      	add	r3, r2
 80084b4:	881b      	ldrh	r3, [r3, #0]
 80084b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80084ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80084be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d01b      	beq.n	80084fe <USB_ActivateEndpoint+0x526>
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4413      	add	r3, r2
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	441a      	add	r2, r3
 80084e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80084ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80084f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084fa:	b29b      	uxth	r3, r3
 80084fc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800850c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800850e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008512:	2b00      	cmp	r3, #0
 8008514:	d01b      	beq.n	800854e <USB_ActivateEndpoint+0x576>
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800853a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008546:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800854a:	b29b      	uxth	r3, r3
 800854c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008564:	873b      	strh	r3, [r7, #56]	; 0x38
 8008566:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008568:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800856c:	873b      	strh	r3, [r7, #56]	; 0x38
 800856e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008570:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008574:	873b      	strh	r3, [r7, #56]	; 0x38
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	441a      	add	r2, r3
 8008580:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008582:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008586:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800858a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800858e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008592:	b29b      	uxth	r3, r3
 8008594:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	009b      	lsls	r3, r3, #2
 800859e:	4413      	add	r3, r2
 80085a0:	881b      	ldrh	r3, [r3, #0]
 80085a2:	b29b      	uxth	r3, r3
 80085a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ac:	86fb      	strh	r3, [r7, #54]	; 0x36
 80085ae:	687a      	ldr	r2, [r7, #4]
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	441a      	add	r2, r3
 80085b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80085ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	8013      	strh	r3, [r2, #0]
 80085ce:	e0bc      	b.n	800874a <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	781b      	ldrb	r3, [r3, #0]
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	881b      	ldrh	r3, [r3, #0]
 80085dc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80085e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80085e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d01d      	beq.n	8008628 <USB_ActivateEndpoint+0x650>
 80085ec:	687a      	ldr	r2, [r7, #4]
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	781b      	ldrb	r3, [r3, #0]
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	881b      	ldrh	r3, [r3, #0]
 80085f8:	b29b      	uxth	r3, r3
 80085fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008602:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	441a      	add	r2, r3
 8008610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008614:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008618:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800861c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008624:	b29b      	uxth	r3, r3
 8008626:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	4413      	add	r3, r2
 8008632:	881b      	ldrh	r3, [r3, #0]
 8008634:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008638:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d01d      	beq.n	8008680 <USB_ActivateEndpoint+0x6a8>
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	781b      	ldrb	r3, [r3, #0]
 800864a:	009b      	lsls	r3, r3, #2
 800864c:	4413      	add	r3, r2
 800864e:	881b      	ldrh	r3, [r3, #0]
 8008650:	b29b      	uxth	r3, r3
 8008652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800865a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	781b      	ldrb	r3, [r3, #0]
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	441a      	add	r2, r3
 8008668:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800866c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008670:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008674:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008678:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800867c:	b29b      	uxth	r3, r3
 800867e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	78db      	ldrb	r3, [r3, #3]
 8008684:	2b01      	cmp	r3, #1
 8008686:	d024      	beq.n	80086d2 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	881b      	ldrh	r3, [r3, #0]
 8008694:	b29b      	uxth	r3, r3
 8008696:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80086a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80086a6:	f083 0320 	eor.w	r3, r3, #32
 80086aa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	441a      	add	r2, r3
 80086b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80086bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	8013      	strh	r3, [r2, #0]
 80086d0:	e01d      	b.n	800870e <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4413      	add	r3, r2
 80086dc:	881b      	ldrh	r3, [r3, #0]
 80086de:	b29b      	uxth	r3, r3
 80086e0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086e8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80086ec:	687a      	ldr	r2, [r7, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	441a      	add	r2, r3
 80086f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80086fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800870a:	b29b      	uxth	r3, r3
 800870c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	009b      	lsls	r3, r3, #2
 8008716:	4413      	add	r3, r2
 8008718:	881b      	ldrh	r3, [r3, #0]
 800871a:	b29b      	uxth	r3, r3
 800871c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008724:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	441a      	add	r2, r3
 8008732:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800873a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800873e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008746:	b29b      	uxth	r3, r3
 8008748:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800874a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800874e:	4618      	mov	r0, r3
 8008750:	3774      	adds	r7, #116	; 0x74
 8008752:	46bd      	mov	sp, r7
 8008754:	bc80      	pop	{r7}
 8008756:	4770      	bx	lr

08008758 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008758:	b480      	push	{r7}
 800875a:	b08d      	sub	sp, #52	; 0x34
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	7b1b      	ldrb	r3, [r3, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 808e 	bne.w	8008888 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	785b      	ldrb	r3, [r3, #1]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d044      	beq.n	80087fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	81bb      	strh	r3, [r7, #12]
 8008782:	89bb      	ldrh	r3, [r7, #12]
 8008784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008788:	2b00      	cmp	r3, #0
 800878a:	d01b      	beq.n	80087c4 <USB_DeactivateEndpoint+0x6c>
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4413      	add	r3, r2
 8008796:	881b      	ldrh	r3, [r3, #0]
 8008798:	b29b      	uxth	r3, r3
 800879a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800879e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a2:	817b      	strh	r3, [r7, #10]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	781b      	ldrb	r3, [r3, #0]
 80087aa:	009b      	lsls	r3, r3, #2
 80087ac:	441a      	add	r2, r3
 80087ae:	897b      	ldrh	r3, [r7, #10]
 80087b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	881b      	ldrh	r3, [r3, #0]
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087da:	813b      	strh	r3, [r7, #8]
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	009b      	lsls	r3, r3, #2
 80087e4:	441a      	add	r2, r3
 80087e6:	893b      	ldrh	r3, [r7, #8]
 80087e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	8013      	strh	r3, [r2, #0]
 80087fc:	e192      	b.n	8008b24 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80087fe:	687a      	ldr	r2, [r7, #4]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	4413      	add	r3, r2
 8008808:	881b      	ldrh	r3, [r3, #0]
 800880a:	827b      	strh	r3, [r7, #18]
 800880c:	8a7b      	ldrh	r3, [r7, #18]
 800880e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01b      	beq.n	800884e <USB_DeactivateEndpoint+0xf6>
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	881b      	ldrh	r3, [r3, #0]
 8008822:	b29b      	uxth	r3, r3
 8008824:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008828:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800882c:	823b      	strh	r3, [r7, #16]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	441a      	add	r2, r3
 8008838:	8a3b      	ldrh	r3, [r7, #16]
 800883a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800883e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008842:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800884a:	b29b      	uxth	r3, r3
 800884c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	b29b      	uxth	r3, r3
 800885c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008864:	81fb      	strh	r3, [r7, #14]
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	781b      	ldrb	r3, [r3, #0]
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	441a      	add	r2, r3
 8008870:	89fb      	ldrh	r3, [r7, #14]
 8008872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800887a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800887e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008882:	b29b      	uxth	r3, r3
 8008884:	8013      	strh	r3, [r2, #0]
 8008886:	e14d      	b.n	8008b24 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	785b      	ldrb	r3, [r3, #1]
 800888c:	2b00      	cmp	r3, #0
 800888e:	f040 80a5 	bne.w	80089dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	843b      	strh	r3, [r7, #32]
 80088a0:	8c3b      	ldrh	r3, [r7, #32]
 80088a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d01b      	beq.n	80088e2 <USB_DeactivateEndpoint+0x18a>
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	4413      	add	r3, r2
 80088b4:	881b      	ldrh	r3, [r3, #0]
 80088b6:	b29b      	uxth	r3, r3
 80088b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088c0:	83fb      	strh	r3, [r7, #30]
 80088c2:	687a      	ldr	r2, [r7, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	441a      	add	r2, r3
 80088cc:	8bfb      	ldrh	r3, [r7, #30]
 80088ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80088da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088de:	b29b      	uxth	r3, r3
 80088e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	881b      	ldrh	r3, [r3, #0]
 80088ee:	83bb      	strh	r3, [r7, #28]
 80088f0:	8bbb      	ldrh	r3, [r7, #28]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d01b      	beq.n	8008932 <USB_DeactivateEndpoint+0x1da>
 80088fa:	687a      	ldr	r2, [r7, #4]
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	4413      	add	r3, r2
 8008904:	881b      	ldrh	r3, [r3, #0]
 8008906:	b29b      	uxth	r3, r3
 8008908:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800890c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008910:	837b      	strh	r3, [r7, #26]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	441a      	add	r2, r3
 800891c:	8b7b      	ldrh	r3, [r7, #26]
 800891e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008922:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800892a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800892e:	b29b      	uxth	r3, r3
 8008930:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	4413      	add	r3, r2
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29b      	uxth	r3, r3
 8008940:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008944:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008948:	833b      	strh	r3, [r7, #24]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	441a      	add	r2, r3
 8008954:	8b3b      	ldrh	r3, [r7, #24]
 8008956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800895a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800895e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008962:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008966:	b29b      	uxth	r3, r3
 8008968:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800896a:	687a      	ldr	r2, [r7, #4]
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	781b      	ldrb	r3, [r3, #0]
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	881b      	ldrh	r3, [r3, #0]
 8008976:	b29b      	uxth	r3, r3
 8008978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800897c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008980:	82fb      	strh	r3, [r7, #22]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	781b      	ldrb	r3, [r3, #0]
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	441a      	add	r2, r3
 800898c:	8afb      	ldrh	r3, [r7, #22]
 800898e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800899a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800899e:	b29b      	uxth	r3, r3
 80089a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	781b      	ldrb	r3, [r3, #0]
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	4413      	add	r3, r2
 80089ac:	881b      	ldrh	r3, [r3, #0]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089b8:	82bb      	strh	r3, [r7, #20]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	441a      	add	r2, r3
 80089c4:	8abb      	ldrh	r3, [r7, #20]
 80089c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80089ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	8013      	strh	r3, [r2, #0]
 80089da:	e0a3      	b.n	8008b24 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089dc:	687a      	ldr	r2, [r7, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80089ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80089ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d01b      	beq.n	8008a2c <USB_DeactivateEndpoint+0x2d4>
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	b29b      	uxth	r3, r3
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	441a      	add	r2, r3
 8008a16:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008a18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	781b      	ldrb	r3, [r3, #0]
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	881b      	ldrh	r3, [r3, #0]
 8008a38:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008a3a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01b      	beq.n	8008a7c <USB_DeactivateEndpoint+0x324>
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a5a:	853b      	strh	r3, [r7, #40]	; 0x28
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	781b      	ldrb	r3, [r3, #0]
 8008a62:	009b      	lsls	r3, r3, #2
 8008a64:	441a      	add	r2, r3
 8008a66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	009b      	lsls	r3, r3, #2
 8008a84:	4413      	add	r3, r2
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a92:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	441a      	add	r2, r3
 8008a9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008aa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008aa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008aa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aca:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008ad8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008adc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	881b      	ldrh	r3, [r3, #0]
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b02:	847b      	strh	r3, [r7, #34]	; 0x22
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	441a      	add	r2, r3
 8008b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b20:	b29b      	uxth	r3, r3
 8008b22:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3734      	adds	r7, #52	; 0x34
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bc80      	pop	{r7}
 8008b2e:	4770      	bx	lr

08008b30 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b0c2      	sub	sp, #264	; 0x108
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b3e:	6018      	str	r0, [r3, #0]
 8008b40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b48:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	f040 86b7 	bne.w	80098ca <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008b5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	699a      	ldr	r2, [r3, #24]
 8008b68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	691b      	ldr	r3, [r3, #16]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d908      	bls.n	8008b8a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8008b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008b88:	e007      	b.n	8008b9a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008b8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	7b1b      	ldrb	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d13a      	bne.n	8008c20 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6959      	ldr	r1, [r3, #20]
 8008bb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	88da      	ldrh	r2, [r3, #6]
 8008bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008bcc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008bd0:	6800      	ldr	r0, [r0, #0]
 8008bd2:	f001 fc9c 	bl	800a50e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008bd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bda:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	613b      	str	r3, [r7, #16]
 8008be2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	011a      	lsls	r2, r3, #4
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	4413      	add	r3, r2
 8008c0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008c10:	60fb      	str	r3, [r7, #12]
 8008c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c16:	b29a      	uxth	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	801a      	strh	r2, [r3, #0]
 8008c1c:	f000 be1f 	b.w	800985e <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008c20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	78db      	ldrb	r3, [r3, #3]
 8008c2c:	2b02      	cmp	r3, #2
 8008c2e:	f040 8462 	bne.w	80094f6 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
 8008c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	f240 83df 	bls.w	800940e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008c50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	4413      	add	r3, r2
 8008c6a:	881b      	ldrh	r3, [r3, #0]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c76:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008c7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	441a      	add	r2, r3
 8008c94:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008c98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ca0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca8:	b29b      	uxth	r3, r3
 8008caa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008cac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a1a      	ldr	r2, [r3, #32]
 8008cb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cbc:	1ad2      	subs	r2, r2, r3
 8008cbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	4413      	add	r3, r2
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 81c7 	beq.w	8009080 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	633b      	str	r3, [r7, #48]	; 0x30
 8008cfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	785b      	ldrb	r3, [r3, #1]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d177      	bne.n	8008dfe <USB_EPStartXfer+0x2ce>
 8008d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	461a      	mov	r2, r3
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	4413      	add	r3, r2
 8008d30:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	011a      	lsls	r2, r3, #4
 8008d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d42:	4413      	add	r3, r2
 8008d44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008d48:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d4c:	881b      	ldrh	r3, [r3, #0]
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d54:	b29a      	uxth	r2, r3
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	801a      	strh	r2, [r3, #0]
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8008d60:	d921      	bls.n	8008da6 <USB_EPStartXfer+0x276>
 8008d62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d66:	095b      	lsrs	r3, r3, #5
 8008d68:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d70:	f003 031f 	and.w	r3, r3, #31
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d104      	bne.n	8008d82 <USB_EPStartXfer+0x252>
 8008d78:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	b29a      	uxth	r2, r3
 8008d88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	029b      	lsls	r3, r3, #10
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	4313      	orrs	r3, r2
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008d9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	801a      	strh	r2, [r3, #0]
 8008da4:	e050      	b.n	8008e48 <USB_EPStartXfer+0x318>
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10a      	bne.n	8008dc4 <USB_EPStartXfer+0x294>
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	881b      	ldrh	r3, [r3, #0]
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008db8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	801a      	strh	r2, [r3, #0]
 8008dc2:	e041      	b.n	8008e48 <USB_EPStartXfer+0x318>
 8008dc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc8:	085b      	lsrs	r3, r3, #1
 8008dca:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd2:	f003 0301 	and.w	r3, r3, #1
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d004      	beq.n	8008de4 <USB_EPStartXfer+0x2b4>
 8008dda:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dde:	3301      	adds	r3, #1
 8008de0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	029b      	lsls	r3, r3, #10
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	4313      	orrs	r3, r2
 8008df6:	b29a      	uxth	r2, r3
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	801a      	strh	r2, [r3, #0]
 8008dfc:	e024      	b.n	8008e48 <USB_EPStartXfer+0x318>
 8008dfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	2b01      	cmp	r3, #1
 8008e0c:	d11c      	bne.n	8008e48 <USB_EPStartXfer+0x318>
 8008e0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e1c:	b29b      	uxth	r3, r3
 8008e1e:	461a      	mov	r2, r3
 8008e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e22:	4413      	add	r3, r2
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
 8008e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	011a      	lsls	r2, r3, #4
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	4413      	add	r3, r2
 8008e38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	895b      	ldrh	r3, [r3, #10]
 8008e54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	6959      	ldr	r1, [r3, #20]
 8008e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008e6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008e72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	f001 fb49 	bl	800a50e <USB_WritePMA>
            ep->xfer_buff += len;
 8008e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e8c:	441a      	add	r2, r3
 8008e8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	6a1a      	ldr	r2, [r3, #32]
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d90f      	bls.n	8008ed6 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6a1a      	ldr	r2, [r3, #32]
 8008ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ecc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	621a      	str	r2, [r3, #32]
 8008ed4:	e00e      	b.n	8008ef4 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ed6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ef4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	785b      	ldrb	r3, [r3, #1]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d177      	bne.n	8008ff4 <USB_EPStartXfer+0x4c4>
 8008f04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	61bb      	str	r3, [r7, #24]
 8008f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f1e:	b29b      	uxth	r3, r3
 8008f20:	461a      	mov	r2, r3
 8008f22:	69bb      	ldr	r3, [r7, #24]
 8008f24:	4413      	add	r3, r2
 8008f26:	61bb      	str	r3, [r7, #24]
 8008f28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	011a      	lsls	r2, r3, #4
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008f3e:	617b      	str	r3, [r7, #20]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	881b      	ldrh	r3, [r3, #0]
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	801a      	strh	r2, [r3, #0]
 8008f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f54:	2b3e      	cmp	r3, #62	; 0x3e
 8008f56:	d921      	bls.n	8008f9c <USB_EPStartXfer+0x46c>
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	095b      	lsrs	r3, r3, #5
 8008f5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f66:	f003 031f 	and.w	r3, r3, #31
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d104      	bne.n	8008f78 <USB_EPStartXfer+0x448>
 8008f6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f72:	3b01      	subs	r3, #1
 8008f74:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29a      	uxth	r2, r3
 8008f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	029b      	lsls	r3, r3, #10
 8008f86:	b29b      	uxth	r3, r3
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	b29b      	uxth	r3, r3
 8008f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f94:	b29a      	uxth	r2, r3
 8008f96:	697b      	ldr	r3, [r7, #20]
 8008f98:	801a      	strh	r2, [r3, #0]
 8008f9a:	e056      	b.n	800904a <USB_EPStartXfer+0x51a>
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <USB_EPStartXfer+0x48a>
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	801a      	strh	r2, [r3, #0]
 8008fb8:	e047      	b.n	800904a <USB_EPStartXfer+0x51a>
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	085b      	lsrs	r3, r3, #1
 8008fc0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <USB_EPStartXfer+0x4aa>
 8008fd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	881b      	ldrh	r3, [r3, #0]
 8008fde:	b29a      	uxth	r2, r3
 8008fe0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	029b      	lsls	r3, r3, #10
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	4313      	orrs	r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	801a      	strh	r2, [r3, #0]
 8008ff2:	e02a      	b.n	800904a <USB_EPStartXfer+0x51a>
 8008ff4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ff8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	785b      	ldrb	r3, [r3, #1]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d122      	bne.n	800904a <USB_EPStartXfer+0x51a>
 8009004:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009008:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	623b      	str	r3, [r7, #32]
 8009010:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009014:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800901e:	b29b      	uxth	r3, r3
 8009020:	461a      	mov	r2, r3
 8009022:	6a3b      	ldr	r3, [r7, #32]
 8009024:	4413      	add	r3, r2
 8009026:	623b      	str	r3, [r7, #32]
 8009028:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800902c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	781b      	ldrb	r3, [r3, #0]
 8009034:	011a      	lsls	r2, r3, #4
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	4413      	add	r3, r2
 800903a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800903e:	61fb      	str	r3, [r7, #28]
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009044:	b29a      	uxth	r2, r3
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800904a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800904e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	891b      	ldrh	r3, [r3, #8]
 8009056:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800905e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6959      	ldr	r1, [r3, #20]
 8009066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906a:	b29b      	uxth	r3, r3
 800906c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009070:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009074:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009078:	6800      	ldr	r0, [r0, #0]
 800907a:	f001 fa48 	bl	800a50e <USB_WritePMA>
 800907e:	e3ee      	b.n	800985e <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009084:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d177      	bne.n	8009180 <USB_EPStartXfer+0x650>
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	64bb      	str	r3, [r7, #72]	; 0x48
 800909c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	461a      	mov	r2, r3
 80090ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090b0:	4413      	add	r3, r2
 80090b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80090b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	011a      	lsls	r2, r3, #4
 80090c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090c4:	4413      	add	r3, r2
 80090c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090ca:	647b      	str	r3, [r7, #68]	; 0x44
 80090cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090ce:	881b      	ldrh	r3, [r3, #0]
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090d6:	b29a      	uxth	r2, r3
 80090d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090da:	801a      	strh	r2, [r3, #0]
 80090dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e0:	2b3e      	cmp	r3, #62	; 0x3e
 80090e2:	d921      	bls.n	8009128 <USB_EPStartXfer+0x5f8>
 80090e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090e8:	095b      	lsrs	r3, r3, #5
 80090ea:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80090ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f2:	f003 031f 	and.w	r3, r3, #31
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <USB_EPStartXfer+0x5d4>
 80090fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80090fe:	3b01      	subs	r3, #1
 8009100:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29a      	uxth	r2, r3
 800910a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800910e:	b29b      	uxth	r3, r3
 8009110:	029b      	lsls	r3, r3, #10
 8009112:	b29b      	uxth	r3, r3
 8009114:	4313      	orrs	r3, r2
 8009116:	b29b      	uxth	r3, r3
 8009118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800911c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009120:	b29a      	uxth	r2, r3
 8009122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009124:	801a      	strh	r2, [r3, #0]
 8009126:	e056      	b.n	80091d6 <USB_EPStartXfer+0x6a6>
 8009128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800912c:	2b00      	cmp	r3, #0
 800912e:	d10a      	bne.n	8009146 <USB_EPStartXfer+0x616>
 8009130:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009132:	881b      	ldrh	r3, [r3, #0]
 8009134:	b29b      	uxth	r3, r3
 8009136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800913a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800913e:	b29a      	uxth	r2, r3
 8009140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009142:	801a      	strh	r2, [r3, #0]
 8009144:	e047      	b.n	80091d6 <USB_EPStartXfer+0x6a6>
 8009146:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800914a:	085b      	lsrs	r3, r3, #1
 800914c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009154:	f003 0301 	and.w	r3, r3, #1
 8009158:	2b00      	cmp	r3, #0
 800915a:	d004      	beq.n	8009166 <USB_EPStartXfer+0x636>
 800915c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009160:	3301      	adds	r3, #1
 8009162:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009166:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29a      	uxth	r2, r3
 800916c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009170:	b29b      	uxth	r3, r3
 8009172:	029b      	lsls	r3, r3, #10
 8009174:	b29b      	uxth	r3, r3
 8009176:	4313      	orrs	r3, r2
 8009178:	b29a      	uxth	r2, r3
 800917a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800917c:	801a      	strh	r2, [r3, #0]
 800917e:	e02a      	b.n	80091d6 <USB_EPStartXfer+0x6a6>
 8009180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	785b      	ldrb	r3, [r3, #1]
 800918c:	2b01      	cmp	r3, #1
 800918e:	d122      	bne.n	80091d6 <USB_EPStartXfer+0x6a6>
 8009190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009194:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	653b      	str	r3, [r7, #80]	; 0x50
 800919c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091b0:	4413      	add	r3, r2
 80091b2:	653b      	str	r3, [r7, #80]	; 0x50
 80091b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	011a      	lsls	r2, r3, #4
 80091c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091c4:	4413      	add	r3, r2
 80091c6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80091ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80091d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	891b      	ldrh	r3, [r3, #8]
 80091e2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6959      	ldr	r1, [r3, #20]
 80091f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091fc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009200:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009204:	6800      	ldr	r0, [r0, #0]
 8009206:	f001 f982 	bl	800a50e <USB_WritePMA>
            ep->xfer_buff += len;
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	695a      	ldr	r2, [r3, #20]
 8009216:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800921a:	441a      	add	r2, r3
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6a1a      	ldr	r2, [r3, #32]
 8009234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	429a      	cmp	r2, r3
 8009242:	d90f      	bls.n	8009264 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6a1a      	ldr	r2, [r3, #32]
 8009250:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009254:	1ad2      	subs	r2, r2, r3
 8009256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	621a      	str	r2, [r3, #32]
 8009262:	e00e      	b.n	8009282 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009264:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009268:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	6a1b      	ldr	r3, [r3, #32]
 8009270:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2200      	movs	r2, #0
 8009280:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009282:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009286:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	643b      	str	r3, [r7, #64]	; 0x40
 800928e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	785b      	ldrb	r3, [r3, #1]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d177      	bne.n	800938e <USB_EPStartXfer+0x85e>
 800929e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80092aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	461a      	mov	r2, r3
 80092bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092be:	4413      	add	r3, r2
 80092c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	011a      	lsls	r2, r3, #4
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	4413      	add	r3, r2
 80092d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80092d8:	637b      	str	r3, [r7, #52]	; 0x34
 80092da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29b      	uxth	r3, r3
 80092e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092e4:	b29a      	uxth	r2, r3
 80092e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092e8:	801a      	strh	r2, [r3, #0]
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ee:	2b3e      	cmp	r3, #62	; 0x3e
 80092f0:	d921      	bls.n	8009336 <USB_EPStartXfer+0x806>
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	095b      	lsrs	r3, r3, #5
 80092f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80092fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009300:	f003 031f 	and.w	r3, r3, #31
 8009304:	2b00      	cmp	r3, #0
 8009306:	d104      	bne.n	8009312 <USB_EPStartXfer+0x7e2>
 8009308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800930c:	3b01      	subs	r3, #1
 800930e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	b29a      	uxth	r2, r3
 8009318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931c:	b29b      	uxth	r3, r3
 800931e:	029b      	lsls	r3, r3, #10
 8009320:	b29b      	uxth	r3, r3
 8009322:	4313      	orrs	r3, r2
 8009324:	b29b      	uxth	r3, r3
 8009326:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800932a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800932e:	b29a      	uxth	r2, r3
 8009330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009332:	801a      	strh	r2, [r3, #0]
 8009334:	e050      	b.n	80093d8 <USB_EPStartXfer+0x8a8>
 8009336:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800933a:	2b00      	cmp	r3, #0
 800933c:	d10a      	bne.n	8009354 <USB_EPStartXfer+0x824>
 800933e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009340:	881b      	ldrh	r3, [r3, #0]
 8009342:	b29b      	uxth	r3, r3
 8009344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800934c:	b29a      	uxth	r2, r3
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	801a      	strh	r2, [r3, #0]
 8009352:	e041      	b.n	80093d8 <USB_EPStartXfer+0x8a8>
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009358:	085b      	lsrs	r3, r3, #1
 800935a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800935e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d004      	beq.n	8009374 <USB_EPStartXfer+0x844>
 800936a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800936e:	3301      	adds	r3, #1
 8009370:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009376:	881b      	ldrh	r3, [r3, #0]
 8009378:	b29a      	uxth	r2, r3
 800937a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800937e:	b29b      	uxth	r3, r3
 8009380:	029b      	lsls	r3, r3, #10
 8009382:	b29b      	uxth	r3, r3
 8009384:	4313      	orrs	r3, r2
 8009386:	b29a      	uxth	r2, r3
 8009388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800938a:	801a      	strh	r2, [r3, #0]
 800938c:	e024      	b.n	80093d8 <USB_EPStartXfer+0x8a8>
 800938e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	2b01      	cmp	r3, #1
 800939c:	d11c      	bne.n	80093d8 <USB_EPStartXfer+0x8a8>
 800939e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	461a      	mov	r2, r3
 80093b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093b2:	4413      	add	r3, r2
 80093b4:	643b      	str	r3, [r7, #64]	; 0x40
 80093b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	011a      	lsls	r2, r3, #4
 80093c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093c6:	4413      	add	r3, r2
 80093c8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80093cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	895b      	ldrh	r3, [r3, #10]
 80093e4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	6959      	ldr	r1, [r3, #20]
 80093f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093fe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009402:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009406:	6800      	ldr	r0, [r0, #0]
 8009408:	f001 f881 	bl	800a50e <USB_WritePMA>
 800940c:	e227      	b.n	800985e <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800940e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009412:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800941e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009422:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	881b      	ldrh	r3, [r3, #0]
 800943a:	b29b      	uxth	r3, r3
 800943c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009444:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	441a      	add	r2, r3
 8009462:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800946a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800946e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009476:	b29b      	uxth	r3, r3
 8009478:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800947a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800947e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009494:	b29b      	uxth	r3, r3
 8009496:	461a      	mov	r2, r3
 8009498:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800949a:	4413      	add	r3, r2
 800949c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800949e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	011a      	lsls	r2, r3, #4
 80094ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094ae:	4413      	add	r3, r2
 80094b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80094b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80094be:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	891b      	ldrh	r3, [r3, #8]
 80094cc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80094d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6959      	ldr	r1, [r3, #20]
 80094dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80094e6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80094ea:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80094ee:	6800      	ldr	r0, [r0, #0]
 80094f0:	f001 f80d 	bl	800a50e <USB_WritePMA>
 80094f4:	e1b3      	b.n	800985e <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80094f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6a1a      	ldr	r2, [r3, #32]
 8009502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009506:	1ad2      	subs	r2, r2, r3
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	b29b      	uxth	r3, r3
 8009532:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009536:	2b00      	cmp	r3, #0
 8009538:	f000 80c6 	beq.w	80096c8 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	673b      	str	r3, [r7, #112]	; 0x70
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d177      	bne.n	8009648 <USB_EPStartXfer+0xb18>
 8009558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	66bb      	str	r3, [r7, #104]	; 0x68
 8009564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009568:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009572:	b29b      	uxth	r3, r3
 8009574:	461a      	mov	r2, r3
 8009576:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009578:	4413      	add	r3, r2
 800957a:	66bb      	str	r3, [r7, #104]	; 0x68
 800957c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	011a      	lsls	r2, r3, #4
 800958a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800958c:	4413      	add	r3, r2
 800958e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009592:	667b      	str	r3, [r7, #100]	; 0x64
 8009594:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009596:	881b      	ldrh	r3, [r3, #0]
 8009598:	b29b      	uxth	r3, r3
 800959a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800959e:	b29a      	uxth	r2, r3
 80095a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095a2:	801a      	strh	r2, [r3, #0]
 80095a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095a8:	2b3e      	cmp	r3, #62	; 0x3e
 80095aa:	d921      	bls.n	80095f0 <USB_EPStartXfer+0xac0>
 80095ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095b0:	095b      	lsrs	r3, r3, #5
 80095b2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ba:	f003 031f 	and.w	r3, r3, #31
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d104      	bne.n	80095cc <USB_EPStartXfer+0xa9c>
 80095c2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095c6:	3b01      	subs	r3, #1
 80095c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80095cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80095d6:	b29b      	uxth	r3, r3
 80095d8:	029b      	lsls	r3, r3, #10
 80095da:	b29b      	uxth	r3, r3
 80095dc:	4313      	orrs	r3, r2
 80095de:	b29b      	uxth	r3, r3
 80095e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095ec:	801a      	strh	r2, [r3, #0]
 80095ee:	e050      	b.n	8009692 <USB_EPStartXfer+0xb62>
 80095f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10a      	bne.n	800960e <USB_EPStartXfer+0xade>
 80095f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80095fa:	881b      	ldrh	r3, [r3, #0]
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009602:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009606:	b29a      	uxth	r2, r3
 8009608:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800960a:	801a      	strh	r2, [r3, #0]
 800960c:	e041      	b.n	8009692 <USB_EPStartXfer+0xb62>
 800960e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009612:	085b      	lsrs	r3, r3, #1
 8009614:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009618:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961c:	f003 0301 	and.w	r3, r3, #1
 8009620:	2b00      	cmp	r3, #0
 8009622:	d004      	beq.n	800962e <USB_EPStartXfer+0xafe>
 8009624:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009628:	3301      	adds	r3, #1
 800962a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800962e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009630:	881b      	ldrh	r3, [r3, #0]
 8009632:	b29a      	uxth	r2, r3
 8009634:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009638:	b29b      	uxth	r3, r3
 800963a:	029b      	lsls	r3, r3, #10
 800963c:	b29b      	uxth	r3, r3
 800963e:	4313      	orrs	r3, r2
 8009640:	b29a      	uxth	r2, r3
 8009642:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009644:	801a      	strh	r2, [r3, #0]
 8009646:	e024      	b.n	8009692 <USB_EPStartXfer+0xb62>
 8009648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	785b      	ldrb	r3, [r3, #1]
 8009654:	2b01      	cmp	r3, #1
 8009656:	d11c      	bne.n	8009692 <USB_EPStartXfer+0xb62>
 8009658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009666:	b29b      	uxth	r3, r3
 8009668:	461a      	mov	r2, r3
 800966a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800966c:	4413      	add	r3, r2
 800966e:	673b      	str	r3, [r7, #112]	; 0x70
 8009670:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009674:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	781b      	ldrb	r3, [r3, #0]
 800967c:	011a      	lsls	r2, r3, #4
 800967e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009680:	4413      	add	r3, r2
 8009682:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800968c:	b29a      	uxth	r2, r3
 800968e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009690:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009692:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009696:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	895b      	ldrh	r3, [r3, #10]
 800969e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6959      	ldr	r1, [r3, #20]
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096b8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096bc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096c0:	6800      	ldr	r0, [r0, #0]
 80096c2:	f000 ff24 	bl	800a50e <USB_WritePMA>
 80096c6:	e0ca      	b.n	800985e <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d177      	bne.n	80097c8 <USB_EPStartXfer+0xc98>
 80096d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	461a      	mov	r2, r3
 80096f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80096f8:	4413      	add	r3, r2
 80096fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	011a      	lsls	r2, r3, #4
 800970a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800970c:	4413      	add	r3, r2
 800970e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009712:	67bb      	str	r3, [r7, #120]	; 0x78
 8009714:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009716:	881b      	ldrh	r3, [r3, #0]
 8009718:	b29b      	uxth	r3, r3
 800971a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800971e:	b29a      	uxth	r2, r3
 8009720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009722:	801a      	strh	r2, [r3, #0]
 8009724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009728:	2b3e      	cmp	r3, #62	; 0x3e
 800972a:	d921      	bls.n	8009770 <USB_EPStartXfer+0xc40>
 800972c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009730:	095b      	lsrs	r3, r3, #5
 8009732:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973a:	f003 031f 	and.w	r3, r3, #31
 800973e:	2b00      	cmp	r3, #0
 8009740:	d104      	bne.n	800974c <USB_EPStartXfer+0xc1c>
 8009742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009746:	3b01      	subs	r3, #1
 8009748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800974c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29a      	uxth	r2, r3
 8009752:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009756:	b29b      	uxth	r3, r3
 8009758:	029b      	lsls	r3, r3, #10
 800975a:	b29b      	uxth	r3, r3
 800975c:	4313      	orrs	r3, r2
 800975e:	b29b      	uxth	r3, r3
 8009760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009768:	b29a      	uxth	r2, r3
 800976a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800976c:	801a      	strh	r2, [r3, #0]
 800976e:	e05c      	b.n	800982a <USB_EPStartXfer+0xcfa>
 8009770:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <USB_EPStartXfer+0xc5e>
 8009778:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800977a:	881b      	ldrh	r3, [r3, #0]
 800977c:	b29b      	uxth	r3, r3
 800977e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009786:	b29a      	uxth	r2, r3
 8009788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800978a:	801a      	strh	r2, [r3, #0]
 800978c:	e04d      	b.n	800982a <USB_EPStartXfer+0xcfa>
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009792:	085b      	lsrs	r3, r3, #1
 8009794:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009798:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d004      	beq.n	80097ae <USB_EPStartXfer+0xc7e>
 80097a4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097a8:	3301      	adds	r3, #1
 80097aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80097ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097b0:	881b      	ldrh	r3, [r3, #0]
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	029b      	lsls	r3, r3, #10
 80097bc:	b29b      	uxth	r3, r3
 80097be:	4313      	orrs	r3, r2
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097c4:	801a      	strh	r2, [r3, #0]
 80097c6:	e030      	b.n	800982a <USB_EPStartXfer+0xcfa>
 80097c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	785b      	ldrb	r3, [r3, #1]
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d128      	bne.n	800982a <USB_EPStartXfer+0xcfa>
 80097d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80097e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097f4:	b29b      	uxth	r3, r3
 80097f6:	461a      	mov	r2, r3
 80097f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097fc:	4413      	add	r3, r2
 80097fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	011a      	lsls	r2, r3, #4
 8009810:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009814:	4413      	add	r3, r2
 8009816:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800981a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800981e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009822:	b29a      	uxth	r2, r3
 8009824:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009828:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800982a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800982e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	891b      	ldrh	r3, [r3, #8]
 8009836:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	6959      	ldr	r1, [r3, #20]
 8009846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984a:	b29b      	uxth	r3, r3
 800984c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009850:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009854:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009858:	6800      	ldr	r0, [r0, #0]
 800985a:	f000 fe58 	bl	800a50e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800985e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009866:	681a      	ldr	r2, [r3, #0]
 8009868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	4413      	add	r3, r2
 8009878:	881b      	ldrh	r3, [r3, #0]
 800987a:	b29b      	uxth	r3, r3
 800987c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009884:	817b      	strh	r3, [r7, #10]
 8009886:	897b      	ldrh	r3, [r7, #10]
 8009888:	f083 0310 	eor.w	r3, r3, #16
 800988c:	817b      	strh	r3, [r7, #10]
 800988e:	897b      	ldrh	r3, [r7, #10]
 8009890:	f083 0320 	eor.w	r3, r3, #32
 8009894:	817b      	strh	r3, [r7, #10]
 8009896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800989e:	681a      	ldr	r2, [r3, #0]
 80098a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	441a      	add	r2, r3
 80098b0:	897b      	ldrh	r3, [r7, #10]
 80098b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	8013      	strh	r3, [r2, #0]
 80098c6:	f000 bcde 	b.w	800a286 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80098ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	7b1b      	ldrb	r3, [r3, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f040 80bb 	bne.w	8009a52 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80098dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	699a      	ldr	r2, [r3, #24]
 80098e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d917      	bls.n	8009928 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80098f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8009908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	699a      	ldr	r2, [r3, #24]
 8009914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009918:	1ad2      	subs	r2, r2, r3
 800991a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	619a      	str	r2, [r3, #24]
 8009926:	e00e      	b.n	8009946 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8009928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8009938:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800993c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2200      	movs	r2, #0
 8009944:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009962:	b29b      	uxth	r3, r3
 8009964:	461a      	mov	r2, r3
 8009966:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800996a:	4413      	add	r3, r2
 800996c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	011a      	lsls	r2, r3, #4
 800997e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009982:	4413      	add	r3, r2
 8009984:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009988:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800998c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009998:	b29a      	uxth	r2, r3
 800999a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a4:	2b3e      	cmp	r3, #62	; 0x3e
 80099a6:	d924      	bls.n	80099f2 <USB_EPStartXfer+0xec2>
 80099a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b6:	f003 031f 	and.w	r3, r3, #31
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d104      	bne.n	80099c8 <USB_EPStartXfer+0xe98>
 80099be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099c2:	3b01      	subs	r3, #1
 80099c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80099c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099cc:	881b      	ldrh	r3, [r3, #0]
 80099ce:	b29a      	uxth	r2, r3
 80099d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	029b      	lsls	r3, r3, #10
 80099d8:	b29b      	uxth	r3, r3
 80099da:	4313      	orrs	r3, r2
 80099dc:	b29b      	uxth	r3, r3
 80099de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099e6:	b29a      	uxth	r2, r3
 80099e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	f000 bc10 	b.w	800a212 <USB_EPStartXfer+0x16e2>
 80099f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d10c      	bne.n	8009a14 <USB_EPStartXfer+0xee4>
 80099fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a10:	801a      	strh	r2, [r3, #0]
 8009a12:	e3fe      	b.n	800a212 <USB_EPStartXfer+0x16e2>
 8009a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a18:	085b      	lsrs	r3, r3, #1
 8009a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a22:	f003 0301 	and.w	r3, r3, #1
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d004      	beq.n	8009a34 <USB_EPStartXfer+0xf04>
 8009a2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a2e:	3301      	adds	r3, #1
 8009a30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	029b      	lsls	r3, r3, #10
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	4313      	orrs	r3, r2
 8009a48:	b29a      	uxth	r2, r3
 8009a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a4e:	801a      	strh	r2, [r3, #0]
 8009a50:	e3df      	b.n	800a212 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009a52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	78db      	ldrb	r3, [r3, #3]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	f040 8218 	bne.w	8009e94 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009a64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	785b      	ldrb	r3, [r3, #1]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f040 809d 	bne.w	8009bb0 <USB_EPStartXfer+0x1080>
 8009a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	461a      	mov	r2, r3
 8009a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	011a      	lsls	r2, r3, #4
 8009aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ab2:	4413      	add	r3, r2
 8009ab4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009ab8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009abc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ac0:	881b      	ldrh	r3, [r3, #0]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ac8:	b29a      	uxth	r2, r3
 8009aca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009ace:	801a      	strh	r2, [r3, #0]
 8009ad0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	2b3e      	cmp	r3, #62	; 0x3e
 8009ade:	d92b      	bls.n	8009b38 <USB_EPStartXfer+0x1008>
 8009ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	095b      	lsrs	r3, r3, #5
 8009aee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	f003 031f 	and.w	r3, r3, #31
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d104      	bne.n	8009b10 <USB_EPStartXfer+0xfe0>
 8009b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b0a:	3b01      	subs	r3, #1
 8009b0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	b29a      	uxth	r2, r3
 8009b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	029b      	lsls	r3, r3, #10
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	4313      	orrs	r3, r2
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b2e:	b29a      	uxth	r2, r3
 8009b30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b34:	801a      	strh	r2, [r3, #0]
 8009b36:	e070      	b.n	8009c1a <USB_EPStartXfer+0x10ea>
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10c      	bne.n	8009b62 <USB_EPStartXfer+0x1032>
 8009b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b5e:	801a      	strh	r2, [r3, #0]
 8009b60:	e05b      	b.n	8009c1a <USB_EPStartXfer+0x10ea>
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	085b      	lsrs	r3, r3, #1
 8009b70:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	f003 0301 	and.w	r3, r3, #1
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d004      	beq.n	8009b92 <USB_EPStartXfer+0x1062>
 8009b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009b96:	881b      	ldrh	r3, [r3, #0]
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	029b      	lsls	r3, r3, #10
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	b29a      	uxth	r2, r3
 8009ba8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009bac:	801a      	strh	r2, [r3, #0]
 8009bae:	e034      	b.n	8009c1a <USB_EPStartXfer+0x10ea>
 8009bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	785b      	ldrb	r3, [r3, #1]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d12c      	bne.n	8009c1a <USB_EPStartXfer+0x10ea>
 8009bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009be4:	4413      	add	r3, r2
 8009be6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	781b      	ldrb	r3, [r3, #0]
 8009bf6:	011a      	lsls	r2, r3, #4
 8009bf8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009c02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8009c18:	801a      	strh	r2, [r3, #0]
 8009c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	f040 809d 	bne.w	8009d74 <USB_EPStartXfer+0x1244>
 8009c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	461a      	mov	r2, r3
 8009c5a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c5e:	4413      	add	r3, r2
 8009c60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009c64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	011a      	lsls	r2, r3, #4
 8009c72:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009c76:	4413      	add	r3, r2
 8009c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009c80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009c92:	801a      	strh	r2, [r3, #0]
 8009c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8009ca2:	d92b      	bls.n	8009cfc <USB_EPStartXfer+0x11cc>
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	691b      	ldr	r3, [r3, #16]
 8009cb0:	095b      	lsrs	r3, r3, #5
 8009cb2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 031f 	and.w	r3, r3, #31
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <USB_EPStartXfer+0x11a4>
 8009cca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cd8:	881b      	ldrh	r3, [r3, #0]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	029b      	lsls	r3, r3, #10
 8009ce4:	b29b      	uxth	r3, r3
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009cf8:	801a      	strh	r2, [r3, #0]
 8009cfa:	e069      	b.n	8009dd0 <USB_EPStartXfer+0x12a0>
 8009cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <USB_EPStartXfer+0x11f6>
 8009d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d10:	881b      	ldrh	r3, [r3, #0]
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009d18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d1c:	b29a      	uxth	r2, r3
 8009d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d22:	801a      	strh	r2, [r3, #0]
 8009d24:	e054      	b.n	8009dd0 <USB_EPStartXfer+0x12a0>
 8009d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	691b      	ldr	r3, [r3, #16]
 8009d32:	085b      	lsrs	r3, r3, #1
 8009d34:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f003 0301 	and.w	r3, r3, #1
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d004      	beq.n	8009d56 <USB_EPStartXfer+0x1226>
 8009d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d50:	3301      	adds	r3, #1
 8009d52:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009d56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	b29a      	uxth	r2, r3
 8009d5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	029b      	lsls	r3, r3, #10
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	b29a      	uxth	r2, r3
 8009d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d70:	801a      	strh	r2, [r3, #0]
 8009d72:	e02d      	b.n	8009dd0 <USB_EPStartXfer+0x12a0>
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	785b      	ldrb	r3, [r3, #1]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d125      	bne.n	8009dd0 <USB_EPStartXfer+0x12a0>
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d92:	b29b      	uxth	r3, r3
 8009d94:	461a      	mov	r2, r3
 8009d96:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	011a      	lsls	r2, r3, #4
 8009dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009db2:	4413      	add	r3, r2
 8009db4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009dbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009dce:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009dd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69db      	ldr	r3, [r3, #28]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	f000 8218 	beq.w	800a212 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009de2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	881b      	ldrh	r3, [r3, #0]
 8009dfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e02:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d005      	beq.n	8009e1a <USB_EPStartXfer+0x12ea>
 8009e0e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d10d      	bne.n	8009e36 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e1a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f040 81f5 	bne.w	800a212 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009e28:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 81ee 	bne.w	800a212 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e3e:	681a      	ldr	r2, [r3, #0]
 8009e40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	4413      	add	r3, r2
 8009e50:	881b      	ldrh	r3, [r3, #0]
 8009e52:	b29b      	uxth	r3, r3
 8009e54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e5c:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	441a      	add	r2, r3
 8009e7a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009e7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e8a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	8013      	strh	r3, [r2, #0]
 8009e92:	e1be      	b.n	800a212 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	78db      	ldrb	r3, [r3, #3]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	f040 81b4 	bne.w	800a20e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	691b      	ldr	r3, [r3, #16]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d917      	bls.n	8009ef2 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	699a      	ldr	r2, [r3, #24]
 8009ede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ee2:	1ad2      	subs	r2, r2, r3
 8009ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	619a      	str	r2, [r3, #24]
 8009ef0:	e00e      	b.n	8009f10 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	699b      	ldr	r3, [r3, #24]
 8009efe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009f10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	785b      	ldrb	r3, [r3, #1]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f040 8085 	bne.w	800a02c <USB_EPStartXfer+0x14fc>
 8009f22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	461a      	mov	r2, r3
 8009f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f46:	4413      	add	r3, r2
 8009f48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009f4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	011a      	lsls	r2, r3, #4
 8009f5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009f5e:	4413      	add	r3, r2
 8009f60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009f68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009f7a:	801a      	strh	r2, [r3, #0]
 8009f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f80:	2b3e      	cmp	r3, #62	; 0x3e
 8009f82:	d923      	bls.n	8009fcc <USB_EPStartXfer+0x149c>
 8009f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f88:	095b      	lsrs	r3, r3, #5
 8009f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f92:	f003 031f 	and.w	r3, r3, #31
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d104      	bne.n	8009fa4 <USB_EPStartXfer+0x1474>
 8009f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009fa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	029b      	lsls	r3, r3, #10
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	4313      	orrs	r3, r2
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fc2:	b29a      	uxth	r2, r3
 8009fc4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fc8:	801a      	strh	r2, [r3, #0]
 8009fca:	e060      	b.n	800a08e <USB_EPStartXfer+0x155e>
 8009fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10c      	bne.n	8009fee <USB_EPStartXfer+0x14be>
 8009fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fd8:	881b      	ldrh	r3, [r3, #0]
 8009fda:	b29b      	uxth	r3, r3
 8009fdc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fe0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fe4:	b29a      	uxth	r2, r3
 8009fe6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009fea:	801a      	strh	r2, [r3, #0]
 8009fec:	e04f      	b.n	800a08e <USB_EPStartXfer+0x155e>
 8009fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ffc:	f003 0301 	and.w	r3, r3, #1
 800a000:	2b00      	cmp	r3, #0
 800a002:	d004      	beq.n	800a00e <USB_EPStartXfer+0x14de>
 800a004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a008:	3301      	adds	r3, #1
 800a00a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a00e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a012:	881b      	ldrh	r3, [r3, #0]
 800a014:	b29a      	uxth	r2, r3
 800a016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	029b      	lsls	r3, r3, #10
 800a01e:	b29b      	uxth	r3, r3
 800a020:	4313      	orrs	r3, r2
 800a022:	b29a      	uxth	r2, r3
 800a024:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a028:	801a      	strh	r2, [r3, #0]
 800a02a:	e030      	b.n	800a08e <USB_EPStartXfer+0x155e>
 800a02c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a030:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	785b      	ldrb	r3, [r3, #1]
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d128      	bne.n	800a08e <USB_EPStartXfer+0x155e>
 800a03c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a040:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a04a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a058:	b29b      	uxth	r3, r3
 800a05a:	461a      	mov	r2, r3
 800a05c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a060:	4413      	add	r3, r2
 800a062:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a066:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	011a      	lsls	r2, r3, #4
 800a074:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a078:	4413      	add	r3, r2
 800a07a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a07e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a082:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a086:	b29a      	uxth	r2, r3
 800a088:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a08c:	801a      	strh	r2, [r3, #0]
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a09c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	785b      	ldrb	r3, [r3, #1]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	f040 8085 	bne.w	800a1b8 <USB_EPStartXfer+0x1688>
 800a0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	461a      	mov	r2, r3
 800a0ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	011a      	lsls	r2, r3, #4
 800a0e6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a0ea:	4413      	add	r3, r2
 800a0ec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a0f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a0f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a100:	b29a      	uxth	r2, r3
 800a102:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a106:	801a      	strh	r2, [r3, #0]
 800a108:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a10c:	2b3e      	cmp	r3, #62	; 0x3e
 800a10e:	d923      	bls.n	800a158 <USB_EPStartXfer+0x1628>
 800a110:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a114:	095b      	lsrs	r3, r3, #5
 800a116:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a11a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11e:	f003 031f 	and.w	r3, r3, #31
 800a122:	2b00      	cmp	r3, #0
 800a124:	d104      	bne.n	800a130 <USB_EPStartXfer+0x1600>
 800a126:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a130:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	b29a      	uxth	r2, r3
 800a138:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	029b      	lsls	r3, r3, #10
 800a140:	b29b      	uxth	r3, r3
 800a142:	4313      	orrs	r3, r2
 800a144:	b29b      	uxth	r3, r3
 800a146:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a14a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a14e:	b29a      	uxth	r2, r3
 800a150:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a154:	801a      	strh	r2, [r3, #0]
 800a156:	e05c      	b.n	800a212 <USB_EPStartXfer+0x16e2>
 800a158:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10c      	bne.n	800a17a <USB_EPStartXfer+0x164a>
 800a160:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a164:	881b      	ldrh	r3, [r3, #0]
 800a166:	b29b      	uxth	r3, r3
 800a168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a170:	b29a      	uxth	r2, r3
 800a172:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a176:	801a      	strh	r2, [r3, #0]
 800a178:	e04b      	b.n	800a212 <USB_EPStartXfer+0x16e2>
 800a17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a17e:	085b      	lsrs	r3, r3, #1
 800a180:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a188:	f003 0301 	and.w	r3, r3, #1
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d004      	beq.n	800a19a <USB_EPStartXfer+0x166a>
 800a190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a194:	3301      	adds	r3, #1
 800a196:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a19a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a19e:	881b      	ldrh	r3, [r3, #0]
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	029b      	lsls	r3, r3, #10
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	4313      	orrs	r3, r2
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a1b4:	801a      	strh	r2, [r3, #0]
 800a1b6:	e02c      	b.n	800a212 <USB_EPStartXfer+0x16e2>
 800a1b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	785b      	ldrb	r3, [r3, #1]
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d124      	bne.n	800a212 <USB_EPStartXfer+0x16e2>
 800a1c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1d6:	b29b      	uxth	r3, r3
 800a1d8:	461a      	mov	r2, r3
 800a1da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a1de:	4413      	add	r3, r2
 800a1e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	781b      	ldrb	r3, [r3, #0]
 800a1f0:	011a      	lsls	r2, r3, #4
 800a1f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a1f6:	4413      	add	r3, r2
 800a1f8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a204:	b29a      	uxth	r2, r3
 800a206:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a20a:	801a      	strh	r2, [r3, #0]
 800a20c:	e001      	b.n	800a212 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a20e:	2301      	movs	r3, #1
 800a210:	e03a      	b.n	800a288 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a216:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a21a:	681a      	ldr	r2, [r3, #0]
 800a21c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a220:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a238:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a23c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a240:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a244:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a248:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a24c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a250:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	781b      	ldrb	r3, [r3, #0]
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	441a      	add	r2, r3
 800a26e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a272:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a276:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a27a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a282:	b29b      	uxth	r3, r3
 800a284:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a286:	2300      	movs	r3, #0
}
 800a288:	4618      	mov	r0, r3
 800a28a:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a292:	b480      	push	{r7}
 800a294:	b085      	sub	sp, #20
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	785b      	ldrb	r3, [r3, #1]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d020      	beq.n	800a2e6 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	4413      	add	r3, r2
 800a2ae:	881b      	ldrh	r3, [r3, #0]
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2ba:	81bb      	strh	r3, [r7, #12]
 800a2bc:	89bb      	ldrh	r3, [r7, #12]
 800a2be:	f083 0310 	eor.w	r3, r3, #16
 800a2c2:	81bb      	strh	r3, [r7, #12]
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	441a      	add	r2, r3
 800a2ce:	89bb      	ldrh	r3, [r7, #12]
 800a2d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	8013      	strh	r3, [r2, #0]
 800a2e4:	e01f      	b.n	800a326 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	781b      	ldrb	r3, [r3, #0]
 800a2ec:	009b      	lsls	r3, r3, #2
 800a2ee:	4413      	add	r3, r2
 800a2f0:	881b      	ldrh	r3, [r3, #0]
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2fc:	81fb      	strh	r3, [r7, #14]
 800a2fe:	89fb      	ldrh	r3, [r7, #14]
 800a300:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a304:	81fb      	strh	r3, [r7, #14]
 800a306:	687a      	ldr	r2, [r7, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	441a      	add	r2, r3
 800a310:	89fb      	ldrh	r3, [r7, #14]
 800a312:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a316:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a31a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a31e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a322:	b29b      	uxth	r3, r3
 800a324:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a326:	2300      	movs	r3, #0
}
 800a328:	4618      	mov	r0, r3
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bc80      	pop	{r7}
 800a330:	4770      	bx	lr

0800a332 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a332:	b480      	push	{r7}
 800a334:	b087      	sub	sp, #28
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	7b1b      	ldrb	r3, [r3, #12]
 800a340:	2b00      	cmp	r3, #0
 800a342:	f040 809d 	bne.w	800a480 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	785b      	ldrb	r3, [r3, #1]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d04c      	beq.n	800a3e8 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	4413      	add	r3, r2
 800a358:	881b      	ldrh	r3, [r3, #0]
 800a35a:	823b      	strh	r3, [r7, #16]
 800a35c:	8a3b      	ldrh	r3, [r7, #16]
 800a35e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a362:	2b00      	cmp	r3, #0
 800a364:	d01b      	beq.n	800a39e <USB_EPClearStall+0x6c>
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	881b      	ldrh	r3, [r3, #0]
 800a372:	b29b      	uxth	r3, r3
 800a374:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a378:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a37c:	81fb      	strh	r3, [r7, #14]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	441a      	add	r2, r3
 800a388:	89fb      	ldrh	r3, [r7, #14]
 800a38a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a38e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a396:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	78db      	ldrb	r3, [r3, #3]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d06c      	beq.n	800a480 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a3a6:	687a      	ldr	r2, [r7, #4]
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	781b      	ldrb	r3, [r3, #0]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	881b      	ldrh	r3, [r3, #0]
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3bc:	81bb      	strh	r3, [r7, #12]
 800a3be:	89bb      	ldrh	r3, [r7, #12]
 800a3c0:	f083 0320 	eor.w	r3, r3, #32
 800a3c4:	81bb      	strh	r3, [r7, #12]
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	441a      	add	r2, r3
 800a3d0:	89bb      	ldrh	r3, [r7, #12]
 800a3d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	8013      	strh	r3, [r2, #0]
 800a3e6:	e04b      	b.n	800a480 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	4413      	add	r3, r2
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	82fb      	strh	r3, [r7, #22]
 800a3f6:	8afb      	ldrh	r3, [r7, #22]
 800a3f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d01b      	beq.n	800a438 <USB_EPClearStall+0x106>
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	683b      	ldr	r3, [r7, #0]
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	4413      	add	r3, r2
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a416:	82bb      	strh	r3, [r7, #20]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	009b      	lsls	r3, r3, #2
 800a420:	441a      	add	r2, r3
 800a422:	8abb      	ldrh	r3, [r7, #20]
 800a424:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a428:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a42c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a434:	b29b      	uxth	r3, r3
 800a436:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	4413      	add	r3, r2
 800a442:	881b      	ldrh	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a44a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44e:	827b      	strh	r3, [r7, #18]
 800a450:	8a7b      	ldrh	r3, [r7, #18]
 800a452:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a456:	827b      	strh	r3, [r7, #18]
 800a458:	8a7b      	ldrh	r3, [r7, #18]
 800a45a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a45e:	827b      	strh	r3, [r7, #18]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	009b      	lsls	r3, r3, #2
 800a468:	441a      	add	r2, r3
 800a46a:	8a7b      	ldrh	r3, [r7, #18]
 800a46c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a470:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a474:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	371c      	adds	r7, #28
 800a486:	46bd      	mov	sp, r7
 800a488:	bc80      	pop	{r7}
 800a48a:	4770      	bx	lr

0800a48c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	460b      	mov	r3, r1
 800a496:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a498:	78fb      	ldrb	r3, [r7, #3]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2280      	movs	r2, #128	; 0x80
 800a4a2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a4a6:	2300      	movs	r3, #0
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bc80      	pop	{r7}
 800a4b0:	4770      	bx	lr

0800a4b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	370c      	adds	r7, #12
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bc80      	pop	{r7}
 800a4c4:	4770      	bx	lr

0800a4c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bc80      	pop	{r7}
 800a4d8:	4770      	bx	lr

0800a4da <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b085      	sub	sp, #20
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a4e8:	b29b      	uxth	r3, r3
 800a4ea:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bc80      	pop	{r7}
 800a4f6:	4770      	bx	lr

0800a4f8 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b083      	sub	sp, #12
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800a502:	2300      	movs	r3, #0
}
 800a504:	4618      	mov	r0, r3
 800a506:	370c      	adds	r7, #12
 800a508:	46bd      	mov	sp, r7
 800a50a:	bc80      	pop	{r7}
 800a50c:	4770      	bx	lr

0800a50e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a50e:	b480      	push	{r7}
 800a510:	b08b      	sub	sp, #44	; 0x2c
 800a512:	af00      	add	r7, sp, #0
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	4611      	mov	r1, r2
 800a51a:	461a      	mov	r2, r3
 800a51c:	460b      	mov	r3, r1
 800a51e:	80fb      	strh	r3, [r7, #6]
 800a520:	4613      	mov	r3, r2
 800a522:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a524:	88bb      	ldrh	r3, [r7, #4]
 800a526:	3301      	adds	r3, #1
 800a528:	085b      	lsrs	r3, r3, #1
 800a52a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a534:	88fb      	ldrh	r3, [r7, #6]
 800a536:	005a      	lsls	r2, r3, #1
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	4413      	add	r3, r2
 800a53c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a540:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
 800a546:	e01e      	b.n	800a586 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	781b      	ldrb	r3, [r3, #0]
 800a54c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a54e:	69fb      	ldr	r3, [r7, #28]
 800a550:	3301      	adds	r3, #1
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b21a      	sxth	r2, r3
 800a558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b21b      	sxth	r3, r3
 800a560:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a562:	6a3b      	ldr	r3, [r7, #32]
 800a564:	8a7a      	ldrh	r2, [r7, #18]
 800a566:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	3302      	adds	r3, #2
 800a56c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a56e:	6a3b      	ldr	r3, [r7, #32]
 800a570:	3302      	adds	r3, #2
 800a572:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800a574:	69fb      	ldr	r3, [r7, #28]
 800a576:	3301      	adds	r3, #1
 800a578:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	3301      	adds	r3, #1
 800a57e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a582:	3b01      	subs	r3, #1
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
 800a586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1dd      	bne.n	800a548 <USB_WritePMA+0x3a>
  }
}
 800a58c:	bf00      	nop
 800a58e:	bf00      	nop
 800a590:	372c      	adds	r7, #44	; 0x2c
 800a592:	46bd      	mov	sp, r7
 800a594:	bc80      	pop	{r7}
 800a596:	4770      	bx	lr

0800a598 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a598:	b480      	push	{r7}
 800a59a:	b08b      	sub	sp, #44	; 0x2c
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	4611      	mov	r1, r2
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	80fb      	strh	r3, [r7, #6]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a5ae:	88bb      	ldrh	r3, [r7, #4]
 800a5b0:	085b      	lsrs	r3, r3, #1
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a5be:	88fb      	ldrh	r3, [r7, #6]
 800a5c0:	005a      	lsls	r2, r3, #1
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800a5d0:	e01b      	b.n	800a60a <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	881b      	ldrh	r3, [r3, #0]
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a5da:	6a3b      	ldr	r3, [r7, #32]
 800a5dc:	3302      	adds	r3, #2
 800a5de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	69fb      	ldr	r3, [r7, #28]
 800a5e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5e8:	69fb      	ldr	r3, [r7, #28]
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	0a1b      	lsrs	r3, r3, #8
 800a5f2:	b2da      	uxtb	r2, r3
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800a5fe:	6a3b      	ldr	r3, [r7, #32]
 800a600:	3302      	adds	r3, #2
 800a602:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	3b01      	subs	r3, #1
 800a608:	627b      	str	r3, [r7, #36]	; 0x24
 800a60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1e0      	bne.n	800a5d2 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a610:	88bb      	ldrh	r3, [r7, #4]
 800a612:	f003 0301 	and.w	r3, r3, #1
 800a616:	b29b      	uxth	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d007      	beq.n	800a62c <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800a61c:	6a3b      	ldr	r3, [r7, #32]
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	b29b      	uxth	r3, r3
 800a622:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	b2da      	uxtb	r2, r3
 800a628:	69fb      	ldr	r3, [r7, #28]
 800a62a:	701a      	strb	r2, [r3, #0]
  }
}
 800a62c:	bf00      	nop
 800a62e:	372c      	adds	r7, #44	; 0x2c
 800a630:	46bd      	mov	sp, r7
 800a632:	bc80      	pop	{r7}
 800a634:	4770      	bx	lr
	...

0800a638 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a63c:	4904      	ldr	r1, [pc, #16]	; (800a650 <MX_FATFS_Init+0x18>)
 800a63e:	4805      	ldr	r0, [pc, #20]	; (800a654 <MX_FATFS_Init+0x1c>)
 800a640:	f002 f8ae 	bl	800c7a0 <FATFS_LinkDriver>
 800a644:	4603      	mov	r3, r0
 800a646:	461a      	mov	r2, r3
 800a648:	4b03      	ldr	r3, [pc, #12]	; (800a658 <MX_FATFS_Init+0x20>)
 800a64a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a64c:	bf00      	nop
 800a64e:	bd80      	pop	{r7, pc}
 800a650:	200004bc 	.word	0x200004bc
 800a654:	2000000c 	.word	0x2000000c
 800a658:	200004b8 	.word	0x200004b8

0800a65c <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800a660:	2200      	movs	r2, #0
 800a662:	2110      	movs	r1, #16
 800a664:	4802      	ldr	r0, [pc, #8]	; (800a670 <SELECT+0x14>)
 800a666:	f7f7 fe67 	bl	8002338 <HAL_GPIO_WritePin>
}
 800a66a:	bf00      	nop
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	40010800 	.word	0x40010800

0800a674 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800a678:	2201      	movs	r2, #1
 800a67a:	2110      	movs	r1, #16
 800a67c:	4802      	ldr	r0, [pc, #8]	; (800a688 <DESELECT+0x14>)
 800a67e:	f7f7 fe5b 	bl	8002338 <HAL_GPIO_WritePin>
}
 800a682:	bf00      	nop
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	40010800 	.word	0x40010800

0800a68c <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a696:	bf00      	nop
 800a698:	4b08      	ldr	r3, [pc, #32]	; (800a6bc <SPI_TxByte+0x30>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	689b      	ldr	r3, [r3, #8]
 800a69e:	f003 0302 	and.w	r3, r3, #2
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d1f8      	bne.n	800a698 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800a6a6:	1df9      	adds	r1, r7, #7
 800a6a8:	2364      	movs	r3, #100	; 0x64
 800a6aa:	2201      	movs	r2, #1
 800a6ac:	4803      	ldr	r0, [pc, #12]	; (800a6bc <SPI_TxByte+0x30>)
 800a6ae:	f7fc f8f5 	bl	800689c <HAL_SPI_Transmit>
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200002c0 	.word	0x200002c0

0800a6c0 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a6cc:	bf00      	nop
 800a6ce:	4b08      	ldr	r3, [pc, #32]	; (800a6f0 <SPI_TxBuffer+0x30>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	f003 0302 	and.w	r3, r3, #2
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d1f8      	bne.n	800a6ce <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800a6dc:	887a      	ldrh	r2, [r7, #2]
 800a6de:	2364      	movs	r3, #100	; 0x64
 800a6e0:	6879      	ldr	r1, [r7, #4]
 800a6e2:	4803      	ldr	r0, [pc, #12]	; (800a6f0 <SPI_TxBuffer+0x30>)
 800a6e4:	f7fc f8da 	bl	800689c <HAL_SPI_Transmit>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	200002c0 	.word	0x200002c0

0800a6f4 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800a6fa:	23ff      	movs	r3, #255	; 0xff
 800a6fc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800a6fe:	bf00      	nop
 800a700:	4b09      	ldr	r3, [pc, #36]	; (800a728 <SPI_RxByte+0x34>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	f003 0302 	and.w	r3, r3, #2
 800a70a:	2b02      	cmp	r3, #2
 800a70c:	d1f8      	bne.n	800a700 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800a70e:	1dba      	adds	r2, r7, #6
 800a710:	1df9      	adds	r1, r7, #7
 800a712:	2364      	movs	r3, #100	; 0x64
 800a714:	9300      	str	r3, [sp, #0]
 800a716:	2301      	movs	r3, #1
 800a718:	4803      	ldr	r0, [pc, #12]	; (800a728 <SPI_RxByte+0x34>)
 800a71a:	f7fc fa03 	bl	8006b24 <HAL_SPI_TransmitReceive>
  return data;
 800a71e:	79bb      	ldrb	r3, [r7, #6]
}
 800a720:	4618      	mov	r0, r3
 800a722:	3708      	adds	r7, #8
 800a724:	46bd      	mov	sp, r7
 800a726:	bd80      	pop	{r7, pc}
 800a728:	200002c0 	.word	0x200002c0

0800a72c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800a734:	f7ff ffde 	bl	800a6f4 <SPI_RxByte>
 800a738:	4603      	mov	r3, r0
 800a73a:	461a      	mov	r2, r3
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	701a      	strb	r2, [r3, #0]
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800a74e:	4b0a      	ldr	r3, [pc, #40]	; (800a778 <SD_ReadyWait+0x30>)
 800a750:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800a754:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800a756:	f7ff ffcd 	bl	800a6f4 <SPI_RxByte>
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800a75e:	79fb      	ldrb	r3, [r7, #7]
 800a760:	2bff      	cmp	r3, #255	; 0xff
 800a762:	d003      	beq.n	800a76c <SD_ReadyWait+0x24>
 800a764:	4b04      	ldr	r3, [pc, #16]	; (800a778 <SD_ReadyWait+0x30>)
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1f4      	bne.n	800a756 <SD_ReadyWait+0xe>
  return res;
 800a76c:	79fb      	ldrb	r3, [r7, #7]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3708      	adds	r7, #8
 800a772:	46bd      	mov	sp, r7
 800a774:	bd80      	pop	{r7, pc}
 800a776:	bf00      	nop
 800a778:	200004c2 	.word	0x200004c2

0800a77c <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800a782:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800a786:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800a788:	f7ff ff74 	bl	800a674 <DESELECT>
  for(int i = 0; i < 10; i++)
 800a78c:	2300      	movs	r3, #0
 800a78e:	60bb      	str	r3, [r7, #8]
 800a790:	e005      	b.n	800a79e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800a792:	20ff      	movs	r0, #255	; 0xff
 800a794:	f7ff ff7a 	bl	800a68c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800a798:	68bb      	ldr	r3, [r7, #8]
 800a79a:	3301      	adds	r3, #1
 800a79c:	60bb      	str	r3, [r7, #8]
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	2b09      	cmp	r3, #9
 800a7a2:	ddf6      	ble.n	800a792 <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800a7a4:	f7ff ff5a 	bl	800a65c <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800a7a8:	2340      	movs	r3, #64	; 0x40
 800a7aa:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800a7bc:	2395      	movs	r3, #149	; 0x95
 800a7be:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800a7c0:	463b      	mov	r3, r7
 800a7c2:	2106      	movs	r1, #6
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f7ff ff7b 	bl	800a6c0 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800a7ca:	e002      	b.n	800a7d2 <SD_PowerOn+0x56>
  {
    cnt--;
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800a7d2:	f7ff ff8f 	bl	800a6f4 <SPI_RxByte>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d002      	beq.n	800a7e2 <SD_PowerOn+0x66>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1f4      	bne.n	800a7cc <SD_PowerOn+0x50>
  }
  DESELECT();
 800a7e2:	f7ff ff47 	bl	800a674 <DESELECT>
  SPI_TxByte(0XFF);
 800a7e6:	20ff      	movs	r0, #255	; 0xff
 800a7e8:	f7ff ff50 	bl	800a68c <SPI_TxByte>
  PowerFlag = 1;
 800a7ec:	4b03      	ldr	r3, [pc, #12]	; (800a7fc <SD_PowerOn+0x80>)
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	701a      	strb	r2, [r3, #0]
}
 800a7f2:	bf00      	nop
 800a7f4:	3710      	adds	r7, #16
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
 800a7fa:	bf00      	nop
 800a7fc:	200004c5 	.word	0x200004c5

0800a800 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800a800:	b480      	push	{r7}
 800a802:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <SD_PowerOff+0x14>)
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
}
 800a80a:	bf00      	nop
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bc80      	pop	{r7}
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	200004c5 	.word	0x200004c5

0800a818 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  return PowerFlag;
 800a81c:	4b02      	ldr	r3, [pc, #8]	; (800a828 <SD_CheckPower+0x10>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
}
 800a820:	4618      	mov	r0, r3
 800a822:	46bd      	mov	sp, r7
 800a824:	bc80      	pop	{r7}
 800a826:	4770      	bx	lr
 800a828:	200004c5 	.word	0x200004c5

0800a82c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800a836:	4b13      	ldr	r3, [pc, #76]	; (800a884 <SD_RxDataBlock+0x58>)
 800a838:	22c8      	movs	r2, #200	; 0xc8
 800a83a:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800a83c:	f7ff ff5a 	bl	800a6f4 <SPI_RxByte>
 800a840:	4603      	mov	r3, r0
 800a842:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	2bff      	cmp	r3, #255	; 0xff
 800a848:	d103      	bne.n	800a852 <SD_RxDataBlock+0x26>
 800a84a:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <SD_RxDataBlock+0x58>)
 800a84c:	881b      	ldrh	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d1f4      	bne.n	800a83c <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800a852:	7bfb      	ldrb	r3, [r7, #15]
 800a854:	2bfe      	cmp	r3, #254	; 0xfe
 800a856:	d001      	beq.n	800a85c <SD_RxDataBlock+0x30>
 800a858:	2300      	movs	r3, #0
 800a85a:	e00f      	b.n	800a87c <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	1c5a      	adds	r2, r3, #1
 800a860:	607a      	str	r2, [r7, #4]
 800a862:	4618      	mov	r0, r3
 800a864:	f7ff ff62 	bl	800a72c <SPI_RxBytePtr>
  } while(len--);
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	1e5a      	subs	r2, r3, #1
 800a86c:	603a      	str	r2, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1f4      	bne.n	800a85c <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800a872:	f7ff ff3f 	bl	800a6f4 <SPI_RxByte>
  SPI_RxByte();
 800a876:	f7ff ff3d 	bl	800a6f4 <SPI_RxByte>
  return TRUE;
 800a87a:	2301      	movs	r3, #1
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3710      	adds	r7, #16
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	200004c0 	.word	0x200004c0

0800a888 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800a894:	2300      	movs	r3, #0
 800a896:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800a898:	f7ff ff56 	bl	800a748 <SD_ReadyWait>
 800a89c:	4603      	mov	r3, r0
 800a89e:	2bff      	cmp	r3, #255	; 0xff
 800a8a0:	d001      	beq.n	800a8a6 <SD_TxDataBlock+0x1e>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e02f      	b.n	800a906 <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800a8a6:	78fb      	ldrb	r3, [r7, #3]
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f7ff feef 	bl	800a68c <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800a8ae:	78fb      	ldrb	r3, [r7, #3]
 800a8b0:	2bfd      	cmp	r3, #253	; 0xfd
 800a8b2:	d020      	beq.n	800a8f6 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800a8b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f7ff ff01 	bl	800a6c0 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800a8be:	f7ff ff19 	bl	800a6f4 <SPI_RxByte>
    SPI_RxByte();
 800a8c2:	f7ff ff17 	bl	800a6f4 <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800a8c6:	e00b      	b.n	800a8e0 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800a8c8:	f7ff ff14 	bl	800a6f4 <SPI_RxByte>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	f003 031f 	and.w	r3, r3, #31
 800a8d6:	2b05      	cmp	r3, #5
 800a8d8:	d006      	beq.n	800a8e8 <SD_TxDataBlock+0x60>
      i++;
 800a8da:	7bbb      	ldrb	r3, [r7, #14]
 800a8dc:	3301      	adds	r3, #1
 800a8de:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800a8e0:	7bbb      	ldrb	r3, [r7, #14]
 800a8e2:	2b40      	cmp	r3, #64	; 0x40
 800a8e4:	d9f0      	bls.n	800a8c8 <SD_TxDataBlock+0x40>
 800a8e6:	e000      	b.n	800a8ea <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800a8e8:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800a8ea:	bf00      	nop
 800a8ec:	f7ff ff02 	bl	800a6f4 <SPI_RxByte>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0fa      	beq.n	800a8ec <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	f003 031f 	and.w	r3, r3, #31
 800a8fc:	2b05      	cmp	r3, #5
 800a8fe:	d101      	bne.n	800a904 <SD_TxDataBlock+0x7c>
 800a900:	2301      	movs	r3, #1
 800a902:	e000      	b.n	800a906 <SD_TxDataBlock+0x7e>

  return FALSE;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	4603      	mov	r3, r0
 800a916:	6039      	str	r1, [r7, #0]
 800a918:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800a91a:	f7ff ff15 	bl	800a748 <SD_ReadyWait>
 800a91e:	4603      	mov	r3, r0
 800a920:	2bff      	cmp	r3, #255	; 0xff
 800a922:	d001      	beq.n	800a928 <SD_SendCmd+0x1a>
 800a924:	23ff      	movs	r3, #255	; 0xff
 800a926:	e042      	b.n	800a9ae <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800a928:	79fb      	ldrb	r3, [r7, #7]
 800a92a:	4618      	mov	r0, r3
 800a92c:	f7ff feae 	bl	800a68c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	0e1b      	lsrs	r3, r3, #24
 800a934:	b2db      	uxtb	r3, r3
 800a936:	4618      	mov	r0, r3
 800a938:	f7ff fea8 	bl	800a68c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	0c1b      	lsrs	r3, r3, #16
 800a940:	b2db      	uxtb	r3, r3
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff fea2 	bl	800a68c <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	0a1b      	lsrs	r3, r3, #8
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fe9c 	bl	800a68c <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	b2db      	uxtb	r3, r3
 800a958:	4618      	mov	r0, r3
 800a95a:	f7ff fe97 	bl	800a68c <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800a95e:	79fb      	ldrb	r3, [r7, #7]
 800a960:	2b40      	cmp	r3, #64	; 0x40
 800a962:	d102      	bne.n	800a96a <SD_SendCmd+0x5c>
 800a964:	2395      	movs	r3, #149	; 0x95
 800a966:	73fb      	strb	r3, [r7, #15]
 800a968:	e007      	b.n	800a97a <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	2b48      	cmp	r3, #72	; 0x48
 800a96e:	d102      	bne.n	800a976 <SD_SendCmd+0x68>
 800a970:	2387      	movs	r3, #135	; 0x87
 800a972:	73fb      	strb	r3, [r7, #15]
 800a974:	e001      	b.n	800a97a <SD_SendCmd+0x6c>
  else crc = 1;
 800a976:	2301      	movs	r3, #1
 800a978:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	4618      	mov	r0, r3
 800a97e:	f7ff fe85 	bl	800a68c <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	2b4c      	cmp	r3, #76	; 0x4c
 800a986:	d101      	bne.n	800a98c <SD_SendCmd+0x7e>
 800a988:	f7ff feb4 	bl	800a6f4 <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800a98c:	230a      	movs	r3, #10
 800a98e:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800a990:	f7ff feb0 	bl	800a6f4 <SPI_RxByte>
 800a994:	4603      	mov	r3, r0
 800a996:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800a998:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	da05      	bge.n	800a9ac <SD_SendCmd+0x9e>
 800a9a0:	7bbb      	ldrb	r3, [r7, #14]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	73bb      	strb	r3, [r7, #14]
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d1f1      	bne.n	800a990 <SD_SendCmd+0x82>

  return res;
 800a9ac:	7b7b      	ldrb	r3, [r7, #13]
}
 800a9ae:	4618      	mov	r0, r3
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
	...

0800a9b8 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800a9b8:	b590      	push	{r4, r7, lr}
 800a9ba:	b085      	sub	sp, #20
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	4603      	mov	r3, r0
 800a9c0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d001      	beq.n	800a9cc <SD_disk_initialize+0x14>
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	e0d1      	b.n	800ab70 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800a9cc:	4b6a      	ldr	r3, [pc, #424]	; (800ab78 <SD_disk_initialize+0x1c0>)
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	f003 0302 	and.w	r3, r3, #2
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d003      	beq.n	800a9e2 <SD_disk_initialize+0x2a>
 800a9da:	4b67      	ldr	r3, [pc, #412]	; (800ab78 <SD_disk_initialize+0x1c0>)
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	b2db      	uxtb	r3, r3
 800a9e0:	e0c6      	b.n	800ab70 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800a9e2:	f7ff fecb 	bl	800a77c <SD_PowerOn>
  /* slave select */
  SELECT();
 800a9e6:	f7ff fe39 	bl	800a65c <SELECT>
  /* check disk type */
  type = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	2040      	movs	r0, #64	; 0x40
 800a9f2:	f7ff ff8c 	bl	800a90e <SD_SendCmd>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	f040 80a1 	bne.w	800ab40 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800a9fe:	4b5f      	ldr	r3, [pc, #380]	; (800ab7c <SD_disk_initialize+0x1c4>)
 800aa00:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa04:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800aa06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa0a:	2048      	movs	r0, #72	; 0x48
 800aa0c:	f7ff ff7f 	bl	800a90e <SD_SendCmd>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b01      	cmp	r3, #1
 800aa14:	d155      	bne.n	800aac2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800aa16:	2300      	movs	r3, #0
 800aa18:	73fb      	strb	r3, [r7, #15]
 800aa1a:	e00c      	b.n	800aa36 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800aa1c:	7bfc      	ldrb	r4, [r7, #15]
 800aa1e:	f7ff fe69 	bl	800a6f4 <SPI_RxByte>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	f104 0310 	add.w	r3, r4, #16
 800aa2a:	443b      	add	r3, r7
 800aa2c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800aa30:	7bfb      	ldrb	r3, [r7, #15]
 800aa32:	3301      	adds	r3, #1
 800aa34:	73fb      	strb	r3, [r7, #15]
 800aa36:	7bfb      	ldrb	r3, [r7, #15]
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d9ef      	bls.n	800aa1c <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800aa3c:	7abb      	ldrb	r3, [r7, #10]
 800aa3e:	2b01      	cmp	r3, #1
 800aa40:	d17e      	bne.n	800ab40 <SD_disk_initialize+0x188>
 800aa42:	7afb      	ldrb	r3, [r7, #11]
 800aa44:	2baa      	cmp	r3, #170	; 0xaa
 800aa46:	d17b      	bne.n	800ab40 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800aa48:	2100      	movs	r1, #0
 800aa4a:	2077      	movs	r0, #119	; 0x77
 800aa4c:	f7ff ff5f 	bl	800a90e <SD_SendCmd>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d807      	bhi.n	800aa66 <SD_disk_initialize+0xae>
 800aa56:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aa5a:	2069      	movs	r0, #105	; 0x69
 800aa5c:	f7ff ff57 	bl	800a90e <SD_SendCmd>
 800aa60:	4603      	mov	r3, r0
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d004      	beq.n	800aa70 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800aa66:	4b45      	ldr	r3, [pc, #276]	; (800ab7c <SD_disk_initialize+0x1c4>)
 800aa68:	881b      	ldrh	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d1ec      	bne.n	800aa48 <SD_disk_initialize+0x90>
 800aa6e:	e000      	b.n	800aa72 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800aa70:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800aa72:	4b42      	ldr	r3, [pc, #264]	; (800ab7c <SD_disk_initialize+0x1c4>)
 800aa74:	881b      	ldrh	r3, [r3, #0]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d062      	beq.n	800ab40 <SD_disk_initialize+0x188>
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	207a      	movs	r0, #122	; 0x7a
 800aa7e:	f7ff ff46 	bl	800a90e <SD_SendCmd>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d15b      	bne.n	800ab40 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	73fb      	strb	r3, [r7, #15]
 800aa8c:	e00c      	b.n	800aaa8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800aa8e:	7bfc      	ldrb	r4, [r7, #15]
 800aa90:	f7ff fe30 	bl	800a6f4 <SPI_RxByte>
 800aa94:	4603      	mov	r3, r0
 800aa96:	461a      	mov	r2, r3
 800aa98:	f104 0310 	add.w	r3, r4, #16
 800aa9c:	443b      	add	r3, r7
 800aa9e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	3301      	adds	r3, #1
 800aaa6:	73fb      	strb	r3, [r7, #15]
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	2b03      	cmp	r3, #3
 800aaac:	d9ef      	bls.n	800aa8e <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800aaae:	7a3b      	ldrb	r3, [r7, #8]
 800aab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <SD_disk_initialize+0x104>
 800aab8:	230c      	movs	r3, #12
 800aaba:	e000      	b.n	800aabe <SD_disk_initialize+0x106>
 800aabc:	2304      	movs	r3, #4
 800aabe:	73bb      	strb	r3, [r7, #14]
 800aac0:	e03e      	b.n	800ab40 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800aac2:	2100      	movs	r1, #0
 800aac4:	2077      	movs	r0, #119	; 0x77
 800aac6:	f7ff ff22 	bl	800a90e <SD_SendCmd>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b01      	cmp	r3, #1
 800aace:	d808      	bhi.n	800aae2 <SD_disk_initialize+0x12a>
 800aad0:	2100      	movs	r1, #0
 800aad2:	2069      	movs	r0, #105	; 0x69
 800aad4:	f7ff ff1b 	bl	800a90e <SD_SendCmd>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d801      	bhi.n	800aae2 <SD_disk_initialize+0x12a>
 800aade:	2302      	movs	r3, #2
 800aae0:	e000      	b.n	800aae4 <SD_disk_initialize+0x12c>
 800aae2:	2301      	movs	r3, #1
 800aae4:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800aae6:	7bbb      	ldrb	r3, [r7, #14]
 800aae8:	2b02      	cmp	r3, #2
 800aaea:	d10e      	bne.n	800ab0a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800aaec:	2100      	movs	r1, #0
 800aaee:	2077      	movs	r0, #119	; 0x77
 800aaf0:	f7ff ff0d 	bl	800a90e <SD_SendCmd>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d80e      	bhi.n	800ab18 <SD_disk_initialize+0x160>
 800aafa:	2100      	movs	r1, #0
 800aafc:	2069      	movs	r0, #105	; 0x69
 800aafe:	f7ff ff06 	bl	800a90e <SD_SendCmd>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d107      	bne.n	800ab18 <SD_disk_initialize+0x160>
 800ab08:	e00c      	b.n	800ab24 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	2041      	movs	r0, #65	; 0x41
 800ab0e:	f7ff fefe 	bl	800a90e <SD_SendCmd>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d004      	beq.n	800ab22 <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800ab18:	4b18      	ldr	r3, [pc, #96]	; (800ab7c <SD_disk_initialize+0x1c4>)
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d1e2      	bne.n	800aae6 <SD_disk_initialize+0x12e>
 800ab20:	e000      	b.n	800ab24 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800ab22:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800ab24:	4b15      	ldr	r3, [pc, #84]	; (800ab7c <SD_disk_initialize+0x1c4>)
 800ab26:	881b      	ldrh	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d007      	beq.n	800ab3c <SD_disk_initialize+0x184>
 800ab2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab30:	2050      	movs	r0, #80	; 0x50
 800ab32:	f7ff feec 	bl	800a90e <SD_SendCmd>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <SD_disk_initialize+0x188>
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800ab40:	4a0f      	ldr	r2, [pc, #60]	; (800ab80 <SD_disk_initialize+0x1c8>)
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800ab46:	f7ff fd95 	bl	800a674 <DESELECT>
  SPI_RxByte();
 800ab4a:	f7ff fdd3 	bl	800a6f4 <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d008      	beq.n	800ab66 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800ab54:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <SD_disk_initialize+0x1c0>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f023 0301 	bic.w	r3, r3, #1
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	4b05      	ldr	r3, [pc, #20]	; (800ab78 <SD_disk_initialize+0x1c0>)
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e001      	b.n	800ab6a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800ab66:	f7ff fe4b 	bl	800a800 <SD_PowerOff>
  }
  return Stat;
 800ab6a:	4b03      	ldr	r3, [pc, #12]	; (800ab78 <SD_disk_initialize+0x1c0>)
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	b2db      	uxtb	r3, r3
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd90      	pop	{r4, r7, pc}
 800ab78:	20000009 	.word	0x20000009
 800ab7c:	200004c0 	.word	0x200004c0
 800ab80:	200004c4 	.word	0x200004c4

0800ab84 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800ab8e:	79fb      	ldrb	r3, [r7, #7]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d001      	beq.n	800ab98 <SD_disk_status+0x14>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e002      	b.n	800ab9e <SD_disk_status+0x1a>
  return Stat;
 800ab98:	4b03      	ldr	r3, [pc, #12]	; (800aba8 <SD_disk_status+0x24>)
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	b2db      	uxtb	r3, r3
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bc80      	pop	{r7}
 800aba6:	4770      	bx	lr
 800aba8:	20000009 	.word	0x20000009

0800abac <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	60b9      	str	r1, [r7, #8]
 800abb4:	607a      	str	r2, [r7, #4]
 800abb6:	603b      	str	r3, [r7, #0]
 800abb8:	4603      	mov	r3, r0
 800abba:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d102      	bne.n	800abc8 <SD_disk_read+0x1c>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d101      	bne.n	800abcc <SD_disk_read+0x20>
 800abc8:	2304      	movs	r3, #4
 800abca:	e051      	b.n	800ac70 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800abcc:	4b2a      	ldr	r3, [pc, #168]	; (800ac78 <SD_disk_read+0xcc>)
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	f003 0301 	and.w	r3, r3, #1
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d001      	beq.n	800abde <SD_disk_read+0x32>
 800abda:	2303      	movs	r3, #3
 800abdc:	e048      	b.n	800ac70 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <SD_disk_read+0xd0>)
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d102      	bne.n	800abf0 <SD_disk_read+0x44>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	025b      	lsls	r3, r3, #9
 800abee:	607b      	str	r3, [r7, #4]

  SELECT();
 800abf0:	f7ff fd34 	bl	800a65c <SELECT>

  if (count == 1)
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d111      	bne.n	800ac1e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800abfa:	6879      	ldr	r1, [r7, #4]
 800abfc:	2051      	movs	r0, #81	; 0x51
 800abfe:	f7ff fe86 	bl	800a90e <SD_SendCmd>
 800ac02:	4603      	mov	r3, r0
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d129      	bne.n	800ac5c <SD_disk_read+0xb0>
 800ac08:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac0c:	68b8      	ldr	r0, [r7, #8]
 800ac0e:	f7ff fe0d 	bl	800a82c <SD_RxDataBlock>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d021      	beq.n	800ac5c <SD_disk_read+0xb0>
 800ac18:	2300      	movs	r3, #0
 800ac1a:	603b      	str	r3, [r7, #0]
 800ac1c:	e01e      	b.n	800ac5c <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800ac1e:	6879      	ldr	r1, [r7, #4]
 800ac20:	2052      	movs	r0, #82	; 0x52
 800ac22:	f7ff fe74 	bl	800a90e <SD_SendCmd>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d117      	bne.n	800ac5c <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800ac2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac30:	68b8      	ldr	r0, [r7, #8]
 800ac32:	f7ff fdfb 	bl	800a82c <SD_RxDataBlock>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <SD_disk_read+0xa6>
        buff += 512;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac42:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	3b01      	subs	r3, #1
 800ac48:	603b      	str	r3, [r7, #0]
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d1ed      	bne.n	800ac2c <SD_disk_read+0x80>
 800ac50:	e000      	b.n	800ac54 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800ac52:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800ac54:	2100      	movs	r1, #0
 800ac56:	204c      	movs	r0, #76	; 0x4c
 800ac58:	f7ff fe59 	bl	800a90e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800ac5c:	f7ff fd0a 	bl	800a674 <DESELECT>
  SPI_RxByte();
 800ac60:	f7ff fd48 	bl	800a6f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bf14      	ite	ne
 800ac6a:	2301      	movne	r3, #1
 800ac6c:	2300      	moveq	r3, #0
 800ac6e:	b2db      	uxtb	r3, r3
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000009 	.word	0x20000009
 800ac7c:	200004c4 	.word	0x200004c4

0800ac80 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60b9      	str	r1, [r7, #8]
 800ac88:	607a      	str	r2, [r7, #4]
 800ac8a:	603b      	str	r3, [r7, #0]
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d102      	bne.n	800ac9c <SD_disk_write+0x1c>
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d101      	bne.n	800aca0 <SD_disk_write+0x20>
 800ac9c:	2304      	movs	r3, #4
 800ac9e:	e06b      	b.n	800ad78 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800aca0:	4b37      	ldr	r3, [pc, #220]	; (800ad80 <SD_disk_write+0x100>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	b2db      	uxtb	r3, r3
 800aca6:	f003 0301 	and.w	r3, r3, #1
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d001      	beq.n	800acb2 <SD_disk_write+0x32>
 800acae:	2303      	movs	r3, #3
 800acb0:	e062      	b.n	800ad78 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800acb2:	4b33      	ldr	r3, [pc, #204]	; (800ad80 <SD_disk_write+0x100>)
 800acb4:	781b      	ldrb	r3, [r3, #0]
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	f003 0304 	and.w	r3, r3, #4
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d001      	beq.n	800acc4 <SD_disk_write+0x44>
 800acc0:	2302      	movs	r3, #2
 800acc2:	e059      	b.n	800ad78 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800acc4:	4b2f      	ldr	r3, [pc, #188]	; (800ad84 <SD_disk_write+0x104>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d102      	bne.n	800acd6 <SD_disk_write+0x56>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	025b      	lsls	r3, r3, #9
 800acd4:	607b      	str	r3, [r7, #4]

  SELECT();
 800acd6:	f7ff fcc1 	bl	800a65c <SELECT>

  if (count == 1)
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d110      	bne.n	800ad02 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	2058      	movs	r0, #88	; 0x58
 800ace4:	f7ff fe13 	bl	800a90e <SD_SendCmd>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d13a      	bne.n	800ad64 <SD_disk_write+0xe4>
 800acee:	21fe      	movs	r1, #254	; 0xfe
 800acf0:	68b8      	ldr	r0, [r7, #8]
 800acf2:	f7ff fdc9 	bl	800a888 <SD_TxDataBlock>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d033      	beq.n	800ad64 <SD_disk_write+0xe4>
      count = 0;
 800acfc:	2300      	movs	r3, #0
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	e030      	b.n	800ad64 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800ad02:	4b20      	ldr	r3, [pc, #128]	; (800ad84 <SD_disk_write+0x104>)
 800ad04:	781b      	ldrb	r3, [r3, #0]
 800ad06:	f003 0302 	and.w	r3, r3, #2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d007      	beq.n	800ad1e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800ad0e:	2100      	movs	r1, #0
 800ad10:	2077      	movs	r0, #119	; 0x77
 800ad12:	f7ff fdfc 	bl	800a90e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	2057      	movs	r0, #87	; 0x57
 800ad1a:	f7ff fdf8 	bl	800a90e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	2059      	movs	r0, #89	; 0x59
 800ad22:	f7ff fdf4 	bl	800a90e <SD_SendCmd>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d11b      	bne.n	800ad64 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ad2c:	21fc      	movs	r1, #252	; 0xfc
 800ad2e:	68b8      	ldr	r0, [r7, #8]
 800ad30:	f7ff fdaa 	bl	800a888 <SD_TxDataBlock>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d00a      	beq.n	800ad50 <SD_disk_write+0xd0>
        buff += 512;
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad40:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	3b01      	subs	r3, #1
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1ee      	bne.n	800ad2c <SD_disk_write+0xac>
 800ad4e:	e000      	b.n	800ad52 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800ad50:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800ad52:	21fd      	movs	r1, #253	; 0xfd
 800ad54:	2000      	movs	r0, #0
 800ad56:	f7ff fd97 	bl	800a888 <SD_TxDataBlock>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <SD_disk_write+0xe4>
      {
        count = 1;
 800ad60:	2301      	movs	r3, #1
 800ad62:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800ad64:	f7ff fc86 	bl	800a674 <DESELECT>
  SPI_RxByte();
 800ad68:	f7ff fcc4 	bl	800a6f4 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bf14      	ite	ne
 800ad72:	2301      	movne	r3, #1
 800ad74:	2300      	moveq	r3, #0
 800ad76:	b2db      	uxtb	r3, r3
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20000009 	.word	0x20000009
 800ad84:	200004c4 	.word	0x200004c4

0800ad88 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800ad88:	b590      	push	{r4, r7, lr}
 800ad8a:	b08b      	sub	sp, #44	; 0x2c
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	603a      	str	r2, [r7, #0]
 800ad92:	71fb      	strb	r3, [r7, #7]
 800ad94:	460b      	mov	r3, r1
 800ad96:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800ad9c:	79fb      	ldrb	r3, [r7, #7]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <SD_disk_ioctl+0x1e>
 800ada2:	2304      	movs	r3, #4
 800ada4:	e115      	b.n	800afd2 <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800ada6:	2301      	movs	r3, #1
 800ada8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800adac:	79bb      	ldrb	r3, [r7, #6]
 800adae:	2b05      	cmp	r3, #5
 800adb0:	d124      	bne.n	800adfc <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800adb2:	6a3b      	ldr	r3, [r7, #32]
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d012      	beq.n	800ade0 <SD_disk_ioctl+0x58>
 800adba:	2b02      	cmp	r3, #2
 800adbc:	dc1a      	bgt.n	800adf4 <SD_disk_ioctl+0x6c>
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d002      	beq.n	800adc8 <SD_disk_ioctl+0x40>
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d006      	beq.n	800add4 <SD_disk_ioctl+0x4c>
 800adc6:	e015      	b.n	800adf4 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800adc8:	f7ff fd1a 	bl	800a800 <SD_PowerOff>
      res = RES_OK;
 800adcc:	2300      	movs	r3, #0
 800adce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800add2:	e0fc      	b.n	800afce <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800add4:	f7ff fcd2 	bl	800a77c <SD_PowerOn>
      res = RES_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800adde:	e0f6      	b.n	800afce <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	1c5c      	adds	r4, r3, #1
 800ade4:	f7ff fd18 	bl	800a818 <SD_CheckPower>
 800ade8:	4603      	mov	r3, r0
 800adea:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800adec:	2300      	movs	r3, #0
 800adee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800adf2:	e0ec      	b.n	800afce <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800adfa:	e0e8      	b.n	800afce <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800adfc:	4b77      	ldr	r3, [pc, #476]	; (800afdc <SD_disk_ioctl+0x254>)
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	f003 0301 	and.w	r3, r3, #1
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e0e1      	b.n	800afd2 <SD_disk_ioctl+0x24a>
    }
    SELECT();
 800ae0e:	f7ff fc25 	bl	800a65c <SELECT>
    switch (ctrl)
 800ae12:	79bb      	ldrb	r3, [r7, #6]
 800ae14:	2b0d      	cmp	r3, #13
 800ae16:	f200 80cb 	bhi.w	800afb0 <SD_disk_ioctl+0x228>
 800ae1a:	a201      	add	r2, pc, #4	; (adr r2, 800ae20 <SD_disk_ioctl+0x98>)
 800ae1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae20:	0800af1b 	.word	0x0800af1b
 800ae24:	0800ae59 	.word	0x0800ae59
 800ae28:	0800af0b 	.word	0x0800af0b
 800ae2c:	0800afb1 	.word	0x0800afb1
 800ae30:	0800afb1 	.word	0x0800afb1
 800ae34:	0800afb1 	.word	0x0800afb1
 800ae38:	0800afb1 	.word	0x0800afb1
 800ae3c:	0800afb1 	.word	0x0800afb1
 800ae40:	0800afb1 	.word	0x0800afb1
 800ae44:	0800afb1 	.word	0x0800afb1
 800ae48:	0800afb1 	.word	0x0800afb1
 800ae4c:	0800af2d 	.word	0x0800af2d
 800ae50:	0800af51 	.word	0x0800af51
 800ae54:	0800af75 	.word	0x0800af75
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800ae58:	2100      	movs	r1, #0
 800ae5a:	2049      	movs	r0, #73	; 0x49
 800ae5c:	f7ff fd57 	bl	800a90e <SD_SendCmd>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	f040 80a8 	bne.w	800afb8 <SD_disk_ioctl+0x230>
 800ae68:	f107 030c 	add.w	r3, r7, #12
 800ae6c:	2110      	movs	r1, #16
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff fcdc 	bl	800a82c <SD_RxDataBlock>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f000 809e 	beq.w	800afb8 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 800ae7c:	7b3b      	ldrb	r3, [r7, #12]
 800ae7e:	099b      	lsrs	r3, r3, #6
 800ae80:	b2db      	uxtb	r3, r3
 800ae82:	2b01      	cmp	r3, #1
 800ae84:	d10e      	bne.n	800aea4 <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800ae86:	7d7b      	ldrb	r3, [r7, #21]
 800ae88:	b29a      	uxth	r2, r3
 800ae8a:	7d3b      	ldrb	r3, [r7, #20]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4413      	add	r3, r2
 800ae94:	b29b      	uxth	r3, r3
 800ae96:	3301      	adds	r3, #1
 800ae98:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800ae9a:	8bfb      	ldrh	r3, [r7, #30]
 800ae9c:	029a      	lsls	r2, r3, #10
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	601a      	str	r2, [r3, #0]
 800aea2:	e02e      	b.n	800af02 <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800aea4:	7c7b      	ldrb	r3, [r7, #17]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	7dbb      	ldrb	r3, [r7, #22]
 800aeae:	09db      	lsrs	r3, r3, #7
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	4413      	add	r3, r2
 800aeb4:	b2da      	uxtb	r2, r3
 800aeb6:	7d7b      	ldrb	r3, [r7, #21]
 800aeb8:	005b      	lsls	r3, r3, #1
 800aeba:	b2db      	uxtb	r3, r3
 800aebc:	f003 0306 	and.w	r3, r3, #6
 800aec0:	b2db      	uxtb	r3, r3
 800aec2:	4413      	add	r3, r2
 800aec4:	b2db      	uxtb	r3, r3
 800aec6:	3302      	adds	r3, #2
 800aec8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800aecc:	7d3b      	ldrb	r3, [r7, #20]
 800aece:	099b      	lsrs	r3, r3, #6
 800aed0:	b2db      	uxtb	r3, r3
 800aed2:	b29a      	uxth	r2, r3
 800aed4:	7cfb      	ldrb	r3, [r7, #19]
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	4413      	add	r3, r2
 800aede:	b29a      	uxth	r2, r3
 800aee0:	7cbb      	ldrb	r3, [r7, #18]
 800aee2:	029b      	lsls	r3, r3, #10
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	4413      	add	r3, r2
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	3301      	adds	r3, #1
 800aef2:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800aef4:	8bfa      	ldrh	r2, [r7, #30]
 800aef6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aefa:	3b09      	subs	r3, #9
 800aefc:	409a      	lsls	r2, r3
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800af08:	e056      	b.n	800afb8 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af10:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800af12:	2300      	movs	r3, #0
 800af14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800af18:	e055      	b.n	800afc6 <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800af1a:	f7ff fc15 	bl	800a748 <SD_ReadyWait>
 800af1e:	4603      	mov	r3, r0
 800af20:	2bff      	cmp	r3, #255	; 0xff
 800af22:	d14b      	bne.n	800afbc <SD_disk_ioctl+0x234>
 800af24:	2300      	movs	r3, #0
 800af26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800af2a:	e047      	b.n	800afbc <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800af2c:	2100      	movs	r1, #0
 800af2e:	2049      	movs	r0, #73	; 0x49
 800af30:	f7ff fced 	bl	800a90e <SD_SendCmd>
 800af34:	4603      	mov	r3, r0
 800af36:	2b00      	cmp	r3, #0
 800af38:	d142      	bne.n	800afc0 <SD_disk_ioctl+0x238>
 800af3a:	2110      	movs	r1, #16
 800af3c:	6a38      	ldr	r0, [r7, #32]
 800af3e:	f7ff fc75 	bl	800a82c <SD_RxDataBlock>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d03b      	beq.n	800afc0 <SD_disk_ioctl+0x238>
 800af48:	2300      	movs	r3, #0
 800af4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800af4e:	e037      	b.n	800afc0 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800af50:	2100      	movs	r1, #0
 800af52:	204a      	movs	r0, #74	; 0x4a
 800af54:	f7ff fcdb 	bl	800a90e <SD_SendCmd>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d132      	bne.n	800afc4 <SD_disk_ioctl+0x23c>
 800af5e:	2110      	movs	r1, #16
 800af60:	6a38      	ldr	r0, [r7, #32]
 800af62:	f7ff fc63 	bl	800a82c <SD_RxDataBlock>
 800af66:	4603      	mov	r3, r0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d02b      	beq.n	800afc4 <SD_disk_ioctl+0x23c>
 800af6c:	2300      	movs	r3, #0
 800af6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800af72:	e027      	b.n	800afc4 <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800af74:	2100      	movs	r1, #0
 800af76:	207a      	movs	r0, #122	; 0x7a
 800af78:	f7ff fcc9 	bl	800a90e <SD_SendCmd>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d116      	bne.n	800afb0 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800af82:	2300      	movs	r3, #0
 800af84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800af88:	e00b      	b.n	800afa2 <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800af8a:	6a3c      	ldr	r4, [r7, #32]
 800af8c:	1c63      	adds	r3, r4, #1
 800af8e:	623b      	str	r3, [r7, #32]
 800af90:	f7ff fbb0 	bl	800a6f4 <SPI_RxByte>
 800af94:	4603      	mov	r3, r0
 800af96:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800af98:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800af9c:	3301      	adds	r3, #1
 800af9e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afa2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d9ef      	bls.n	800af8a <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800afaa:	2300      	movs	r3, #0
 800afac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 800afb0:	2304      	movs	r3, #4
 800afb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800afb6:	e006      	b.n	800afc6 <SD_disk_ioctl+0x23e>
      break;
 800afb8:	bf00      	nop
 800afba:	e004      	b.n	800afc6 <SD_disk_ioctl+0x23e>
      break;
 800afbc:	bf00      	nop
 800afbe:	e002      	b.n	800afc6 <SD_disk_ioctl+0x23e>
      break;
 800afc0:	bf00      	nop
 800afc2:	e000      	b.n	800afc6 <SD_disk_ioctl+0x23e>
      break;
 800afc4:	bf00      	nop
    }
    DESELECT();
 800afc6:	f7ff fb55 	bl	800a674 <DESELECT>
    SPI_RxByte();
 800afca:	f7ff fb93 	bl	800a6f4 <SPI_RxByte>
  }
  return res;
 800afce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	372c      	adds	r7, #44	; 0x2c
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd90      	pop	{r4, r7, pc}
 800afda:	bf00      	nop
 800afdc:	20000009 	.word	0x20000009

0800afe0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fce3 	bl	800a9b8 <SD_disk_initialize>
 800aff2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aff4:	4618      	mov	r0, r3
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800affc:	b580      	push	{r7, lr}
 800affe:	b082      	sub	sp, #8
 800b000:	af00      	add	r7, sp, #0
 800b002:	4603      	mov	r3, r0
 800b004:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	4618      	mov	r0, r3
 800b00a:	f7ff fdbb 	bl	800ab84 <SD_disk_status>
 800b00e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b010:	4618      	mov	r0, r3
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}

0800b018 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
 800b022:	603b      	str	r3, [r7, #0]
 800b024:	4603      	mov	r3, r0
 800b026:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800b028:	7bf8      	ldrb	r0, [r7, #15]
 800b02a:	683b      	ldr	r3, [r7, #0]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	68b9      	ldr	r1, [r7, #8]
 800b030:	f7ff fdbc 	bl	800abac <SD_disk_read>
 800b034:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b036:	4618      	mov	r0, r3
 800b038:	3710      	adds	r7, #16
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b084      	sub	sp, #16
 800b042:	af00      	add	r7, sp, #0
 800b044:	60b9      	str	r1, [r7, #8]
 800b046:	607a      	str	r2, [r7, #4]
 800b048:	603b      	str	r3, [r7, #0]
 800b04a:	4603      	mov	r3, r0
 800b04c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800b04e:	7bf8      	ldrb	r0, [r7, #15]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	687a      	ldr	r2, [r7, #4]
 800b054:	68b9      	ldr	r1, [r7, #8]
 800b056:	f7ff fe13 	bl	800ac80 <SD_disk_write>
 800b05a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	4603      	mov	r3, r0
 800b06c:	603a      	str	r2, [r7, #0]
 800b06e:	71fb      	strb	r3, [r7, #7]
 800b070:	460b      	mov	r3, r1
 800b072:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800b074:	79b9      	ldrb	r1, [r7, #6]
 800b076:	79fb      	ldrb	r3, [r7, #7]
 800b078:	683a      	ldr	r2, [r7, #0]
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fe84 	bl	800ad88 <SD_disk_ioctl>
 800b080:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b082:	4618      	mov	r0, r3
 800b084:	3708      	adds	r7, #8
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}

0800b08a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	6078      	str	r0, [r7, #4]
 800b092:	460b      	mov	r3, r1
 800b094:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b096:	2300      	movs	r3, #0
 800b098:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	7c1b      	ldrb	r3, [r3, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d115      	bne.n	800b0ce <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0a6:	2202      	movs	r2, #2
 800b0a8:	2181      	movs	r1, #129	; 0x81
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	f001 fe8b 	bl	800cdc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	2201      	movs	r2, #1
 800b0b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	2101      	movs	r1, #1
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fe81 	bl	800cdc6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b0cc:	e012      	b.n	800b0f4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0ce:	2340      	movs	r3, #64	; 0x40
 800b0d0:	2202      	movs	r2, #2
 800b0d2:	2181      	movs	r1, #129	; 0x81
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 fe76 	bl	800cdc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2201      	movs	r2, #1
 800b0de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0e0:	2340      	movs	r3, #64	; 0x40
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	2101      	movs	r1, #1
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f001 fe6d 	bl	800cdc6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b0f4:	2308      	movs	r3, #8
 800b0f6:	2203      	movs	r2, #3
 800b0f8:	2182      	movs	r1, #130	; 0x82
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fe63 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b106:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b10a:	f001 ff83 	bl	800d014 <USBD_static_malloc>
 800b10e:	4602      	mov	r2, r0
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d102      	bne.n	800b126 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800b120:	2301      	movs	r3, #1
 800b122:	73fb      	strb	r3, [r7, #15]
 800b124:	e026      	b.n	800b174 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b12c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	2200      	movs	r2, #0
 800b13c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	2200      	movs	r2, #0
 800b144:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7c1b      	ldrb	r3, [r3, #16]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d109      	bne.n	800b164 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b156:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b15a:	2101      	movs	r1, #1
 800b15c:	6878      	ldr	r0, [r7, #4]
 800b15e:	f001 ff22 	bl	800cfa6 <USBD_LL_PrepareReceive>
 800b162:	e007      	b.n	800b174 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b16a:	2340      	movs	r3, #64	; 0x40
 800b16c:	2101      	movs	r1, #1
 800b16e:	6878      	ldr	r0, [r7, #4]
 800b170:	f001 ff19 	bl	800cfa6 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b174:	7bfb      	ldrb	r3, [r7, #15]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	460b      	mov	r3, r1
 800b188:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b18a:	2300      	movs	r3, #0
 800b18c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b18e:	2181      	movs	r1, #129	; 0x81
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f001 fe3e 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	2200      	movs	r2, #0
 800b19a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b19c:	2101      	movs	r1, #1
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f001 fe37 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b1ac:	2182      	movs	r1, #130	; 0x82
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f001 fe2f 	bl	800ce12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00e      	beq.n	800b1e2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f001 ff29 	bl	800d02c <USBD_static_free>
    pdev->pClassData = NULL;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b086      	sub	sp, #24
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	6078      	str	r0, [r7, #4]
 800b1f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b1fc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b202:	2300      	movs	r3, #0
 800b204:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	781b      	ldrb	r3, [r3, #0]
 800b20e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b212:	2b00      	cmp	r3, #0
 800b214:	d039      	beq.n	800b28a <USBD_CDC_Setup+0x9e>
 800b216:	2b20      	cmp	r3, #32
 800b218:	d17f      	bne.n	800b31a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	88db      	ldrh	r3, [r3, #6]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d029      	beq.n	800b276 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b25b      	sxtb	r3, r3
 800b228:	2b00      	cmp	r3, #0
 800b22a:	da11      	bge.n	800b250 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b238:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	88d2      	ldrh	r2, [r2, #6]
 800b23e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b240:	6939      	ldr	r1, [r7, #16]
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	88db      	ldrh	r3, [r3, #6]
 800b246:	461a      	mov	r2, r3
 800b248:	6878      	ldr	r0, [r7, #4]
 800b24a:	f001 f9da 	bl	800c602 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b24e:	e06b      	b.n	800b328 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	785a      	ldrb	r2, [r3, #1]
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	88db      	ldrh	r3, [r3, #6]
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b266:	6939      	ldr	r1, [r7, #16]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	88db      	ldrh	r3, [r3, #6]
 800b26c:	461a      	mov	r2, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f001 f9f5 	bl	800c65e <USBD_CtlPrepareRx>
      break;
 800b274:	e058      	b.n	800b328 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b27c:	689b      	ldr	r3, [r3, #8]
 800b27e:	683a      	ldr	r2, [r7, #0]
 800b280:	7850      	ldrb	r0, [r2, #1]
 800b282:	2200      	movs	r2, #0
 800b284:	6839      	ldr	r1, [r7, #0]
 800b286:	4798      	blx	r3
      break;
 800b288:	e04e      	b.n	800b328 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	785b      	ldrb	r3, [r3, #1]
 800b28e:	2b0b      	cmp	r3, #11
 800b290:	d02e      	beq.n	800b2f0 <USBD_CDC_Setup+0x104>
 800b292:	2b0b      	cmp	r3, #11
 800b294:	dc38      	bgt.n	800b308 <USBD_CDC_Setup+0x11c>
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <USBD_CDC_Setup+0xb4>
 800b29a:	2b0a      	cmp	r3, #10
 800b29c:	d014      	beq.n	800b2c8 <USBD_CDC_Setup+0xdc>
 800b29e:	e033      	b.n	800b308 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d107      	bne.n	800b2ba <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b2aa:	f107 030c 	add.w	r3, r7, #12
 800b2ae:	2202      	movs	r2, #2
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f001 f9a5 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2b8:	e02e      	b.n	800b318 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b2ba:	6839      	ldr	r1, [r7, #0]
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f001 f936 	bl	800c52e <USBD_CtlError>
            ret = USBD_FAIL;
 800b2c2:	2302      	movs	r3, #2
 800b2c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2c6:	e027      	b.n	800b318 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ce:	2b03      	cmp	r3, #3
 800b2d0:	d107      	bne.n	800b2e2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2d2:	f107 030f 	add.w	r3, r7, #15
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f001 f991 	bl	800c602 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2e0:	e01a      	b.n	800b318 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800b2e2:	6839      	ldr	r1, [r7, #0]
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f001 f922 	bl	800c52e <USBD_CtlError>
            ret = USBD_FAIL;
 800b2ea:	2302      	movs	r3, #2
 800b2ec:	75fb      	strb	r3, [r7, #23]
          break;
 800b2ee:	e013      	b.n	800b318 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2f6:	2b03      	cmp	r3, #3
 800b2f8:	d00d      	beq.n	800b316 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 f916 	bl	800c52e <USBD_CtlError>
            ret = USBD_FAIL;
 800b302:	2302      	movs	r3, #2
 800b304:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b306:	e006      	b.n	800b316 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800b308:	6839      	ldr	r1, [r7, #0]
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f001 f90f 	bl	800c52e <USBD_CtlError>
          ret = USBD_FAIL;
 800b310:	2302      	movs	r3, #2
 800b312:	75fb      	strb	r3, [r7, #23]
          break;
 800b314:	e000      	b.n	800b318 <USBD_CDC_Setup+0x12c>
          break;
 800b316:	bf00      	nop
      }
      break;
 800b318:	e006      	b.n	800b328 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b31a:	6839      	ldr	r1, [r7, #0]
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f001 f906 	bl	800c52e <USBD_CtlError>
      ret = USBD_FAIL;
 800b322:	2302      	movs	r3, #2
 800b324:	75fb      	strb	r3, [r7, #23]
      break;
 800b326:	bf00      	nop
  }

  return ret;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}

0800b332 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b332:	b580      	push	{r7, lr}
 800b334:	b084      	sub	sp, #16
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
 800b33a:	460b      	mov	r3, r1
 800b33c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b344:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b34c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d03a      	beq.n	800b3ce <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b358:	78fa      	ldrb	r2, [r7, #3]
 800b35a:	6879      	ldr	r1, [r7, #4]
 800b35c:	4613      	mov	r3, r2
 800b35e:	009b      	lsls	r3, r3, #2
 800b360:	4413      	add	r3, r2
 800b362:	009b      	lsls	r3, r3, #2
 800b364:	440b      	add	r3, r1
 800b366:	331c      	adds	r3, #28
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d029      	beq.n	800b3c2 <USBD_CDC_DataIn+0x90>
 800b36e:	78fa      	ldrb	r2, [r7, #3]
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	4613      	mov	r3, r2
 800b374:	009b      	lsls	r3, r3, #2
 800b376:	4413      	add	r3, r2
 800b378:	009b      	lsls	r3, r3, #2
 800b37a:	440b      	add	r3, r1
 800b37c:	331c      	adds	r3, #28
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	78f9      	ldrb	r1, [r7, #3]
 800b382:	68b8      	ldr	r0, [r7, #8]
 800b384:	460b      	mov	r3, r1
 800b386:	009b      	lsls	r3, r3, #2
 800b388:	440b      	add	r3, r1
 800b38a:	00db      	lsls	r3, r3, #3
 800b38c:	4403      	add	r3, r0
 800b38e:	3320      	adds	r3, #32
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	fbb2 f1f3 	udiv	r1, r2, r3
 800b396:	fb01 f303 	mul.w	r3, r1, r3
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d110      	bne.n	800b3c2 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b3a0:	78fa      	ldrb	r2, [r7, #3]
 800b3a2:	6879      	ldr	r1, [r7, #4]
 800b3a4:	4613      	mov	r3, r2
 800b3a6:	009b      	lsls	r3, r3, #2
 800b3a8:	4413      	add	r3, r2
 800b3aa:	009b      	lsls	r3, r3, #2
 800b3ac:	440b      	add	r3, r1
 800b3ae:	331c      	adds	r3, #28
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3b4:	78f9      	ldrb	r1, [r7, #3]
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f001 fdd0 	bl	800cf60 <USBD_LL_Transmit>
 800b3c0:	e003      	b.n	800b3ca <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e000      	b.n	800b3d0 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b3ce:	2302      	movs	r3, #2
  }
}
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	3710      	adds	r7, #16
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	bd80      	pop	{r7, pc}

0800b3d8 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
 800b3e0:	460b      	mov	r3, r1
 800b3e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b3ec:	78fb      	ldrb	r3, [r7, #3]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	6878      	ldr	r0, [r7, #4]
 800b3f2:	f001 fdfb 	bl	800cfec <USBD_LL_GetRxDataSize>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00d      	beq.n	800b424 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b40e:	68db      	ldr	r3, [r3, #12]
 800b410:	68fa      	ldr	r2, [r7, #12]
 800b412:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b416:	68fa      	ldr	r2, [r7, #12]
 800b418:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b41c:	4611      	mov	r1, r2
 800b41e:	4798      	blx	r3

    return USBD_OK;
 800b420:	2300      	movs	r3, #0
 800b422:	e000      	b.n	800b426 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b424:	2302      	movs	r3, #2
  }
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b084      	sub	sp, #16
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b43c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b444:	2b00      	cmp	r3, #0
 800b446:	d015      	beq.n	800b474 <USBD_CDC_EP0_RxReady+0x46>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b44e:	2bff      	cmp	r3, #255	; 0xff
 800b450:	d010      	beq.n	800b474 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	68fa      	ldr	r2, [r7, #12]
 800b45c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b460:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b462:	68fa      	ldr	r2, [r7, #12]
 800b464:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b468:	b292      	uxth	r2, r2
 800b46a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	22ff      	movs	r2, #255	; 0xff
 800b470:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b480:	b480      	push	{r7}
 800b482:	b083      	sub	sp, #12
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2243      	movs	r2, #67	; 0x43
 800b48c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b48e:	4b03      	ldr	r3, [pc, #12]	; (800b49c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b490:	4618      	mov	r0, r3
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	bc80      	pop	{r7}
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop
 800b49c:	200000a8 	.word	0x200000a8

0800b4a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2243      	movs	r2, #67	; 0x43
 800b4ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b4ae:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	370c      	adds	r7, #12
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bc80      	pop	{r7}
 800b4b8:	4770      	bx	lr
 800b4ba:	bf00      	nop
 800b4bc:	20000064 	.word	0x20000064

0800b4c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2243      	movs	r2, #67	; 0x43
 800b4cc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800b4ce:	4b03      	ldr	r3, [pc, #12]	; (800b4dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	370c      	adds	r7, #12
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	bc80      	pop	{r7}
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	200000ec 	.word	0x200000ec

0800b4e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b083      	sub	sp, #12
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	220a      	movs	r2, #10
 800b4ec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800b4ee:	4b03      	ldr	r3, [pc, #12]	; (800b4fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	370c      	adds	r7, #12
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bc80      	pop	{r7}
 800b4f8:	4770      	bx	lr
 800b4fa:	bf00      	nop
 800b4fc:	20000020 	.word	0x20000020

0800b500 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
 800b508:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800b50a:	2302      	movs	r3, #2
 800b50c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d005      	beq.n	800b520 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800b51c:	2300      	movs	r3, #0
 800b51e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b520:	7bfb      	ldrb	r3, [r7, #15]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	bc80      	pop	{r7}
 800b52a:	4770      	bx	lr

0800b52c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b087      	sub	sp, #28
 800b530:	af00      	add	r7, sp, #0
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	4613      	mov	r3, r2
 800b538:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b540:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	68ba      	ldr	r2, [r7, #8]
 800b546:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b54a:	88fa      	ldrh	r2, [r7, #6]
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800b552:	2300      	movs	r3, #0
}
 800b554:	4618      	mov	r0, r3
 800b556:	371c      	adds	r7, #28
 800b558:	46bd      	mov	sp, r7
 800b55a:	bc80      	pop	{r7}
 800b55c:	4770      	bx	lr

0800b55e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800b55e:	b480      	push	{r7}
 800b560:	b085      	sub	sp, #20
 800b562:	af00      	add	r7, sp, #0
 800b564:	6078      	str	r0, [r7, #4]
 800b566:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	bc80      	pop	{r7}
 800b582:	4770      	bx	lr

0800b584 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b592:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d017      	beq.n	800b5ce <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7c1b      	ldrb	r3, [r3, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d109      	bne.n	800b5ba <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 fcf7 	bl	800cfa6 <USBD_LL_PrepareReceive>
 800b5b8:	e007      	b.n	800b5ca <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5c0:	2340      	movs	r3, #64	; 0x40
 800b5c2:	2101      	movs	r1, #1
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f001 fcee 	bl	800cfa6 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	e000      	b.n	800b5d0 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800b5ce:	2302      	movs	r3, #2
  }
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	4613      	mov	r3, r2
 800b5e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d101      	bne.n	800b5f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b5ec:	2302      	movs	r3, #2
 800b5ee:	e01a      	b.n	800b626 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	2b00      	cmp	r3, #0
 800b606:	d003      	beq.n	800b610 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	79fa      	ldrb	r2, [r7, #7]
 800b61c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f001 fb5c 	bl	800ccdc <USBD_LL_Init>

  return USBD_OK;
 800b624:	2300      	movs	r3, #0
}
 800b626:	4618      	mov	r0, r3
 800b628:	3710      	adds	r7, #16
 800b62a:	46bd      	mov	sp, r7
 800b62c:	bd80      	pop	{r7, pc}

0800b62e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b62e:	b480      	push	{r7}
 800b630:	b085      	sub	sp, #20
 800b632:	af00      	add	r7, sp, #0
 800b634:	6078      	str	r0, [r7, #4]
 800b636:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800b638:	2300      	movs	r3, #0
 800b63a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d006      	beq.n	800b650 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800b64a:	2300      	movs	r3, #0
 800b64c:	73fb      	strb	r3, [r7, #15]
 800b64e:	e001      	b.n	800b654 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800b650:	2302      	movs	r3, #2
 800b652:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b654:	7bfb      	ldrb	r3, [r7, #15]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3714      	adds	r7, #20
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bc80      	pop	{r7}
 800b65e:	4770      	bx	lr

0800b660 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b082      	sub	sp, #8
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f001 fb91 	bl	800cd90 <USBD_LL_Start>

  return USBD_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b680:	2300      	movs	r3, #0
}
 800b682:	4618      	mov	r0, r3
 800b684:	370c      	adds	r7, #12
 800b686:	46bd      	mov	sp, r7
 800b688:	bc80      	pop	{r7}
 800b68a:	4770      	bx	lr

0800b68c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b084      	sub	sp, #16
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	460b      	mov	r3, r1
 800b696:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b698:	2302      	movs	r3, #2
 800b69a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00c      	beq.n	800b6c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	78fa      	ldrb	r2, [r7, #3]
 800b6b0:	4611      	mov	r1, r2
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	4798      	blx	r3
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d101      	bne.n	800b6c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}

0800b6ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b6ca:	b580      	push	{r7, lr}
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	af00      	add	r7, sp, #0
 800b6d0:	6078      	str	r0, [r7, #4]
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	78fa      	ldrb	r2, [r7, #3]
 800b6e0:	4611      	mov	r1, r2
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	4798      	blx	r3

  return USBD_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3708      	adds	r7, #8
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}

0800b6f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b700:	6839      	ldr	r1, [r7, #0]
 800b702:	4618      	mov	r0, r3
 800b704:	f000 fed7 	bl	800c4b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2201      	movs	r2, #1
 800b70c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b724:	f003 031f 	and.w	r3, r3, #31
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d016      	beq.n	800b75a <USBD_LL_SetupStage+0x6a>
 800b72c:	2b02      	cmp	r3, #2
 800b72e:	d81c      	bhi.n	800b76a <USBD_LL_SetupStage+0x7a>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <USBD_LL_SetupStage+0x4a>
 800b734:	2b01      	cmp	r3, #1
 800b736:	d008      	beq.n	800b74a <USBD_LL_SetupStage+0x5a>
 800b738:	e017      	b.n	800b76a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f000 f9ca 	bl	800badc <USBD_StdDevReq>
      break;
 800b748:	e01a      	b.n	800b780 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b750:	4619      	mov	r1, r3
 800b752:	6878      	ldr	r0, [r7, #4]
 800b754:	f000 fa2c 	bl	800bbb0 <USBD_StdItfReq>
      break;
 800b758:	e012      	b.n	800b780 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b760:	4619      	mov	r1, r3
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f000 fa6c 	bl	800bc40 <USBD_StdEPReq>
      break;
 800b768:	e00a      	b.n	800b780 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b770:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b774:	b2db      	uxtb	r3, r3
 800b776:	4619      	mov	r1, r3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f001 fb69 	bl	800ce50 <USBD_LL_StallEP>
      break;
 800b77e:	bf00      	nop
  }

  return USBD_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b086      	sub	sp, #24
 800b78e:	af00      	add	r7, sp, #0
 800b790:	60f8      	str	r0, [r7, #12]
 800b792:	460b      	mov	r3, r1
 800b794:	607a      	str	r2, [r7, #4]
 800b796:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b798:	7afb      	ldrb	r3, [r7, #11]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d14b      	bne.n	800b836 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b7a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b7ac:	2b03      	cmp	r3, #3
 800b7ae:	d134      	bne.n	800b81a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	68da      	ldr	r2, [r3, #12]
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	691b      	ldr	r3, [r3, #16]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d919      	bls.n	800b7f0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	68da      	ldr	r2, [r3, #12]
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	1ad2      	subs	r2, r2, r3
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	68da      	ldr	r2, [r3, #12]
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7d2:	429a      	cmp	r2, r3
 800b7d4:	d203      	bcs.n	800b7de <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	e002      	b.n	800b7e4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	6879      	ldr	r1, [r7, #4]
 800b7e8:	68f8      	ldr	r0, [r7, #12]
 800b7ea:	f000 ff56 	bl	800c69a <USBD_CtlContinueRx>
 800b7ee:	e038      	b.n	800b862 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d00a      	beq.n	800b812 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b802:	2b03      	cmp	r3, #3
 800b804:	d105      	bne.n	800b812 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b80c:	691b      	ldr	r3, [r3, #16]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f000 ff53 	bl	800c6be <USBD_CtlSendStatus>
 800b818:	e023      	b.n	800b862 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b820:	2b05      	cmp	r3, #5
 800b822:	d11e      	bne.n	800b862 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2200      	movs	r2, #0
 800b828:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800b82c:	2100      	movs	r1, #0
 800b82e:	68f8      	ldr	r0, [r7, #12]
 800b830:	f001 fb0e 	bl	800ce50 <USBD_LL_StallEP>
 800b834:	e015      	b.n	800b862 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d00d      	beq.n	800b85e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b848:	2b03      	cmp	r3, #3
 800b84a:	d108      	bne.n	800b85e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	7afa      	ldrb	r2, [r7, #11]
 800b856:	4611      	mov	r1, r2
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	4798      	blx	r3
 800b85c:	e001      	b.n	800b862 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b85e:	2302      	movs	r3, #2
 800b860:	e000      	b.n	800b864 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800b862:	2300      	movs	r3, #0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3718      	adds	r7, #24
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}

0800b86c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	b086      	sub	sp, #24
 800b870:	af00      	add	r7, sp, #0
 800b872:	60f8      	str	r0, [r7, #12]
 800b874:	460b      	mov	r3, r1
 800b876:	607a      	str	r2, [r7, #4]
 800b878:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b87a:	7afb      	ldrb	r3, [r7, #11]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d17f      	bne.n	800b980 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	3314      	adds	r3, #20
 800b884:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b88c:	2b02      	cmp	r3, #2
 800b88e:	d15c      	bne.n	800b94a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	68da      	ldr	r2, [r3, #12]
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d915      	bls.n	800b8c8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	68da      	ldr	r2, [r3, #12]
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	691b      	ldr	r3, [r3, #16]
 800b8a4:	1ad2      	subs	r2, r2, r3
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800b8aa:	697b      	ldr	r3, [r7, #20]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	b29b      	uxth	r3, r3
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	6879      	ldr	r1, [r7, #4]
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f000 fec0 	bl	800c63a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	2200      	movs	r2, #0
 800b8be:	2100      	movs	r1, #0
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f001 fb70 	bl	800cfa6 <USBD_LL_PrepareReceive>
 800b8c6:	e04e      	b.n	800b966 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	697a      	ldr	r2, [r7, #20]
 800b8ce:	6912      	ldr	r2, [r2, #16]
 800b8d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800b8d4:	fb01 f202 	mul.w	r2, r1, r2
 800b8d8:	1a9b      	subs	r3, r3, r2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d11c      	bne.n	800b918 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800b8de:	697b      	ldr	r3, [r7, #20]
 800b8e0:	689a      	ldr	r2, [r3, #8]
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d316      	bcc.n	800b918 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	689a      	ldr	r2, [r3, #8]
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d20f      	bcs.n	800b918 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	2100      	movs	r1, #0
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	f000 fe9c 	bl	800c63a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2200      	movs	r2, #0
 800b906:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b90a:	2300      	movs	r3, #0
 800b90c:	2200      	movs	r2, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f001 fb48 	bl	800cfa6 <USBD_LL_PrepareReceive>
 800b916:	e026      	b.n	800b966 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00a      	beq.n	800b93a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	d105      	bne.n	800b93a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800b93a:	2180      	movs	r1, #128	; 0x80
 800b93c:	68f8      	ldr	r0, [r7, #12]
 800b93e:	f001 fa87 	bl	800ce50 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 fece 	bl	800c6e4 <USBD_CtlReceiveStatus>
 800b948:	e00d      	b.n	800b966 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b950:	2b04      	cmp	r3, #4
 800b952:	d004      	beq.n	800b95e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d103      	bne.n	800b966 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800b95e:	2180      	movs	r1, #128	; 0x80
 800b960:	68f8      	ldr	r0, [r7, #12]
 800b962:	f001 fa75 	bl	800ce50 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d11d      	bne.n	800b9ac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f7ff fe81 	bl	800b678 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b97e:	e015      	b.n	800b9ac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d00d      	beq.n	800b9a8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800b992:	2b03      	cmp	r3, #3
 800b994:	d108      	bne.n	800b9a8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	7afa      	ldrb	r2, [r7, #11]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	4798      	blx	r3
 800b9a6:	e001      	b.n	800b9ac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	e000      	b.n	800b9ae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3718      	adds	r7, #24
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b082      	sub	sp, #8
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9be:	2340      	movs	r3, #64	; 0x40
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2100      	movs	r1, #0
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f001 f9fe 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2201      	movs	r2, #1
 800b9ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2240      	movs	r2, #64	; 0x40
 800b9d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b9da:	2340      	movs	r3, #64	; 0x40
 800b9dc:	2200      	movs	r2, #0
 800b9de:	2180      	movs	r1, #128	; 0x80
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f001 f9f0 	bl	800cdc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2201      	movs	r2, #1
 800b9ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2240      	movs	r2, #64	; 0x40
 800b9f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2201      	movs	r2, #1
 800b9f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d009      	beq.n	800ba2e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	6852      	ldr	r2, [r2, #4]
 800ba26:	b2d2      	uxtb	r2, r2
 800ba28:	4611      	mov	r1, r2
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	4798      	blx	r3
  }

  return USBD_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba38:	b480      	push	{r7}
 800ba3a:	b083      	sub	sp, #12
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	460b      	mov	r3, r1
 800ba42:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	78fa      	ldrb	r2, [r7, #3]
 800ba48:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bc80      	pop	{r7}
 800ba54:	4770      	bx	lr

0800ba56 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba56:	b480      	push	{r7}
 800ba58:	b083      	sub	sp, #12
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ba72:	2300      	movs	r3, #0
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bc80      	pop	{r7}
 800ba7c:	4770      	bx	lr

0800ba7e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ba7e:	b480      	push	{r7}
 800ba80:	b083      	sub	sp, #12
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba8c:	2b04      	cmp	r3, #4
 800ba8e:	d105      	bne.n	800ba9c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	370c      	adds	r7, #12
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bc80      	pop	{r7}
 800baa6:	4770      	bx	lr

0800baa8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d10b      	bne.n	800bad2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d005      	beq.n	800bad2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bacc:	69db      	ldr	r3, [r3, #28]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b084      	sub	sp, #16
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bae6:	2300      	movs	r3, #0
 800bae8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800baf2:	2b40      	cmp	r3, #64	; 0x40
 800baf4:	d005      	beq.n	800bb02 <USBD_StdDevReq+0x26>
 800baf6:	2b40      	cmp	r3, #64	; 0x40
 800baf8:	d84f      	bhi.n	800bb9a <USBD_StdDevReq+0xbe>
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d009      	beq.n	800bb12 <USBD_StdDevReq+0x36>
 800bafe:	2b20      	cmp	r3, #32
 800bb00:	d14b      	bne.n	800bb9a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb08:	689b      	ldr	r3, [r3, #8]
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	4798      	blx	r3
      break;
 800bb10:	e048      	b.n	800bba4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	785b      	ldrb	r3, [r3, #1]
 800bb16:	2b09      	cmp	r3, #9
 800bb18:	d839      	bhi.n	800bb8e <USBD_StdDevReq+0xb2>
 800bb1a:	a201      	add	r2, pc, #4	; (adr r2, 800bb20 <USBD_StdDevReq+0x44>)
 800bb1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb20:	0800bb71 	.word	0x0800bb71
 800bb24:	0800bb85 	.word	0x0800bb85
 800bb28:	0800bb8f 	.word	0x0800bb8f
 800bb2c:	0800bb7b 	.word	0x0800bb7b
 800bb30:	0800bb8f 	.word	0x0800bb8f
 800bb34:	0800bb53 	.word	0x0800bb53
 800bb38:	0800bb49 	.word	0x0800bb49
 800bb3c:	0800bb8f 	.word	0x0800bb8f
 800bb40:	0800bb67 	.word	0x0800bb67
 800bb44:	0800bb5d 	.word	0x0800bb5d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f9dc 	bl	800bf08 <USBD_GetDescriptor>
          break;
 800bb50:	e022      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bb52:	6839      	ldr	r1, [r7, #0]
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f000 fb3f 	bl	800c1d8 <USBD_SetAddress>
          break;
 800bb5a:	e01d      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bb5c:	6839      	ldr	r1, [r7, #0]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 fb7e 	bl	800c260 <USBD_SetConfig>
          break;
 800bb64:	e018      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bb66:	6839      	ldr	r1, [r7, #0]
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fc07 	bl	800c37c <USBD_GetConfig>
          break;
 800bb6e:	e013      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 fc37 	bl	800c3e6 <USBD_GetStatus>
          break;
 800bb78:	e00e      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bb7a:	6839      	ldr	r1, [r7, #0]
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fc65 	bl	800c44c <USBD_SetFeature>
          break;
 800bb82:	e009      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bb84:	6839      	ldr	r1, [r7, #0]
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fc74 	bl	800c474 <USBD_ClrFeature>
          break;
 800bb8c:	e004      	b.n	800bb98 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bb8e:	6839      	ldr	r1, [r7, #0]
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 fccc 	bl	800c52e <USBD_CtlError>
          break;
 800bb96:	bf00      	nop
      }
      break;
 800bb98:	e004      	b.n	800bba4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fcc6 	bl	800c52e <USBD_CtlError>
      break;
 800bba2:	bf00      	nop
  }

  return ret;
 800bba4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	bf00      	nop

0800bbb0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bbc6:	2b40      	cmp	r3, #64	; 0x40
 800bbc8:	d005      	beq.n	800bbd6 <USBD_StdItfReq+0x26>
 800bbca:	2b40      	cmp	r3, #64	; 0x40
 800bbcc:	d82e      	bhi.n	800bc2c <USBD_StdItfReq+0x7c>
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d001      	beq.n	800bbd6 <USBD_StdItfReq+0x26>
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d12a      	bne.n	800bc2c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d81d      	bhi.n	800bc1e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	889b      	ldrh	r3, [r3, #4]
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d813      	bhi.n	800bc14 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	6878      	ldr	r0, [r7, #4]
 800bbf8:	4798      	blx	r3
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	88db      	ldrh	r3, [r3, #6]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d110      	bne.n	800bc28 <USBD_StdItfReq+0x78>
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10d      	bne.n	800bc28 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 fd56 	bl	800c6be <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bc12:	e009      	b.n	800bc28 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800bc14:	6839      	ldr	r1, [r7, #0]
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f000 fc89 	bl	800c52e <USBD_CtlError>
          break;
 800bc1c:	e004      	b.n	800bc28 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800bc1e:	6839      	ldr	r1, [r7, #0]
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fc84 	bl	800c52e <USBD_CtlError>
          break;
 800bc26:	e000      	b.n	800bc2a <USBD_StdItfReq+0x7a>
          break;
 800bc28:	bf00      	nop
      }
      break;
 800bc2a:	e004      	b.n	800bc36 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800bc2c:	6839      	ldr	r1, [r7, #0]
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f000 fc7d 	bl	800c52e <USBD_CtlError>
      break;
 800bc34:	bf00      	nop
  }

  return USBD_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3710      	adds	r7, #16
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	889b      	ldrh	r3, [r3, #4]
 800bc52:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc5c:	2b40      	cmp	r3, #64	; 0x40
 800bc5e:	d007      	beq.n	800bc70 <USBD_StdEPReq+0x30>
 800bc60:	2b40      	cmp	r3, #64	; 0x40
 800bc62:	f200 8146 	bhi.w	800bef2 <USBD_StdEPReq+0x2b2>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d00a      	beq.n	800bc80 <USBD_StdEPReq+0x40>
 800bc6a:	2b20      	cmp	r3, #32
 800bc6c:	f040 8141 	bne.w	800bef2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	6839      	ldr	r1, [r7, #0]
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	4798      	blx	r3
      break;
 800bc7e:	e13d      	b.n	800befc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc88:	2b20      	cmp	r3, #32
 800bc8a:	d10a      	bne.n	800bca2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	4798      	blx	r3
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
 800bca0:	e12d      	b.n	800befe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d007      	beq.n	800bcba <USBD_StdEPReq+0x7a>
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	f300 811b 	bgt.w	800bee6 <USBD_StdEPReq+0x2a6>
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d072      	beq.n	800bd9a <USBD_StdEPReq+0x15a>
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	d03a      	beq.n	800bd2e <USBD_StdEPReq+0xee>
 800bcb8:	e115      	b.n	800bee6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d002      	beq.n	800bcca <USBD_StdEPReq+0x8a>
 800bcc4:	2b03      	cmp	r3, #3
 800bcc6:	d015      	beq.n	800bcf4 <USBD_StdEPReq+0xb4>
 800bcc8:	e02b      	b.n	800bd22 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bcca:	7bbb      	ldrb	r3, [r7, #14]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d00c      	beq.n	800bcea <USBD_StdEPReq+0xaa>
 800bcd0:	7bbb      	ldrb	r3, [r7, #14]
 800bcd2:	2b80      	cmp	r3, #128	; 0x80
 800bcd4:	d009      	beq.n	800bcea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bcd6:	7bbb      	ldrb	r3, [r7, #14]
 800bcd8:	4619      	mov	r1, r3
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f001 f8b8 	bl	800ce50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bce0:	2180      	movs	r1, #128	; 0x80
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f001 f8b4 	bl	800ce50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bce8:	e020      	b.n	800bd2c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 fc1e 	bl	800c52e <USBD_CtlError>
              break;
 800bcf2:	e01b      	b.n	800bd2c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	885b      	ldrh	r3, [r3, #2]
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d10e      	bne.n	800bd1a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bcfc:	7bbb      	ldrb	r3, [r7, #14]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d00b      	beq.n	800bd1a <USBD_StdEPReq+0xda>
 800bd02:	7bbb      	ldrb	r3, [r7, #14]
 800bd04:	2b80      	cmp	r3, #128	; 0x80
 800bd06:	d008      	beq.n	800bd1a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	88db      	ldrh	r3, [r3, #6]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d104      	bne.n	800bd1a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bd10:	7bbb      	ldrb	r3, [r7, #14]
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f001 f89b 	bl	800ce50 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fccf 	bl	800c6be <USBD_CtlSendStatus>

              break;
 800bd20:	e004      	b.n	800bd2c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bd22:	6839      	ldr	r1, [r7, #0]
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 fc02 	bl	800c52e <USBD_CtlError>
              break;
 800bd2a:	bf00      	nop
          }
          break;
 800bd2c:	e0e0      	b.n	800bef0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d002      	beq.n	800bd3e <USBD_StdEPReq+0xfe>
 800bd38:	2b03      	cmp	r3, #3
 800bd3a:	d015      	beq.n	800bd68 <USBD_StdEPReq+0x128>
 800bd3c:	e026      	b.n	800bd8c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bd3e:	7bbb      	ldrb	r3, [r7, #14]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d00c      	beq.n	800bd5e <USBD_StdEPReq+0x11e>
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
 800bd46:	2b80      	cmp	r3, #128	; 0x80
 800bd48:	d009      	beq.n	800bd5e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bd4a:	7bbb      	ldrb	r3, [r7, #14]
 800bd4c:	4619      	mov	r1, r3
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f001 f87e 	bl	800ce50 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bd54:	2180      	movs	r1, #128	; 0x80
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f001 f87a 	bl	800ce50 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bd5c:	e01c      	b.n	800bd98 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bd5e:	6839      	ldr	r1, [r7, #0]
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f000 fbe4 	bl	800c52e <USBD_CtlError>
              break;
 800bd66:	e017      	b.n	800bd98 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	885b      	ldrh	r3, [r3, #2]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d112      	bne.n	800bd96 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bd70:	7bbb      	ldrb	r3, [r7, #14]
 800bd72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d004      	beq.n	800bd84 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bd7a:	7bbb      	ldrb	r3, [r7, #14]
 800bd7c:	4619      	mov	r1, r3
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f001 f885 	bl	800ce8e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bd84:	6878      	ldr	r0, [r7, #4]
 800bd86:	f000 fc9a 	bl	800c6be <USBD_CtlSendStatus>
              }
              break;
 800bd8a:	e004      	b.n	800bd96 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bd8c:	6839      	ldr	r1, [r7, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 fbcd 	bl	800c52e <USBD_CtlError>
              break;
 800bd94:	e000      	b.n	800bd98 <USBD_StdEPReq+0x158>
              break;
 800bd96:	bf00      	nop
          }
          break;
 800bd98:	e0aa      	b.n	800bef0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bda0:	2b02      	cmp	r3, #2
 800bda2:	d002      	beq.n	800bdaa <USBD_StdEPReq+0x16a>
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d032      	beq.n	800be0e <USBD_StdEPReq+0x1ce>
 800bda8:	e097      	b.n	800beda <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bdaa:	7bbb      	ldrb	r3, [r7, #14]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d007      	beq.n	800bdc0 <USBD_StdEPReq+0x180>
 800bdb0:	7bbb      	ldrb	r3, [r7, #14]
 800bdb2:	2b80      	cmp	r3, #128	; 0x80
 800bdb4:	d004      	beq.n	800bdc0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800bdb6:	6839      	ldr	r1, [r7, #0]
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f000 fbb8 	bl	800c52e <USBD_CtlError>
                break;
 800bdbe:	e091      	b.n	800bee4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bdc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	da0b      	bge.n	800bde0 <USBD_StdEPReq+0x1a0>
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bdce:	4613      	mov	r3, r2
 800bdd0:	009b      	lsls	r3, r3, #2
 800bdd2:	4413      	add	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	3310      	adds	r3, #16
 800bdd8:	687a      	ldr	r2, [r7, #4]
 800bdda:	4413      	add	r3, r2
 800bddc:	3304      	adds	r3, #4
 800bdde:	e00b      	b.n	800bdf8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bde0:	7bbb      	ldrb	r3, [r7, #14]
 800bde2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bde6:	4613      	mov	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	4413      	add	r3, r2
 800bdec:	009b      	lsls	r3, r3, #2
 800bdee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3304      	adds	r3, #4
 800bdf8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bdfa:	68bb      	ldr	r3, [r7, #8]
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	2202      	movs	r2, #2
 800be04:	4619      	mov	r1, r3
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 fbfb 	bl	800c602 <USBD_CtlSendData>
              break;
 800be0c:	e06a      	b.n	800bee4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800be0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be12:	2b00      	cmp	r3, #0
 800be14:	da11      	bge.n	800be3a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800be16:	7bbb      	ldrb	r3, [r7, #14]
 800be18:	f003 020f 	and.w	r2, r3, #15
 800be1c:	6879      	ldr	r1, [r7, #4]
 800be1e:	4613      	mov	r3, r2
 800be20:	009b      	lsls	r3, r3, #2
 800be22:	4413      	add	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	440b      	add	r3, r1
 800be28:	3318      	adds	r3, #24
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d117      	bne.n	800be60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be30:	6839      	ldr	r1, [r7, #0]
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	f000 fb7b 	bl	800c52e <USBD_CtlError>
                  break;
 800be38:	e054      	b.n	800bee4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800be3a:	7bbb      	ldrb	r3, [r7, #14]
 800be3c:	f003 020f 	and.w	r2, r3, #15
 800be40:	6879      	ldr	r1, [r7, #4]
 800be42:	4613      	mov	r3, r2
 800be44:	009b      	lsls	r3, r3, #2
 800be46:	4413      	add	r3, r2
 800be48:	009b      	lsls	r3, r3, #2
 800be4a:	440b      	add	r3, r1
 800be4c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d104      	bne.n	800be60 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800be56:	6839      	ldr	r1, [r7, #0]
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f000 fb68 	bl	800c52e <USBD_CtlError>
                  break;
 800be5e:	e041      	b.n	800bee4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800be64:	2b00      	cmp	r3, #0
 800be66:	da0b      	bge.n	800be80 <USBD_StdEPReq+0x240>
 800be68:	7bbb      	ldrb	r3, [r7, #14]
 800be6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be6e:	4613      	mov	r3, r2
 800be70:	009b      	lsls	r3, r3, #2
 800be72:	4413      	add	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	3310      	adds	r3, #16
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4413      	add	r3, r2
 800be7c:	3304      	adds	r3, #4
 800be7e:	e00b      	b.n	800be98 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800be80:	7bbb      	ldrb	r3, [r7, #14]
 800be82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800be86:	4613      	mov	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	009b      	lsls	r3, r3, #2
 800be8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	3304      	adds	r3, #4
 800be98:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800be9a:	7bbb      	ldrb	r3, [r7, #14]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <USBD_StdEPReq+0x266>
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2b80      	cmp	r3, #128	; 0x80
 800bea4:	d103      	bne.n	800beae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2200      	movs	r2, #0
 800beaa:	601a      	str	r2, [r3, #0]
 800beac:	e00e      	b.n	800becc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800beae:	7bbb      	ldrb	r3, [r7, #14]
 800beb0:	4619      	mov	r1, r3
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f001 f80a 	bl	800cecc <USBD_LL_IsStallEP>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d003      	beq.n	800bec6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	2201      	movs	r2, #1
 800bec2:	601a      	str	r2, [r3, #0]
 800bec4:	e002      	b.n	800becc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	2200      	movs	r2, #0
 800beca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2202      	movs	r2, #2
 800bed0:	4619      	mov	r1, r3
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 fb95 	bl	800c602 <USBD_CtlSendData>
              break;
 800bed8:	e004      	b.n	800bee4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fb26 	bl	800c52e <USBD_CtlError>
              break;
 800bee2:	bf00      	nop
          }
          break;
 800bee4:	e004      	b.n	800bef0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 fb20 	bl	800c52e <USBD_CtlError>
          break;
 800beee:	bf00      	nop
      }
      break;
 800bef0:	e004      	b.n	800befc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800bef2:	6839      	ldr	r1, [r7, #0]
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fb1a 	bl	800c52e <USBD_CtlError>
      break;
 800befa:	bf00      	nop
  }

  return ret;
 800befc:	7bfb      	ldrb	r3, [r7, #15]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}
	...

0800bf08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b084      	sub	sp, #16
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
 800bf10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bf12:	2300      	movs	r3, #0
 800bf14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	885b      	ldrh	r3, [r3, #2]
 800bf22:	0a1b      	lsrs	r3, r3, #8
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	3b01      	subs	r3, #1
 800bf28:	2b06      	cmp	r3, #6
 800bf2a:	f200 8128 	bhi.w	800c17e <USBD_GetDescriptor+0x276>
 800bf2e:	a201      	add	r2, pc, #4	; (adr r2, 800bf34 <USBD_GetDescriptor+0x2c>)
 800bf30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf34:	0800bf51 	.word	0x0800bf51
 800bf38:	0800bf69 	.word	0x0800bf69
 800bf3c:	0800bfa9 	.word	0x0800bfa9
 800bf40:	0800c17f 	.word	0x0800c17f
 800bf44:	0800c17f 	.word	0x0800c17f
 800bf48:	0800c11f 	.word	0x0800c11f
 800bf4c:	0800c14b 	.word	0x0800c14b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	687a      	ldr	r2, [r7, #4]
 800bf5a:	7c12      	ldrb	r2, [r2, #16]
 800bf5c:	f107 0108 	add.w	r1, r7, #8
 800bf60:	4610      	mov	r0, r2
 800bf62:	4798      	blx	r3
 800bf64:	60f8      	str	r0, [r7, #12]
      break;
 800bf66:	e112      	b.n	800c18e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	7c1b      	ldrb	r3, [r3, #16]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d10d      	bne.n	800bf8c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf78:	f107 0208 	add.w	r2, r7, #8
 800bf7c:	4610      	mov	r0, r2
 800bf7e:	4798      	blx	r3
 800bf80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	3301      	adds	r3, #1
 800bf86:	2202      	movs	r2, #2
 800bf88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bf8a:	e100      	b.n	800c18e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf94:	f107 0208 	add.w	r2, r7, #8
 800bf98:	4610      	mov	r0, r2
 800bf9a:	4798      	blx	r3
 800bf9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	2202      	movs	r2, #2
 800bfa4:	701a      	strb	r2, [r3, #0]
      break;
 800bfa6:	e0f2      	b.n	800c18e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	885b      	ldrh	r3, [r3, #2]
 800bfac:	b2db      	uxtb	r3, r3
 800bfae:	2b05      	cmp	r3, #5
 800bfb0:	f200 80ac 	bhi.w	800c10c <USBD_GetDescriptor+0x204>
 800bfb4:	a201      	add	r2, pc, #4	; (adr r2, 800bfbc <USBD_GetDescriptor+0xb4>)
 800bfb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfba:	bf00      	nop
 800bfbc:	0800bfd5 	.word	0x0800bfd5
 800bfc0:	0800c009 	.word	0x0800c009
 800bfc4:	0800c03d 	.word	0x0800c03d
 800bfc8:	0800c071 	.word	0x0800c071
 800bfcc:	0800c0a5 	.word	0x0800c0a5
 800bfd0:	0800c0d9 	.word	0x0800c0d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bfda:	685b      	ldr	r3, [r3, #4]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	687a      	ldr	r2, [r7, #4]
 800bfea:	7c12      	ldrb	r2, [r2, #16]
 800bfec:	f107 0108 	add.w	r1, r7, #8
 800bff0:	4610      	mov	r0, r2
 800bff2:	4798      	blx	r3
 800bff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bff6:	e091      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bff8:	6839      	ldr	r1, [r7, #0]
 800bffa:	6878      	ldr	r0, [r7, #4]
 800bffc:	f000 fa97 	bl	800c52e <USBD_CtlError>
            err++;
 800c000:	7afb      	ldrb	r3, [r7, #11]
 800c002:	3301      	adds	r3, #1
 800c004:	72fb      	strb	r3, [r7, #11]
          break;
 800c006:	e089      	b.n	800c11c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00b      	beq.n	800c02c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c01a:	689b      	ldr	r3, [r3, #8]
 800c01c:	687a      	ldr	r2, [r7, #4]
 800c01e:	7c12      	ldrb	r2, [r2, #16]
 800c020:	f107 0108 	add.w	r1, r7, #8
 800c024:	4610      	mov	r0, r2
 800c026:	4798      	blx	r3
 800c028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c02a:	e077      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f000 fa7d 	bl	800c52e <USBD_CtlError>
            err++;
 800c034:	7afb      	ldrb	r3, [r7, #11]
 800c036:	3301      	adds	r3, #1
 800c038:	72fb      	strb	r3, [r7, #11]
          break;
 800c03a:	e06f      	b.n	800c11c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d00b      	beq.n	800c060 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	7c12      	ldrb	r2, [r2, #16]
 800c054:	f107 0108 	add.w	r1, r7, #8
 800c058:	4610      	mov	r0, r2
 800c05a:	4798      	blx	r3
 800c05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c05e:	e05d      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c060:	6839      	ldr	r1, [r7, #0]
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fa63 	bl	800c52e <USBD_CtlError>
            err++;
 800c068:	7afb      	ldrb	r3, [r7, #11]
 800c06a:	3301      	adds	r3, #1
 800c06c:	72fb      	strb	r3, [r7, #11]
          break;
 800c06e:	e055      	b.n	800c11c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c076:	691b      	ldr	r3, [r3, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00b      	beq.n	800c094 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c082:	691b      	ldr	r3, [r3, #16]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	7c12      	ldrb	r2, [r2, #16]
 800c088:	f107 0108 	add.w	r1, r7, #8
 800c08c:	4610      	mov	r0, r2
 800c08e:	4798      	blx	r3
 800c090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c092:	e043      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 fa49 	bl	800c52e <USBD_CtlError>
            err++;
 800c09c:	7afb      	ldrb	r3, [r7, #11]
 800c09e:	3301      	adds	r3, #1
 800c0a0:	72fb      	strb	r3, [r7, #11]
          break;
 800c0a2:	e03b      	b.n	800c11c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0aa:	695b      	ldr	r3, [r3, #20]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00b      	beq.n	800c0c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	7c12      	ldrb	r2, [r2, #16]
 800c0bc:	f107 0108 	add.w	r1, r7, #8
 800c0c0:	4610      	mov	r0, r2
 800c0c2:	4798      	blx	r3
 800c0c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0c6:	e029      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 fa2f 	bl	800c52e <USBD_CtlError>
            err++;
 800c0d0:	7afb      	ldrb	r3, [r7, #11]
 800c0d2:	3301      	adds	r3, #1
 800c0d4:	72fb      	strb	r3, [r7, #11]
          break;
 800c0d6:	e021      	b.n	800c11c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0de:	699b      	ldr	r3, [r3, #24]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d00b      	beq.n	800c0fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	687a      	ldr	r2, [r7, #4]
 800c0ee:	7c12      	ldrb	r2, [r2, #16]
 800c0f0:	f107 0108 	add.w	r1, r7, #8
 800c0f4:	4610      	mov	r0, r2
 800c0f6:	4798      	blx	r3
 800c0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c0fa:	e00f      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c0fc:	6839      	ldr	r1, [r7, #0]
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fa15 	bl	800c52e <USBD_CtlError>
            err++;
 800c104:	7afb      	ldrb	r3, [r7, #11]
 800c106:	3301      	adds	r3, #1
 800c108:	72fb      	strb	r3, [r7, #11]
          break;
 800c10a:	e007      	b.n	800c11c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c10c:	6839      	ldr	r1, [r7, #0]
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fa0d 	bl	800c52e <USBD_CtlError>
          err++;
 800c114:	7afb      	ldrb	r3, [r7, #11]
 800c116:	3301      	adds	r3, #1
 800c118:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c11a:	e038      	b.n	800c18e <USBD_GetDescriptor+0x286>
 800c11c:	e037      	b.n	800c18e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	7c1b      	ldrb	r3, [r3, #16]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d109      	bne.n	800c13a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c12e:	f107 0208 	add.w	r2, r7, #8
 800c132:	4610      	mov	r0, r2
 800c134:	4798      	blx	r3
 800c136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c138:	e029      	b.n	800c18e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c13a:	6839      	ldr	r1, [r7, #0]
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 f9f6 	bl	800c52e <USBD_CtlError>
        err++;
 800c142:	7afb      	ldrb	r3, [r7, #11]
 800c144:	3301      	adds	r3, #1
 800c146:	72fb      	strb	r3, [r7, #11]
      break;
 800c148:	e021      	b.n	800c18e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	7c1b      	ldrb	r3, [r3, #16]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d10d      	bne.n	800c16e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15a:	f107 0208 	add.w	r2, r7, #8
 800c15e:	4610      	mov	r0, r2
 800c160:	4798      	blx	r3
 800c162:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	3301      	adds	r3, #1
 800c168:	2207      	movs	r2, #7
 800c16a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c16c:	e00f      	b.n	800c18e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c16e:	6839      	ldr	r1, [r7, #0]
 800c170:	6878      	ldr	r0, [r7, #4]
 800c172:	f000 f9dc 	bl	800c52e <USBD_CtlError>
        err++;
 800c176:	7afb      	ldrb	r3, [r7, #11]
 800c178:	3301      	adds	r3, #1
 800c17a:	72fb      	strb	r3, [r7, #11]
      break;
 800c17c:	e007      	b.n	800c18e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f9d4 	bl	800c52e <USBD_CtlError>
      err++;
 800c186:	7afb      	ldrb	r3, [r7, #11]
 800c188:	3301      	adds	r3, #1
 800c18a:	72fb      	strb	r3, [r7, #11]
      break;
 800c18c:	bf00      	nop
  }

  if (err != 0U)
 800c18e:	7afb      	ldrb	r3, [r7, #11]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d11c      	bne.n	800c1ce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c194:	893b      	ldrh	r3, [r7, #8]
 800c196:	2b00      	cmp	r3, #0
 800c198:	d011      	beq.n	800c1be <USBD_GetDescriptor+0x2b6>
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	88db      	ldrh	r3, [r3, #6]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00d      	beq.n	800c1be <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	88da      	ldrh	r2, [r3, #6]
 800c1a6:	893b      	ldrh	r3, [r7, #8]
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	bf28      	it	cs
 800c1ac:	4613      	movcs	r3, r2
 800c1ae:	b29b      	uxth	r3, r3
 800c1b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c1b2:	893b      	ldrh	r3, [r7, #8]
 800c1b4:	461a      	mov	r2, r3
 800c1b6:	68f9      	ldr	r1, [r7, #12]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fa22 	bl	800c602 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c1be:	683b      	ldr	r3, [r7, #0]
 800c1c0:	88db      	ldrh	r3, [r3, #6]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d104      	bne.n	800c1d0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f000 fa79 	bl	800c6be <USBD_CtlSendStatus>
 800c1cc:	e000      	b.n	800c1d0 <USBD_GetDescriptor+0x2c8>
    return;
 800c1ce:	bf00      	nop
    }
  }
}
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
 800c1d6:	bf00      	nop

0800c1d8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b084      	sub	sp, #16
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	889b      	ldrh	r3, [r3, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d130      	bne.n	800c24c <USBD_SetAddress+0x74>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	88db      	ldrh	r3, [r3, #6]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d12c      	bne.n	800c24c <USBD_SetAddress+0x74>
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	885b      	ldrh	r3, [r3, #2]
 800c1f6:	2b7f      	cmp	r3, #127	; 0x7f
 800c1f8:	d828      	bhi.n	800c24c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c1fa:	683b      	ldr	r3, [r7, #0]
 800c1fc:	885b      	ldrh	r3, [r3, #2]
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d104      	bne.n	800c21a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f98b 	bl	800c52e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c218:	e01d      	b.n	800c256 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	7bfa      	ldrb	r2, [r7, #15]
 800c21e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 fe7b 	bl	800cf22 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fa46 	bl	800c6be <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c232:	7bfb      	ldrb	r3, [r7, #15]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d004      	beq.n	800c242 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2202      	movs	r2, #2
 800c23c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c240:	e009      	b.n	800c256 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c24a:	e004      	b.n	800c256 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f96d 	bl	800c52e <USBD_CtlError>
  }
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop
 800c258:	3710      	adds	r7, #16
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b082      	sub	sp, #8
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	885b      	ldrh	r3, [r3, #2]
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	4b41      	ldr	r3, [pc, #260]	; (800c378 <USBD_SetConfig+0x118>)
 800c272:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c274:	4b40      	ldr	r3, [pc, #256]	; (800c378 <USBD_SetConfig+0x118>)
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d904      	bls.n	800c286 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f000 f955 	bl	800c52e <USBD_CtlError>
 800c284:	e075      	b.n	800c372 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d002      	beq.n	800c296 <USBD_SetConfig+0x36>
 800c290:	2b03      	cmp	r3, #3
 800c292:	d023      	beq.n	800c2dc <USBD_SetConfig+0x7c>
 800c294:	e062      	b.n	800c35c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c296:	4b38      	ldr	r3, [pc, #224]	; (800c378 <USBD_SetConfig+0x118>)
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d01a      	beq.n	800c2d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c29e:	4b36      	ldr	r3, [pc, #216]	; (800c378 <USBD_SetConfig+0x118>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2203      	movs	r2, #3
 800c2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c2b0:	4b31      	ldr	r3, [pc, #196]	; (800c378 <USBD_SetConfig+0x118>)
 800c2b2:	781b      	ldrb	r3, [r3, #0]
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f7ff f9e8 	bl	800b68c <USBD_SetClassConfig>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b02      	cmp	r3, #2
 800c2c0:	d104      	bne.n	800c2cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c2c2:	6839      	ldr	r1, [r7, #0]
 800c2c4:	6878      	ldr	r0, [r7, #4]
 800c2c6:	f000 f932 	bl	800c52e <USBD_CtlError>
            return;
 800c2ca:	e052      	b.n	800c372 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f000 f9f6 	bl	800c6be <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c2d2:	e04e      	b.n	800c372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f9f2 	bl	800c6be <USBD_CtlSendStatus>
        break;
 800c2da:	e04a      	b.n	800c372 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c2dc:	4b26      	ldr	r3, [pc, #152]	; (800c378 <USBD_SetConfig+0x118>)
 800c2de:	781b      	ldrb	r3, [r3, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d112      	bne.n	800c30a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2202      	movs	r2, #2
 800c2e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c2ec:	4b22      	ldr	r3, [pc, #136]	; (800c378 <USBD_SetConfig+0x118>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c2f6:	4b20      	ldr	r3, [pc, #128]	; (800c378 <USBD_SetConfig+0x118>)
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff f9e4 	bl	800b6ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f000 f9db 	bl	800c6be <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c308:	e033      	b.n	800c372 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c30a:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <USBD_SetConfig+0x118>)
 800c30c:	781b      	ldrb	r3, [r3, #0]
 800c30e:	461a      	mov	r2, r3
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	429a      	cmp	r2, r3
 800c316:	d01d      	beq.n	800c354 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	4619      	mov	r1, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f7ff f9d2 	bl	800b6ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c326:	4b14      	ldr	r3, [pc, #80]	; (800c378 <USBD_SetConfig+0x118>)
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	461a      	mov	r2, r3
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c330:	4b11      	ldr	r3, [pc, #68]	; (800c378 <USBD_SetConfig+0x118>)
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	4619      	mov	r1, r3
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7ff f9a8 	bl	800b68c <USBD_SetClassConfig>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d104      	bne.n	800c34c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c342:	6839      	ldr	r1, [r7, #0]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 f8f2 	bl	800c52e <USBD_CtlError>
            return;
 800c34a:	e012      	b.n	800c372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c34c:	6878      	ldr	r0, [r7, #4]
 800c34e:	f000 f9b6 	bl	800c6be <USBD_CtlSendStatus>
        break;
 800c352:	e00e      	b.n	800c372 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f9b2 	bl	800c6be <USBD_CtlSendStatus>
        break;
 800c35a:	e00a      	b.n	800c372 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c35c:	6839      	ldr	r1, [r7, #0]
 800c35e:	6878      	ldr	r0, [r7, #4]
 800c360:	f000 f8e5 	bl	800c52e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c364:	4b04      	ldr	r3, [pc, #16]	; (800c378 <USBD_SetConfig+0x118>)
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7ff f9ad 	bl	800b6ca <USBD_ClrClassConfig>
        break;
 800c370:	bf00      	nop
    }
  }
}
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	200004c6 	.word	0x200004c6

0800c37c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	88db      	ldrh	r3, [r3, #6]
 800c38a:	2b01      	cmp	r3, #1
 800c38c:	d004      	beq.n	800c398 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c38e:	6839      	ldr	r1, [r7, #0]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 f8cc 	bl	800c52e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c396:	e022      	b.n	800c3de <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c39e:	2b02      	cmp	r3, #2
 800c3a0:	dc02      	bgt.n	800c3a8 <USBD_GetConfig+0x2c>
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	dc03      	bgt.n	800c3ae <USBD_GetConfig+0x32>
 800c3a6:	e015      	b.n	800c3d4 <USBD_GetConfig+0x58>
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	d00b      	beq.n	800c3c4 <USBD_GetConfig+0x48>
 800c3ac:	e012      	b.n	800c3d4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	2201      	movs	r2, #1
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 f920 	bl	800c602 <USBD_CtlSendData>
        break;
 800c3c2:	e00c      	b.n	800c3de <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	3304      	adds	r3, #4
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f918 	bl	800c602 <USBD_CtlSendData>
        break;
 800c3d2:	e004      	b.n	800c3de <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f8a9 	bl	800c52e <USBD_CtlError>
        break;
 800c3dc:	bf00      	nop
}
 800c3de:	bf00      	nop
 800c3e0:	3708      	adds	r7, #8
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}

0800c3e6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3e6:	b580      	push	{r7, lr}
 800c3e8:	b082      	sub	sp, #8
 800c3ea:	af00      	add	r7, sp, #0
 800c3ec:	6078      	str	r0, [r7, #4]
 800c3ee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	2b02      	cmp	r3, #2
 800c3fa:	d81e      	bhi.n	800c43a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	88db      	ldrh	r3, [r3, #6]
 800c400:	2b02      	cmp	r3, #2
 800c402:	d004      	beq.n	800c40e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c404:	6839      	ldr	r1, [r7, #0]
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 f891 	bl	800c52e <USBD_CtlError>
        break;
 800c40c:	e01a      	b.n	800c444 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2201      	movs	r2, #1
 800c412:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d005      	beq.n	800c42a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	68db      	ldr	r3, [r3, #12]
 800c422:	f043 0202 	orr.w	r2, r3, #2
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	330c      	adds	r3, #12
 800c42e:	2202      	movs	r2, #2
 800c430:	4619      	mov	r1, r3
 800c432:	6878      	ldr	r0, [r7, #4]
 800c434:	f000 f8e5 	bl	800c602 <USBD_CtlSendData>
      break;
 800c438:	e004      	b.n	800c444 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 f876 	bl	800c52e <USBD_CtlError>
      break;
 800c442:	bf00      	nop
  }
}
 800c444:	bf00      	nop
 800c446:	3708      	adds	r7, #8
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b082      	sub	sp, #8
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	2b01      	cmp	r3, #1
 800c45c:	d106      	bne.n	800c46c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2201      	movs	r2, #1
 800c462:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 f929 	bl	800c6be <USBD_CtlSendStatus>
  }
}
 800c46c:	bf00      	nop
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b082      	sub	sp, #8
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c484:	3b01      	subs	r3, #1
 800c486:	2b02      	cmp	r3, #2
 800c488:	d80b      	bhi.n	800c4a2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	885b      	ldrh	r3, [r3, #2]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d10c      	bne.n	800c4ac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	2200      	movs	r2, #0
 800c496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c49a:	6878      	ldr	r0, [r7, #4]
 800c49c:	f000 f90f 	bl	800c6be <USBD_CtlSendStatus>
      }
      break;
 800c4a0:	e004      	b.n	800c4ac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f000 f842 	bl	800c52e <USBD_CtlError>
      break;
 800c4aa:	e000      	b.n	800c4ae <USBD_ClrFeature+0x3a>
      break;
 800c4ac:	bf00      	nop
  }
}
 800c4ae:	bf00      	nop
 800c4b0:	3708      	adds	r7, #8
 800c4b2:	46bd      	mov	sp, r7
 800c4b4:	bd80      	pop	{r7, pc}

0800c4b6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b083      	sub	sp, #12
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	6078      	str	r0, [r7, #4]
 800c4be:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	781a      	ldrb	r2, [r3, #0]
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	785a      	ldrb	r2, [r3, #1]
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	3302      	adds	r3, #2
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	b29a      	uxth	r2, r3
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	3303      	adds	r3, #3
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b29b      	uxth	r3, r3
 800c4e0:	021b      	lsls	r3, r3, #8
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	4413      	add	r3, r2
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	3304      	adds	r3, #4
 800c4f0:	781b      	ldrb	r3, [r3, #0]
 800c4f2:	b29a      	uxth	r2, r3
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	3305      	adds	r3, #5
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	b29b      	uxth	r3, r3
 800c4fc:	021b      	lsls	r3, r3, #8
 800c4fe:	b29b      	uxth	r3, r3
 800c500:	4413      	add	r3, r2
 800c502:	b29a      	uxth	r2, r3
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	3306      	adds	r3, #6
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	b29a      	uxth	r2, r3
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	3307      	adds	r3, #7
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	b29b      	uxth	r3, r3
 800c518:	021b      	lsls	r3, r3, #8
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4413      	add	r3, r2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	80da      	strh	r2, [r3, #6]

}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	bc80      	pop	{r7}
 800c52c:	4770      	bx	lr

0800c52e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b082      	sub	sp, #8
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c538:	2180      	movs	r1, #128	; 0x80
 800c53a:	6878      	ldr	r0, [r7, #4]
 800c53c:	f000 fc88 	bl	800ce50 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c540:	2100      	movs	r1, #0
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fc84 	bl	800ce50 <USBD_LL_StallEP>
}
 800c548:	bf00      	nop
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b086      	sub	sp, #24
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c55c:	2300      	movs	r3, #0
 800c55e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d032      	beq.n	800c5cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f000 f834 	bl	800c5d4 <USBD_GetLen>
 800c56c:	4603      	mov	r3, r0
 800c56e:	3301      	adds	r3, #1
 800c570:	b29b      	uxth	r3, r3
 800c572:	005b      	lsls	r3, r3, #1
 800c574:	b29a      	uxth	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800c57a:	7dfb      	ldrb	r3, [r7, #23]
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	75fa      	strb	r2, [r7, #23]
 800c580:	461a      	mov	r2, r3
 800c582:	68bb      	ldr	r3, [r7, #8]
 800c584:	4413      	add	r3, r2
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	7812      	ldrb	r2, [r2, #0]
 800c58a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800c58c:	7dfb      	ldrb	r3, [r7, #23]
 800c58e:	1c5a      	adds	r2, r3, #1
 800c590:	75fa      	strb	r2, [r7, #23]
 800c592:	461a      	mov	r2, r3
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	4413      	add	r3, r2
 800c598:	2203      	movs	r2, #3
 800c59a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800c59c:	e012      	b.n	800c5c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	60fa      	str	r2, [r7, #12]
 800c5a4:	7dfa      	ldrb	r2, [r7, #23]
 800c5a6:	1c51      	adds	r1, r2, #1
 800c5a8:	75f9      	strb	r1, [r7, #23]
 800c5aa:	4611      	mov	r1, r2
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	440a      	add	r2, r1
 800c5b0:	781b      	ldrb	r3, [r3, #0]
 800c5b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800c5b4:	7dfb      	ldrb	r3, [r7, #23]
 800c5b6:	1c5a      	adds	r2, r3, #1
 800c5b8:	75fa      	strb	r2, [r7, #23]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	4413      	add	r3, r2
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d1e8      	bne.n	800c59e <USBD_GetString+0x4e>
    }
  }
}
 800c5cc:	bf00      	nop
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800c5e0:	e005      	b.n	800c5ee <USBD_GetLen+0x1a>
  {
    len++;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	3301      	adds	r3, #1
 800c5e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	781b      	ldrb	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d1f5      	bne.n	800c5e2 <USBD_GetLen+0xe>
  }

  return len;
 800c5f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3714      	adds	r7, #20
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bc80      	pop	{r7}
 800c600:	4770      	bx	lr

0800c602 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	60f8      	str	r0, [r7, #12]
 800c60a:	60b9      	str	r1, [r7, #8]
 800c60c:	4613      	mov	r3, r2
 800c60e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2202      	movs	r2, #2
 800c614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c618:	88fa      	ldrh	r2, [r7, #6]
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c61e:	88fa      	ldrh	r2, [r7, #6]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c624:	88fb      	ldrh	r3, [r7, #6]
 800c626:	68ba      	ldr	r2, [r7, #8]
 800c628:	2100      	movs	r1, #0
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f000 fc98 	bl	800cf60 <USBD_LL_Transmit>

  return USBD_OK;
 800c630:	2300      	movs	r3, #0
}
 800c632:	4618      	mov	r0, r3
 800c634:	3710      	adds	r7, #16
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}

0800c63a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c63a:	b580      	push	{r7, lr}
 800c63c:	b084      	sub	sp, #16
 800c63e:	af00      	add	r7, sp, #0
 800c640:	60f8      	str	r0, [r7, #12]
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	4613      	mov	r3, r2
 800c646:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	68ba      	ldr	r2, [r7, #8]
 800c64c:	2100      	movs	r1, #0
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fc86 	bl	800cf60 <USBD_LL_Transmit>

  return USBD_OK;
 800c654:	2300      	movs	r3, #0
}
 800c656:	4618      	mov	r0, r3
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}

0800c65e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	60f8      	str	r0, [r7, #12]
 800c666:	60b9      	str	r1, [r7, #8]
 800c668:	4613      	mov	r3, r2
 800c66a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	2203      	movs	r2, #3
 800c670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c674:	88fa      	ldrh	r2, [r7, #6]
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800c67c:	88fa      	ldrh	r2, [r7, #6]
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c684:	88fb      	ldrh	r3, [r7, #6]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	2100      	movs	r1, #0
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f000 fc8b 	bl	800cfa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b084      	sub	sp, #16
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	60f8      	str	r0, [r7, #12]
 800c6a2:	60b9      	str	r1, [r7, #8]
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c6a8:	88fb      	ldrh	r3, [r7, #6]
 800c6aa:	68ba      	ldr	r2, [r7, #8]
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	68f8      	ldr	r0, [r7, #12]
 800c6b0:	f000 fc79 	bl	800cfa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c6b4:	2300      	movs	r3, #0
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}

0800c6be <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b082      	sub	sp, #8
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2204      	movs	r2, #4
 800c6ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f000 fc43 	bl	800cf60 <USBD_LL_Transmit>

  return USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3708      	adds	r7, #8
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}

0800c6e4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b082      	sub	sp, #8
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2205      	movs	r2, #5
 800c6f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	2100      	movs	r1, #0
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 fc53 	bl	800cfa6 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c700:	2300      	movs	r3, #0
}
 800c702:	4618      	mov	r0, r3
 800c704:	3708      	adds	r7, #8
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b087      	sub	sp, #28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c71a:	2301      	movs	r3, #1
 800c71c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c71e:	2300      	movs	r3, #0
 800c720:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c722:	4b1e      	ldr	r3, [pc, #120]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c724:	7a5b      	ldrb	r3, [r3, #9]
 800c726:	b2db      	uxtb	r3, r3
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d831      	bhi.n	800c790 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c72c:	4b1b      	ldr	r3, [pc, #108]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c72e:	7a5b      	ldrb	r3, [r3, #9]
 800c730:	b2db      	uxtb	r3, r3
 800c732:	461a      	mov	r2, r3
 800c734:	4b19      	ldr	r3, [pc, #100]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c736:	2100      	movs	r1, #0
 800c738:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c73a:	4b18      	ldr	r3, [pc, #96]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c73c:	7a5b      	ldrb	r3, [r3, #9]
 800c73e:	b2db      	uxtb	r3, r3
 800c740:	4a16      	ldr	r2, [pc, #88]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	4413      	add	r3, r2
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c74a:	4b14      	ldr	r3, [pc, #80]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c74c:	7a5b      	ldrb	r3, [r3, #9]
 800c74e:	b2db      	uxtb	r3, r3
 800c750:	461a      	mov	r2, r3
 800c752:	4b12      	ldr	r3, [pc, #72]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c754:	4413      	add	r3, r2
 800c756:	79fa      	ldrb	r2, [r7, #7]
 800c758:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c75a:	4b10      	ldr	r3, [pc, #64]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c75c:	7a5b      	ldrb	r3, [r3, #9]
 800c75e:	b2db      	uxtb	r3, r3
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	b2d1      	uxtb	r1, r2
 800c764:	4a0d      	ldr	r2, [pc, #52]	; (800c79c <FATFS_LinkDriverEx+0x90>)
 800c766:	7251      	strb	r1, [r2, #9]
 800c768:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c76a:	7dbb      	ldrb	r3, [r7, #22]
 800c76c:	3330      	adds	r3, #48	; 0x30
 800c76e:	b2da      	uxtb	r2, r3
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	3301      	adds	r3, #1
 800c778:	223a      	movs	r2, #58	; 0x3a
 800c77a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	3302      	adds	r3, #2
 800c780:	222f      	movs	r2, #47	; 0x2f
 800c782:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	3303      	adds	r3, #3
 800c788:	2200      	movs	r2, #0
 800c78a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c78c:	2300      	movs	r3, #0
 800c78e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
}
 800c792:	4618      	mov	r0, r3
 800c794:	371c      	adds	r7, #28
 800c796:	46bd      	mov	sp, r7
 800c798:	bc80      	pop	{r7}
 800c79a:	4770      	bx	lr
 800c79c:	200004c8 	.word	0x200004c8

0800c7a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	6839      	ldr	r1, [r7, #0]
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f7ff ffac 	bl	800c70c <FATFS_LinkDriverEx>
 800c7b4:	4603      	mov	r3, r0
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3708      	adds	r7, #8
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}
	...

0800c7c0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4912      	ldr	r1, [pc, #72]	; (800c810 <MX_USB_DEVICE_Init+0x50>)
 800c7c8:	4812      	ldr	r0, [pc, #72]	; (800c814 <MX_USB_DEVICE_Init+0x54>)
 800c7ca:	f7fe ff05 	bl	800b5d8 <USBD_Init>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d001      	beq.n	800c7d8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c7d4:	f7f4 fa24 	bl	8000c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c7d8:	490f      	ldr	r1, [pc, #60]	; (800c818 <MX_USB_DEVICE_Init+0x58>)
 800c7da:	480e      	ldr	r0, [pc, #56]	; (800c814 <MX_USB_DEVICE_Init+0x54>)
 800c7dc:	f7fe ff27 	bl	800b62e <USBD_RegisterClass>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d001      	beq.n	800c7ea <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c7e6:	f7f4 fa1b 	bl	8000c20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c7ea:	490c      	ldr	r1, [pc, #48]	; (800c81c <MX_USB_DEVICE_Init+0x5c>)
 800c7ec:	4809      	ldr	r0, [pc, #36]	; (800c814 <MX_USB_DEVICE_Init+0x54>)
 800c7ee:	f7fe fe87 	bl	800b500 <USBD_CDC_RegisterInterface>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d001      	beq.n	800c7fc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c7f8:	f7f4 fa12 	bl	8000c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c7fc:	4805      	ldr	r0, [pc, #20]	; (800c814 <MX_USB_DEVICE_Init+0x54>)
 800c7fe:	f7fe ff2f 	bl	800b660 <USBD_Start>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c808:	f7f4 fa0a 	bl	8000c20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c80c:	bf00      	nop
 800c80e:	bd80      	pop	{r7, pc}
 800c810:	20000140 	.word	0x20000140
 800c814:	200004d4 	.word	0x200004d4
 800c818:	2000002c 	.word	0x2000002c
 800c81c:	20000130 	.word	0x20000130

0800c820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c820:	b580      	push	{r7, lr}
 800c822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c824:	2200      	movs	r2, #0
 800c826:	4905      	ldr	r1, [pc, #20]	; (800c83c <CDC_Init_FS+0x1c>)
 800c828:	4805      	ldr	r0, [pc, #20]	; (800c840 <CDC_Init_FS+0x20>)
 800c82a:	f7fe fe7f 	bl	800b52c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c82e:	4905      	ldr	r1, [pc, #20]	; (800c844 <CDC_Init_FS+0x24>)
 800c830:	4803      	ldr	r0, [pc, #12]	; (800c840 <CDC_Init_FS+0x20>)
 800c832:	f7fe fe94 	bl	800b55e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c838:	4618      	mov	r0, r3
 800c83a:	bd80      	pop	{r7, pc}
 800c83c:	20000b98 	.word	0x20000b98
 800c840:	200004d4 	.word	0x200004d4
 800c844:	20000798 	.word	0x20000798

0800c848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c848:	b480      	push	{r7}
 800c84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c84c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c84e:	4618      	mov	r0, r3
 800c850:	46bd      	mov	sp, r7
 800c852:	bc80      	pop	{r7}
 800c854:	4770      	bx	lr
	...

0800c858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	4603      	mov	r3, r0
 800c860:	6039      	str	r1, [r7, #0]
 800c862:	71fb      	strb	r3, [r7, #7]
 800c864:	4613      	mov	r3, r2
 800c866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c868:	79fb      	ldrb	r3, [r7, #7]
 800c86a:	2b23      	cmp	r3, #35	; 0x23
 800c86c:	d84a      	bhi.n	800c904 <CDC_Control_FS+0xac>
 800c86e:	a201      	add	r2, pc, #4	; (adr r2, 800c874 <CDC_Control_FS+0x1c>)
 800c870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c874:	0800c905 	.word	0x0800c905
 800c878:	0800c905 	.word	0x0800c905
 800c87c:	0800c905 	.word	0x0800c905
 800c880:	0800c905 	.word	0x0800c905
 800c884:	0800c905 	.word	0x0800c905
 800c888:	0800c905 	.word	0x0800c905
 800c88c:	0800c905 	.word	0x0800c905
 800c890:	0800c905 	.word	0x0800c905
 800c894:	0800c905 	.word	0x0800c905
 800c898:	0800c905 	.word	0x0800c905
 800c89c:	0800c905 	.word	0x0800c905
 800c8a0:	0800c905 	.word	0x0800c905
 800c8a4:	0800c905 	.word	0x0800c905
 800c8a8:	0800c905 	.word	0x0800c905
 800c8ac:	0800c905 	.word	0x0800c905
 800c8b0:	0800c905 	.word	0x0800c905
 800c8b4:	0800c905 	.word	0x0800c905
 800c8b8:	0800c905 	.word	0x0800c905
 800c8bc:	0800c905 	.word	0x0800c905
 800c8c0:	0800c905 	.word	0x0800c905
 800c8c4:	0800c905 	.word	0x0800c905
 800c8c8:	0800c905 	.word	0x0800c905
 800c8cc:	0800c905 	.word	0x0800c905
 800c8d0:	0800c905 	.word	0x0800c905
 800c8d4:	0800c905 	.word	0x0800c905
 800c8d8:	0800c905 	.word	0x0800c905
 800c8dc:	0800c905 	.word	0x0800c905
 800c8e0:	0800c905 	.word	0x0800c905
 800c8e4:	0800c905 	.word	0x0800c905
 800c8e8:	0800c905 	.word	0x0800c905
 800c8ec:	0800c905 	.word	0x0800c905
 800c8f0:	0800c905 	.word	0x0800c905
 800c8f4:	0800c905 	.word	0x0800c905
 800c8f8:	0800c905 	.word	0x0800c905
 800c8fc:	0800c905 	.word	0x0800c905
 800c900:	0800c905 	.word	0x0800c905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c904:	bf00      	nop
  }

  return (USBD_OK);
 800c906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c908:	4618      	mov	r0, r3
 800c90a:	370c      	adds	r7, #12
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bc80      	pop	{r7}
 800c910:	4770      	bx	lr
 800c912:	bf00      	nop

0800c914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b082      	sub	sp, #8
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
 800c91c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4805      	ldr	r0, [pc, #20]	; (800c938 <CDC_Receive_FS+0x24>)
 800c922:	f7fe fe1c 	bl	800b55e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c926:	4804      	ldr	r0, [pc, #16]	; (800c938 <CDC_Receive_FS+0x24>)
 800c928:	f7fe fe2c 	bl	800b584 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c92c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c92e:	4618      	mov	r0, r3
 800c930:	3708      	adds	r7, #8
 800c932:	46bd      	mov	sp, r7
 800c934:	bd80      	pop	{r7, pc}
 800c936:	bf00      	nop
 800c938:	200004d4 	.word	0x200004d4

0800c93c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b083      	sub	sp, #12
 800c940:	af00      	add	r7, sp, #0
 800c942:	4603      	mov	r3, r0
 800c944:	6039      	str	r1, [r7, #0]
 800c946:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	2212      	movs	r2, #18
 800c94c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c94e:	4b03      	ldr	r3, [pc, #12]	; (800c95c <USBD_FS_DeviceDescriptor+0x20>)
}
 800c950:	4618      	mov	r0, r3
 800c952:	370c      	adds	r7, #12
 800c954:	46bd      	mov	sp, r7
 800c956:	bc80      	pop	{r7}
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	2000015c 	.word	0x2000015c

0800c960 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c960:	b480      	push	{r7}
 800c962:	b083      	sub	sp, #12
 800c964:	af00      	add	r7, sp, #0
 800c966:	4603      	mov	r3, r0
 800c968:	6039      	str	r1, [r7, #0]
 800c96a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	2204      	movs	r2, #4
 800c970:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c972:	4b03      	ldr	r3, [pc, #12]	; (800c980 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c974:	4618      	mov	r0, r3
 800c976:	370c      	adds	r7, #12
 800c978:	46bd      	mov	sp, r7
 800c97a:	bc80      	pop	{r7}
 800c97c:	4770      	bx	lr
 800c97e:	bf00      	nop
 800c980:	20000170 	.word	0x20000170

0800c984 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	4603      	mov	r3, r0
 800c98c:	6039      	str	r1, [r7, #0]
 800c98e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c990:	79fb      	ldrb	r3, [r7, #7]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d105      	bne.n	800c9a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c996:	683a      	ldr	r2, [r7, #0]
 800c998:	4907      	ldr	r1, [pc, #28]	; (800c9b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c99a:	4808      	ldr	r0, [pc, #32]	; (800c9bc <USBD_FS_ProductStrDescriptor+0x38>)
 800c99c:	f7ff fdd8 	bl	800c550 <USBD_GetString>
 800c9a0:	e004      	b.n	800c9ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c9a2:	683a      	ldr	r2, [r7, #0]
 800c9a4:	4904      	ldr	r1, [pc, #16]	; (800c9b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800c9a6:	4805      	ldr	r0, [pc, #20]	; (800c9bc <USBD_FS_ProductStrDescriptor+0x38>)
 800c9a8:	f7ff fdd2 	bl	800c550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c9ac:	4b02      	ldr	r3, [pc, #8]	; (800c9b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}
 800c9b6:	bf00      	nop
 800c9b8:	20000f98 	.word	0x20000f98
 800c9bc:	0800db04 	.word	0x0800db04

0800c9c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	6039      	str	r1, [r7, #0]
 800c9ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	4904      	ldr	r1, [pc, #16]	; (800c9e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c9d0:	4804      	ldr	r0, [pc, #16]	; (800c9e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c9d2:	f7ff fdbd 	bl	800c550 <USBD_GetString>
  return USBD_StrDesc;
 800c9d6:	4b02      	ldr	r3, [pc, #8]	; (800c9e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3708      	adds	r7, #8
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20000f98 	.word	0x20000f98
 800c9e4:	0800db1c 	.word	0x0800db1c

0800c9e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	6039      	str	r1, [r7, #0]
 800c9f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	221a      	movs	r2, #26
 800c9f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c9fa:	f000 f843 	bl	800ca84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c9fe:	4b02      	ldr	r3, [pc, #8]	; (800ca08 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20000174 	.word	0x20000174

0800ca0c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b082      	sub	sp, #8
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	4603      	mov	r3, r0
 800ca14:	6039      	str	r1, [r7, #0]
 800ca16:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d105      	bne.n	800ca2a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca1e:	683a      	ldr	r2, [r7, #0]
 800ca20:	4907      	ldr	r1, [pc, #28]	; (800ca40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca22:	4808      	ldr	r0, [pc, #32]	; (800ca44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca24:	f7ff fd94 	bl	800c550 <USBD_GetString>
 800ca28:	e004      	b.n	800ca34 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ca2a:	683a      	ldr	r2, [r7, #0]
 800ca2c:	4904      	ldr	r1, [pc, #16]	; (800ca40 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ca2e:	4805      	ldr	r0, [pc, #20]	; (800ca44 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ca30:	f7ff fd8e 	bl	800c550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca34:	4b02      	ldr	r3, [pc, #8]	; (800ca40 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000f98 	.word	0x20000f98
 800ca44:	0800db30 	.word	0x0800db30

0800ca48 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	4603      	mov	r3, r0
 800ca50:	6039      	str	r1, [r7, #0]
 800ca52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d105      	bne.n	800ca66 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca5a:	683a      	ldr	r2, [r7, #0]
 800ca5c:	4907      	ldr	r1, [pc, #28]	; (800ca7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca5e:	4808      	ldr	r0, [pc, #32]	; (800ca80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca60:	f7ff fd76 	bl	800c550 <USBD_GetString>
 800ca64:	e004      	b.n	800ca70 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ca66:	683a      	ldr	r2, [r7, #0]
 800ca68:	4904      	ldr	r1, [pc, #16]	; (800ca7c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ca6a:	4805      	ldr	r0, [pc, #20]	; (800ca80 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ca6c:	f7ff fd70 	bl	800c550 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ca70:	4b02      	ldr	r3, [pc, #8]	; (800ca7c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3708      	adds	r7, #8
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20000f98 	.word	0x20000f98
 800ca80:	0800db3c 	.word	0x0800db3c

0800ca84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ca8a:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <Get_SerialNum+0x44>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ca90:	4b0e      	ldr	r3, [pc, #56]	; (800cacc <Get_SerialNum+0x48>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ca96:	4b0e      	ldr	r3, [pc, #56]	; (800cad0 <Get_SerialNum+0x4c>)
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ca9c:	68fa      	ldr	r2, [r7, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4413      	add	r3, r2
 800caa2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d009      	beq.n	800cabe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800caaa:	2208      	movs	r2, #8
 800caac:	4909      	ldr	r1, [pc, #36]	; (800cad4 <Get_SerialNum+0x50>)
 800caae:	68f8      	ldr	r0, [r7, #12]
 800cab0:	f000 f814 	bl	800cadc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cab4:	2204      	movs	r2, #4
 800cab6:	4908      	ldr	r1, [pc, #32]	; (800cad8 <Get_SerialNum+0x54>)
 800cab8:	68b8      	ldr	r0, [r7, #8]
 800caba:	f000 f80f 	bl	800cadc <IntToUnicode>
  }
}
 800cabe:	bf00      	nop
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	1ffff7e8 	.word	0x1ffff7e8
 800cacc:	1ffff7ec 	.word	0x1ffff7ec
 800cad0:	1ffff7f0 	.word	0x1ffff7f0
 800cad4:	20000176 	.word	0x20000176
 800cad8:	20000186 	.word	0x20000186

0800cadc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cadc:	b480      	push	{r7}
 800cade:	b087      	sub	sp, #28
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	4613      	mov	r3, r2
 800cae8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800caee:	2300      	movs	r3, #0
 800caf0:	75fb      	strb	r3, [r7, #23]
 800caf2:	e027      	b.n	800cb44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	0f1b      	lsrs	r3, r3, #28
 800caf8:	2b09      	cmp	r3, #9
 800cafa:	d80b      	bhi.n	800cb14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	0f1b      	lsrs	r3, r3, #28
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	7dfb      	ldrb	r3, [r7, #23]
 800cb04:	005b      	lsls	r3, r3, #1
 800cb06:	4619      	mov	r1, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	440b      	add	r3, r1
 800cb0c:	3230      	adds	r2, #48	; 0x30
 800cb0e:	b2d2      	uxtb	r2, r2
 800cb10:	701a      	strb	r2, [r3, #0]
 800cb12:	e00a      	b.n	800cb2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	0f1b      	lsrs	r3, r3, #28
 800cb18:	b2da      	uxtb	r2, r3
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	005b      	lsls	r3, r3, #1
 800cb1e:	4619      	mov	r1, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	440b      	add	r3, r1
 800cb24:	3237      	adds	r2, #55	; 0x37
 800cb26:	b2d2      	uxtb	r2, r2
 800cb28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	011b      	lsls	r3, r3, #4
 800cb2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cb30:	7dfb      	ldrb	r3, [r7, #23]
 800cb32:	005b      	lsls	r3, r3, #1
 800cb34:	3301      	adds	r3, #1
 800cb36:	68ba      	ldr	r2, [r7, #8]
 800cb38:	4413      	add	r3, r2
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	3301      	adds	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
 800cb44:	7dfa      	ldrb	r2, [r7, #23]
 800cb46:	79fb      	ldrb	r3, [r7, #7]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d3d3      	bcc.n	800caf4 <IntToUnicode+0x18>
  }
}
 800cb4c:	bf00      	nop
 800cb4e:	bf00      	nop
 800cb50:	371c      	adds	r7, #28
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bc80      	pop	{r7}
 800cb56:	4770      	bx	lr

0800cb58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b084      	sub	sp, #16
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a0d      	ldr	r2, [pc, #52]	; (800cb9c <HAL_PCD_MspInit+0x44>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d113      	bne.n	800cb92 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800cb6a:	4b0d      	ldr	r3, [pc, #52]	; (800cba0 <HAL_PCD_MspInit+0x48>)
 800cb6c:	69db      	ldr	r3, [r3, #28]
 800cb6e:	4a0c      	ldr	r2, [pc, #48]	; (800cba0 <HAL_PCD_MspInit+0x48>)
 800cb70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cb74:	61d3      	str	r3, [r2, #28]
 800cb76:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <HAL_PCD_MspInit+0x48>)
 800cb78:	69db      	ldr	r3, [r3, #28]
 800cb7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800cb82:	2200      	movs	r2, #0
 800cb84:	2100      	movs	r1, #0
 800cb86:	2014      	movs	r0, #20
 800cb88:	f7f5 fa1b 	bl	8001fc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800cb8c:	2014      	movs	r0, #20
 800cb8e:	f7f5 fa34 	bl	8001ffa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800cb92:	bf00      	nop
 800cb94:	3710      	adds	r7, #16
 800cb96:	46bd      	mov	sp, r7
 800cb98:	bd80      	pop	{r7, pc}
 800cb9a:	bf00      	nop
 800cb9c:	40005c00 	.word	0x40005c00
 800cba0:	40021000 	.word	0x40021000

0800cba4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b082      	sub	sp, #8
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800cbb8:	4619      	mov	r1, r3
 800cbba:	4610      	mov	r0, r2
 800cbbc:	f7fe fd98 	bl	800b6f0 <USBD_LL_SetupStage>
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800cbda:	78fa      	ldrb	r2, [r7, #3]
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	440b      	add	r3, r1
 800cbe8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	78fb      	ldrb	r3, [r7, #3]
 800cbf0:	4619      	mov	r1, r3
 800cbf2:	f7fe fdca 	bl	800b78a <USBD_LL_DataOutStage>
}
 800cbf6:	bf00      	nop
 800cbf8:	3708      	adds	r7, #8
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	bd80      	pop	{r7, pc}

0800cbfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b082      	sub	sp, #8
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	460b      	mov	r3, r1
 800cc08:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800cc10:	78fa      	ldrb	r2, [r7, #3]
 800cc12:	6879      	ldr	r1, [r7, #4]
 800cc14:	4613      	mov	r3, r2
 800cc16:	009b      	lsls	r3, r3, #2
 800cc18:	4413      	add	r3, r2
 800cc1a:	00db      	lsls	r3, r3, #3
 800cc1c:	440b      	add	r3, r1
 800cc1e:	3324      	adds	r3, #36	; 0x24
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	78fb      	ldrb	r3, [r7, #3]
 800cc24:	4619      	mov	r1, r3
 800cc26:	f7fe fe21 	bl	800b86c <USBD_LL_DataInStage>
}
 800cc2a:	bf00      	nop
 800cc2c:	3708      	adds	r7, #8
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b082      	sub	sp, #8
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7fe ff31 	bl	800baa8 <USBD_LL_SOF>
}
 800cc46:	bf00      	nop
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}

0800cc4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc4e:	b580      	push	{r7, lr}
 800cc50:	b084      	sub	sp, #16
 800cc52:	af00      	add	r7, sp, #0
 800cc54:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800cc56:	2301      	movs	r3, #1
 800cc58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	799b      	ldrb	r3, [r3, #6]
 800cc5e:	2b02      	cmp	r3, #2
 800cc60:	d001      	beq.n	800cc66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800cc62:	f7f3 ffdd 	bl	8000c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc6c:	7bfa      	ldrb	r2, [r7, #15]
 800cc6e:	4611      	mov	r1, r2
 800cc70:	4618      	mov	r0, r3
 800cc72:	f7fe fee1 	bl	800ba38 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7fe fe9a 	bl	800b9b6 <USBD_LL_Reset>
}
 800cc82:	bf00      	nop
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
	...

0800cc8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	f7fe fedb 	bl	800ba56 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7a9b      	ldrb	r3, [r3, #10]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d005      	beq.n	800ccb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cca8:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <HAL_PCD_SuspendCallback+0x30>)
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	4a03      	ldr	r2, [pc, #12]	; (800ccbc <HAL_PCD_SuspendCallback+0x30>)
 800ccae:	f043 0306 	orr.w	r3, r3, #6
 800ccb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ccb4:	bf00      	nop
 800ccb6:	3708      	adds	r7, #8
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	e000ed00 	.word	0xe000ed00

0800ccc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7fe fed5 	bl	800ba7e <USBD_LL_Resume>
}
 800ccd4:	bf00      	nop
 800ccd6:	3708      	adds	r7, #8
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}

0800ccdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800cce4:	4a28      	ldr	r2, [pc, #160]	; (800cd88 <USBD_LL_Init+0xac>)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a26      	ldr	r2, [pc, #152]	; (800cd88 <USBD_LL_Init+0xac>)
 800ccf0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ccf4:	4b24      	ldr	r3, [pc, #144]	; (800cd88 <USBD_LL_Init+0xac>)
 800ccf6:	4a25      	ldr	r2, [pc, #148]	; (800cd8c <USBD_LL_Init+0xb0>)
 800ccf8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ccfa:	4b23      	ldr	r3, [pc, #140]	; (800cd88 <USBD_LL_Init+0xac>)
 800ccfc:	2208      	movs	r2, #8
 800ccfe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cd00:	4b21      	ldr	r3, [pc, #132]	; (800cd88 <USBD_LL_Init+0xac>)
 800cd02:	2202      	movs	r2, #2
 800cd04:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cd06:	4b20      	ldr	r3, [pc, #128]	; (800cd88 <USBD_LL_Init+0xac>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cd0c:	4b1e      	ldr	r3, [pc, #120]	; (800cd88 <USBD_LL_Init+0xac>)
 800cd0e:	2200      	movs	r2, #0
 800cd10:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cd12:	4b1d      	ldr	r3, [pc, #116]	; (800cd88 <USBD_LL_Init+0xac>)
 800cd14:	2200      	movs	r2, #0
 800cd16:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cd18:	481b      	ldr	r0, [pc, #108]	; (800cd88 <USBD_LL_Init+0xac>)
 800cd1a:	f7f6 fece 	bl	8003aba <HAL_PCD_Init>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d001      	beq.n	800cd28 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800cd24:	f7f3 ff7c 	bl	8000c20 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd2e:	2318      	movs	r3, #24
 800cd30:	2200      	movs	r2, #0
 800cd32:	2100      	movs	r1, #0
 800cd34:	f7f8 fbe0 	bl	80054f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd3e:	2358      	movs	r3, #88	; 0x58
 800cd40:	2200      	movs	r2, #0
 800cd42:	2180      	movs	r1, #128	; 0x80
 800cd44:	f7f8 fbd8 	bl	80054f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd4e:	23c0      	movs	r3, #192	; 0xc0
 800cd50:	2200      	movs	r2, #0
 800cd52:	2181      	movs	r1, #129	; 0x81
 800cd54:	f7f8 fbd0 	bl	80054f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cd62:	2200      	movs	r2, #0
 800cd64:	2101      	movs	r1, #1
 800cd66:	f7f8 fbc7 	bl	80054f8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cd70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cd74:	2200      	movs	r2, #0
 800cd76:	2182      	movs	r1, #130	; 0x82
 800cd78:	f7f8 fbbe 	bl	80054f8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}
 800cd86:	bf00      	nop
 800cd88:	20001198 	.word	0x20001198
 800cd8c:	40005c00 	.word	0x40005c00

0800cd90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b084      	sub	sp, #16
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cda6:	4618      	mov	r0, r3
 800cda8:	f7f6 ff7d 	bl	8003ca6 <HAL_PCD_Start>
 800cdac:	4603      	mov	r3, r0
 800cdae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f000 f94e 	bl	800d054 <USBD_Get_USB_Status>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	3710      	adds	r7, #16
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	bd80      	pop	{r7, pc}

0800cdc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cdc6:	b580      	push	{r7, lr}
 800cdc8:	b084      	sub	sp, #16
 800cdca:	af00      	add	r7, sp, #0
 800cdcc:	6078      	str	r0, [r7, #4]
 800cdce:	4608      	mov	r0, r1
 800cdd0:	4611      	mov	r1, r2
 800cdd2:	461a      	mov	r2, r3
 800cdd4:	4603      	mov	r3, r0
 800cdd6:	70fb      	strb	r3, [r7, #3]
 800cdd8:	460b      	mov	r3, r1
 800cdda:	70bb      	strb	r3, [r7, #2]
 800cddc:	4613      	mov	r3, r2
 800cdde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cde0:	2300      	movs	r3, #0
 800cde2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cdee:	78bb      	ldrb	r3, [r7, #2]
 800cdf0:	883a      	ldrh	r2, [r7, #0]
 800cdf2:	78f9      	ldrb	r1, [r7, #3]
 800cdf4:	f7f7 f8d1 	bl	8003f9a <HAL_PCD_EP_Open>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	4618      	mov	r0, r3
 800ce00:	f000 f928 	bl	800d054 <USBD_Get_USB_Status>
 800ce04:	4603      	mov	r3, r0
 800ce06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
 800ce1a:	460b      	mov	r3, r1
 800ce1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce22:	2300      	movs	r3, #0
 800ce24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce2c:	78fa      	ldrb	r2, [r7, #3]
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f7 f90f 	bl	8004054 <HAL_PCD_EP_Close>
 800ce36:	4603      	mov	r3, r0
 800ce38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce3a:	7bfb      	ldrb	r3, [r7, #15]
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	f000 f909 	bl	800d054 <USBD_Get_USB_Status>
 800ce42:	4603      	mov	r3, r0
 800ce44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}

0800ce50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	460b      	mov	r3, r1
 800ce5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce60:	2300      	movs	r3, #0
 800ce62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce6a:	78fa      	ldrb	r2, [r7, #3]
 800ce6c:	4611      	mov	r1, r2
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7f7 f9b7 	bl	80041e2 <HAL_PCD_EP_SetStall>
 800ce74:	4603      	mov	r3, r0
 800ce76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce78:	7bfb      	ldrb	r3, [r7, #15]
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f8ea 	bl	800d054 <USBD_Get_USB_Status>
 800ce80:	4603      	mov	r3, r0
 800ce82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce86:	4618      	mov	r0, r3
 800ce88:	3710      	adds	r7, #16
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}

0800ce8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce8e:	b580      	push	{r7, lr}
 800ce90:	b084      	sub	sp, #16
 800ce92:	af00      	add	r7, sp, #0
 800ce94:	6078      	str	r0, [r7, #4]
 800ce96:	460b      	mov	r3, r1
 800ce98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cea8:	78fa      	ldrb	r2, [r7, #3]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f7 f9f8 	bl	80042a2 <HAL_PCD_EP_ClrStall>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ceb6:	7bfb      	ldrb	r3, [r7, #15]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 f8cb 	bl	800d054 <USBD_Get_USB_Status>
 800cebe:	4603      	mov	r3, r0
 800cec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cec4:	4618      	mov	r0, r3
 800cec6:	3710      	adds	r7, #16
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}

0800cecc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	460b      	mov	r3, r1
 800ced6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cede:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cee0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	da0b      	bge.n	800cf00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cee8:	78fb      	ldrb	r3, [r7, #3]
 800ceea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ceee:	68f9      	ldr	r1, [r7, #12]
 800cef0:	4613      	mov	r3, r2
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4413      	add	r3, r2
 800cef6:	00db      	lsls	r3, r3, #3
 800cef8:	440b      	add	r3, r1
 800cefa:	3312      	adds	r3, #18
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	e00b      	b.n	800cf18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cf00:	78fb      	ldrb	r3, [r7, #3]
 800cf02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	00db      	lsls	r3, r3, #3
 800cf10:	440b      	add	r3, r1
 800cf12:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cf16:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bc80      	pop	{r7}
 800cf20:	4770      	bx	lr

0800cf22 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cf22:	b580      	push	{r7, lr}
 800cf24:	b084      	sub	sp, #16
 800cf26:	af00      	add	r7, sp, #0
 800cf28:	6078      	str	r0, [r7, #4]
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf2e:	2300      	movs	r3, #0
 800cf30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf3c:	78fa      	ldrb	r2, [r7, #3]
 800cf3e:	4611      	mov	r1, r2
 800cf40:	4618      	mov	r0, r3
 800cf42:	f7f7 f806 	bl	8003f52 <HAL_PCD_SetAddress>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf4a:	7bfb      	ldrb	r3, [r7, #15]
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f000 f881 	bl	800d054 <USBD_Get_USB_Status>
 800cf52:	4603      	mov	r3, r0
 800cf54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf56:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	3710      	adds	r7, #16
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	bd80      	pop	{r7, pc}

0800cf60 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b086      	sub	sp, #24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	60f8      	str	r0, [r7, #12]
 800cf68:	607a      	str	r2, [r7, #4]
 800cf6a:	461a      	mov	r2, r3
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	72fb      	strb	r3, [r7, #11]
 800cf70:	4613      	mov	r3, r2
 800cf72:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cf74:	2300      	movs	r3, #0
 800cf76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cf82:	893b      	ldrh	r3, [r7, #8]
 800cf84:	7af9      	ldrb	r1, [r7, #11]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	f7f7 f8f4 	bl	8004174 <HAL_PCD_EP_Transmit>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cf90:	7dfb      	ldrb	r3, [r7, #23]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f000 f85e 	bl	800d054 <USBD_Get_USB_Status>
 800cf98:	4603      	mov	r3, r0
 800cf9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cf9c:	7dbb      	ldrb	r3, [r7, #22]
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3718      	adds	r7, #24
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b086      	sub	sp, #24
 800cfaa:	af00      	add	r7, sp, #0
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	72fb      	strb	r3, [r7, #11]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cfc8:	893b      	ldrh	r3, [r7, #8]
 800cfca:	7af9      	ldrb	r1, [r7, #11]
 800cfcc:	687a      	ldr	r2, [r7, #4]
 800cfce:	f7f7 f889 	bl	80040e4 <HAL_PCD_EP_Receive>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	4618      	mov	r0, r3
 800cfda:	f000 f83b 	bl	800d054 <USBD_Get_USB_Status>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cfe2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3718      	adds	r7, #24
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	460b      	mov	r3, r1
 800cff6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cffe:	78fa      	ldrb	r2, [r7, #3]
 800d000:	4611      	mov	r1, r2
 800d002:	4618      	mov	r0, r3
 800d004:	f7f7 f89f 	bl	8004146 <HAL_PCD_EP_GetRxCount>
 800d008:	4603      	mov	r3, r0
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3708      	adds	r7, #8
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d01c:	4b02      	ldr	r3, [pc, #8]	; (800d028 <USBD_static_malloc+0x14>)
}
 800d01e:	4618      	mov	r0, r3
 800d020:	370c      	adds	r7, #12
 800d022:	46bd      	mov	sp, r7
 800d024:	bc80      	pop	{r7}
 800d026:	4770      	bx	lr
 800d028:	20001470 	.word	0x20001470

0800d02c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]

}
 800d034:	bf00      	nop
 800d036:	370c      	adds	r7, #12
 800d038:	46bd      	mov	sp, r7
 800d03a:	bc80      	pop	{r7}
 800d03c:	4770      	bx	lr

0800d03e <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d03e:	b480      	push	{r7}
 800d040:	b083      	sub	sp, #12
 800d042:	af00      	add	r7, sp, #0
 800d044:	6078      	str	r0, [r7, #4]
 800d046:	460b      	mov	r3, r1
 800d048:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800d04a:	bf00      	nop
 800d04c:	370c      	adds	r7, #12
 800d04e:	46bd      	mov	sp, r7
 800d050:	bc80      	pop	{r7}
 800d052:	4770      	bx	lr

0800d054 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d054:	b480      	push	{r7}
 800d056:	b085      	sub	sp, #20
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d05e:	2300      	movs	r3, #0
 800d060:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d062:	79fb      	ldrb	r3, [r7, #7]
 800d064:	2b03      	cmp	r3, #3
 800d066:	d817      	bhi.n	800d098 <USBD_Get_USB_Status+0x44>
 800d068:	a201      	add	r2, pc, #4	; (adr r2, 800d070 <USBD_Get_USB_Status+0x1c>)
 800d06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06e:	bf00      	nop
 800d070:	0800d081 	.word	0x0800d081
 800d074:	0800d087 	.word	0x0800d087
 800d078:	0800d08d 	.word	0x0800d08d
 800d07c:	0800d093 	.word	0x0800d093
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	73fb      	strb	r3, [r7, #15]
    break;
 800d084:	e00b      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d086:	2302      	movs	r3, #2
 800d088:	73fb      	strb	r3, [r7, #15]
    break;
 800d08a:	e008      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d08c:	2301      	movs	r3, #1
 800d08e:	73fb      	strb	r3, [r7, #15]
    break;
 800d090:	e005      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d092:	2302      	movs	r3, #2
 800d094:	73fb      	strb	r3, [r7, #15]
    break;
 800d096:	e002      	b.n	800d09e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d098:	2302      	movs	r3, #2
 800d09a:	73fb      	strb	r3, [r7, #15]
    break;
 800d09c:	bf00      	nop
  }
  return usb_status;
 800d09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3714      	adds	r7, #20
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bc80      	pop	{r7}
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop

0800d0ac <siprintf>:
 800d0ac:	b40e      	push	{r1, r2, r3}
 800d0ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d0b2:	b500      	push	{lr}
 800d0b4:	b09c      	sub	sp, #112	; 0x70
 800d0b6:	ab1d      	add	r3, sp, #116	; 0x74
 800d0b8:	9002      	str	r0, [sp, #8]
 800d0ba:	9006      	str	r0, [sp, #24]
 800d0bc:	9107      	str	r1, [sp, #28]
 800d0be:	9104      	str	r1, [sp, #16]
 800d0c0:	4808      	ldr	r0, [pc, #32]	; (800d0e4 <siprintf+0x38>)
 800d0c2:	4909      	ldr	r1, [pc, #36]	; (800d0e8 <siprintf+0x3c>)
 800d0c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0c8:	9105      	str	r1, [sp, #20]
 800d0ca:	6800      	ldr	r0, [r0, #0]
 800d0cc:	a902      	add	r1, sp, #8
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	f000 f98e 	bl	800d3f0 <_svfiprintf_r>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	9b02      	ldr	r3, [sp, #8]
 800d0d8:	701a      	strb	r2, [r3, #0]
 800d0da:	b01c      	add	sp, #112	; 0x70
 800d0dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0e0:	b003      	add	sp, #12
 800d0e2:	4770      	bx	lr
 800d0e4:	200001dc 	.word	0x200001dc
 800d0e8:	ffff0208 	.word	0xffff0208

0800d0ec <memset>:
 800d0ec:	4603      	mov	r3, r0
 800d0ee:	4402      	add	r2, r0
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d100      	bne.n	800d0f6 <memset+0xa>
 800d0f4:	4770      	bx	lr
 800d0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fa:	e7f9      	b.n	800d0f0 <memset+0x4>

0800d0fc <__errno>:
 800d0fc:	4b01      	ldr	r3, [pc, #4]	; (800d104 <__errno+0x8>)
 800d0fe:	6818      	ldr	r0, [r3, #0]
 800d100:	4770      	bx	lr
 800d102:	bf00      	nop
 800d104:	200001dc 	.word	0x200001dc

0800d108 <__libc_init_array>:
 800d108:	b570      	push	{r4, r5, r6, lr}
 800d10a:	2600      	movs	r6, #0
 800d10c:	4d0c      	ldr	r5, [pc, #48]	; (800d140 <__libc_init_array+0x38>)
 800d10e:	4c0d      	ldr	r4, [pc, #52]	; (800d144 <__libc_init_array+0x3c>)
 800d110:	1b64      	subs	r4, r4, r5
 800d112:	10a4      	asrs	r4, r4, #2
 800d114:	42a6      	cmp	r6, r4
 800d116:	d109      	bne.n	800d12c <__libc_init_array+0x24>
 800d118:	f000 fc7a 	bl	800da10 <_init>
 800d11c:	2600      	movs	r6, #0
 800d11e:	4d0a      	ldr	r5, [pc, #40]	; (800d148 <__libc_init_array+0x40>)
 800d120:	4c0a      	ldr	r4, [pc, #40]	; (800d14c <__libc_init_array+0x44>)
 800d122:	1b64      	subs	r4, r4, r5
 800d124:	10a4      	asrs	r4, r4, #2
 800d126:	42a6      	cmp	r6, r4
 800d128:	d105      	bne.n	800d136 <__libc_init_array+0x2e>
 800d12a:	bd70      	pop	{r4, r5, r6, pc}
 800d12c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d130:	4798      	blx	r3
 800d132:	3601      	adds	r6, #1
 800d134:	e7ee      	b.n	800d114 <__libc_init_array+0xc>
 800d136:	f855 3b04 	ldr.w	r3, [r5], #4
 800d13a:	4798      	blx	r3
 800d13c:	3601      	adds	r6, #1
 800d13e:	e7f2      	b.n	800d126 <__libc_init_array+0x1e>
 800d140:	0800dbc0 	.word	0x0800dbc0
 800d144:	0800dbc0 	.word	0x0800dbc0
 800d148:	0800dbc0 	.word	0x0800dbc0
 800d14c:	0800dbc4 	.word	0x0800dbc4

0800d150 <__retarget_lock_acquire_recursive>:
 800d150:	4770      	bx	lr

0800d152 <__retarget_lock_release_recursive>:
 800d152:	4770      	bx	lr

0800d154 <_free_r>:
 800d154:	b538      	push	{r3, r4, r5, lr}
 800d156:	4605      	mov	r5, r0
 800d158:	2900      	cmp	r1, #0
 800d15a:	d040      	beq.n	800d1de <_free_r+0x8a>
 800d15c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d160:	1f0c      	subs	r4, r1, #4
 800d162:	2b00      	cmp	r3, #0
 800d164:	bfb8      	it	lt
 800d166:	18e4      	addlt	r4, r4, r3
 800d168:	f000 f8dc 	bl	800d324 <__malloc_lock>
 800d16c:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <_free_r+0x8c>)
 800d16e:	6813      	ldr	r3, [r2, #0]
 800d170:	b933      	cbnz	r3, 800d180 <_free_r+0x2c>
 800d172:	6063      	str	r3, [r4, #4]
 800d174:	6014      	str	r4, [r2, #0]
 800d176:	4628      	mov	r0, r5
 800d178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d17c:	f000 b8d8 	b.w	800d330 <__malloc_unlock>
 800d180:	42a3      	cmp	r3, r4
 800d182:	d908      	bls.n	800d196 <_free_r+0x42>
 800d184:	6820      	ldr	r0, [r4, #0]
 800d186:	1821      	adds	r1, r4, r0
 800d188:	428b      	cmp	r3, r1
 800d18a:	bf01      	itttt	eq
 800d18c:	6819      	ldreq	r1, [r3, #0]
 800d18e:	685b      	ldreq	r3, [r3, #4]
 800d190:	1809      	addeq	r1, r1, r0
 800d192:	6021      	streq	r1, [r4, #0]
 800d194:	e7ed      	b.n	800d172 <_free_r+0x1e>
 800d196:	461a      	mov	r2, r3
 800d198:	685b      	ldr	r3, [r3, #4]
 800d19a:	b10b      	cbz	r3, 800d1a0 <_free_r+0x4c>
 800d19c:	42a3      	cmp	r3, r4
 800d19e:	d9fa      	bls.n	800d196 <_free_r+0x42>
 800d1a0:	6811      	ldr	r1, [r2, #0]
 800d1a2:	1850      	adds	r0, r2, r1
 800d1a4:	42a0      	cmp	r0, r4
 800d1a6:	d10b      	bne.n	800d1c0 <_free_r+0x6c>
 800d1a8:	6820      	ldr	r0, [r4, #0]
 800d1aa:	4401      	add	r1, r0
 800d1ac:	1850      	adds	r0, r2, r1
 800d1ae:	4283      	cmp	r3, r0
 800d1b0:	6011      	str	r1, [r2, #0]
 800d1b2:	d1e0      	bne.n	800d176 <_free_r+0x22>
 800d1b4:	6818      	ldr	r0, [r3, #0]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	4408      	add	r0, r1
 800d1ba:	6010      	str	r0, [r2, #0]
 800d1bc:	6053      	str	r3, [r2, #4]
 800d1be:	e7da      	b.n	800d176 <_free_r+0x22>
 800d1c0:	d902      	bls.n	800d1c8 <_free_r+0x74>
 800d1c2:	230c      	movs	r3, #12
 800d1c4:	602b      	str	r3, [r5, #0]
 800d1c6:	e7d6      	b.n	800d176 <_free_r+0x22>
 800d1c8:	6820      	ldr	r0, [r4, #0]
 800d1ca:	1821      	adds	r1, r4, r0
 800d1cc:	428b      	cmp	r3, r1
 800d1ce:	bf01      	itttt	eq
 800d1d0:	6819      	ldreq	r1, [r3, #0]
 800d1d2:	685b      	ldreq	r3, [r3, #4]
 800d1d4:	1809      	addeq	r1, r1, r0
 800d1d6:	6021      	streq	r1, [r4, #0]
 800d1d8:	6063      	str	r3, [r4, #4]
 800d1da:	6054      	str	r4, [r2, #4]
 800d1dc:	e7cb      	b.n	800d176 <_free_r+0x22>
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	200017d0 	.word	0x200017d0

0800d1e4 <sbrk_aligned>:
 800d1e4:	b570      	push	{r4, r5, r6, lr}
 800d1e6:	4e0e      	ldr	r6, [pc, #56]	; (800d220 <sbrk_aligned+0x3c>)
 800d1e8:	460c      	mov	r4, r1
 800d1ea:	6831      	ldr	r1, [r6, #0]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	b911      	cbnz	r1, 800d1f6 <sbrk_aligned+0x12>
 800d1f0:	f000 fbaa 	bl	800d948 <_sbrk_r>
 800d1f4:	6030      	str	r0, [r6, #0]
 800d1f6:	4621      	mov	r1, r4
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	f000 fba5 	bl	800d948 <_sbrk_r>
 800d1fe:	1c43      	adds	r3, r0, #1
 800d200:	d00a      	beq.n	800d218 <sbrk_aligned+0x34>
 800d202:	1cc4      	adds	r4, r0, #3
 800d204:	f024 0403 	bic.w	r4, r4, #3
 800d208:	42a0      	cmp	r0, r4
 800d20a:	d007      	beq.n	800d21c <sbrk_aligned+0x38>
 800d20c:	1a21      	subs	r1, r4, r0
 800d20e:	4628      	mov	r0, r5
 800d210:	f000 fb9a 	bl	800d948 <_sbrk_r>
 800d214:	3001      	adds	r0, #1
 800d216:	d101      	bne.n	800d21c <sbrk_aligned+0x38>
 800d218:	f04f 34ff 	mov.w	r4, #4294967295
 800d21c:	4620      	mov	r0, r4
 800d21e:	bd70      	pop	{r4, r5, r6, pc}
 800d220:	200017d4 	.word	0x200017d4

0800d224 <_malloc_r>:
 800d224:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d228:	1ccd      	adds	r5, r1, #3
 800d22a:	f025 0503 	bic.w	r5, r5, #3
 800d22e:	3508      	adds	r5, #8
 800d230:	2d0c      	cmp	r5, #12
 800d232:	bf38      	it	cc
 800d234:	250c      	movcc	r5, #12
 800d236:	2d00      	cmp	r5, #0
 800d238:	4607      	mov	r7, r0
 800d23a:	db01      	blt.n	800d240 <_malloc_r+0x1c>
 800d23c:	42a9      	cmp	r1, r5
 800d23e:	d905      	bls.n	800d24c <_malloc_r+0x28>
 800d240:	230c      	movs	r3, #12
 800d242:	2600      	movs	r6, #0
 800d244:	603b      	str	r3, [r7, #0]
 800d246:	4630      	mov	r0, r6
 800d248:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d24c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d320 <_malloc_r+0xfc>
 800d250:	f000 f868 	bl	800d324 <__malloc_lock>
 800d254:	f8d8 3000 	ldr.w	r3, [r8]
 800d258:	461c      	mov	r4, r3
 800d25a:	bb5c      	cbnz	r4, 800d2b4 <_malloc_r+0x90>
 800d25c:	4629      	mov	r1, r5
 800d25e:	4638      	mov	r0, r7
 800d260:	f7ff ffc0 	bl	800d1e4 <sbrk_aligned>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	4604      	mov	r4, r0
 800d268:	d155      	bne.n	800d316 <_malloc_r+0xf2>
 800d26a:	f8d8 4000 	ldr.w	r4, [r8]
 800d26e:	4626      	mov	r6, r4
 800d270:	2e00      	cmp	r6, #0
 800d272:	d145      	bne.n	800d300 <_malloc_r+0xdc>
 800d274:	2c00      	cmp	r4, #0
 800d276:	d048      	beq.n	800d30a <_malloc_r+0xe6>
 800d278:	6823      	ldr	r3, [r4, #0]
 800d27a:	4631      	mov	r1, r6
 800d27c:	4638      	mov	r0, r7
 800d27e:	eb04 0903 	add.w	r9, r4, r3
 800d282:	f000 fb61 	bl	800d948 <_sbrk_r>
 800d286:	4581      	cmp	r9, r0
 800d288:	d13f      	bne.n	800d30a <_malloc_r+0xe6>
 800d28a:	6821      	ldr	r1, [r4, #0]
 800d28c:	4638      	mov	r0, r7
 800d28e:	1a6d      	subs	r5, r5, r1
 800d290:	4629      	mov	r1, r5
 800d292:	f7ff ffa7 	bl	800d1e4 <sbrk_aligned>
 800d296:	3001      	adds	r0, #1
 800d298:	d037      	beq.n	800d30a <_malloc_r+0xe6>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	442b      	add	r3, r5
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	f8d8 3000 	ldr.w	r3, [r8]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d038      	beq.n	800d31a <_malloc_r+0xf6>
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	42a2      	cmp	r2, r4
 800d2ac:	d12b      	bne.n	800d306 <_malloc_r+0xe2>
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	605a      	str	r2, [r3, #4]
 800d2b2:	e00f      	b.n	800d2d4 <_malloc_r+0xb0>
 800d2b4:	6822      	ldr	r2, [r4, #0]
 800d2b6:	1b52      	subs	r2, r2, r5
 800d2b8:	d41f      	bmi.n	800d2fa <_malloc_r+0xd6>
 800d2ba:	2a0b      	cmp	r2, #11
 800d2bc:	d917      	bls.n	800d2ee <_malloc_r+0xca>
 800d2be:	1961      	adds	r1, r4, r5
 800d2c0:	42a3      	cmp	r3, r4
 800d2c2:	6025      	str	r5, [r4, #0]
 800d2c4:	bf18      	it	ne
 800d2c6:	6059      	strne	r1, [r3, #4]
 800d2c8:	6863      	ldr	r3, [r4, #4]
 800d2ca:	bf08      	it	eq
 800d2cc:	f8c8 1000 	streq.w	r1, [r8]
 800d2d0:	5162      	str	r2, [r4, r5]
 800d2d2:	604b      	str	r3, [r1, #4]
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	f104 060b 	add.w	r6, r4, #11
 800d2da:	f000 f829 	bl	800d330 <__malloc_unlock>
 800d2de:	f026 0607 	bic.w	r6, r6, #7
 800d2e2:	1d23      	adds	r3, r4, #4
 800d2e4:	1af2      	subs	r2, r6, r3
 800d2e6:	d0ae      	beq.n	800d246 <_malloc_r+0x22>
 800d2e8:	1b9b      	subs	r3, r3, r6
 800d2ea:	50a3      	str	r3, [r4, r2]
 800d2ec:	e7ab      	b.n	800d246 <_malloc_r+0x22>
 800d2ee:	42a3      	cmp	r3, r4
 800d2f0:	6862      	ldr	r2, [r4, #4]
 800d2f2:	d1dd      	bne.n	800d2b0 <_malloc_r+0x8c>
 800d2f4:	f8c8 2000 	str.w	r2, [r8]
 800d2f8:	e7ec      	b.n	800d2d4 <_malloc_r+0xb0>
 800d2fa:	4623      	mov	r3, r4
 800d2fc:	6864      	ldr	r4, [r4, #4]
 800d2fe:	e7ac      	b.n	800d25a <_malloc_r+0x36>
 800d300:	4634      	mov	r4, r6
 800d302:	6876      	ldr	r6, [r6, #4]
 800d304:	e7b4      	b.n	800d270 <_malloc_r+0x4c>
 800d306:	4613      	mov	r3, r2
 800d308:	e7cc      	b.n	800d2a4 <_malloc_r+0x80>
 800d30a:	230c      	movs	r3, #12
 800d30c:	4638      	mov	r0, r7
 800d30e:	603b      	str	r3, [r7, #0]
 800d310:	f000 f80e 	bl	800d330 <__malloc_unlock>
 800d314:	e797      	b.n	800d246 <_malloc_r+0x22>
 800d316:	6025      	str	r5, [r4, #0]
 800d318:	e7dc      	b.n	800d2d4 <_malloc_r+0xb0>
 800d31a:	605b      	str	r3, [r3, #4]
 800d31c:	deff      	udf	#255	; 0xff
 800d31e:	bf00      	nop
 800d320:	200017d0 	.word	0x200017d0

0800d324 <__malloc_lock>:
 800d324:	4801      	ldr	r0, [pc, #4]	; (800d32c <__malloc_lock+0x8>)
 800d326:	f7ff bf13 	b.w	800d150 <__retarget_lock_acquire_recursive>
 800d32a:	bf00      	nop
 800d32c:	200017cc 	.word	0x200017cc

0800d330 <__malloc_unlock>:
 800d330:	4801      	ldr	r0, [pc, #4]	; (800d338 <__malloc_unlock+0x8>)
 800d332:	f7ff bf0e 	b.w	800d152 <__retarget_lock_release_recursive>
 800d336:	bf00      	nop
 800d338:	200017cc 	.word	0x200017cc

0800d33c <__ssputs_r>:
 800d33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d340:	461f      	mov	r7, r3
 800d342:	688e      	ldr	r6, [r1, #8]
 800d344:	4682      	mov	sl, r0
 800d346:	42be      	cmp	r6, r7
 800d348:	460c      	mov	r4, r1
 800d34a:	4690      	mov	r8, r2
 800d34c:	680b      	ldr	r3, [r1, #0]
 800d34e:	d82c      	bhi.n	800d3aa <__ssputs_r+0x6e>
 800d350:	898a      	ldrh	r2, [r1, #12]
 800d352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d356:	d026      	beq.n	800d3a6 <__ssputs_r+0x6a>
 800d358:	6965      	ldr	r5, [r4, #20]
 800d35a:	6909      	ldr	r1, [r1, #16]
 800d35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d360:	eba3 0901 	sub.w	r9, r3, r1
 800d364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d368:	1c7b      	adds	r3, r7, #1
 800d36a:	444b      	add	r3, r9
 800d36c:	106d      	asrs	r5, r5, #1
 800d36e:	429d      	cmp	r5, r3
 800d370:	bf38      	it	cc
 800d372:	461d      	movcc	r5, r3
 800d374:	0553      	lsls	r3, r2, #21
 800d376:	d527      	bpl.n	800d3c8 <__ssputs_r+0x8c>
 800d378:	4629      	mov	r1, r5
 800d37a:	f7ff ff53 	bl	800d224 <_malloc_r>
 800d37e:	4606      	mov	r6, r0
 800d380:	b360      	cbz	r0, 800d3dc <__ssputs_r+0xa0>
 800d382:	464a      	mov	r2, r9
 800d384:	6921      	ldr	r1, [r4, #16]
 800d386:	f000 fafd 	bl	800d984 <memcpy>
 800d38a:	89a3      	ldrh	r3, [r4, #12]
 800d38c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d394:	81a3      	strh	r3, [r4, #12]
 800d396:	6126      	str	r6, [r4, #16]
 800d398:	444e      	add	r6, r9
 800d39a:	6026      	str	r6, [r4, #0]
 800d39c:	463e      	mov	r6, r7
 800d39e:	6165      	str	r5, [r4, #20]
 800d3a0:	eba5 0509 	sub.w	r5, r5, r9
 800d3a4:	60a5      	str	r5, [r4, #8]
 800d3a6:	42be      	cmp	r6, r7
 800d3a8:	d900      	bls.n	800d3ac <__ssputs_r+0x70>
 800d3aa:	463e      	mov	r6, r7
 800d3ac:	4632      	mov	r2, r6
 800d3ae:	4641      	mov	r1, r8
 800d3b0:	6820      	ldr	r0, [r4, #0]
 800d3b2:	f000 faaf 	bl	800d914 <memmove>
 800d3b6:	2000      	movs	r0, #0
 800d3b8:	68a3      	ldr	r3, [r4, #8]
 800d3ba:	1b9b      	subs	r3, r3, r6
 800d3bc:	60a3      	str	r3, [r4, #8]
 800d3be:	6823      	ldr	r3, [r4, #0]
 800d3c0:	4433      	add	r3, r6
 800d3c2:	6023      	str	r3, [r4, #0]
 800d3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c8:	462a      	mov	r2, r5
 800d3ca:	f000 fae9 	bl	800d9a0 <_realloc_r>
 800d3ce:	4606      	mov	r6, r0
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d1e0      	bne.n	800d396 <__ssputs_r+0x5a>
 800d3d4:	4650      	mov	r0, sl
 800d3d6:	6921      	ldr	r1, [r4, #16]
 800d3d8:	f7ff febc 	bl	800d154 <_free_r>
 800d3dc:	230c      	movs	r3, #12
 800d3de:	f8ca 3000 	str.w	r3, [sl]
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ec:	81a3      	strh	r3, [r4, #12]
 800d3ee:	e7e9      	b.n	800d3c4 <__ssputs_r+0x88>

0800d3f0 <_svfiprintf_r>:
 800d3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f4:	4698      	mov	r8, r3
 800d3f6:	898b      	ldrh	r3, [r1, #12]
 800d3f8:	4607      	mov	r7, r0
 800d3fa:	061b      	lsls	r3, r3, #24
 800d3fc:	460d      	mov	r5, r1
 800d3fe:	4614      	mov	r4, r2
 800d400:	b09d      	sub	sp, #116	; 0x74
 800d402:	d50e      	bpl.n	800d422 <_svfiprintf_r+0x32>
 800d404:	690b      	ldr	r3, [r1, #16]
 800d406:	b963      	cbnz	r3, 800d422 <_svfiprintf_r+0x32>
 800d408:	2140      	movs	r1, #64	; 0x40
 800d40a:	f7ff ff0b 	bl	800d224 <_malloc_r>
 800d40e:	6028      	str	r0, [r5, #0]
 800d410:	6128      	str	r0, [r5, #16]
 800d412:	b920      	cbnz	r0, 800d41e <_svfiprintf_r+0x2e>
 800d414:	230c      	movs	r3, #12
 800d416:	603b      	str	r3, [r7, #0]
 800d418:	f04f 30ff 	mov.w	r0, #4294967295
 800d41c:	e0d0      	b.n	800d5c0 <_svfiprintf_r+0x1d0>
 800d41e:	2340      	movs	r3, #64	; 0x40
 800d420:	616b      	str	r3, [r5, #20]
 800d422:	2300      	movs	r3, #0
 800d424:	9309      	str	r3, [sp, #36]	; 0x24
 800d426:	2320      	movs	r3, #32
 800d428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d42c:	2330      	movs	r3, #48	; 0x30
 800d42e:	f04f 0901 	mov.w	r9, #1
 800d432:	f8cd 800c 	str.w	r8, [sp, #12]
 800d436:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d5d8 <_svfiprintf_r+0x1e8>
 800d43a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d43e:	4623      	mov	r3, r4
 800d440:	469a      	mov	sl, r3
 800d442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d446:	b10a      	cbz	r2, 800d44c <_svfiprintf_r+0x5c>
 800d448:	2a25      	cmp	r2, #37	; 0x25
 800d44a:	d1f9      	bne.n	800d440 <_svfiprintf_r+0x50>
 800d44c:	ebba 0b04 	subs.w	fp, sl, r4
 800d450:	d00b      	beq.n	800d46a <_svfiprintf_r+0x7a>
 800d452:	465b      	mov	r3, fp
 800d454:	4622      	mov	r2, r4
 800d456:	4629      	mov	r1, r5
 800d458:	4638      	mov	r0, r7
 800d45a:	f7ff ff6f 	bl	800d33c <__ssputs_r>
 800d45e:	3001      	adds	r0, #1
 800d460:	f000 80a9 	beq.w	800d5b6 <_svfiprintf_r+0x1c6>
 800d464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d466:	445a      	add	r2, fp
 800d468:	9209      	str	r2, [sp, #36]	; 0x24
 800d46a:	f89a 3000 	ldrb.w	r3, [sl]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f000 80a1 	beq.w	800d5b6 <_svfiprintf_r+0x1c6>
 800d474:	2300      	movs	r3, #0
 800d476:	f04f 32ff 	mov.w	r2, #4294967295
 800d47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d47e:	f10a 0a01 	add.w	sl, sl, #1
 800d482:	9304      	str	r3, [sp, #16]
 800d484:	9307      	str	r3, [sp, #28]
 800d486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d48a:	931a      	str	r3, [sp, #104]	; 0x68
 800d48c:	4654      	mov	r4, sl
 800d48e:	2205      	movs	r2, #5
 800d490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d494:	4850      	ldr	r0, [pc, #320]	; (800d5d8 <_svfiprintf_r+0x1e8>)
 800d496:	f000 fa67 	bl	800d968 <memchr>
 800d49a:	9a04      	ldr	r2, [sp, #16]
 800d49c:	b9d8      	cbnz	r0, 800d4d6 <_svfiprintf_r+0xe6>
 800d49e:	06d0      	lsls	r0, r2, #27
 800d4a0:	bf44      	itt	mi
 800d4a2:	2320      	movmi	r3, #32
 800d4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4a8:	0711      	lsls	r1, r2, #28
 800d4aa:	bf44      	itt	mi
 800d4ac:	232b      	movmi	r3, #43	; 0x2b
 800d4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d4b8:	d015      	beq.n	800d4e6 <_svfiprintf_r+0xf6>
 800d4ba:	4654      	mov	r4, sl
 800d4bc:	2000      	movs	r0, #0
 800d4be:	f04f 0c0a 	mov.w	ip, #10
 800d4c2:	9a07      	ldr	r2, [sp, #28]
 800d4c4:	4621      	mov	r1, r4
 800d4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4ca:	3b30      	subs	r3, #48	; 0x30
 800d4cc:	2b09      	cmp	r3, #9
 800d4ce:	d94d      	bls.n	800d56c <_svfiprintf_r+0x17c>
 800d4d0:	b1b0      	cbz	r0, 800d500 <_svfiprintf_r+0x110>
 800d4d2:	9207      	str	r2, [sp, #28]
 800d4d4:	e014      	b.n	800d500 <_svfiprintf_r+0x110>
 800d4d6:	eba0 0308 	sub.w	r3, r0, r8
 800d4da:	fa09 f303 	lsl.w	r3, r9, r3
 800d4de:	4313      	orrs	r3, r2
 800d4e0:	46a2      	mov	sl, r4
 800d4e2:	9304      	str	r3, [sp, #16]
 800d4e4:	e7d2      	b.n	800d48c <_svfiprintf_r+0x9c>
 800d4e6:	9b03      	ldr	r3, [sp, #12]
 800d4e8:	1d19      	adds	r1, r3, #4
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	9103      	str	r1, [sp, #12]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	bfbb      	ittet	lt
 800d4f2:	425b      	neglt	r3, r3
 800d4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f8:	9307      	strge	r3, [sp, #28]
 800d4fa:	9307      	strlt	r3, [sp, #28]
 800d4fc:	bfb8      	it	lt
 800d4fe:	9204      	strlt	r2, [sp, #16]
 800d500:	7823      	ldrb	r3, [r4, #0]
 800d502:	2b2e      	cmp	r3, #46	; 0x2e
 800d504:	d10c      	bne.n	800d520 <_svfiprintf_r+0x130>
 800d506:	7863      	ldrb	r3, [r4, #1]
 800d508:	2b2a      	cmp	r3, #42	; 0x2a
 800d50a:	d134      	bne.n	800d576 <_svfiprintf_r+0x186>
 800d50c:	9b03      	ldr	r3, [sp, #12]
 800d50e:	3402      	adds	r4, #2
 800d510:	1d1a      	adds	r2, r3, #4
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	9203      	str	r2, [sp, #12]
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfb8      	it	lt
 800d51a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d51e:	9305      	str	r3, [sp, #20]
 800d520:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d5dc <_svfiprintf_r+0x1ec>
 800d524:	2203      	movs	r2, #3
 800d526:	4650      	mov	r0, sl
 800d528:	7821      	ldrb	r1, [r4, #0]
 800d52a:	f000 fa1d 	bl	800d968 <memchr>
 800d52e:	b138      	cbz	r0, 800d540 <_svfiprintf_r+0x150>
 800d530:	2240      	movs	r2, #64	; 0x40
 800d532:	9b04      	ldr	r3, [sp, #16]
 800d534:	eba0 000a 	sub.w	r0, r0, sl
 800d538:	4082      	lsls	r2, r0
 800d53a:	4313      	orrs	r3, r2
 800d53c:	3401      	adds	r4, #1
 800d53e:	9304      	str	r3, [sp, #16]
 800d540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d544:	2206      	movs	r2, #6
 800d546:	4826      	ldr	r0, [pc, #152]	; (800d5e0 <_svfiprintf_r+0x1f0>)
 800d548:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d54c:	f000 fa0c 	bl	800d968 <memchr>
 800d550:	2800      	cmp	r0, #0
 800d552:	d038      	beq.n	800d5c6 <_svfiprintf_r+0x1d6>
 800d554:	4b23      	ldr	r3, [pc, #140]	; (800d5e4 <_svfiprintf_r+0x1f4>)
 800d556:	bb1b      	cbnz	r3, 800d5a0 <_svfiprintf_r+0x1b0>
 800d558:	9b03      	ldr	r3, [sp, #12]
 800d55a:	3307      	adds	r3, #7
 800d55c:	f023 0307 	bic.w	r3, r3, #7
 800d560:	3308      	adds	r3, #8
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d566:	4433      	add	r3, r6
 800d568:	9309      	str	r3, [sp, #36]	; 0x24
 800d56a:	e768      	b.n	800d43e <_svfiprintf_r+0x4e>
 800d56c:	460c      	mov	r4, r1
 800d56e:	2001      	movs	r0, #1
 800d570:	fb0c 3202 	mla	r2, ip, r2, r3
 800d574:	e7a6      	b.n	800d4c4 <_svfiprintf_r+0xd4>
 800d576:	2300      	movs	r3, #0
 800d578:	f04f 0c0a 	mov.w	ip, #10
 800d57c:	4619      	mov	r1, r3
 800d57e:	3401      	adds	r4, #1
 800d580:	9305      	str	r3, [sp, #20]
 800d582:	4620      	mov	r0, r4
 800d584:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d588:	3a30      	subs	r2, #48	; 0x30
 800d58a:	2a09      	cmp	r2, #9
 800d58c:	d903      	bls.n	800d596 <_svfiprintf_r+0x1a6>
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d0c6      	beq.n	800d520 <_svfiprintf_r+0x130>
 800d592:	9105      	str	r1, [sp, #20]
 800d594:	e7c4      	b.n	800d520 <_svfiprintf_r+0x130>
 800d596:	4604      	mov	r4, r0
 800d598:	2301      	movs	r3, #1
 800d59a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d59e:	e7f0      	b.n	800d582 <_svfiprintf_r+0x192>
 800d5a0:	ab03      	add	r3, sp, #12
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	462a      	mov	r2, r5
 800d5a6:	4638      	mov	r0, r7
 800d5a8:	4b0f      	ldr	r3, [pc, #60]	; (800d5e8 <_svfiprintf_r+0x1f8>)
 800d5aa:	a904      	add	r1, sp, #16
 800d5ac:	f3af 8000 	nop.w
 800d5b0:	1c42      	adds	r2, r0, #1
 800d5b2:	4606      	mov	r6, r0
 800d5b4:	d1d6      	bne.n	800d564 <_svfiprintf_r+0x174>
 800d5b6:	89ab      	ldrh	r3, [r5, #12]
 800d5b8:	065b      	lsls	r3, r3, #25
 800d5ba:	f53f af2d 	bmi.w	800d418 <_svfiprintf_r+0x28>
 800d5be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d5c0:	b01d      	add	sp, #116	; 0x74
 800d5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c6:	ab03      	add	r3, sp, #12
 800d5c8:	9300      	str	r3, [sp, #0]
 800d5ca:	462a      	mov	r2, r5
 800d5cc:	4638      	mov	r0, r7
 800d5ce:	4b06      	ldr	r3, [pc, #24]	; (800d5e8 <_svfiprintf_r+0x1f8>)
 800d5d0:	a904      	add	r1, sp, #16
 800d5d2:	f000 f87d 	bl	800d6d0 <_printf_i>
 800d5d6:	e7eb      	b.n	800d5b0 <_svfiprintf_r+0x1c0>
 800d5d8:	0800db8a 	.word	0x0800db8a
 800d5dc:	0800db90 	.word	0x0800db90
 800d5e0:	0800db94 	.word	0x0800db94
 800d5e4:	00000000 	.word	0x00000000
 800d5e8:	0800d33d 	.word	0x0800d33d

0800d5ec <_printf_common>:
 800d5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5f0:	4616      	mov	r6, r2
 800d5f2:	4699      	mov	r9, r3
 800d5f4:	688a      	ldr	r2, [r1, #8]
 800d5f6:	690b      	ldr	r3, [r1, #16]
 800d5f8:	4607      	mov	r7, r0
 800d5fa:	4293      	cmp	r3, r2
 800d5fc:	bfb8      	it	lt
 800d5fe:	4613      	movlt	r3, r2
 800d600:	6033      	str	r3, [r6, #0]
 800d602:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d606:	460c      	mov	r4, r1
 800d608:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d60c:	b10a      	cbz	r2, 800d612 <_printf_common+0x26>
 800d60e:	3301      	adds	r3, #1
 800d610:	6033      	str	r3, [r6, #0]
 800d612:	6823      	ldr	r3, [r4, #0]
 800d614:	0699      	lsls	r1, r3, #26
 800d616:	bf42      	ittt	mi
 800d618:	6833      	ldrmi	r3, [r6, #0]
 800d61a:	3302      	addmi	r3, #2
 800d61c:	6033      	strmi	r3, [r6, #0]
 800d61e:	6825      	ldr	r5, [r4, #0]
 800d620:	f015 0506 	ands.w	r5, r5, #6
 800d624:	d106      	bne.n	800d634 <_printf_common+0x48>
 800d626:	f104 0a19 	add.w	sl, r4, #25
 800d62a:	68e3      	ldr	r3, [r4, #12]
 800d62c:	6832      	ldr	r2, [r6, #0]
 800d62e:	1a9b      	subs	r3, r3, r2
 800d630:	42ab      	cmp	r3, r5
 800d632:	dc2b      	bgt.n	800d68c <_printf_common+0xa0>
 800d634:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d638:	1e13      	subs	r3, r2, #0
 800d63a:	6822      	ldr	r2, [r4, #0]
 800d63c:	bf18      	it	ne
 800d63e:	2301      	movne	r3, #1
 800d640:	0692      	lsls	r2, r2, #26
 800d642:	d430      	bmi.n	800d6a6 <_printf_common+0xba>
 800d644:	4649      	mov	r1, r9
 800d646:	4638      	mov	r0, r7
 800d648:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d64c:	47c0      	blx	r8
 800d64e:	3001      	adds	r0, #1
 800d650:	d023      	beq.n	800d69a <_printf_common+0xae>
 800d652:	6823      	ldr	r3, [r4, #0]
 800d654:	6922      	ldr	r2, [r4, #16]
 800d656:	f003 0306 	and.w	r3, r3, #6
 800d65a:	2b04      	cmp	r3, #4
 800d65c:	bf14      	ite	ne
 800d65e:	2500      	movne	r5, #0
 800d660:	6833      	ldreq	r3, [r6, #0]
 800d662:	f04f 0600 	mov.w	r6, #0
 800d666:	bf08      	it	eq
 800d668:	68e5      	ldreq	r5, [r4, #12]
 800d66a:	f104 041a 	add.w	r4, r4, #26
 800d66e:	bf08      	it	eq
 800d670:	1aed      	subeq	r5, r5, r3
 800d672:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d676:	bf08      	it	eq
 800d678:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d67c:	4293      	cmp	r3, r2
 800d67e:	bfc4      	itt	gt
 800d680:	1a9b      	subgt	r3, r3, r2
 800d682:	18ed      	addgt	r5, r5, r3
 800d684:	42b5      	cmp	r5, r6
 800d686:	d11a      	bne.n	800d6be <_printf_common+0xd2>
 800d688:	2000      	movs	r0, #0
 800d68a:	e008      	b.n	800d69e <_printf_common+0xb2>
 800d68c:	2301      	movs	r3, #1
 800d68e:	4652      	mov	r2, sl
 800d690:	4649      	mov	r1, r9
 800d692:	4638      	mov	r0, r7
 800d694:	47c0      	blx	r8
 800d696:	3001      	adds	r0, #1
 800d698:	d103      	bne.n	800d6a2 <_printf_common+0xb6>
 800d69a:	f04f 30ff 	mov.w	r0, #4294967295
 800d69e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6a2:	3501      	adds	r5, #1
 800d6a4:	e7c1      	b.n	800d62a <_printf_common+0x3e>
 800d6a6:	2030      	movs	r0, #48	; 0x30
 800d6a8:	18e1      	adds	r1, r4, r3
 800d6aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d6ae:	1c5a      	adds	r2, r3, #1
 800d6b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d6b4:	4422      	add	r2, r4
 800d6b6:	3302      	adds	r3, #2
 800d6b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d6bc:	e7c2      	b.n	800d644 <_printf_common+0x58>
 800d6be:	2301      	movs	r3, #1
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4649      	mov	r1, r9
 800d6c4:	4638      	mov	r0, r7
 800d6c6:	47c0      	blx	r8
 800d6c8:	3001      	adds	r0, #1
 800d6ca:	d0e6      	beq.n	800d69a <_printf_common+0xae>
 800d6cc:	3601      	adds	r6, #1
 800d6ce:	e7d9      	b.n	800d684 <_printf_common+0x98>

0800d6d0 <_printf_i>:
 800d6d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d6d4:	7e0f      	ldrb	r7, [r1, #24]
 800d6d6:	4691      	mov	r9, r2
 800d6d8:	2f78      	cmp	r7, #120	; 0x78
 800d6da:	4680      	mov	r8, r0
 800d6dc:	460c      	mov	r4, r1
 800d6de:	469a      	mov	sl, r3
 800d6e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d6e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d6e6:	d807      	bhi.n	800d6f8 <_printf_i+0x28>
 800d6e8:	2f62      	cmp	r7, #98	; 0x62
 800d6ea:	d80a      	bhi.n	800d702 <_printf_i+0x32>
 800d6ec:	2f00      	cmp	r7, #0
 800d6ee:	f000 80d5 	beq.w	800d89c <_printf_i+0x1cc>
 800d6f2:	2f58      	cmp	r7, #88	; 0x58
 800d6f4:	f000 80c1 	beq.w	800d87a <_printf_i+0x1aa>
 800d6f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d6fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d700:	e03a      	b.n	800d778 <_printf_i+0xa8>
 800d702:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d706:	2b15      	cmp	r3, #21
 800d708:	d8f6      	bhi.n	800d6f8 <_printf_i+0x28>
 800d70a:	a101      	add	r1, pc, #4	; (adr r1, 800d710 <_printf_i+0x40>)
 800d70c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d710:	0800d769 	.word	0x0800d769
 800d714:	0800d77d 	.word	0x0800d77d
 800d718:	0800d6f9 	.word	0x0800d6f9
 800d71c:	0800d6f9 	.word	0x0800d6f9
 800d720:	0800d6f9 	.word	0x0800d6f9
 800d724:	0800d6f9 	.word	0x0800d6f9
 800d728:	0800d77d 	.word	0x0800d77d
 800d72c:	0800d6f9 	.word	0x0800d6f9
 800d730:	0800d6f9 	.word	0x0800d6f9
 800d734:	0800d6f9 	.word	0x0800d6f9
 800d738:	0800d6f9 	.word	0x0800d6f9
 800d73c:	0800d883 	.word	0x0800d883
 800d740:	0800d7a9 	.word	0x0800d7a9
 800d744:	0800d83d 	.word	0x0800d83d
 800d748:	0800d6f9 	.word	0x0800d6f9
 800d74c:	0800d6f9 	.word	0x0800d6f9
 800d750:	0800d8a5 	.word	0x0800d8a5
 800d754:	0800d6f9 	.word	0x0800d6f9
 800d758:	0800d7a9 	.word	0x0800d7a9
 800d75c:	0800d6f9 	.word	0x0800d6f9
 800d760:	0800d6f9 	.word	0x0800d6f9
 800d764:	0800d845 	.word	0x0800d845
 800d768:	682b      	ldr	r3, [r5, #0]
 800d76a:	1d1a      	adds	r2, r3, #4
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	602a      	str	r2, [r5, #0]
 800d770:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d774:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d778:	2301      	movs	r3, #1
 800d77a:	e0a0      	b.n	800d8be <_printf_i+0x1ee>
 800d77c:	6820      	ldr	r0, [r4, #0]
 800d77e:	682b      	ldr	r3, [r5, #0]
 800d780:	0607      	lsls	r7, r0, #24
 800d782:	f103 0104 	add.w	r1, r3, #4
 800d786:	6029      	str	r1, [r5, #0]
 800d788:	d501      	bpl.n	800d78e <_printf_i+0xbe>
 800d78a:	681e      	ldr	r6, [r3, #0]
 800d78c:	e003      	b.n	800d796 <_printf_i+0xc6>
 800d78e:	0646      	lsls	r6, r0, #25
 800d790:	d5fb      	bpl.n	800d78a <_printf_i+0xba>
 800d792:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d796:	2e00      	cmp	r6, #0
 800d798:	da03      	bge.n	800d7a2 <_printf_i+0xd2>
 800d79a:	232d      	movs	r3, #45	; 0x2d
 800d79c:	4276      	negs	r6, r6
 800d79e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7a2:	230a      	movs	r3, #10
 800d7a4:	4859      	ldr	r0, [pc, #356]	; (800d90c <_printf_i+0x23c>)
 800d7a6:	e012      	b.n	800d7ce <_printf_i+0xfe>
 800d7a8:	682b      	ldr	r3, [r5, #0]
 800d7aa:	6820      	ldr	r0, [r4, #0]
 800d7ac:	1d19      	adds	r1, r3, #4
 800d7ae:	6029      	str	r1, [r5, #0]
 800d7b0:	0605      	lsls	r5, r0, #24
 800d7b2:	d501      	bpl.n	800d7b8 <_printf_i+0xe8>
 800d7b4:	681e      	ldr	r6, [r3, #0]
 800d7b6:	e002      	b.n	800d7be <_printf_i+0xee>
 800d7b8:	0641      	lsls	r1, r0, #25
 800d7ba:	d5fb      	bpl.n	800d7b4 <_printf_i+0xe4>
 800d7bc:	881e      	ldrh	r6, [r3, #0]
 800d7be:	2f6f      	cmp	r7, #111	; 0x6f
 800d7c0:	bf0c      	ite	eq
 800d7c2:	2308      	moveq	r3, #8
 800d7c4:	230a      	movne	r3, #10
 800d7c6:	4851      	ldr	r0, [pc, #324]	; (800d90c <_printf_i+0x23c>)
 800d7c8:	2100      	movs	r1, #0
 800d7ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d7ce:	6865      	ldr	r5, [r4, #4]
 800d7d0:	2d00      	cmp	r5, #0
 800d7d2:	bfa8      	it	ge
 800d7d4:	6821      	ldrge	r1, [r4, #0]
 800d7d6:	60a5      	str	r5, [r4, #8]
 800d7d8:	bfa4      	itt	ge
 800d7da:	f021 0104 	bicge.w	r1, r1, #4
 800d7de:	6021      	strge	r1, [r4, #0]
 800d7e0:	b90e      	cbnz	r6, 800d7e6 <_printf_i+0x116>
 800d7e2:	2d00      	cmp	r5, #0
 800d7e4:	d04b      	beq.n	800d87e <_printf_i+0x1ae>
 800d7e6:	4615      	mov	r5, r2
 800d7e8:	fbb6 f1f3 	udiv	r1, r6, r3
 800d7ec:	fb03 6711 	mls	r7, r3, r1, r6
 800d7f0:	5dc7      	ldrb	r7, [r0, r7]
 800d7f2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d7f6:	4637      	mov	r7, r6
 800d7f8:	42bb      	cmp	r3, r7
 800d7fa:	460e      	mov	r6, r1
 800d7fc:	d9f4      	bls.n	800d7e8 <_printf_i+0x118>
 800d7fe:	2b08      	cmp	r3, #8
 800d800:	d10b      	bne.n	800d81a <_printf_i+0x14a>
 800d802:	6823      	ldr	r3, [r4, #0]
 800d804:	07de      	lsls	r6, r3, #31
 800d806:	d508      	bpl.n	800d81a <_printf_i+0x14a>
 800d808:	6923      	ldr	r3, [r4, #16]
 800d80a:	6861      	ldr	r1, [r4, #4]
 800d80c:	4299      	cmp	r1, r3
 800d80e:	bfde      	ittt	le
 800d810:	2330      	movle	r3, #48	; 0x30
 800d812:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d816:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d81a:	1b52      	subs	r2, r2, r5
 800d81c:	6122      	str	r2, [r4, #16]
 800d81e:	464b      	mov	r3, r9
 800d820:	4621      	mov	r1, r4
 800d822:	4640      	mov	r0, r8
 800d824:	f8cd a000 	str.w	sl, [sp]
 800d828:	aa03      	add	r2, sp, #12
 800d82a:	f7ff fedf 	bl	800d5ec <_printf_common>
 800d82e:	3001      	adds	r0, #1
 800d830:	d14a      	bne.n	800d8c8 <_printf_i+0x1f8>
 800d832:	f04f 30ff 	mov.w	r0, #4294967295
 800d836:	b004      	add	sp, #16
 800d838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	f043 0320 	orr.w	r3, r3, #32
 800d842:	6023      	str	r3, [r4, #0]
 800d844:	2778      	movs	r7, #120	; 0x78
 800d846:	4832      	ldr	r0, [pc, #200]	; (800d910 <_printf_i+0x240>)
 800d848:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	6829      	ldr	r1, [r5, #0]
 800d850:	061f      	lsls	r7, r3, #24
 800d852:	f851 6b04 	ldr.w	r6, [r1], #4
 800d856:	d402      	bmi.n	800d85e <_printf_i+0x18e>
 800d858:	065f      	lsls	r7, r3, #25
 800d85a:	bf48      	it	mi
 800d85c:	b2b6      	uxthmi	r6, r6
 800d85e:	07df      	lsls	r7, r3, #31
 800d860:	bf48      	it	mi
 800d862:	f043 0320 	orrmi.w	r3, r3, #32
 800d866:	6029      	str	r1, [r5, #0]
 800d868:	bf48      	it	mi
 800d86a:	6023      	strmi	r3, [r4, #0]
 800d86c:	b91e      	cbnz	r6, 800d876 <_printf_i+0x1a6>
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	f023 0320 	bic.w	r3, r3, #32
 800d874:	6023      	str	r3, [r4, #0]
 800d876:	2310      	movs	r3, #16
 800d878:	e7a6      	b.n	800d7c8 <_printf_i+0xf8>
 800d87a:	4824      	ldr	r0, [pc, #144]	; (800d90c <_printf_i+0x23c>)
 800d87c:	e7e4      	b.n	800d848 <_printf_i+0x178>
 800d87e:	4615      	mov	r5, r2
 800d880:	e7bd      	b.n	800d7fe <_printf_i+0x12e>
 800d882:	682b      	ldr	r3, [r5, #0]
 800d884:	6826      	ldr	r6, [r4, #0]
 800d886:	1d18      	adds	r0, r3, #4
 800d888:	6961      	ldr	r1, [r4, #20]
 800d88a:	6028      	str	r0, [r5, #0]
 800d88c:	0635      	lsls	r5, r6, #24
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	d501      	bpl.n	800d896 <_printf_i+0x1c6>
 800d892:	6019      	str	r1, [r3, #0]
 800d894:	e002      	b.n	800d89c <_printf_i+0x1cc>
 800d896:	0670      	lsls	r0, r6, #25
 800d898:	d5fb      	bpl.n	800d892 <_printf_i+0x1c2>
 800d89a:	8019      	strh	r1, [r3, #0]
 800d89c:	2300      	movs	r3, #0
 800d89e:	4615      	mov	r5, r2
 800d8a0:	6123      	str	r3, [r4, #16]
 800d8a2:	e7bc      	b.n	800d81e <_printf_i+0x14e>
 800d8a4:	682b      	ldr	r3, [r5, #0]
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	1d1a      	adds	r2, r3, #4
 800d8aa:	602a      	str	r2, [r5, #0]
 800d8ac:	681d      	ldr	r5, [r3, #0]
 800d8ae:	6862      	ldr	r2, [r4, #4]
 800d8b0:	4628      	mov	r0, r5
 800d8b2:	f000 f859 	bl	800d968 <memchr>
 800d8b6:	b108      	cbz	r0, 800d8bc <_printf_i+0x1ec>
 800d8b8:	1b40      	subs	r0, r0, r5
 800d8ba:	6060      	str	r0, [r4, #4]
 800d8bc:	6863      	ldr	r3, [r4, #4]
 800d8be:	6123      	str	r3, [r4, #16]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8c6:	e7aa      	b.n	800d81e <_printf_i+0x14e>
 800d8c8:	462a      	mov	r2, r5
 800d8ca:	4649      	mov	r1, r9
 800d8cc:	4640      	mov	r0, r8
 800d8ce:	6923      	ldr	r3, [r4, #16]
 800d8d0:	47d0      	blx	sl
 800d8d2:	3001      	adds	r0, #1
 800d8d4:	d0ad      	beq.n	800d832 <_printf_i+0x162>
 800d8d6:	6823      	ldr	r3, [r4, #0]
 800d8d8:	079b      	lsls	r3, r3, #30
 800d8da:	d413      	bmi.n	800d904 <_printf_i+0x234>
 800d8dc:	68e0      	ldr	r0, [r4, #12]
 800d8de:	9b03      	ldr	r3, [sp, #12]
 800d8e0:	4298      	cmp	r0, r3
 800d8e2:	bfb8      	it	lt
 800d8e4:	4618      	movlt	r0, r3
 800d8e6:	e7a6      	b.n	800d836 <_printf_i+0x166>
 800d8e8:	2301      	movs	r3, #1
 800d8ea:	4632      	mov	r2, r6
 800d8ec:	4649      	mov	r1, r9
 800d8ee:	4640      	mov	r0, r8
 800d8f0:	47d0      	blx	sl
 800d8f2:	3001      	adds	r0, #1
 800d8f4:	d09d      	beq.n	800d832 <_printf_i+0x162>
 800d8f6:	3501      	adds	r5, #1
 800d8f8:	68e3      	ldr	r3, [r4, #12]
 800d8fa:	9903      	ldr	r1, [sp, #12]
 800d8fc:	1a5b      	subs	r3, r3, r1
 800d8fe:	42ab      	cmp	r3, r5
 800d900:	dcf2      	bgt.n	800d8e8 <_printf_i+0x218>
 800d902:	e7eb      	b.n	800d8dc <_printf_i+0x20c>
 800d904:	2500      	movs	r5, #0
 800d906:	f104 0619 	add.w	r6, r4, #25
 800d90a:	e7f5      	b.n	800d8f8 <_printf_i+0x228>
 800d90c:	0800db9b 	.word	0x0800db9b
 800d910:	0800dbac 	.word	0x0800dbac

0800d914 <memmove>:
 800d914:	4288      	cmp	r0, r1
 800d916:	b510      	push	{r4, lr}
 800d918:	eb01 0402 	add.w	r4, r1, r2
 800d91c:	d902      	bls.n	800d924 <memmove+0x10>
 800d91e:	4284      	cmp	r4, r0
 800d920:	4623      	mov	r3, r4
 800d922:	d807      	bhi.n	800d934 <memmove+0x20>
 800d924:	1e43      	subs	r3, r0, #1
 800d926:	42a1      	cmp	r1, r4
 800d928:	d008      	beq.n	800d93c <memmove+0x28>
 800d92a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d92e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d932:	e7f8      	b.n	800d926 <memmove+0x12>
 800d934:	4601      	mov	r1, r0
 800d936:	4402      	add	r2, r0
 800d938:	428a      	cmp	r2, r1
 800d93a:	d100      	bne.n	800d93e <memmove+0x2a>
 800d93c:	bd10      	pop	{r4, pc}
 800d93e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d946:	e7f7      	b.n	800d938 <memmove+0x24>

0800d948 <_sbrk_r>:
 800d948:	b538      	push	{r3, r4, r5, lr}
 800d94a:	2300      	movs	r3, #0
 800d94c:	4d05      	ldr	r5, [pc, #20]	; (800d964 <_sbrk_r+0x1c>)
 800d94e:	4604      	mov	r4, r0
 800d950:	4608      	mov	r0, r1
 800d952:	602b      	str	r3, [r5, #0]
 800d954:	f7f3 fc3e 	bl	80011d4 <_sbrk>
 800d958:	1c43      	adds	r3, r0, #1
 800d95a:	d102      	bne.n	800d962 <_sbrk_r+0x1a>
 800d95c:	682b      	ldr	r3, [r5, #0]
 800d95e:	b103      	cbz	r3, 800d962 <_sbrk_r+0x1a>
 800d960:	6023      	str	r3, [r4, #0]
 800d962:	bd38      	pop	{r3, r4, r5, pc}
 800d964:	200017c8 	.word	0x200017c8

0800d968 <memchr>:
 800d968:	4603      	mov	r3, r0
 800d96a:	b510      	push	{r4, lr}
 800d96c:	b2c9      	uxtb	r1, r1
 800d96e:	4402      	add	r2, r0
 800d970:	4293      	cmp	r3, r2
 800d972:	4618      	mov	r0, r3
 800d974:	d101      	bne.n	800d97a <memchr+0x12>
 800d976:	2000      	movs	r0, #0
 800d978:	e003      	b.n	800d982 <memchr+0x1a>
 800d97a:	7804      	ldrb	r4, [r0, #0]
 800d97c:	3301      	adds	r3, #1
 800d97e:	428c      	cmp	r4, r1
 800d980:	d1f6      	bne.n	800d970 <memchr+0x8>
 800d982:	bd10      	pop	{r4, pc}

0800d984 <memcpy>:
 800d984:	440a      	add	r2, r1
 800d986:	4291      	cmp	r1, r2
 800d988:	f100 33ff 	add.w	r3, r0, #4294967295
 800d98c:	d100      	bne.n	800d990 <memcpy+0xc>
 800d98e:	4770      	bx	lr
 800d990:	b510      	push	{r4, lr}
 800d992:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d996:	4291      	cmp	r1, r2
 800d998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d99c:	d1f9      	bne.n	800d992 <memcpy+0xe>
 800d99e:	bd10      	pop	{r4, pc}

0800d9a0 <_realloc_r>:
 800d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a4:	4680      	mov	r8, r0
 800d9a6:	4614      	mov	r4, r2
 800d9a8:	460e      	mov	r6, r1
 800d9aa:	b921      	cbnz	r1, 800d9b6 <_realloc_r+0x16>
 800d9ac:	4611      	mov	r1, r2
 800d9ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b2:	f7ff bc37 	b.w	800d224 <_malloc_r>
 800d9b6:	b92a      	cbnz	r2, 800d9c4 <_realloc_r+0x24>
 800d9b8:	f7ff fbcc 	bl	800d154 <_free_r>
 800d9bc:	4625      	mov	r5, r4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9c4:	f000 f81b 	bl	800d9fe <_malloc_usable_size_r>
 800d9c8:	4284      	cmp	r4, r0
 800d9ca:	4607      	mov	r7, r0
 800d9cc:	d802      	bhi.n	800d9d4 <_realloc_r+0x34>
 800d9ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9d2:	d812      	bhi.n	800d9fa <_realloc_r+0x5a>
 800d9d4:	4621      	mov	r1, r4
 800d9d6:	4640      	mov	r0, r8
 800d9d8:	f7ff fc24 	bl	800d224 <_malloc_r>
 800d9dc:	4605      	mov	r5, r0
 800d9de:	2800      	cmp	r0, #0
 800d9e0:	d0ed      	beq.n	800d9be <_realloc_r+0x1e>
 800d9e2:	42bc      	cmp	r4, r7
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	bf28      	it	cs
 800d9ea:	463a      	movcs	r2, r7
 800d9ec:	f7ff ffca 	bl	800d984 <memcpy>
 800d9f0:	4631      	mov	r1, r6
 800d9f2:	4640      	mov	r0, r8
 800d9f4:	f7ff fbae 	bl	800d154 <_free_r>
 800d9f8:	e7e1      	b.n	800d9be <_realloc_r+0x1e>
 800d9fa:	4635      	mov	r5, r6
 800d9fc:	e7df      	b.n	800d9be <_realloc_r+0x1e>

0800d9fe <_malloc_usable_size_r>:
 800d9fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da02:	1f18      	subs	r0, r3, #4
 800da04:	2b00      	cmp	r3, #0
 800da06:	bfbc      	itt	lt
 800da08:	580b      	ldrlt	r3, [r1, r0]
 800da0a:	18c0      	addlt	r0, r0, r3
 800da0c:	4770      	bx	lr
	...

0800da10 <_init>:
 800da10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da12:	bf00      	nop
 800da14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da16:	bc08      	pop	{r3}
 800da18:	469e      	mov	lr, r3
 800da1a:	4770      	bx	lr

0800da1c <_fini>:
 800da1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da1e:	bf00      	nop
 800da20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da22:	bc08      	pop	{r3}
 800da24:	469e      	mov	lr, r3
 800da26:	4770      	bx	lr
