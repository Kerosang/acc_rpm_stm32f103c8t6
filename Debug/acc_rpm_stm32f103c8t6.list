
acc_rpm_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f884  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800f998  0800f998  0001f998  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fde4  0800fde4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800fde4  0800fde4  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fde4  0800fde4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fde4  0800fde4  0001fde4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fde8  0800fde8  0001fde8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800fdec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001e8  0800ffd4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008d0  0800ffd4  000208d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cebe  00000000  00000000  00020254  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004551  00000000  00000000  0003d112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00041668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001602  00000000  00000000  000432c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006a3e  00000000  00000000  000448ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000221c4  00000000  00000000  0004b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a025c  00000000  00000000  0006d4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008a08  00000000  00000000  0010d728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00116130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f97c 	.word	0x0800f97c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	0800f97c 	.word	0x0800f97c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__aeabi_f2iz>:
 8000f44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f4c:	d30f      	bcc.n	8000f6e <__aeabi_f2iz+0x2a>
 8000f4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f56:	d90d      	bls.n	8000f74 <__aeabi_f2iz+0x30>
 8000f58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f64:	fa23 f002 	lsr.w	r0, r3, r2
 8000f68:	bf18      	it	ne
 8000f6a:	4240      	negne	r0, r0
 8000f6c:	4770      	bx	lr
 8000f6e:	f04f 0000 	mov.w	r0, #0
 8000f72:	4770      	bx	lr
 8000f74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f78:	d101      	bne.n	8000f7e <__aeabi_f2iz+0x3a>
 8000f7a:	0242      	lsls	r2, r0, #9
 8000f7c:	d105      	bne.n	8000f8a <__aeabi_f2iz+0x46>
 8000f7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f82:	bf08      	it	eq
 8000f84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f88:	4770      	bx	lr
 8000f8a:	f04f 0000 	mov.w	r0, #0
 8000f8e:	4770      	bx	lr

08000f90 <genDegreefromAcc>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float genDegreefromAcc(float ac_value) {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
	return ac_value * 90;
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <genDegreefromAcc+0x1c>)
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff fe82 	bl	8000ca4 <__aeabi_fmul>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	42b40000 	.word	0x42b40000

08000fb0 <MPU6050_Init>:
		pos += bytesremaining;  // update the position for the data buffer

		HAL_Delay(5);  // Write cycle delay (5ms)
	}
}
uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
	uint8_t check;

	// check device ID WHO_AM_I

	HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8000fb8:	2364      	movs	r3, #100	; 0x64
 8000fba:	9302      	str	r3, [sp, #8]
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	9301      	str	r3, [sp, #4]
 8000fc0:	f107 030f 	add.w	r3, r7, #15
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	2275      	movs	r2, #117	; 0x75
 8000fca:	21d0      	movs	r1, #208	; 0xd0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f002 fd2f 	bl	8003a30 <HAL_I2C_Mem_Read>
			i2c_timeout);

	if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b68      	cmp	r3, #104	; 0x68
 8000fd6:	d174      	bne.n	80010c2 <MPU6050_Init+0x112>
			{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0x0;
 8000fd8:	4b3c      	ldr	r3, [pc, #240]	; (80010cc <MPU6050_Init+0x11c>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8000fde:	2364      	movs	r3, #100	; 0x64
 8000fe0:	9302      	str	r3, [sp, #8]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	4b39      	ldr	r3, [pc, #228]	; (80010cc <MPU6050_Init+0x11c>)
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	2301      	movs	r3, #1
 8000fec:	226b      	movs	r2, #107	; 0x6b
 8000fee:	21d0      	movs	r1, #208	; 0xd0
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 fc23 	bl	800383c <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x00;
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MPU6050_Init+0x11c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	9302      	str	r3, [sp, #8]
 8001000:	2301      	movs	r3, #1
 8001002:	9301      	str	r3, [sp, #4]
 8001004:	4b31      	ldr	r3, [pc, #196]	; (80010cc <MPU6050_Init+0x11c>)
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	2219      	movs	r2, #25
 800100c:	21d0      	movs	r1, #208	; 0xd0
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f002 fc14 	bl	800383c <HAL_I2C_Mem_Write>
				i2c_timeout);

		Data = 0x00;
 8001014:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MPU6050_Init+0x11c>)
 8001016:	2200      	movs	r2, #0
 8001018:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x1A, 1, &Data, 1, i2c_timeout);
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	2301      	movs	r3, #1
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MPU6050_Init+0x11c>)
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2301      	movs	r3, #1
 8001028:	221a      	movs	r2, #26
 800102a:	21d0      	movs	r1, #208	; 0xd0
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f002 fc05 	bl	800383c <HAL_I2C_Mem_Write>
		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g

		Data = 0x0;
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <MPU6050_Init+0x11c>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 8001038:	2364      	movs	r3, #100	; 0x64
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	2301      	movs	r3, #1
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	4b22      	ldr	r3, [pc, #136]	; (80010cc <MPU6050_Init+0x11c>)
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2301      	movs	r3, #1
 8001046:	221c      	movs	r2, #28
 8001048:	21d0      	movs	r1, #208	; 0xd0
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f002 fbf6 	bl	800383c <HAL_I2C_Mem_Write>
				i2c_timeout);

		// Set accscopic configuration in acc_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
		Data = 0x0;
 8001050:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MPU6050_Init+0x11c>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, acc_CONFIG_REG, 1, &Data, 1,
 8001056:	2364      	movs	r3, #100	; 0x64
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2301      	movs	r3, #1
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MPU6050_Init+0x11c>)
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	221b      	movs	r2, #27
 8001066:	21d0      	movs	r1, #208	; 0xd0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f002 fbe7 	bl	800383c <HAL_I2C_Mem_Write>
				i2c_timeout);

		Data = 0x07;
 800106e:	4b17      	ldr	r3, [pc, #92]	; (80010cc <MPU6050_Init+0x11c>)
 8001070:	2207      	movs	r2, #7
 8001072:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x68, 1, &Data, 1, i2c_timeout);
 8001074:	2364      	movs	r3, #100	; 0x64
 8001076:	9302      	str	r3, [sp, #8]
 8001078:	2301      	movs	r3, #1
 800107a:	9301      	str	r3, [sp, #4]
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MPU6050_Init+0x11c>)
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2301      	movs	r3, #1
 8001082:	2268      	movs	r2, #104	; 0x68
 8001084:	21d0      	movs	r1, #208	; 0xd0
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f002 fbd8 	bl	800383c <HAL_I2C_Mem_Write>

		Data = 0xff;
 800108c:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MPU6050_Init+0x11c>)
 800108e:	22ff      	movs	r2, #255	; 0xff
 8001090:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, 0x23, 1, &Data, 1, i2c_timeout);
 8001092:	2364      	movs	r3, #100	; 0x64
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2301      	movs	r3, #1
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MPU6050_Init+0x11c>)
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	2301      	movs	r3, #1
 80010a0:	2223      	movs	r2, #35	; 0x23
 80010a2:	21d0      	movs	r1, #208	; 0xd0
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f002 fbc9 	bl	800383c <HAL_I2C_Mem_Write>

		sprintf(MSG, "OKx1x \r\n");
 80010aa:	4909      	ldr	r1, [pc, #36]	; (80010d0 <MPU6050_Init+0x120>)
 80010ac:	4809      	ldr	r0, [pc, #36]	; (80010d4 <MPU6050_Init+0x124>)
 80010ae:	f00c fb17 	bl	800d6e0 <siprintf>
		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 80010b2:	2364      	movs	r3, #100	; 0x64
 80010b4:	2232      	movs	r2, #50	; 0x32
 80010b6:	4907      	ldr	r1, [pc, #28]	; (80010d4 <MPU6050_Init+0x124>)
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MPU6050_Init+0x128>)
 80010ba:	f007 fbdd 	bl	8008878 <HAL_UART_Transmit>
		return 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	e000      	b.n	80010c4 <MPU6050_Init+0x114>
	}
	return 1;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	2000047e 	.word	0x2000047e
 80010d0:	0800f998 	.word	0x0800f998
 80010d4:	2000043c 	.word	0x2000043c
 80010d8:	200003ac 	.word	0x200003ac

080010dc <read_gylo>:
void read_gylo() {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af04      	add	r7, sp, #16

	HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, 0x3B, I2C_MEMADD_SIZE_8BIT, gyloXYZ,
 80010e2:	2301      	movs	r3, #1
 80010e4:	9302      	str	r3, [sp, #8]
 80010e6:	230e      	movs	r3, #14
 80010e8:	9301      	str	r3, [sp, #4]
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <read_gylo+0x24>)
 80010ec:	9300      	str	r3, [sp, #0]
 80010ee:	2301      	movs	r3, #1
 80010f0:	223b      	movs	r2, #59	; 0x3b
 80010f2:	21d0      	movs	r1, #208	; 0xd0
 80010f4:	4803      	ldr	r0, [pc, #12]	; (8001104 <read_gylo+0x28>)
 80010f6:	f002 fc9b 	bl	8003a30 <HAL_I2C_Mem_Read>
			14, 1);
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000470 	.word	0x20000470
 8001104:	2000025c 	.word	0x2000025c

08001108 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800110c:	b093      	sub	sp, #76	; 0x4c
 800110e:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001110:	f001 f9f2 	bl	80024f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001114:	f000 f94e 	bl	80013b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001118:	f000 fc00 	bl	800191c <MX_GPIO_Init>
	MX_ADC1_Init();
 800111c:	f000 f9aa 	bl	8001474 <MX_ADC1_Init>
	MX_CAN_Init();
 8001120:	f000 f9e6 	bl	80014f0 <MX_CAN_Init>
	MX_I2C1_Init();
 8001124:	f000 fa18 	bl	8001558 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001128:	f000 fa8e 	bl	8001648 <MX_SPI1_Init>
	MX_TIM1_Init();
 800112c:	f000 fac2 	bl	80016b4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001130:	f000 fb16 	bl	8001760 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001134:	f000 fb9e 	bl	8001874 <MX_USART1_UART_Init>
	MX_RTC_Init();
 8001138:	f000 fa3c 	bl	80015b4 <MX_RTC_Init>
	MX_USART2_UART_Init();
 800113c:	f000 fbc4 	bl	80018c8 <MX_USART2_UART_Init>
	MX_FATFS_Init();
 8001140:	f009 fe9e 	bl	800ae80 <MX_FATFS_Init>
	TM1637_Init();
 8001144:	f001 f842 	bl	80021cc <TM1637_Init>
	TM1637_SetBrightness(7);
 8001148:	2007      	movs	r0, #7
 800114a:	f001 f921 	bl	8002390 <TM1637_SetBrightness>
	TM1637_ClearDisplay();
 800114e:	f001 f89d 	bl	800228c <TM1637_ClearDisplay>
	while (MPU6050_Init(&hi2c1) == 1)
 8001152:	bf00      	nop
 8001154:	488c      	ldr	r0, [pc, #560]	; (8001388 <main+0x280>)
 8001156:	f7ff ff2b 	bl	8000fb0 <MPU6050_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b01      	cmp	r3, #1
 800115e:	d0f9      	beq.n	8001154 <main+0x4c>
	float gylo_z;
	while (1) {
		static uint32_t tk;
		static bool state_tk;
		static bool show_togleamp;
		if (!state_tk) {
 8001160:	4b8a      	ldr	r3, [pc, #552]	; (800138c <main+0x284>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	f083 0301 	eor.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 80eb 	beq.w	8001346 <main+0x23e>
			tk = HAL_GetTick();
 8001170:	f001 fa1a 	bl	80025a8 <HAL_GetTick>
 8001174:	4603      	mov	r3, r0
 8001176:	4a86      	ldr	r2, [pc, #536]	; (8001390 <main+0x288>)
 8001178:	6013      	str	r3, [r2, #0]
			state_tk = true;
 800117a:	4b84      	ldr	r3, [pc, #528]	; (800138c <main+0x284>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
			show_togleamp = true;
 8001180:	4b84      	ldr	r3, [pc, #528]	; (8001394 <main+0x28c>)
 8001182:	2201      	movs	r2, #1
 8001184:	701a      	strb	r2, [r3, #0]
//			sprintf(MSG,
//					"TZ:+%02d:%02d,%04d-%02d-%02d,%02d:%02d:%02d%: tk = %d \r\n",
//					zone_hr, zone_min, year, month, date, hour, minute, second,
//					tk);
//			/* May show warning below. Ignore and proceed. */
			read_gylo();
 8001186:	f7ff ffa9 	bl	80010dc <read_gylo>
			acc_x_raw = (gyloXYZ[0] << 8) | gyloXYZ[1];
 800118a:	4b83      	ldr	r3, [pc, #524]	; (8001398 <main+0x290>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	021b      	lsls	r3, r3, #8
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b81      	ldr	r3, [pc, #516]	; (8001398 <main+0x290>)
 8001194:	785b      	ldrb	r3, [r3, #1]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	857b      	strh	r3, [r7, #42]	; 0x2a
			acc_y_raw = (gyloXYZ[2] << 8) | gyloXYZ[3];
 800119c:	4b7e      	ldr	r3, [pc, #504]	; (8001398 <main+0x290>)
 800119e:	789b      	ldrb	r3, [r3, #2]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <main+0x290>)
 80011a6:	78db      	ldrb	r3, [r3, #3]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	853b      	strh	r3, [r7, #40]	; 0x28
			acc_z_raw = (gyloXYZ[4] << 8) | gyloXYZ[5];
 80011ae:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <main+0x290>)
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b78      	ldr	r3, [pc, #480]	; (8001398 <main+0x290>)
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	84fb      	strh	r3, [r7, #38]	; 0x26
			acc_x = acc_x_raw / 16384.f;
 80011c0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff fd19 	bl	8000bfc <__aeabi_i2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fe1b 	bl	8000e0c <__aeabi_fdiv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	623b      	str	r3, [r7, #32]
			acc_y = acc_y_raw / 16384.f;
 80011da:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fd0c 	bl	8000bfc <__aeabi_i2f>
 80011e4:	4603      	mov	r3, r0
 80011e6:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fe0e 	bl	8000e0c <__aeabi_fdiv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	61fb      	str	r3, [r7, #28]
			acc_z = acc_z_raw / 16384.f;
 80011f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fcff 	bl	8000bfc <__aeabi_i2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fe01 	bl	8000e0c <__aeabi_fdiv>
 800120a:	4603      	mov	r3, r0
 800120c:	61bb      	str	r3, [r7, #24]

			gylo_x_raw = (gyloXYZ[8] << 8) | gyloXYZ[9];
 800120e:	4b62      	ldr	r3, [pc, #392]	; (8001398 <main+0x290>)
 8001210:	7a1b      	ldrb	r3, [r3, #8]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	b21a      	sxth	r2, r3
 8001216:	4b60      	ldr	r3, [pc, #384]	; (8001398 <main+0x290>)
 8001218:	7a5b      	ldrb	r3, [r3, #9]
 800121a:	b21b      	sxth	r3, r3
 800121c:	4313      	orrs	r3, r2
 800121e:	82fb      	strh	r3, [r7, #22]
			gylo_y_raw = (gyloXYZ[10] << 8) | gyloXYZ[11];
 8001220:	4b5d      	ldr	r3, [pc, #372]	; (8001398 <main+0x290>)
 8001222:	7a9b      	ldrb	r3, [r3, #10]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <main+0x290>)
 800122a:	7adb      	ldrb	r3, [r3, #11]
 800122c:	b21b      	sxth	r3, r3
 800122e:	4313      	orrs	r3, r2
 8001230:	82bb      	strh	r3, [r7, #20]
			gylo_z_raw = (gyloXYZ[12] << 8) | gyloXYZ[13];
 8001232:	4b59      	ldr	r3, [pc, #356]	; (8001398 <main+0x290>)
 8001234:	7b1b      	ldrb	r3, [r3, #12]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b21a      	sxth	r2, r3
 800123a:	4b57      	ldr	r3, [pc, #348]	; (8001398 <main+0x290>)
 800123c:	7b5b      	ldrb	r3, [r3, #13]
 800123e:	b21b      	sxth	r3, r3
 8001240:	4313      	orrs	r3, r2
 8001242:	827b      	strh	r3, [r7, #18]

			gylo_x = gylo_x_raw / 131.f;
 8001244:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fcd7 	bl	8000bfc <__aeabi_i2f>
 800124e:	4603      	mov	r3, r0
 8001250:	4952      	ldr	r1, [pc, #328]	; (800139c <main+0x294>)
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fdda 	bl	8000e0c <__aeabi_fdiv>
 8001258:	4603      	mov	r3, r0
 800125a:	60fb      	str	r3, [r7, #12]
			gylo_y = gylo_y_raw / 131.f;
 800125c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fccb 	bl	8000bfc <__aeabi_i2f>
 8001266:	4603      	mov	r3, r0
 8001268:	494c      	ldr	r1, [pc, #304]	; (800139c <main+0x294>)
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fdce 	bl	8000e0c <__aeabi_fdiv>
 8001270:	4603      	mov	r3, r0
 8001272:	60bb      	str	r3, [r7, #8]
			gylo_z = gylo_z_raw / 131.f;
 8001274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fcbf 	bl	8000bfc <__aeabi_i2f>
 800127e:	4603      	mov	r3, r0
 8001280:	4946      	ldr	r1, [pc, #280]	; (800139c <main+0x294>)
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff fdc2 	bl	8000e0c <__aeabi_fdiv>
 8001288:	4603      	mov	r3, r0
 800128a:	607b      	str	r3, [r7, #4]
			sprintf(MSG, "tk = %d ax = %.2f ,ay = %.2f , az = %.2f \r\n", tk,
 800128c:	4b40      	ldr	r3, [pc, #256]	; (8001390 <main+0x288>)
 800128e:	681e      	ldr	r6, [r3, #0]
 8001290:	6a38      	ldr	r0, [r7, #32]
 8001292:	f7ff f8c9 	bl	8000428 <__aeabi_f2d>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
 800129a:	69f8      	ldr	r0, [r7, #28]
 800129c:	f7ff f8c4 	bl	8000428 <__aeabi_f2d>
 80012a0:	4680      	mov	r8, r0
 80012a2:	4689      	mov	r9, r1
 80012a4:	69b8      	ldr	r0, [r7, #24]
 80012a6:	f7ff f8bf 	bl	8000428 <__aeabi_f2d>
 80012aa:	4602      	mov	r2, r0
 80012ac:	460b      	mov	r3, r1
 80012ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012b2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012b6:	e9cd 4500 	strd	r4, r5, [sp]
 80012ba:	4632      	mov	r2, r6
 80012bc:	4938      	ldr	r1, [pc, #224]	; (80013a0 <main+0x298>)
 80012be:	4839      	ldr	r0, [pc, #228]	; (80013a4 <main+0x29c>)
 80012c0:	f00c fa0e 	bl	800d6e0 <siprintf>
					acc_x, acc_y, acc_z);
			/* May show warning below. Ignore and proceed. */
			HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 100);
 80012c4:	4837      	ldr	r0, [pc, #220]	; (80013a4 <main+0x29c>)
 80012c6:	f7fe ff43 	bl	8000150 <strlen>
 80012ca:	4603      	mov	r3, r0
 80012cc:	b29a      	uxth	r2, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	4934      	ldr	r1, [pc, #208]	; (80013a4 <main+0x29c>)
 80012d2:	4835      	ldr	r0, [pc, #212]	; (80013a8 <main+0x2a0>)
 80012d4:	f007 fad0 	bl	8008878 <HAL_UART_Transmit>

			sprintf(MSG, "tk = %d glx = %.2f ,gly = %.2f , glz = %.2f \r\n", tk,
 80012d8:	4b2d      	ldr	r3, [pc, #180]	; (8001390 <main+0x288>)
 80012da:	681e      	ldr	r6, [r3, #0]
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	f7ff f8a3 	bl	8000428 <__aeabi_f2d>
 80012e2:	4604      	mov	r4, r0
 80012e4:	460d      	mov	r5, r1
 80012e6:	68b8      	ldr	r0, [r7, #8]
 80012e8:	f7ff f89e 	bl	8000428 <__aeabi_f2d>
 80012ec:	4680      	mov	r8, r0
 80012ee:	4689      	mov	r9, r1
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff f899 	bl	8000428 <__aeabi_f2d>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012fe:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001302:	e9cd 4500 	strd	r4, r5, [sp]
 8001306:	4632      	mov	r2, r6
 8001308:	4928      	ldr	r1, [pc, #160]	; (80013ac <main+0x2a4>)
 800130a:	4826      	ldr	r0, [pc, #152]	; (80013a4 <main+0x29c>)
 800130c:	f00c f9e8 	bl	800d6e0 <siprintf>
					gylo_x, gylo_y, gylo_z);
			/* May show warning below. Ignore and proceed. */
			HAL_UART_Transmit(&huart1, MSG, strlen(MSG), 100);
 8001310:	4824      	ldr	r0, [pc, #144]	; (80013a4 <main+0x29c>)
 8001312:	f7fe ff1d 	bl	8000150 <strlen>
 8001316:	4603      	mov	r3, r0
 8001318:	b29a      	uxth	r2, r3
 800131a:	2364      	movs	r3, #100	; 0x64
 800131c:	4921      	ldr	r1, [pc, #132]	; (80013a4 <main+0x29c>)
 800131e:	4822      	ldr	r0, [pc, #136]	; (80013a8 <main+0x2a0>)
 8001320:	f007 faaa 	bl	8008878 <HAL_UART_Transmit>
			TM1637_displayDecimal_only(genDegreefromAcc(acc_x));
 8001324:	6a38      	ldr	r0, [r7, #32]
 8001326:	f7ff fe33 	bl	8000f90 <genDegreefromAcc>
 800132a:	4603      	mov	r3, r0
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe09 	bl	8000f44 <__aeabi_f2iz>
 8001332:	4603      	mov	r3, r0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 ffd1 	bl	80022dc <TM1637_displayDecimal_only>

			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800133a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800133e:	481c      	ldr	r0, [pc, #112]	; (80013b0 <main+0x2a8>)
 8001340:	f002 f91e 	bl	8003580 <HAL_GPIO_TogglePin>
 8001344:	e70c      	b.n	8001160 <main+0x58>

		} else {
			uint32_t tt = HAL_GetTick();
 8001346:	f001 f92f 	bl	80025a8 <HAL_GetTick>
 800134a:	62f8      	str	r0, [r7, #44]	; 0x2c

			if ((tt - tk) >= 250) {
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <main+0x288>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2bf9      	cmp	r3, #249	; 0xf9
 8001356:	d90b      	bls.n	8001370 <main+0x268>
				if (show_togleamp) {
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <main+0x28c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d007      	beq.n	8001370 <main+0x268>
					HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001360:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001364:	4812      	ldr	r0, [pc, #72]	; (80013b0 <main+0x2a8>)
 8001366:	f002 f90b 	bl	8003580 <HAL_GPIO_TogglePin>
					show_togleamp = false;
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <main+0x28c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
				}
			}
			if ((tt - tk) >= 500) {
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <main+0x288>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800137c:	f4ff aef0 	bcc.w	8001160 <main+0x58>
				state_tk = false;
 8001380:	4b02      	ldr	r3, [pc, #8]	; (800138c <main+0x284>)
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
	while (1) {
 8001386:	e6eb      	b.n	8001160 <main+0x58>
 8001388:	2000025c 	.word	0x2000025c
 800138c:	2000047f 	.word	0x2000047f
 8001390:	20000480 	.word	0x20000480
 8001394:	20000484 	.word	0x20000484
 8001398:	20000470 	.word	0x20000470
 800139c:	43030000 	.word	0x43030000
 80013a0:	0800f9c4 	.word	0x0800f9c4
 80013a4:	2000043c 	.word	0x2000043c
 80013a8:	200003ac 	.word	0x200003ac
 80013ac:	0800f9f0 	.word	0x0800f9f0
 80013b0:	40011000 	.word	0x40011000

080013b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b094      	sub	sp, #80	; 0x50
 80013b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013be:	2228      	movs	r2, #40	; 0x28
 80013c0:	2100      	movs	r1, #0
 80013c2:	4618      	mov	r0, r3
 80013c4:	f00c f9ef 	bl	800d7a6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI
 80013e4:	2309      	movs	r3, #9
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80013ee:	2300      	movs	r3, #0
 80013f0:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f2:	2301      	movs	r3, #1
 80013f4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013f6:	2301      	movs	r3, #1
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013fa:	2302      	movs	r3, #2
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001402:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001404:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001408:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800140a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140e:	4618      	mov	r0, r3
 8001410:	f004 fce6 	bl	8005de0 <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x6a>
		Error_Handler();
 800141a:	f000 fb07 	bl	8001a2c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800141e:	230f      	movs	r3, #15
 8001420:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800142a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800142e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	2102      	movs	r1, #2
 800143a:	4618      	mov	r0, r3
 800143c:	f004 ff52 	bl	80062e4 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0x96>
		Error_Handler();
 8001446:	f000 faf1 	bl	8001a2c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_ADC;
 800144a:	2303      	movs	r3, #3
 800144c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800144e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001452:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001458:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4618      	mov	r0, r3
 800145e:	f005 f8cf 	bl	8006600 <HAL_RCCEx_PeriphCLKConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <SystemClock_Config+0xb8>
		Error_Handler();
 8001468:	f000 fae0 	bl	8001a2c <Error_Handler>
	}
}
 800146c:	bf00      	nop
 800146e:	3750      	adds	r7, #80	; 0x50
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001484:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <MX_ADC1_Init+0x74>)
 8001486:	4a19      	ldr	r2, [pc, #100]	; (80014ec <MX_ADC1_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <MX_ADC1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <MX_ADC1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001496:	4b14      	ldr	r3, [pc, #80]	; (80014e8 <MX_ADC1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <MX_ADC1_Init+0x74>)
 800149e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80014a2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <MX_ADC1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <MX_ADC1_Init+0x74>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <MX_ADC1_Init+0x74>)
 80014b2:	f001 f883 	bl	80025bc <HAL_ADC_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0x4c>
		Error_Handler();
 80014bc:	f000 fab6 	bl	8001a2c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80014c0:	2300      	movs	r3, #0
 80014c2:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80014c4:	2301      	movs	r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80014c8:	2300      	movs	r3, #0
 80014ca:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80014cc:	1d3b      	adds	r3, r7, #4
 80014ce:	4619      	mov	r1, r3
 80014d0:	4805      	ldr	r0, [pc, #20]	; (80014e8 <MX_ADC1_Init+0x74>)
 80014d2:	f001 f94b 	bl	800276c <HAL_ADC_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 80014dc:	f000 faa6 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000204 	.word	0x20000204
 80014ec:	40012400 	.word	0x40012400

080014f0 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_CAN_Init+0x60>)
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <MX_CAN_Init+0x64>)
 80014f8:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_CAN_Init+0x60>)
 80014fc:	2210      	movs	r2, #16
 80014fe:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_CAN_Init+0x60>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001506:	4b12      	ldr	r3, [pc, #72]	; (8001550 <MX_CAN_Init+0x60>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <MX_CAN_Init+0x60>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001512:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <MX_CAN_Init+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <MX_CAN_Init+0x60>)
 800151a:	2200      	movs	r2, #0
 800151c:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <MX_CAN_Init+0x60>)
 8001520:	2200      	movs	r2, #0
 8001522:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <MX_CAN_Init+0x60>)
 8001526:	2200      	movs	r2, #0
 8001528:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <MX_CAN_Init+0x60>)
 800152c:	2200      	movs	r2, #0
 800152e:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <MX_CAN_Init+0x60>)
 8001532:	2200      	movs	r2, #0
 8001534:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <MX_CAN_Init+0x60>)
 8001538:	2200      	movs	r2, #0
 800153a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800153c:	4804      	ldr	r0, [pc, #16]	; (8001550 <MX_CAN_Init+0x60>)
 800153e:	f001 fa4e 	bl	80029de <HAL_CAN_Init>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d001      	beq.n	800154c <MX_CAN_Init+0x5c>
		Error_Handler();
 8001548:	f000 fa70 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000234 	.word	0x20000234
 8001554:	40006400 	.word	0x40006400

08001558 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800155c:	4b12      	ldr	r3, [pc, #72]	; (80015a8 <MX_I2C1_Init+0x50>)
 800155e:	4a13      	ldr	r2, [pc, #76]	; (80015ac <MX_I2C1_Init+0x54>)
 8001560:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001564:	4a12      	ldr	r2, [pc, #72]	; (80015b0 <MX_I2C1_Init+0x58>)
 8001566:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_I2C1_Init+0x50>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001576:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800157a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800157c:	4b0a      	ldr	r3, [pc, #40]	; (80015a8 <MX_I2C1_Init+0x50>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001588:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <MX_I2C1_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_I2C1_Init+0x50>)
 8001596:	f002 f80d 	bl	80035b4 <HAL_I2C_Init>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80015a0:	f000 fa44 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000025c 	.word	0x2000025c
 80015ac:	40005400 	.word	0x40005400
 80015b0:	000186a0 	.word	0x000186a0

080015b4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2100      	movs	r1, #0
 80015be:	460a      	mov	r2, r1
 80015c0:	801a      	strh	r2, [r3, #0]
 80015c2:	460a      	mov	r2, r1
 80015c4:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = { 0 };
 80015c6:	2300      	movs	r3, #0
 80015c8:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80015ca:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_RTC_Init+0x8c>)
 80015cc:	4a1d      	ldr	r2, [pc, #116]	; (8001644 <MX_RTC_Init+0x90>)
 80015ce:	601a      	str	r2, [r3, #0]
	hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_RTC_Init+0x8c>)
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	605a      	str	r2, [r3, #4]
	hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80015d8:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_RTC_Init+0x8c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80015de:	4818      	ldr	r0, [pc, #96]	; (8001640 <MX_RTC_Init+0x8c>)
 80015e0:	f005 f97a 	bl	80068d8 <HAL_RTC_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_RTC_Init+0x3a>
		Error_Handler();
 80015ea:	f000 fa1f 	bl	8001a2c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	71bb      	strb	r3, [r7, #6]

	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	2201      	movs	r2, #1
 80015fe:	4619      	mov	r1, r3
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <MX_RTC_Init+0x8c>)
 8001602:	f005 f9f5 	bl	80069f0 <HAL_RTC_SetTime>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_RTC_Init+0x5c>
		Error_Handler();
 800160c:	f000 fa0e 	bl	8001a2c <Error_Handler>
	}
	DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001610:	2301      	movs	r3, #1
 8001612:	703b      	strb	r3, [r7, #0]
	DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001614:	2301      	movs	r3, #1
 8001616:	707b      	strb	r3, [r7, #1]
	DateToUpdate.Date = 0x1;
 8001618:	2301      	movs	r3, #1
 800161a:	70bb      	strb	r3, [r7, #2]
	DateToUpdate.Year = 0x0;
 800161c:	2300      	movs	r3, #0
 800161e:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK) {
 8001620:	463b      	mov	r3, r7
 8001622:	2201      	movs	r2, #1
 8001624:	4619      	mov	r1, r3
 8001626:	4806      	ldr	r0, [pc, #24]	; (8001640 <MX_RTC_Init+0x8c>)
 8001628:	f005 fa7a 	bl	8006b20 <HAL_RTC_SetDate>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_RTC_Init+0x82>
		Error_Handler();
 8001632:	f000 f9fb 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200002b0 	.word	0x200002b0
 8001644:	40002800 	.word	0x40002800

08001648 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800164c:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_SPI1_Init+0x64>)
 800164e:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <MX_SPI1_Init+0x68>)
 8001650:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <MX_SPI1_Init+0x64>)
 8001654:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001658:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <MX_SPI1_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001672:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <MX_SPI1_Init+0x64>)
 8001674:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001678:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800167a:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <MX_SPI1_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <MX_SPI1_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <MX_SPI1_Init+0x64>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800168c:	4b07      	ldr	r3, [pc, #28]	; (80016ac <MX_SPI1_Init+0x64>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <MX_SPI1_Init+0x64>)
 8001694:	220a      	movs	r2, #10
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001698:	4804      	ldr	r0, [pc, #16]	; (80016ac <MX_SPI1_Init+0x64>)
 800169a:	f005 fca1 	bl	8006fe0 <HAL_SPI_Init>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_SPI1_Init+0x60>
		Error_Handler();
 80016a4:	f000 f9c2 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	200002c4 	.word	0x200002c4
 80016b0:	40013000 	.word	0x40013000

080016b4 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80016d0:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016d2:	4a22      	ldr	r2, [pc, #136]	; (800175c <MX_TIM1_Init+0xa8>)
 80016d4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016e8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ea:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_IC_Init(&htim1) != HAL_OK) {
 80016fc:	4816      	ldr	r0, [pc, #88]	; (8001758 <MX_TIM1_Init+0xa4>)
 80016fe:	f006 f999 	bl	8007a34 <HAL_TIM_IC_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_TIM1_Init+0x58>
		Error_Handler();
 8001708:	f000 f990 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	4619      	mov	r1, r3
 800171a:	480f      	ldr	r0, [pc, #60]	; (8001758 <MX_TIM1_Init+0xa4>)
 800171c:	f006 fffe 	bl	800871c <HAL_TIMEx_MasterConfigSynchronization>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 8001726:	f000 f981 	bl	8001a2c <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800172a:	2300      	movs	r3, #0
 800172c:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800172e:	2301      	movs	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_TIM1_Init+0xa4>)
 8001742:	f006 fa2b 	bl	8007b9c <HAL_TIM_IC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_TIM1_Init+0x9c>
		Error_Handler();
 800174c:	f000 f96e 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000031c 	.word	0x2000031c
 800175c:	40012c00 	.word	0x40012c00

08001760 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b08e      	sub	sp, #56	; 0x38
 8001764:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001774:	f107 0320 	add.w	r3, r7, #32
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	605a      	str	r2, [r3, #4]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	611a      	str	r2, [r3, #16]
 800178c:	615a      	str	r2, [r3, #20]
 800178e:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001790:	4b37      	ldr	r3, [pc, #220]	; (8001870 <MX_TIM2_Init+0x110>)
 8001792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001796:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001798:	4b35      	ldr	r3, [pc, #212]	; (8001870 <MX_TIM2_Init+0x110>)
 800179a:	2200      	movs	r2, #0
 800179c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <MX_TIM2_Init+0x110>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <MX_TIM2_Init+0x110>)
 80017a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017aa:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ac:	4b30      	ldr	r3, [pc, #192]	; (8001870 <MX_TIM2_Init+0x110>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <MX_TIM2_Init+0x110>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80017b8:	482d      	ldr	r0, [pc, #180]	; (8001870 <MX_TIM2_Init+0x110>)
 80017ba:	f006 f83c 	bl	8007836 <HAL_TIM_Base_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM2_Init+0x68>
		Error_Handler();
 80017c4:	f000 f932 	bl	8001a2c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80017ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017d2:	4619      	mov	r1, r3
 80017d4:	4826      	ldr	r0, [pc, #152]	; (8001870 <MX_TIM2_Init+0x110>)
 80017d6:	f006 fb3f 	bl	8007e58 <HAL_TIM_ConfigClockSource>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x84>
		Error_Handler();
 80017e0:	f000 f924 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80017e4:	4822      	ldr	r0, [pc, #136]	; (8001870 <MX_TIM2_Init+0x110>)
 80017e6:	f006 f875 	bl	80078d4 <HAL_TIM_OC_Init>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x94>
		Error_Handler();
 80017f0:	f000 f91c 	bl	8001a2c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80017f4:	481e      	ldr	r0, [pc, #120]	; (8001870 <MX_TIM2_Init+0x110>)
 80017f6:	f006 f8c5 	bl	8007984 <HAL_TIM_PWM_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM2_Init+0xa4>
		Error_Handler();
 8001800:	f000 f914 	bl	8001a2c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001804:	2300      	movs	r3, #0
 8001806:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4619      	mov	r1, r3
 8001812:	4817      	ldr	r0, [pc, #92]	; (8001870 <MX_TIM2_Init+0x110>)
 8001814:	f006 ff82 	bl	800871c <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_TIM2_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 800181e:	f000 f905 	bl	8001a2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2208      	movs	r2, #8
 8001836:	4619      	mov	r1, r3
 8001838:	480d      	ldr	r0, [pc, #52]	; (8001870 <MX_TIM2_Init+0x110>)
 800183a:	f006 f953 	bl	8007ae4 <HAL_TIM_OC_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8001844:	f000 f8f2 	bl	8001a2c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001848:	2360      	movs	r3, #96	; 0x60
 800184a:	607b      	str	r3, [r7, #4]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	220c      	movs	r2, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_TIM2_Init+0x110>)
 8001854:	f006 fa3e 	bl	8007cd4 <HAL_TIM_PWM_ConfigChannel>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0x102>
			!= HAL_OK) {
		Error_Handler();
 800185e:	f000 f8e5 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001862:	4803      	ldr	r0, [pc, #12]	; (8001870 <MX_TIM2_Init+0x110>)
 8001864:	f000 fa9a 	bl	8001d9c <HAL_TIM_MspPostInit>

}
 8001868:	bf00      	nop
 800186a:	3738      	adds	r7, #56	; 0x38
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000364 	.word	0x20000364

08001874 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <MX_USART1_UART_Init+0x50>)
 800187c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_USART1_UART_Init+0x4c>)
 80018ac:	f006 ff94 	bl	80087d8 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART1_UART_Init+0x46>
		Error_Handler();
 80018b6:	f000 f8b9 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200003ac 	.word	0x200003ac
 80018c4:	40013800 	.word	0x40013800

080018c8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80018cc:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ce:	4a12      	ldr	r2, [pc, #72]	; (8001918 <MX_USART2_UART_Init+0x50>)
 80018d0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80018e0:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80018ec:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018ee:	220c      	movs	r2, #12
 80018f0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018f2:	4b08      	ldr	r3, [pc, #32]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80018fe:	4805      	ldr	r0, [pc, #20]	; (8001914 <MX_USART2_UART_Init+0x4c>)
 8001900:	f006 ff6a 	bl	80087d8 <HAL_UART_Init>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d001      	beq.n	800190e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 800190a:	f000 f88f 	bl	8001a2c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200003f4 	.word	0x200003f4
 8001918:	40004400 	.word	0x40004400

0800191c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001922:	f107 0310 	add.w	r3, r7, #16
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
 800192c:	609a      	str	r2, [r3, #8]
 800192e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	4a39      	ldr	r2, [pc, #228]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001936:	f043 0310 	orr.w	r3, r3, #16
 800193a:	6193      	str	r3, [r2, #24]
 800193c:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_GPIO_Init+0x100>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	60fb      	str	r3, [r7, #12]
 8001946:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001948:	4b34      	ldr	r3, [pc, #208]	; (8001a1c <MX_GPIO_Init+0x100>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	4a33      	ldr	r2, [pc, #204]	; (8001a1c <MX_GPIO_Init+0x100>)
 800194e:	f043 0320 	orr.w	r3, r3, #32
 8001952:	6193      	str	r3, [r2, #24]
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001956:	699b      	ldr	r3, [r3, #24]
 8001958:	f003 0320 	and.w	r3, r3, #32
 800195c:	60bb      	str	r3, [r7, #8]
 800195e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a2d      	ldr	r2, [pc, #180]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001966:	f043 0304 	orr.w	r3, r3, #4
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_GPIO_Init+0x100>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	607b      	str	r3, [r7, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001978:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_GPIO_Init+0x100>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a27      	ldr	r2, [pc, #156]	; (8001a1c <MX_GPIO_Init+0x100>)
 800197e:	f043 0308 	orr.w	r3, r3, #8
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <MX_GPIO_Init+0x100>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SIGNAL_LAMP_Pin_GPIO_Port, SIGNAL_LAMP_Pin_Pin,
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001996:	4822      	ldr	r0, [pc, #136]	; (8001a20 <MX_GPIO_Init+0x104>)
 8001998:	f001 fdda 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, TM_CLK_Pin | TM_DIO_Pin | GPIO_PIN_2,
 800199c:	2200      	movs	r2, #0
 800199e:	2107      	movs	r1, #7
 80019a0:	4820      	ldr	r0, [pc, #128]	; (8001a24 <MX_GPIO_Init+0x108>)
 80019a2:	f001 fdd5 	bl	8003550 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : LAMP_SIGNAL_Pin_Pin */
	GPIO_InitStruct.Pin = SIGNAL_LAMP_Pin_Pin;
 80019a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019aa:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b4:	2302      	movs	r3, #2
 80019b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SIGNAL_LAMP_Pin_GPIO_Port, &GPIO_InitStruct);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	4818      	ldr	r0, [pc, #96]	; (8001a20 <MX_GPIO_Init+0x104>)
 80019c0:	f001 fc42 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : TM_CLK_Pin TM_DIO_Pin PB2 */
	GPIO_InitStruct.Pin = TM_CLK_Pin | TM_DIO_Pin | GPIO_PIN_2;
 80019c4:	2307      	movs	r3, #7
 80019c6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d4:	f107 0310 	add.w	r3, r7, #16
 80019d8:	4619      	mov	r1, r3
 80019da:	4812      	ldr	r0, [pc, #72]	; (8001a24 <MX_GPIO_Init+0x108>)
 80019dc:	f001 fc34 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 PB13 PB14 PB15
	 PB3 Bt_UP_Pin Bt_DOWN_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15
 80019e0:	f24f 0338 	movw	r3, #61496	; 0xf038
 80019e4:	613b      	str	r3, [r7, #16]
			| GPIO_PIN_3 | Bt_UP_Pin | Bt_DOWN_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ea:	2301      	movs	r3, #1
 80019ec:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	4619      	mov	r1, r3
 80019f4:	480b      	ldr	r0, [pc, #44]	; (8001a24 <MX_GPIO_Init+0x108>)
 80019f6:	f001 fc27 	bl	8003248 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0310 	add.w	r3, r7, #16
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_GPIO_Init+0x10c>)
 8001a10:	f001 fc1a 	bl	8003248 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001a14:	bf00      	nop
 8001a16:	3720      	adds	r7, #32
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40011000 	.word	0x40011000
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40010800 	.word	0x40010800

08001a2c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a30:	b672      	cpsid	i
}
 8001a32:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001a34:	e7fe      	b.n	8001a34 <Error_Handler+0x8>
	...

08001a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6193      	str	r3, [r2, #24]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a56:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a58:	69db      	ldr	r3, [r3, #28]
 8001a5a:	4a0e      	ldr	r2, [pc, #56]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a60:	61d3      	str	r3, [r2, #28]
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_MspInit+0x5c>)
 8001a64:	69db      	ldr	r3, [r3, #28]
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	607b      	str	r3, [r7, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_MspInit+0x60>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	4a04      	ldr	r2, [pc, #16]	; (8001a98 <HAL_MspInit+0x60>)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000
 8001a98:	40010000 	.word	0x40010000

08001a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
 8001aae:	609a      	str	r2, [r3, #8]
 8001ab0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <HAL_ADC_MspInit+0x6c>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d121      	bne.n	8001b00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001ac2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac6:	6193      	str	r3, [r2, #24]
 8001ac8:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b0d      	ldr	r3, [pc, #52]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	4a0c      	ldr	r2, [pc, #48]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6193      	str	r3, [r2, #24]
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	; (8001b0c <HAL_ADC_MspInit+0x70>)
 8001ae2:	699b      	ldr	r3, [r3, #24]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001aec:	2303      	movs	r3, #3
 8001aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001af0:	2303      	movs	r3, #3
 8001af2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4619      	mov	r1, r3
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <HAL_ADC_MspInit+0x74>)
 8001afc:	f001 fba4 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b00:	bf00      	nop
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40012400 	.word	0x40012400
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40010800 	.word	0x40010800

08001b14 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a29      	ldr	r2, [pc, #164]	; (8001bd4 <HAL_CAN_MspInit+0xc0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d14b      	bne.n	8001bcc <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	61d3      	str	r3, [r2, #28]
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b42:	69db      	ldr	r3, [r3, #28]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a21      	ldr	r2, [pc, #132]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b52:	f043 0308 	orr.w	r3, r3, #8
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_CAN_MspInit+0xc4>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0308 	and.w	r3, r3, #8
 8001b60:	60fb      	str	r3, [r7, #12]
 8001b62:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b72:	f107 0314 	add.w	r3, r7, #20
 8001b76:	4619      	mov	r1, r3
 8001b78:	4818      	ldr	r0, [pc, #96]	; (8001bdc <HAL_CAN_MspInit+0xc8>)
 8001b7a:	f001 fb65 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	4619      	mov	r1, r3
 8001b92:	4812      	ldr	r0, [pc, #72]	; (8001bdc <HAL_CAN_MspInit+0xc8>)
 8001b94:	f001 fb58 	bl	8003248 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <HAL_CAN_MspInit+0xcc>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <HAL_CAN_MspInit+0xcc>)
 8001bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bba:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	2014      	movs	r0, #20
 8001bc2:	f001 fb0a 	bl	80031da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001bc6:	2014      	movs	r0, #20
 8001bc8:	f001 fb23 	bl	8003212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	; 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40006400 	.word	0x40006400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a15      	ldr	r2, [pc, #84]	; (8001c54 <HAL_I2C_MspInit+0x70>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d123      	bne.n	8001c4c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c04:	4b14      	ldr	r3, [pc, #80]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a13      	ldr	r2, [pc, #76]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0308 	and.w	r3, r3, #8
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c1c:	23c0      	movs	r3, #192	; 0xc0
 8001c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c20:	2312      	movs	r3, #18
 8001c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c28:	f107 0310 	add.w	r3, r7, #16
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	480b      	ldr	r0, [pc, #44]	; (8001c5c <HAL_I2C_MspInit+0x78>)
 8001c30:	f001 fb0a 	bl	8003248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c3e:	61d3      	str	r3, [r2, #28]
 8001c40:	4b05      	ldr	r3, [pc, #20]	; (8001c58 <HAL_I2C_MspInit+0x74>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c4c:	bf00      	nop
 8001c4e:	3720      	adds	r7, #32
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40005400 	.word	0x40005400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	40010c00 	.word	0x40010c00

08001c60 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	; (8001c9c <HAL_RTC_MspInit+0x3c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d110      	bne.n	8001c94 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001c72:	f004 f8a9 	bl	8005dc8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_RTC_MspInit+0x40>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <HAL_RTC_MspInit+0x40>)
 8001c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c80:	61d3      	str	r3, [r2, #28]
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RTC_MspInit+0x40>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_RTC_MspInit+0x44>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40002800 	.word	0x40002800
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	4242043c 	.word	0x4242043c

08001ca8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0310 	add.w	r3, r7, #16
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a1b      	ldr	r2, [pc, #108]	; (8001d30 <HAL_SPI_MspInit+0x88>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d12f      	bne.n	8001d28 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cc8:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001cce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce0:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6193      	str	r3, [r2, #24]
 8001cec:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x8c>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8001cf8:	23b0      	movs	r3, #176	; 0xb0
 8001cfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480b      	ldr	r0, [pc, #44]	; (8001d38 <HAL_SPI_MspInit+0x90>)
 8001d0c:	f001 fa9c 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d10:	2340      	movs	r3, #64	; 0x40
 8001d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0310 	add.w	r3, r7, #16
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x90>)
 8001d24:	f001 fa90 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40013000 	.word	0x40013000
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40010800 	.word	0x40010800

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_TIM_Base_MspInit+0x58>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d10c      	bne.n	8001d68 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	4a11      	ldr	r2, [pc, #68]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d58:	6193      	str	r3, [r2, #24]
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d66:	e010      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d70:	d10b      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d72:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	4a08      	ldr	r2, [pc, #32]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	61d3      	str	r3, [r2, #28]
 8001d7e:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <HAL_TIM_Base_MspInit+0x5c>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	68bb      	ldr	r3, [r7, #8]
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr
 8001d94:	40012c00 	.word	0x40012c00
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	; 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a28      	ldr	r2, [pc, #160]	; (8001e58 <HAL_TIM_MspPostInit+0xbc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d119      	bne.n	8001df0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	4b27      	ldr	r3, [pc, #156]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	4a26      	ldr	r2, [pc, #152]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	6193      	str	r3, [r2, #24]
 8001dc8:	4b24      	ldr	r3, [pc, #144]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001dca:	699b      	ldr	r3, [r3, #24]
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2302      	movs	r3, #2
 8001de0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de2:	f107 0314 	add.w	r3, r7, #20
 8001de6:	4619      	mov	r1, r3
 8001de8:	481d      	ldr	r0, [pc, #116]	; (8001e60 <HAL_TIM_MspPostInit+0xc4>)
 8001dea:	f001 fa2d 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dee:	e02f      	b.n	8001e50 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df8:	d12a      	bne.n	8001e50 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dfa:	4b18      	ldr	r3, [pc, #96]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	4a17      	ldr	r2, [pc, #92]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6193      	str	r3, [r2, #24]
 8001e06:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <HAL_TIM_MspPostInit+0xc0>)
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	480f      	ldr	r0, [pc, #60]	; (8001e64 <HAL_TIM_MspPostInit+0xc8>)
 8001e28:	f001 fa0e 	bl	8003248 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001e2c:	4b0e      	ldr	r3, [pc, #56]	; (8001e68 <HAL_TIM_MspPostInit+0xcc>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
 8001e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e48:	627b      	str	r3, [r7, #36]	; 0x24
 8001e4a:	4a07      	ldr	r2, [pc, #28]	; (8001e68 <HAL_TIM_MspPostInit+0xcc>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	6053      	str	r3, [r2, #4]
}
 8001e50:	bf00      	nop
 8001e52:	3728      	adds	r7, #40	; 0x28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40012c00 	.word	0x40012c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40010000 	.word	0x40010000

08001e6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a37      	ldr	r2, [pc, #220]	; (8001f64 <HAL_UART_MspInit+0xf8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d132      	bne.n	8001ef2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e8c:	4b36      	ldr	r3, [pc, #216]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a35      	ldr	r2, [pc, #212]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e96:	6193      	str	r3, [r2, #24]
 8001e98:	4b33      	ldr	r3, [pc, #204]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea4:	4b30      	ldr	r3, [pc, #192]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001ea6:	699b      	ldr	r3, [r3, #24]
 8001ea8:	4a2f      	ldr	r2, [pc, #188]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001eaa:	f043 0304 	orr.w	r3, r3, #4
 8001eae:	6193      	str	r3, [r2, #24]
 8001eb0:	4b2d      	ldr	r3, [pc, #180]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eca:	f107 0318 	add.w	r3, r7, #24
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4826      	ldr	r0, [pc, #152]	; (8001f6c <HAL_UART_MspInit+0x100>)
 8001ed2:	f001 f9b9 	bl	8003248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4820      	ldr	r0, [pc, #128]	; (8001f6c <HAL_UART_MspInit+0x100>)
 8001eec:	f001 f9ac 	bl	8003248 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ef0:	e034      	b.n	8001f5c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1e      	ldr	r2, [pc, #120]	; (8001f70 <HAL_UART_MspInit+0x104>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d12f      	bne.n	8001f5c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f06:	61d3      	str	r3, [r2, #28]
 8001f08:	4b17      	ldr	r3, [pc, #92]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f14:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	4a13      	ldr	r2, [pc, #76]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6193      	str	r3, [r2, #24]
 8001f20:	4b11      	ldr	r3, [pc, #68]	; (8001f68 <HAL_UART_MspInit+0xfc>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f34:	2303      	movs	r3, #3
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f38:	f107 0318 	add.w	r3, r7, #24
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480b      	ldr	r0, [pc, #44]	; (8001f6c <HAL_UART_MspInit+0x100>)
 8001f40:	f001 f982 	bl	8003248 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f44:	2308      	movs	r3, #8
 8001f46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f50:	f107 0318 	add.w	r3, r7, #24
 8001f54:	4619      	mov	r1, r3
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <HAL_UART_MspInit+0x100>)
 8001f58:	f001 f976 	bl	8003248 <HAL_GPIO_Init>
}
 8001f5c:	bf00      	nop
 8001f5e:	3728      	adds	r7, #40	; 0x28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40013800 	.word	0x40013800
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40010800 	.word	0x40010800
 8001f70:	40004400 	.word	0x40004400

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	e7fe      	b.n	8001f78 <NMI_Handler+0x4>

08001f7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f7e:	e7fe      	b.n	8001f7e <HardFault_Handler+0x4>

08001f80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f84:	e7fe      	b.n	8001f84 <MemManage_Handler+0x4>

08001f86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f86:	b480      	push	{r7}
 8001f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8a:	e7fe      	b.n	8001f8a <BusFault_Handler+0x4>

08001f8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <UsageFault_Handler+0x4>

08001f92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr

08001f9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bc80      	pop	{r7}
 8001fa8:	4770      	bx	lr

08001faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001faa:	b480      	push	{r7}
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fba:	f000 fae3 	bl	8002584 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001fc8:	4803      	ldr	r0, [pc, #12]	; (8001fd8 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 8001fca:	f000 fe03 	bl	8002bd4 <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001fce:	4803      	ldr	r0, [pc, #12]	; (8001fdc <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 8001fd0:	f002 fb55 	bl	800467e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20000234 	.word	0x20000234
 8001fdc:	200004ac 	.word	0x200004ac

08001fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return 1;
 8001fe4:	2301      	movs	r3, #1
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bc80      	pop	{r7}
 8001fec:	4770      	bx	lr

08001fee <_kill>:

int _kill(int pid, int sig)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b082      	sub	sp, #8
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ff8:	f00b fc28 	bl	800d84c <__errno>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2216      	movs	r2, #22
 8002000:	601a      	str	r2, [r3, #0]
  return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_exit>:

void _exit (int status)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002016:	f04f 31ff 	mov.w	r1, #4294967295
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffe7 	bl	8001fee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002020:	e7fe      	b.n	8002020 <_exit+0x12>

08002022 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e00a      	b.n	800204a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002034:	f3af 8000 	nop.w
 8002038:	4601      	mov	r1, r0
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1c5a      	adds	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	3301      	adds	r3, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	697a      	ldr	r2, [r7, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	dbf0      	blt.n	8002034 <_read+0x12>
  }

  return len;
 8002052:	687b      	ldr	r3, [r7, #4]
}
 8002054:	4618      	mov	r0, r3
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}

0800205c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002068:	2300      	movs	r3, #0
 800206a:	617b      	str	r3, [r7, #20]
 800206c:	e009      	b.n	8002082 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	60ba      	str	r2, [r7, #8]
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	429a      	cmp	r2, r3
 8002088:	dbf1      	blt.n	800206e <_write+0x12>
  }
  return len;
 800208a:	687b      	ldr	r3, [r7, #4]
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_close>:

int _close(int file)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800209c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bc80      	pop	{r7}
 80020a8:	4770      	bx	lr

080020aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
 80020b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020ba:	605a      	str	r2, [r3, #4]
  return 0;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <_isatty>:

int _isatty(int file)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020d0:	2301      	movs	r3, #1
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3714      	adds	r7, #20
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr

080020f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020fc:	4a14      	ldr	r2, [pc, #80]	; (8002150 <_sbrk+0x5c>)
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <_sbrk+0x60>)
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002108:	4b13      	ldr	r3, [pc, #76]	; (8002158 <_sbrk+0x64>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002110:	4b11      	ldr	r3, [pc, #68]	; (8002158 <_sbrk+0x64>)
 8002112:	4a12      	ldr	r2, [pc, #72]	; (800215c <_sbrk+0x68>)
 8002114:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002116:	4b10      	ldr	r3, [pc, #64]	; (8002158 <_sbrk+0x64>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4413      	add	r3, r2
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	429a      	cmp	r2, r3
 8002122:	d207      	bcs.n	8002134 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002124:	f00b fb92 	bl	800d84c <__errno>
 8002128:	4603      	mov	r3, r0
 800212a:	220c      	movs	r2, #12
 800212c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
 8002132:	e009      	b.n	8002148 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002134:	4b08      	ldr	r3, [pc, #32]	; (8002158 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800213a:	4b07      	ldr	r3, [pc, #28]	; (8002158 <_sbrk+0x64>)
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <_sbrk+0x64>)
 8002144:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002146:	68fb      	ldr	r3, [r7, #12]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20005000 	.word	0x20005000
 8002154:	00000400 	.word	0x00000400
 8002158:	20000488 	.word	0x20000488
 800215c:	200008d0 	.word	0x200008d0

08002160 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	bc80      	pop	{r7}
 800216a:	4770      	bx	lr

0800216c <TM1637_ClkHigh>:
uint8_t getSegmentmap(uint8_t number)
{
    return segmentMap[number];
}
void TM1637_ClkHigh(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM_CLK_GPIO_Port, TM_CLK_Pin, GPIO_PIN_SET);
 8002170:	2201      	movs	r2, #1
 8002172:	2101      	movs	r1, #1
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TM1637_ClkHigh+0x14>)
 8002176:	f001 f9eb 	bl	8003550 <HAL_GPIO_WritePin>
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40010c00 	.word	0x40010c00

08002184 <TM1637_ClkLow>:

void TM1637_ClkLow(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM_CLK_GPIO_Port, TM_CLK_Pin, GPIO_PIN_RESET);
 8002188:	2200      	movs	r2, #0
 800218a:	2101      	movs	r1, #1
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <TM1637_ClkLow+0x14>)
 800218e:	f001 f9df 	bl	8003550 <HAL_GPIO_WritePin>
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40010c00 	.word	0x40010c00

0800219c <TM1637_DataHigh>:

void TM1637_DataHigh(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM_DIO_GPIO_Port, TM_DIO_Pin, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	2102      	movs	r1, #2
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <TM1637_DataHigh+0x14>)
 80021a6:	f001 f9d3 	bl	8003550 <HAL_GPIO_WritePin>
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40010c00 	.word	0x40010c00

080021b4 <TM1637_DataLow>:

void TM1637_DataLow(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(TM_DIO_GPIO_Port, TM_DIO_Pin, GPIO_PIN_RESET);
 80021b8:	2200      	movs	r2, #0
 80021ba:	2102      	movs	r1, #2
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <TM1637_DataLow+0x14>)
 80021be:	f001 f9c7 	bl	8003550 <HAL_GPIO_WritePin>
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010c00 	.word	0x40010c00

080021cc <TM1637_Init>:
        TM1637_DisplayDecimal(i++, 0);
    }
}

void TM1637_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0310 	add.w	r3, r7, #16
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e0:	4b28      	ldr	r3, [pc, #160]	; (8002284 <TM1637_Init+0xb8>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a27      	ldr	r2, [pc, #156]	; (8002284 <TM1637_Init+0xb8>)
 80021e6:	f043 0308 	orr.w	r3, r3, #8
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b25      	ldr	r3, [pc, #148]	; (8002284 <TM1637_Init+0xb8>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021f8:	4b22      	ldr	r3, [pc, #136]	; (8002284 <TM1637_Init+0xb8>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	4a21      	ldr	r2, [pc, #132]	; (8002284 <TM1637_Init+0xb8>)
 80021fe:	f043 0310 	orr.w	r3, r3, #16
 8002202:	6193      	str	r3, [r2, #24]
 8002204:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <TM1637_Init+0xb8>)
 8002206:	699b      	ldr	r3, [r3, #24]
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002210:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <TM1637_Init+0xb8>)
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <TM1637_Init+0xb8>)
 8002216:	f043 0304 	orr.w	r3, r3, #4
 800221a:	6193      	str	r3, [r2, #24]
 800221c:	4b19      	ldr	r3, [pc, #100]	; (8002284 <TM1637_Init+0xb8>)
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	f003 0304 	and.w	r3, r3, #4
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(TM_DIO_GPIO_Port, TM_DIO_Pin, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	2102      	movs	r1, #2
 800222c:	4816      	ldr	r0, [pc, #88]	; (8002288 <TM1637_Init+0xbc>)
 800222e:	f001 f98f 	bl	8003550 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(TM_CLK_GPIO_Port, TM_CLK_Pin, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	2101      	movs	r1, #1
 8002236:	4814      	ldr	r0, [pc, #80]	; (8002288 <TM1637_Init+0xbc>)
 8002238:	f001 f98a 	bl	8003550 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : DATA_Pin */
    GPIO_InitStruct.Pin = TM_DIO_Pin;
 800223c:	2302      	movs	r3, #2
 800223e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002240:	2301      	movs	r3, #1
 8002242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TM_DIO_GPIO_Port, &GPIO_InitStruct);
 800224c:	f107 0310 	add.w	r3, r7, #16
 8002250:	4619      	mov	r1, r3
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <TM1637_Init+0xbc>)
 8002254:	f000 fff8 	bl	8003248 <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_Pin */
    GPIO_InitStruct.Pin = TM_CLK_Pin;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225c:	2301      	movs	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TM_CLK_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 0310 	add.w	r3, r7, #16
 800226c:	4619      	mov	r1, r3
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <TM1637_Init+0xbc>)
 8002270:	f000 ffea 	bl	8003248 <HAL_GPIO_Init>

    TM1637_SetBrightness(8);
 8002274:	2008      	movs	r0, #8
 8002276:	f000 f88b 	bl	8002390 <TM1637_SetBrightness>
}
 800227a:	bf00      	nop
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
 8002288:	40010c00 	.word	0x40010c00

0800228c <TM1637_ClearDisplay>:
    TM1637_WriteByte(data);
    TM1637_ReadResult();
    TM1637_Stop();
}
void TM1637_ClearDisplay()
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
    TM1637_Start();
 8002292:	f000 f892 	bl	80023ba <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002296:	2040      	movs	r0, #64	; 0x40
 8002298:	f000 f8c1 	bl	800241e <TM1637_WriteByte>
    TM1637_ReadResult();
 800229c:	f000 f8af 	bl	80023fe <TM1637_ReadResult>
    TM1637_Stop();
 80022a0:	f000 f898 	bl	80023d4 <TM1637_Stop>
    TM1637_Start();
 80022a4:	f000 f889 	bl	80023ba <TM1637_Start>
    TM1637_WriteByte(0xc0);
 80022a8:	20c0      	movs	r0, #192	; 0xc0
 80022aa:	f000 f8b8 	bl	800241e <TM1637_WriteByte>
    TM1637_ReadResult();
 80022ae:	f000 f8a6 	bl	80023fe <TM1637_ReadResult>
    for (int i = 0; i < 5; ++i)
 80022b2:	2300      	movs	r3, #0
 80022b4:	607b      	str	r3, [r7, #4]
 80022b6:	e007      	b.n	80022c8 <TM1637_ClearDisplay+0x3c>
    {
        TM1637_WriteByte(0);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f000 f8b0 	bl	800241e <TM1637_WriteByte>
        TM1637_ReadResult();
 80022be:	f000 f89e 	bl	80023fe <TM1637_ReadResult>
    for (int i = 0; i < 5; ++i)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3301      	adds	r3, #1
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	ddf4      	ble.n	80022b8 <TM1637_ClearDisplay+0x2c>
    }
    TM1637_Stop();
 80022ce:	f000 f881 	bl	80023d4 <TM1637_Stop>
}
 80022d2:	bf00      	nop
 80022d4:	3708      	adds	r7, #8
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TM1637_displayDecimal_only>:
        TM1637_ReadResult();
    }
    TM1637_Stop();
}
void TM1637_displayDecimal_only(int v)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    unsigned char digitArr[5];
    for (int i = 1; i < 5; ++i)
 80022e4:	2301      	movs	r3, #1
 80022e6:	617b      	str	r3, [r7, #20]
 80022e8:	e01e      	b.n	8002328 <TM1637_displayDecimal_only+0x4c>
    {
        digitArr[i] = segmentMap[v % 10];
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	4b26      	ldr	r3, [pc, #152]	; (8002388 <TM1637_displayDecimal_only+0xac>)
 80022ee:	fb83 2301 	smull	r2, r3, r3, r1
 80022f2:	109a      	asrs	r2, r3, #2
 80022f4:	17cb      	asrs	r3, r1, #31
 80022f6:	1ad2      	subs	r2, r2, r3
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	1aca      	subs	r2, r1, r3
 8002302:	4b22      	ldr	r3, [pc, #136]	; (800238c <TM1637_displayDecimal_only+0xb0>)
 8002304:	5c99      	ldrb	r1, [r3, r2]
 8002306:	f107 0208 	add.w	r2, r7, #8
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4413      	add	r3, r2
 800230e:	460a      	mov	r2, r1
 8002310:	701a      	strb	r2, [r3, #0]

        v /= 10;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a1c      	ldr	r2, [pc, #112]	; (8002388 <TM1637_displayDecimal_only+0xac>)
 8002316:	fb82 1203 	smull	r1, r2, r2, r3
 800231a:	1092      	asrs	r2, r2, #2
 800231c:	17db      	asrs	r3, r3, #31
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	607b      	str	r3, [r7, #4]
    for (int i = 1; i < 5; ++i)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b04      	cmp	r3, #4
 800232c:	dddd      	ble.n	80022ea <TM1637_displayDecimal_only+0xe>
    }
    TM1637_Start();
 800232e:	f000 f844 	bl	80023ba <TM1637_Start>
    TM1637_WriteByte(0x40);
 8002332:	2040      	movs	r0, #64	; 0x40
 8002334:	f000 f873 	bl	800241e <TM1637_WriteByte>
    TM1637_ReadResult();
 8002338:	f000 f861 	bl	80023fe <TM1637_ReadResult>
    TM1637_Stop();
 800233c:	f000 f84a 	bl	80023d4 <TM1637_Stop>
    TM1637_Start();
 8002340:	f000 f83b 	bl	80023ba <TM1637_Start>
    TM1637_WriteByte(0xc0);
 8002344:	20c0      	movs	r0, #192	; 0xc0
 8002346:	f000 f86a 	bl	800241e <TM1637_WriteByte>
    TM1637_ReadResult();
 800234a:	f000 f858 	bl	80023fe <TM1637_ReadResult>
    digitArr[0] = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	723b      	strb	r3, [r7, #8]
    for (int i = 0; i < 5; ++i)
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e00e      	b.n	8002376 <TM1637_displayDecimal_only+0x9a>
    {
        TM1637_WriteByte(digitArr[4 - i]);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f1c3 0304 	rsb	r3, r3, #4
 800235e:	3318      	adds	r3, #24
 8002360:	443b      	add	r3, r7
 8002362:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f859 	bl	800241e <TM1637_WriteByte>
        TM1637_ReadResult();
 800236c:	f000 f847 	bl	80023fe <TM1637_ReadResult>
    for (int i = 0; i < 5; ++i)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	3301      	adds	r3, #1
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	2b04      	cmp	r3, #4
 800237a:	dded      	ble.n	8002358 <TM1637_displayDecimal_only+0x7c>
    }
    TM1637_Stop();
 800237c:	f000 f82a 	bl	80023d4 <TM1637_Stop>
}
 8002380:	bf00      	nop
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	66666667 	.word	0x66666667
 800238c:	0800fa38 	.word	0x0800fa38

08002390 <TM1637_SetBrightness>:
    TM1637_Stop();
}
// Valid brightness values: 0 - 8.
// 0 = display off.
void TM1637_SetBrightness(char brightness)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    TM1637_Start();
 800239a:	f000 f80e 	bl	80023ba <TM1637_Start>
    TM1637_WriteByte(0x87 + brightness);
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	3b79      	subs	r3, #121	; 0x79
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 f83a 	bl	800241e <TM1637_WriteByte>
    TM1637_ReadResult();
 80023aa:	f000 f828 	bl	80023fe <TM1637_ReadResult>
    TM1637_Stop();
 80023ae:	f000 f811 	bl	80023d4 <TM1637_Stop>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <TM1637_Start>:

void TM1637_Start(void)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	af00      	add	r7, sp, #0
    TM1637_ClkHigh();
 80023be:	f7ff fed5 	bl	800216c <TM1637_ClkHigh>
    TM1637_DataHigh();
 80023c2:	f7ff feeb 	bl	800219c <TM1637_DataHigh>
    TM1637_DelayUsec(2);
 80023c6:	2002      	movs	r0, #2
 80023c8:	f000 f853 	bl	8002472 <TM1637_DelayUsec>
    TM1637_DataLow();
 80023cc:	f7ff fef2 	bl	80021b4 <TM1637_DataLow>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}

080023d4 <TM1637_Stop>:

void TM1637_Stop(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 80023d8:	f7ff fed4 	bl	8002184 <TM1637_ClkLow>
    TM1637_DelayUsec(2);
 80023dc:	2002      	movs	r0, #2
 80023de:	f000 f848 	bl	8002472 <TM1637_DelayUsec>
    TM1637_DataLow();
 80023e2:	f7ff fee7 	bl	80021b4 <TM1637_DataLow>
    TM1637_DelayUsec(2);
 80023e6:	2002      	movs	r0, #2
 80023e8:	f000 f843 	bl	8002472 <TM1637_DelayUsec>
    TM1637_ClkHigh();
 80023ec:	f7ff febe 	bl	800216c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 80023f0:	2002      	movs	r0, #2
 80023f2:	f000 f83e 	bl	8002472 <TM1637_DelayUsec>
    TM1637_DataHigh();
 80023f6:	f7ff fed1 	bl	800219c <TM1637_DataHigh>
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}

080023fe <TM1637_ReadResult>:

void TM1637_ReadResult(void)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	af00      	add	r7, sp, #0
    TM1637_ClkLow();
 8002402:	f7ff febf 	bl	8002184 <TM1637_ClkLow>
    TM1637_DelayUsec(5);
 8002406:	2005      	movs	r0, #5
 8002408:	f000 f833 	bl	8002472 <TM1637_DelayUsec>

    TM1637_ClkHigh();
 800240c:	f7ff feae 	bl	800216c <TM1637_ClkHigh>
    TM1637_DelayUsec(2);
 8002410:	2002      	movs	r0, #2
 8002412:	f000 f82e 	bl	8002472 <TM1637_DelayUsec>
    TM1637_ClkLow();
 8002416:	f7ff feb5 	bl	8002184 <TM1637_ClkLow>
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}

0800241e <TM1637_WriteByte>:

void TM1637_WriteByte(unsigned char b)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i)
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e019      	b.n	8002462 <TM1637_WriteByte+0x44>
    {
        TM1637_ClkLow();
 800242e:	f7ff fea9 	bl	8002184 <TM1637_ClkLow>
        if (b & 0x01)
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d002      	beq.n	8002442 <TM1637_WriteByte+0x24>
        {
            TM1637_DataHigh();
 800243c:	f7ff feae 	bl	800219c <TM1637_DataHigh>
 8002440:	e001      	b.n	8002446 <TM1637_WriteByte+0x28>
        }
        else
        {
            TM1637_DataLow();
 8002442:	f7ff feb7 	bl	80021b4 <TM1637_DataLow>
        }
        TM1637_DelayUsec(3);
 8002446:	2003      	movs	r0, #3
 8002448:	f000 f813 	bl	8002472 <TM1637_DelayUsec>
        b >>= 1;
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	085b      	lsrs	r3, r3, #1
 8002450:	71fb      	strb	r3, [r7, #7]
        TM1637_ClkHigh();
 8002452:	f7ff fe8b 	bl	800216c <TM1637_ClkHigh>
        TM1637_DelayUsec(3);
 8002456:	2003      	movs	r0, #3
 8002458:	f000 f80b 	bl	8002472 <TM1637_DelayUsec>
    for (int i = 0; i < 8; ++i)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	3301      	adds	r3, #1
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2b07      	cmp	r3, #7
 8002466:	dde2      	ble.n	800242e <TM1637_WriteByte+0x10>
    }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <TM1637_DelayUsec>:

void TM1637_DelayUsec(unsigned int i)
{
 8002472:	b480      	push	{r7}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
    for (; i > 0; i--)
 800247a:	e00d      	b.n	8002498 <TM1637_DelayUsec+0x26>
    {
        for (int j = 0; j < 500; ++j)
 800247c:	2300      	movs	r3, #0
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e003      	b.n	800248a <TM1637_DelayUsec+0x18>
        {
            __NOP();
 8002482:	bf00      	nop
        for (int j = 0; j < 500; ++j)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	3301      	adds	r3, #1
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002490:	dbf7      	blt.n	8002482 <TM1637_DelayUsec+0x10>
    for (; i > 0; i--)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3b01      	subs	r3, #1
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ee      	bne.n	800247c <TM1637_DelayUsec+0xa>
        }
    }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr
	...

080024ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024ac:	f7ff fe58 	bl	8002160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b0:	480b      	ldr	r0, [pc, #44]	; (80024e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80024b2:	490c      	ldr	r1, [pc, #48]	; (80024e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80024b4:	4a0c      	ldr	r2, [pc, #48]	; (80024e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80024b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024b8:	e002      	b.n	80024c0 <LoopCopyDataInit>

080024ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024be:	3304      	adds	r3, #4

080024c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024c4:	d3f9      	bcc.n	80024ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024c6:	4a09      	ldr	r2, [pc, #36]	; (80024ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80024c8:	4c09      	ldr	r4, [pc, #36]	; (80024f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024cc:	e001      	b.n	80024d2 <LoopFillZerobss>

080024ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d0:	3204      	adds	r2, #4

080024d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024d4:	d3fb      	bcc.n	80024ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024d6:	f00b f9bf 	bl	800d858 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024da:	f7fe fe15 	bl	8001108 <main>
  bx lr
 80024de:	4770      	bx	lr
  ldr r0, =_sdata
 80024e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024e4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80024e8:	0800fdec 	.word	0x0800fdec
  ldr r2, =_sbss
 80024ec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80024f0:	200008d0 	.word	0x200008d0

080024f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024f4:	e7fe      	b.n	80024f4 <ADC1_2_IRQHandler>
	...

080024f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_Init+0x28>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_Init+0x28>)
 8002502:	f043 0310 	orr.w	r3, r3, #16
 8002506:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002508:	2003      	movs	r0, #3
 800250a:	f000 fe5b 	bl	80031c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800250e:	200f      	movs	r0, #15
 8002510:	f000 f808 	bl	8002524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002514:	f7ff fa90 	bl	8001a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40022000 	.word	0x40022000

08002524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800252c:	4b12      	ldr	r3, [pc, #72]	; (8002578 <HAL_InitTick+0x54>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b12      	ldr	r3, [pc, #72]	; (800257c <HAL_InitTick+0x58>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	4619      	mov	r1, r3
 8002536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800253a:	fbb3 f3f1 	udiv	r3, r3, r1
 800253e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002542:	4618      	mov	r0, r3
 8002544:	f000 fe73 	bl	800322e <HAL_SYSTICK_Config>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e00e      	b.n	8002570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b0f      	cmp	r3, #15
 8002556:	d80a      	bhi.n	800256e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002558:	2200      	movs	r2, #0
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	f04f 30ff 	mov.w	r0, #4294967295
 8002560:	f000 fe3b 	bl	80031da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <HAL_InitTick+0x5c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
}
 8002570:	4618      	mov	r0, r3
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000000 	.word	0x20000000
 800257c:	20000008 	.word	0x20000008
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002588:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <HAL_IncTick+0x1c>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_IncTick+0x20>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4413      	add	r3, r2
 8002594:	4a03      	ldr	r2, [pc, #12]	; (80025a4 <HAL_IncTick+0x20>)
 8002596:	6013      	str	r3, [r2, #0]
}
 8002598:	bf00      	nop
 800259a:	46bd      	mov	sp, r7
 800259c:	bc80      	pop	{r7}
 800259e:	4770      	bx	lr
 80025a0:	20000008 	.word	0x20000008
 80025a4:	2000048c 	.word	0x2000048c

080025a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return uwTick;
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_GetTick+0x10>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	2000048c 	.word	0x2000048c

080025bc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0be      	b.n	800275c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d109      	bne.n	8002600 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f7ff fa4e 	bl	8001a9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f9ab 	bl	800295c <ADC_ConversionStop_Disable>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b00      	cmp	r3, #0
 8002614:	f040 8099 	bne.w	800274a <HAL_ADC_Init+0x18e>
 8002618:	7dfb      	ldrb	r3, [r7, #23]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f040 8095 	bne.w	800274a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002628:	f023 0302 	bic.w	r3, r3, #2
 800262c:	f043 0202 	orr.w	r2, r3, #2
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800263c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	7b1b      	ldrb	r3, [r3, #12]
 8002642:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002644:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	4313      	orrs	r3, r2
 800264a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002654:	d003      	beq.n	800265e <HAL_ADC_Init+0xa2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d102      	bne.n	8002664 <HAL_ADC_Init+0xa8>
 800265e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002662:	e000      	b.n	8002666 <HAL_ADC_Init+0xaa>
 8002664:	2300      	movs	r3, #0
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	7d1b      	ldrb	r3, [r3, #20]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d119      	bne.n	80026a8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7b1b      	ldrb	r3, [r3, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d109      	bne.n	8002690 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	3b01      	subs	r3, #1
 8002682:	035a      	lsls	r2, r3, #13
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	4313      	orrs	r3, r2
 8002688:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e00b      	b.n	80026a8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f043 0201 	orr.w	r2, r3, #1
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <HAL_ADC_Init+0x1a8>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	6812      	ldr	r2, [r2, #0]
 80026ca:	68b9      	ldr	r1, [r7, #8]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d003      	beq.n	80026e2 <HAL_ADC_Init+0x126>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d104      	bne.n	80026ec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	689a      	ldr	r2, [r3, #8]
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_ADC_Init+0x1ac>)
 8002708:	4013      	ands	r3, r2
 800270a:	68ba      	ldr	r2, [r7, #8]
 800270c:	429a      	cmp	r2, r3
 800270e:	d10b      	bne.n	8002728 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	f023 0303 	bic.w	r3, r3, #3
 800271e:	f043 0201 	orr.w	r2, r3, #1
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002726:	e018      	b.n	800275a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	f023 0312 	bic.w	r3, r3, #18
 8002730:	f043 0210 	orr.w	r2, r3, #16
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f043 0201 	orr.w	r2, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002748:	e007      	b.n	800275a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274e:	f043 0210 	orr.w	r2, r3, #16
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800275a:	7dfb      	ldrb	r3, [r7, #23]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3718      	adds	r7, #24
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	ffe1f7fd 	.word	0xffe1f7fd
 8002768:	ff1f0efe 	.word	0xff1f0efe

0800276c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002776:	2300      	movs	r3, #0
 8002778:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_ADC_ConfigChannel+0x20>
 8002788:	2302      	movs	r3, #2
 800278a:	e0dc      	b.n	8002946 <HAL_ADC_ConfigChannel+0x1da>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b06      	cmp	r3, #6
 800279a:	d81c      	bhi.n	80027d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	3b05      	subs	r3, #5
 80027ae:	221f      	movs	r2, #31
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	43db      	mvns	r3, r3
 80027b6:	4019      	ands	r1, r3
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	3b05      	subs	r3, #5
 80027c8:	fa00 f203 	lsl.w	r2, r0, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	635a      	str	r2, [r3, #52]	; 0x34
 80027d4:	e03c      	b.n	8002850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b0c      	cmp	r3, #12
 80027dc:	d81c      	bhi.n	8002818 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	3b23      	subs	r3, #35	; 0x23
 80027f0:	221f      	movs	r2, #31
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4019      	ands	r1, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6818      	ldr	r0, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b23      	subs	r3, #35	; 0x23
 800280a:	fa00 f203 	lsl.w	r2, r0, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	430a      	orrs	r2, r1
 8002814:	631a      	str	r2, [r3, #48]	; 0x30
 8002816:	e01b      	b.n	8002850 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	4613      	mov	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4413      	add	r3, r2
 8002828:	3b41      	subs	r3, #65	; 0x41
 800282a:	221f      	movs	r2, #31
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	43db      	mvns	r3, r3
 8002832:	4019      	ands	r1, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685a      	ldr	r2, [r3, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	3b41      	subs	r3, #65	; 0x41
 8002844:	fa00 f203 	lsl.w	r2, r0, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b09      	cmp	r3, #9
 8002856:	d91c      	bls.n	8002892 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68d9      	ldr	r1, [r3, #12]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	4613      	mov	r3, r2
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4413      	add	r3, r2
 8002868:	3b1e      	subs	r3, #30
 800286a:	2207      	movs	r2, #7
 800286c:	fa02 f303 	lsl.w	r3, r2, r3
 8002870:	43db      	mvns	r3, r3
 8002872:	4019      	ands	r1, r3
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6898      	ldr	r0, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	4413      	add	r3, r2
 8002882:	3b1e      	subs	r3, #30
 8002884:	fa00 f203 	lsl.w	r2, r0, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	e019      	b.n	80028c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6919      	ldr	r1, [r3, #16]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	2207      	movs	r2, #7
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	4019      	ands	r1, r3
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6898      	ldr	r0, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4613      	mov	r3, r2
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	4413      	add	r3, r2
 80028ba:	fa00 f203 	lsl.w	r2, r0, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	430a      	orrs	r2, r1
 80028c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b10      	cmp	r3, #16
 80028cc:	d003      	beq.n	80028d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80028d2:	2b11      	cmp	r3, #17
 80028d4:	d132      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <HAL_ADC_ConfigChannel+0x1e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d125      	bne.n	800292c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d126      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80028fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b10      	cmp	r3, #16
 8002904:	d11a      	bne.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002906:	4b13      	ldr	r3, [pc, #76]	; (8002954 <HAL_ADC_ConfigChannel+0x1e8>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a13      	ldr	r2, [pc, #76]	; (8002958 <HAL_ADC_ConfigChannel+0x1ec>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	0c9a      	lsrs	r2, r3, #18
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800291c:	e002      	b.n	8002924 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	3b01      	subs	r3, #1
 8002922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <HAL_ADC_ConfigChannel+0x1b2>
 800292a:	e007      	b.n	800293c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40012400 	.word	0x40012400
 8002954:	20000000 	.word	0x20000000
 8002958:	431bde83 	.word	0x431bde83

0800295c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12e      	bne.n	80029d4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0201 	bic.w	r2, r2, #1
 8002984:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002986:	f7ff fe0f 	bl	80025a8 <HAL_GetTick>
 800298a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800298c:	e01b      	b.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800298e:	f7ff fe0b 	bl	80025a8 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d914      	bls.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 0301 	and.w	r3, r3, #1
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d10d      	bne.n	80029c6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	f043 0210 	orr.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	f043 0201 	orr.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e007      	b.n	80029d6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d0dc      	beq.n	800298e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3710      	adds	r7, #16
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b084      	sub	sp, #16
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0ed      	b.n	8002bcc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d102      	bne.n	8002a02 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff f889 	bl	8001b14 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681a      	ldr	r2, [r3, #0]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0201 	orr.w	r2, r2, #1
 8002a10:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a12:	f7ff fdc9 	bl	80025a8 <HAL_GetTick>
 8002a16:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a18:	e012      	b.n	8002a40 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a1a:	f7ff fdc5 	bl	80025a8 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b0a      	cmp	r3, #10
 8002a26:	d90b      	bls.n	8002a40 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2205      	movs	r2, #5
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e0c5      	b.n	8002bcc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0e5      	beq.n	8002a1a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0202 	bic.w	r2, r2, #2
 8002a5c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a5e:	f7ff fda3 	bl	80025a8 <HAL_GetTick>
 8002a62:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a64:	e012      	b.n	8002a8c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a66:	f7ff fd9f 	bl	80025a8 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b0a      	cmp	r3, #10
 8002a72:	d90b      	bls.n	8002a8c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2205      	movs	r2, #5
 8002a84:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e09f      	b.n	8002bcc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1e5      	bne.n	8002a66 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d108      	bne.n	8002ab4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	e007      	b.n	8002ac4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ac2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	7e5b      	ldrb	r3, [r3, #25]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d108      	bne.n	8002ade <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	e007      	b.n	8002aee <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	7e9b      	ldrb	r3, [r3, #26]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d108      	bne.n	8002b08 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f042 0220 	orr.w	r2, r2, #32
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	e007      	b.n	8002b18 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0220 	bic.w	r2, r2, #32
 8002b16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	7edb      	ldrb	r3, [r3, #27]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d108      	bne.n	8002b32 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0210 	bic.w	r2, r2, #16
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	e007      	b.n	8002b42 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0210 	orr.w	r2, r2, #16
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	7f1b      	ldrb	r3, [r3, #28]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d108      	bne.n	8002b5c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f042 0208 	orr.w	r2, r2, #8
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	e007      	b.n	8002b6c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0208 	bic.w	r2, r2, #8
 8002b6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	7f5b      	ldrb	r3, [r3, #29]
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d108      	bne.n	8002b86 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0204 	orr.w	r2, r2, #4
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	e007      	b.n	8002b96 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0204 	bic.w	r2, r2, #4
 8002b94:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	ea42 0103 	orr.w	r1, r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	1e5a      	subs	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3710      	adds	r7, #16
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	; 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d07c      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c2c:	69bb      	ldr	r3, [r7, #24]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 f983 	bl	8002f42 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c3c:	e016      	b.n	8002c6c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	f003 0304 	and.w	r3, r3, #4
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c50:	e00c      	b.n	8002c6c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f003 0308 	and.w	r3, r3, #8
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d004      	beq.n	8002c66 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e002      	b.n	8002c6c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f986 	bl	8002f78 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d024      	beq.n	8002cc0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 f962 	bl	8002f54 <HAL_CAN_TxMailbox1CompleteCallback>
 8002c90:	e016      	b.n	8002cc0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d004      	beq.n	8002ca6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ca4:	e00c      	b.n	8002cc0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb8:	e002      	b.n	8002cc0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f965 	bl	8002f8a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d024      	beq.n	8002d14 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cd2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f000 f941 	bl	8002f66 <HAL_CAN_TxMailbox2CompleteCallback>
 8002ce4:	e016      	b.n	8002d14 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d004      	beq.n	8002cfa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf8:	e00c      	b.n	8002d14 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0c:	e002      	b.n	8002d14 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f944 	bl	8002f9c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d14:	6a3b      	ldr	r3, [r7, #32]
 8002d16:	f003 0308 	and.w	r3, r3, #8
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00c      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d007      	beq.n	8002d38 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2210      	movs	r2, #16
 8002d36:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f003 0304 	and.w	r3, r3, #4
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00b      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0308 	and.w	r3, r3, #8
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d006      	beq.n	8002d5a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2208      	movs	r2, #8
 8002d52:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f933 	bl	8002fc0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d009      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f91b 	bl	8002fae <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2210      	movs	r2, #16
 8002d9a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f003 0320 	and.w	r3, r3, #32
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00b      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d006      	beq.n	8002dbe <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2208      	movs	r2, #8
 8002db6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f913 	bl	8002fe4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002dbe:	6a3b      	ldr	r3, [r7, #32]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8fb 	bl	8002fd2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00b      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d006      	beq.n	8002dfe <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f8fc 	bl	8002ff6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00b      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f003 0308 	and.w	r3, r3, #8
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d006      	beq.n	8002e20 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2208      	movs	r2, #8
 8002e18:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8f4 	bl	8003008 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d07b      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d072      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4a:	f043 0301 	orr.w	r3, r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d008      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d003      	beq.n	8002e6c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	f043 0302 	orr.w	r3, r3, #2
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d008      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d003      	beq.n	8002e88 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e82:	f043 0304 	orr.w	r3, r3, #4
 8002e86:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d043      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d03e      	beq.n	8002f1a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ea2:	2b60      	cmp	r3, #96	; 0x60
 8002ea4:	d02b      	beq.n	8002efe <HAL_CAN_IRQHandler+0x32a>
 8002ea6:	2b60      	cmp	r3, #96	; 0x60
 8002ea8:	d82e      	bhi.n	8002f08 <HAL_CAN_IRQHandler+0x334>
 8002eaa:	2b50      	cmp	r3, #80	; 0x50
 8002eac:	d022      	beq.n	8002ef4 <HAL_CAN_IRQHandler+0x320>
 8002eae:	2b50      	cmp	r3, #80	; 0x50
 8002eb0:	d82a      	bhi.n	8002f08 <HAL_CAN_IRQHandler+0x334>
 8002eb2:	2b40      	cmp	r3, #64	; 0x40
 8002eb4:	d019      	beq.n	8002eea <HAL_CAN_IRQHandler+0x316>
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d826      	bhi.n	8002f08 <HAL_CAN_IRQHandler+0x334>
 8002eba:	2b30      	cmp	r3, #48	; 0x30
 8002ebc:	d010      	beq.n	8002ee0 <HAL_CAN_IRQHandler+0x30c>
 8002ebe:	2b30      	cmp	r3, #48	; 0x30
 8002ec0:	d822      	bhi.n	8002f08 <HAL_CAN_IRQHandler+0x334>
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d002      	beq.n	8002ecc <HAL_CAN_IRQHandler+0x2f8>
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d005      	beq.n	8002ed6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002eca:	e01d      	b.n	8002f08 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ece:	f043 0308 	orr.w	r3, r3, #8
 8002ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ed4:	e019      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	f043 0310 	orr.w	r3, r3, #16
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ede:	e014      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	f043 0320 	orr.w	r3, r3, #32
 8002ee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ee8:	e00f      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ef2:	e00a      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002efa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002efc:	e005      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002f06:	e000      	b.n	8002f0a <HAL_CAN_IRQHandler+0x336>
            break;
 8002f08:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	699a      	ldr	r2, [r3, #24]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002f18:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2204      	movs	r2, #4
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f000 f870 	bl	800301a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3728      	adds	r7, #40	; 0x28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr

08002f78 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr

08002f8a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f8a:	b480      	push	{r7}
 8002f8c:	b083      	sub	sp, #12
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bc80      	pop	{r7}
 8002fac:	4770      	bx	lr

08002fae <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fae:	b480      	push	{r7}
 8002fb0:	b083      	sub	sp, #12
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bc80      	pop	{r7}
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bc80      	pop	{r7}
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	bc80      	pop	{r7}
 8003018:	4770      	bx	lr

0800301a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003022:	bf00      	nop
 8003024:	370c      	adds	r7, #12
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0c      	ldr	r3, [pc, #48]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800305c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305e:	4a04      	ldr	r2, [pc, #16]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	60d3      	str	r3, [r2, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000ed00 	.word	0xe000ed00

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4906      	ldr	r1, [pc, #24]	; (80030c4 <__NVIC_EnableIRQ+0x34>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	; (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	; (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	; 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	; 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr

08003180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b082      	sub	sp, #8
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3b01      	subs	r3, #1
 800318c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003190:	d301      	bcc.n	8003196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003192:	2301      	movs	r3, #1
 8003194:	e00f      	b.n	80031b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003196:	4a0a      	ldr	r2, [pc, #40]	; (80031c0 <SysTick_Config+0x40>)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800319e:	210f      	movs	r1, #15
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	f7ff ff90 	bl	80030c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <SysTick_Config+0x40>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031ae:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <SysTick_Config+0x40>)
 80031b0:	2207      	movs	r2, #7
 80031b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3708      	adds	r7, #8
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000e010 	.word	0xe000e010

080031c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff2d 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	4603      	mov	r3, r0
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
 80031e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ec:	f7ff ff42 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	68b9      	ldr	r1, [r7, #8]
 80031f6:	6978      	ldr	r0, [r7, #20]
 80031f8:	f7ff ff90 	bl	800311c <NVIC_EncodePriority>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff ff5f 	bl	80030c8 <__NVIC_SetPriority>
}
 800320a:	bf00      	nop
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}

08003212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	b082      	sub	sp, #8
 8003216:	af00      	add	r7, sp, #0
 8003218:	4603      	mov	r3, r0
 800321a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800321c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff35 	bl	8003090 <__NVIC_EnableIRQ>
}
 8003226:	bf00      	nop
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b082      	sub	sp, #8
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff ffa2 	bl	8003180 <SysTick_Config>
 800323c:	4603      	mov	r3, r0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003248:	b480      	push	{r7}
 800324a:	b08b      	sub	sp, #44	; 0x2c
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003252:	2300      	movs	r3, #0
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800325a:	e169      	b.n	8003530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800325c:	2201      	movs	r2, #1
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	429a      	cmp	r2, r3
 8003276:	f040 8158 	bne.w	800352a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a9a      	ldr	r2, [pc, #616]	; (80034e8 <HAL_GPIO_Init+0x2a0>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d05e      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 8003284:	4a98      	ldr	r2, [pc, #608]	; (80034e8 <HAL_GPIO_Init+0x2a0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d875      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 800328a:	4a98      	ldr	r2, [pc, #608]	; (80034ec <HAL_GPIO_Init+0x2a4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d058      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 8003290:	4a96      	ldr	r2, [pc, #600]	; (80034ec <HAL_GPIO_Init+0x2a4>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d86f      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 8003296:	4a96      	ldr	r2, [pc, #600]	; (80034f0 <HAL_GPIO_Init+0x2a8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d052      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 800329c:	4a94      	ldr	r2, [pc, #592]	; (80034f0 <HAL_GPIO_Init+0x2a8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d869      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032a2:	4a94      	ldr	r2, [pc, #592]	; (80034f4 <HAL_GPIO_Init+0x2ac>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d04c      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 80032a8:	4a92      	ldr	r2, [pc, #584]	; (80034f4 <HAL_GPIO_Init+0x2ac>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d863      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032ae:	4a92      	ldr	r2, [pc, #584]	; (80034f8 <HAL_GPIO_Init+0x2b0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d046      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
 80032b4:	4a90      	ldr	r2, [pc, #576]	; (80034f8 <HAL_GPIO_Init+0x2b0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d85d      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032ba:	2b12      	cmp	r3, #18
 80032bc:	d82a      	bhi.n	8003314 <HAL_GPIO_Init+0xcc>
 80032be:	2b12      	cmp	r3, #18
 80032c0:	d859      	bhi.n	8003376 <HAL_GPIO_Init+0x12e>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <HAL_GPIO_Init+0x80>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	08003343 	.word	0x08003343
 80032cc:	0800331d 	.word	0x0800331d
 80032d0:	0800332f 	.word	0x0800332f
 80032d4:	08003371 	.word	0x08003371
 80032d8:	08003377 	.word	0x08003377
 80032dc:	08003377 	.word	0x08003377
 80032e0:	08003377 	.word	0x08003377
 80032e4:	08003377 	.word	0x08003377
 80032e8:	08003377 	.word	0x08003377
 80032ec:	08003377 	.word	0x08003377
 80032f0:	08003377 	.word	0x08003377
 80032f4:	08003377 	.word	0x08003377
 80032f8:	08003377 	.word	0x08003377
 80032fc:	08003377 	.word	0x08003377
 8003300:	08003377 	.word	0x08003377
 8003304:	08003377 	.word	0x08003377
 8003308:	08003377 	.word	0x08003377
 800330c:	08003325 	.word	0x08003325
 8003310:	08003339 	.word	0x08003339
 8003314:	4a79      	ldr	r2, [pc, #484]	; (80034fc <HAL_GPIO_Init+0x2b4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800331a:	e02c      	b.n	8003376 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	623b      	str	r3, [r7, #32]
          break;
 8003322:	e029      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	3304      	adds	r3, #4
 800332a:	623b      	str	r3, [r7, #32]
          break;
 800332c:	e024      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	3308      	adds	r3, #8
 8003334:	623b      	str	r3, [r7, #32]
          break;
 8003336:	e01f      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	330c      	adds	r3, #12
 800333e:	623b      	str	r3, [r7, #32]
          break;
 8003340:	e01a      	b.n	8003378 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800334a:	2304      	movs	r3, #4
 800334c:	623b      	str	r3, [r7, #32]
          break;
 800334e:	e013      	b.n	8003378 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d105      	bne.n	8003364 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003358:	2308      	movs	r3, #8
 800335a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	611a      	str	r2, [r3, #16]
          break;
 8003362:	e009      	b.n	8003378 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003364:	2308      	movs	r3, #8
 8003366:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	615a      	str	r2, [r3, #20]
          break;
 800336e:	e003      	b.n	8003378 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003370:	2300      	movs	r3, #0
 8003372:	623b      	str	r3, [r7, #32]
          break;
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x130>
          break;
 8003376:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2bff      	cmp	r3, #255	; 0xff
 800337c:	d801      	bhi.n	8003382 <HAL_GPIO_Init+0x13a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	e001      	b.n	8003386 <HAL_GPIO_Init+0x13e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	3304      	adds	r3, #4
 8003386:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	2bff      	cmp	r3, #255	; 0xff
 800338c:	d802      	bhi.n	8003394 <HAL_GPIO_Init+0x14c>
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	e002      	b.n	800339a <HAL_GPIO_Init+0x152>
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	3b08      	subs	r3, #8
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	210f      	movs	r1, #15
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	fa01 f303 	lsl.w	r3, r1, r3
 80033a8:	43db      	mvns	r3, r3
 80033aa:	401a      	ands	r2, r3
 80033ac:	6a39      	ldr	r1, [r7, #32]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	fa01 f303 	lsl.w	r3, r1, r3
 80033b4:	431a      	orrs	r2, r3
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	f000 80b1 	beq.w	800352a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80033c8:	4b4d      	ldr	r3, [pc, #308]	; (8003500 <HAL_GPIO_Init+0x2b8>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	4a4c      	ldr	r2, [pc, #304]	; (8003500 <HAL_GPIO_Init+0x2b8>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6193      	str	r3, [r2, #24]
 80033d4:	4b4a      	ldr	r3, [pc, #296]	; (8003500 <HAL_GPIO_Init+0x2b8>)
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	f003 0301 	and.w	r3, r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80033e0:	4a48      	ldr	r2, [pc, #288]	; (8003504 <HAL_GPIO_Init+0x2bc>)
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	089b      	lsrs	r3, r3, #2
 80033e6:	3302      	adds	r3, #2
 80033e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	220f      	movs	r2, #15
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4013      	ands	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a40      	ldr	r2, [pc, #256]	; (8003508 <HAL_GPIO_Init+0x2c0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d013      	beq.n	8003434 <HAL_GPIO_Init+0x1ec>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3f      	ldr	r2, [pc, #252]	; (800350c <HAL_GPIO_Init+0x2c4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00d      	beq.n	8003430 <HAL_GPIO_Init+0x1e8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3e      	ldr	r2, [pc, #248]	; (8003510 <HAL_GPIO_Init+0x2c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d007      	beq.n	800342c <HAL_GPIO_Init+0x1e4>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3d      	ldr	r2, [pc, #244]	; (8003514 <HAL_GPIO_Init+0x2cc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d101      	bne.n	8003428 <HAL_GPIO_Init+0x1e0>
 8003424:	2303      	movs	r3, #3
 8003426:	e006      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003428:	2304      	movs	r3, #4
 800342a:	e004      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 800342c:	2302      	movs	r3, #2
 800342e:	e002      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003430:	2301      	movs	r3, #1
 8003432:	e000      	b.n	8003436 <HAL_GPIO_Init+0x1ee>
 8003434:	2300      	movs	r3, #0
 8003436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003438:	f002 0203 	and.w	r2, r2, #3
 800343c:	0092      	lsls	r2, r2, #2
 800343e:	4093      	lsls	r3, r2
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003446:	492f      	ldr	r1, [pc, #188]	; (8003504 <HAL_GPIO_Init+0x2bc>)
 8003448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d006      	beq.n	800346e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003460:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	492c      	ldr	r1, [pc, #176]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	4313      	orrs	r3, r2
 800346a:	608b      	str	r3, [r1, #8]
 800346c:	e006      	b.n	800347c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800346e:	4b2a      	ldr	r3, [pc, #168]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003470:	689a      	ldr	r2, [r3, #8]
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	43db      	mvns	r3, r3
 8003476:	4928      	ldr	r1, [pc, #160]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003478:	4013      	ands	r3, r2
 800347a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d006      	beq.n	8003496 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003488:	4b23      	ldr	r3, [pc, #140]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	4922      	ldr	r1, [pc, #136]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	60cb      	str	r3, [r1, #12]
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003496:	4b20      	ldr	r3, [pc, #128]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	43db      	mvns	r3, r3
 800349e:	491e      	ldr	r1, [pc, #120]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d006      	beq.n	80034be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034b0:	4b19      	ldr	r3, [pc, #100]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	4918      	ldr	r1, [pc, #96]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	604b      	str	r3, [r1, #4]
 80034bc:	e006      	b.n	80034cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034be:	4b16      	ldr	r3, [pc, #88]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	43db      	mvns	r3, r3
 80034c6:	4914      	ldr	r1, [pc, #80]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d021      	beq.n	800351c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	490e      	ldr	r1, [pc, #56]	; (8003518 <HAL_GPIO_Init+0x2d0>)
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	600b      	str	r3, [r1, #0]
 80034e4:	e021      	b.n	800352a <HAL_GPIO_Init+0x2e2>
 80034e6:	bf00      	nop
 80034e8:	10320000 	.word	0x10320000
 80034ec:	10310000 	.word	0x10310000
 80034f0:	10220000 	.word	0x10220000
 80034f4:	10210000 	.word	0x10210000
 80034f8:	10120000 	.word	0x10120000
 80034fc:	10110000 	.word	0x10110000
 8003500:	40021000 	.word	0x40021000
 8003504:	40010000 	.word	0x40010000
 8003508:	40010800 	.word	0x40010800
 800350c:	40010c00 	.word	0x40010c00
 8003510:	40011000 	.word	0x40011000
 8003514:	40011400 	.word	0x40011400
 8003518:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800351c:	4b0b      	ldr	r3, [pc, #44]	; (800354c <HAL_GPIO_Init+0x304>)
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	43db      	mvns	r3, r3
 8003524:	4909      	ldr	r1, [pc, #36]	; (800354c <HAL_GPIO_Init+0x304>)
 8003526:	4013      	ands	r3, r2
 8003528:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	3301      	adds	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	fa22 f303 	lsr.w	r3, r2, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	f47f ae8e 	bne.w	800325c <HAL_GPIO_Init+0x14>
  }
}
 8003540:	bf00      	nop
 8003542:	bf00      	nop
 8003544:	372c      	adds	r7, #44	; 0x2c
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr
 800354c:	40010400 	.word	0x40010400

08003550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	807b      	strh	r3, [r7, #2]
 800355c:	4613      	mov	r3, r2
 800355e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003560:	787b      	ldrb	r3, [r7, #1]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800356c:	e003      	b.n	8003576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800356e:	887b      	ldrh	r3, [r7, #2]
 8003570:	041a      	lsls	r2, r3, #16
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	611a      	str	r2, [r3, #16]
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	bc80      	pop	{r7}
 800357e:	4770      	bx	lr

08003580 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	041a      	lsls	r2, r3, #16
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43d9      	mvns	r1, r3
 800359e:	887b      	ldrh	r3, [r7, #2]
 80035a0:	400b      	ands	r3, r1
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	611a      	str	r2, [r3, #16]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr
	...

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e12b      	b.n	800381e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe fb02 	bl	8001be4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	; 0x24
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003606:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003616:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003618:	f002 ffac 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4a81      	ldr	r2, [pc, #516]	; (8003828 <HAL_I2C_Init+0x274>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d807      	bhi.n	8003638 <HAL_I2C_Init+0x84>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4a80      	ldr	r2, [pc, #512]	; (800382c <HAL_I2C_Init+0x278>)
 800362c:	4293      	cmp	r3, r2
 800362e:	bf94      	ite	ls
 8003630:	2301      	movls	r3, #1
 8003632:	2300      	movhi	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	e006      	b.n	8003646 <HAL_I2C_Init+0x92>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a7d      	ldr	r2, [pc, #500]	; (8003830 <HAL_I2C_Init+0x27c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	bf94      	ite	ls
 8003640:	2301      	movls	r3, #1
 8003642:	2300      	movhi	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e0e7      	b.n	800381e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	4a78      	ldr	r2, [pc, #480]	; (8003834 <HAL_I2C_Init+0x280>)
 8003652:	fba2 2303 	umull	r2, r3, r2, r3
 8003656:	0c9b      	lsrs	r3, r3, #18
 8003658:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68ba      	ldr	r2, [r7, #8]
 800366a:	430a      	orrs	r2, r1
 800366c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	4a6a      	ldr	r2, [pc, #424]	; (8003828 <HAL_I2C_Init+0x274>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d802      	bhi.n	8003688 <HAL_I2C_Init+0xd4>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	3301      	adds	r3, #1
 8003686:	e009      	b.n	800369c <HAL_I2C_Init+0xe8>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800368e:	fb02 f303 	mul.w	r3, r2, r3
 8003692:	4a69      	ldr	r2, [pc, #420]	; (8003838 <HAL_I2C_Init+0x284>)
 8003694:	fba2 2303 	umull	r2, r3, r2, r3
 8003698:	099b      	lsrs	r3, r3, #6
 800369a:	3301      	adds	r3, #1
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	495c      	ldr	r1, [pc, #368]	; (8003828 <HAL_I2C_Init+0x274>)
 80036b8:	428b      	cmp	r3, r1
 80036ba:	d819      	bhi.n	80036f0 <HAL_I2C_Init+0x13c>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	1e59      	subs	r1, r3, #1
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	005b      	lsls	r3, r3, #1
 80036c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80036ca:	1c59      	adds	r1, r3, #1
 80036cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80036d0:	400b      	ands	r3, r1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00a      	beq.n	80036ec <HAL_I2C_Init+0x138>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e59      	subs	r1, r3, #1
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	005b      	lsls	r3, r3, #1
 80036e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036e4:	3301      	adds	r3, #1
 80036e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ea:	e051      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036ec:	2304      	movs	r3, #4
 80036ee:	e04f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d111      	bne.n	800371c <HAL_I2C_Init+0x168>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	1e58      	subs	r0, r3, #1
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	460b      	mov	r3, r1
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	440b      	add	r3, r1
 8003706:	fbb0 f3f3 	udiv	r3, r0, r3
 800370a:	3301      	adds	r3, #1
 800370c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003710:	2b00      	cmp	r3, #0
 8003712:	bf0c      	ite	eq
 8003714:	2301      	moveq	r3, #1
 8003716:	2300      	movne	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	e012      	b.n	8003742 <HAL_I2C_Init+0x18e>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1e58      	subs	r0, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	460b      	mov	r3, r1
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	0099      	lsls	r1, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_Init+0x196>
 8003746:	2301      	movs	r3, #1
 8003748:	e022      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10e      	bne.n	8003770 <HAL_I2C_Init+0x1bc>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	1e58      	subs	r0, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6859      	ldr	r1, [r3, #4]
 800375a:	460b      	mov	r3, r1
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	440b      	add	r3, r1
 8003760:	fbb0 f3f3 	udiv	r3, r0, r3
 8003764:	3301      	adds	r3, #1
 8003766:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376e:	e00f      	b.n	8003790 <HAL_I2C_Init+0x1dc>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	1e58      	subs	r0, r3, #1
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	440b      	add	r3, r1
 800377e:	0099      	lsls	r1, r3, #2
 8003780:	440b      	add	r3, r1
 8003782:	fbb0 f3f3 	udiv	r3, r0, r3
 8003786:	3301      	adds	r3, #1
 8003788:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800378c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	6809      	ldr	r1, [r1, #0]
 8003794:	4313      	orrs	r3, r2
 8003796:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69da      	ldr	r2, [r3, #28]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	431a      	orrs	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	6911      	ldr	r1, [r2, #16]
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	4311      	orrs	r1, r2
 80037cc:	687a      	ldr	r2, [r7, #4]
 80037ce:	6812      	ldr	r2, [r2, #0]
 80037d0:	430b      	orrs	r3, r1
 80037d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695a      	ldr	r2, [r3, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2200      	movs	r2, #0
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2220      	movs	r2, #32
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	000186a0 	.word	0x000186a0
 800382c:	001e847f 	.word	0x001e847f
 8003830:	003d08ff 	.word	0x003d08ff
 8003834:	431bde83 	.word	0x431bde83
 8003838:	10624dd3 	.word	0x10624dd3

0800383c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af02      	add	r7, sp, #8
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	4608      	mov	r0, r1
 8003846:	4611      	mov	r1, r2
 8003848:	461a      	mov	r2, r3
 800384a:	4603      	mov	r3, r0
 800384c:	817b      	strh	r3, [r7, #10]
 800384e:	460b      	mov	r3, r1
 8003850:	813b      	strh	r3, [r7, #8]
 8003852:	4613      	mov	r3, r2
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003856:	f7fe fea7 	bl	80025a8 <HAL_GetTick>
 800385a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b20      	cmp	r3, #32
 8003866:	f040 80d9 	bne.w	8003a1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	2319      	movs	r3, #25
 8003870:	2201      	movs	r2, #1
 8003872:	496d      	ldr	r1, [pc, #436]	; (8003a28 <HAL_I2C_Mem_Write+0x1ec>)
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fccd 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003880:	2302      	movs	r3, #2
 8003882:	e0cc      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <HAL_I2C_Mem_Write+0x56>
 800388e:	2302      	movs	r3, #2
 8003890:	e0c5      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2201      	movs	r2, #1
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d007      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f042 0201 	orr.w	r2, r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2221      	movs	r2, #33	; 0x21
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2240      	movs	r2, #64	; 0x40
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a3a      	ldr	r2, [r7, #32]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <HAL_I2C_Mem_Write+0x1f0>)
 80038f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038fa:	88f8      	ldrh	r0, [r7, #6]
 80038fc:	893a      	ldrh	r2, [r7, #8]
 80038fe:	8979      	ldrh	r1, [r7, #10]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	9301      	str	r3, [sp, #4]
 8003904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	4603      	mov	r3, r0
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fb04 	bl	8003f18 <I2C_RequestMemoryWrite>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d052      	beq.n	80039bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e081      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800391a:	697a      	ldr	r2, [r7, #20]
 800391c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 fd92 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d00d      	beq.n	8003946 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b04      	cmp	r3, #4
 8003930:	d107      	bne.n	8003942 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e06b      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	781a      	ldrb	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	1c5a      	adds	r2, r3, #1
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396c:	b29b      	uxth	r3, r3
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b04      	cmp	r3, #4
 8003982:	d11b      	bne.n	80039bc <HAL_I2C_Mem_Write+0x180>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	d017      	beq.n	80039bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	781a      	ldrb	r2, [r3, #0]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	1c5a      	adds	r2, r3, #1
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a6:	3b01      	subs	r3, #1
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b29a      	uxth	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1aa      	bne.n	800391a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fd85 	bl	80044d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00d      	beq.n	80039f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	2b04      	cmp	r3, #4
 80039da:	d107      	bne.n	80039ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e016      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2220      	movs	r2, #32
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	e000      	b.n	8003a1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a1c:	2302      	movs	r3, #2
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	00100002 	.word	0x00100002
 8003a2c:	ffff0000 	.word	0xffff0000

08003a30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08c      	sub	sp, #48	; 0x30
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	817b      	strh	r3, [r7, #10]
 8003a42:	460b      	mov	r3, r1
 8003a44:	813b      	strh	r3, [r7, #8]
 8003a46:	4613      	mov	r3, r2
 8003a48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a4e:	f7fe fdab 	bl	80025a8 <HAL_GetTick>
 8003a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	f040 8250 	bne.w	8003f02 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	2319      	movs	r3, #25
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4982      	ldr	r1, [pc, #520]	; (8003c74 <HAL_I2C_Mem_Read+0x244>)
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 fbd1 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d001      	beq.n	8003a7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e243      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <HAL_I2C_Mem_Read+0x5a>
 8003a86:	2302      	movs	r3, #2
 8003a88:	e23c      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d007      	beq.n	8003ab0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2222      	movs	r2, #34	; 0x22
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a62      	ldr	r2, [pc, #392]	; (8003c78 <HAL_I2C_Mem_Read+0x248>)
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003af2:	88f8      	ldrh	r0, [r7, #6]
 8003af4:	893a      	ldrh	r2, [r7, #8]
 8003af6:	8979      	ldrh	r1, [r7, #10]
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4603      	mov	r3, r0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa9e 	bl	8004044 <I2C_RequestMemoryRead>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e1f8      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d113      	bne.n	8003b42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	61fb      	str	r3, [r7, #28]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	e1cc      	b.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d11e      	bne.n	8003b88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b5a:	b672      	cpsid	i
}
 8003b5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	61bb      	str	r3, [r7, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	61bb      	str	r3, [r7, #24]
 8003b72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b84:	b662      	cpsie	i
}
 8003b86:	e035      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d11e      	bne.n	8003bce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba0:	b672      	cpsid	i
}
 8003ba2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bca:	b662      	cpsie	i
}
 8003bcc:	e012      	b.n	8003bf4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003bdc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bde:	2300      	movs	r3, #0
 8003be0:	613b      	str	r3, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	613b      	str	r3, [r7, #16]
 8003bf2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003bf4:	e172      	b.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	f200 811f 	bhi.w	8003e3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d123      	bne.n	8003c50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fcab 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e173      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	691a      	ldr	r2, [r3, #16]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	b29a      	uxth	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	3b01      	subs	r3, #1
 8003c48:	b29a      	uxth	r2, r3
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c4e:	e145      	b.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d152      	bne.n	8003cfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	9300      	str	r3, [sp, #0]
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5e:	2200      	movs	r2, #0
 8003c60:	4906      	ldr	r1, [pc, #24]	; (8003c7c <HAL_I2C_Mem_Read+0x24c>)
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f000 fad6 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e148      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
 8003c72:	bf00      	nop
 8003c74:	00100002 	.word	0x00100002
 8003c78:	ffff0000 	.word	0xffff0000
 8003c7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c80:	b672      	cpsid	i
}
 8003c82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cc6:	b662      	cpsie	i
}
 8003cc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003cfc:	e0ee      	b.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d04:	2200      	movs	r2, #0
 8003d06:	4981      	ldr	r1, [pc, #516]	; (8003f0c <HAL_I2C_Mem_Read+0x4dc>)
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 fa83 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e0f5      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d28:	b672      	cpsid	i
}
 8003d2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	691a      	ldr	r2, [r3, #16]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d5e:	4b6c      	ldr	r3, [pc, #432]	; (8003f10 <HAL_I2C_Mem_Read+0x4e0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	08db      	lsrs	r3, r3, #3
 8003d64:	4a6b      	ldr	r2, [pc, #428]	; (8003f14 <HAL_I2C_Mem_Read+0x4e4>)
 8003d66:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6a:	0a1a      	lsrs	r2, r3, #8
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4413      	add	r3, r2
 8003d72:	00da      	lsls	r2, r3, #3
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003d78:	6a3b      	ldr	r3, [r7, #32]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d118      	bne.n	8003db6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f043 0220 	orr.w	r2, r3, #32
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003da6:	b662      	cpsie	i
}
 8003da8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e0a6      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d1d9      	bne.n	8003d78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	691a      	ldr	r2, [r3, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	1c5a      	adds	r2, r3, #1
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e06:	b662      	cpsie	i
}
 8003e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e3c:	e04e      	b.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e42:	68f8      	ldr	r0, [r7, #12]
 8003e44:	f000 fb90 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d001      	beq.n	8003e52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e058      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d124      	bne.n	8003edc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d107      	bne.n	8003eaa <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f47f ae88 	bne.w	8003bf6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2220      	movs	r2, #32
 8003eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003efe:	2300      	movs	r3, #0
 8003f00:	e000      	b.n	8003f04 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003f02:	2302      	movs	r3, #2
  }
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3728      	adds	r7, #40	; 0x28
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	00010004 	.word	0x00010004
 8003f10:	20000000 	.word	0x20000000
 8003f14:	14f8b589 	.word	0x14f8b589

08003f18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	6a3b      	ldr	r3, [r7, #32]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f960 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00d      	beq.n	8003f76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f68:	d103      	bne.n	8003f72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f70:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e05f      	b.n	8004036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	6a3a      	ldr	r2, [r7, #32]
 8003f8a:	492d      	ldr	r1, [pc, #180]	; (8004040 <I2C_RequestMemoryWrite+0x128>)
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f9bb 	bl	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04c      	b.n	8004036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	617b      	str	r3, [r7, #20]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	6a39      	ldr	r1, [r7, #32]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 fa46 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00d      	beq.n	8003fde <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d107      	bne.n	8003fda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e02b      	b.n	8004036 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fde:	88fb      	ldrh	r3, [r7, #6]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d105      	bne.n	8003ff0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fe4:	893b      	ldrh	r3, [r7, #8]
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	e021      	b.n	8004034 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff0:	893b      	ldrh	r3, [r7, #8]
 8003ff2:	0a1b      	lsrs	r3, r3, #8
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004000:	6a39      	ldr	r1, [r7, #32]
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fa20 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00d      	beq.n	800402a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b04      	cmp	r3, #4
 8004014:	d107      	bne.n	8004026 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004024:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e005      	b.n	8004036 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800402a:	893b      	ldrh	r3, [r7, #8]
 800402c:	b2da      	uxtb	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3718      	adds	r7, #24
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	00010002 	.word	0x00010002

08004044 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af02      	add	r7, sp, #8
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	4608      	mov	r0, r1
 800404e:	4611      	mov	r1, r2
 8004050:	461a      	mov	r2, r3
 8004052:	4603      	mov	r3, r0
 8004054:	817b      	strh	r3, [r7, #10]
 8004056:	460b      	mov	r3, r1
 8004058:	813b      	strh	r3, [r7, #8]
 800405a:	4613      	mov	r3, r2
 800405c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800406c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800407c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	2200      	movs	r2, #0
 8004086:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 f8c2 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a4:	d103      	bne.n	80040ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e0aa      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	4952      	ldr	r1, [pc, #328]	; (8004210 <I2C_RequestMemoryRead+0x1cc>)
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f000 f91d 	bl	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	e097      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	699b      	ldr	r3, [r3, #24]
 80040ea:	617b      	str	r3, [r7, #20]
 80040ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f0:	6a39      	ldr	r1, [r7, #32]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 f9a8 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b04      	cmp	r3, #4
 8004104:	d107      	bne.n	8004116 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004114:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e076      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800411a:	88fb      	ldrh	r3, [r7, #6]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d105      	bne.n	800412c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004120:	893b      	ldrh	r3, [r7, #8]
 8004122:	b2da      	uxtb	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	611a      	str	r2, [r3, #16]
 800412a:	e021      	b.n	8004170 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800412c:	893b      	ldrh	r3, [r7, #8]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	b29b      	uxth	r3, r3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800413a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800413c:	6a39      	ldr	r1, [r7, #32]
 800413e:	68f8      	ldr	r0, [r7, #12]
 8004140:	f000 f982 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d00d      	beq.n	8004166 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2b04      	cmp	r3, #4
 8004150:	d107      	bne.n	8004162 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004160:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e050      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004166:	893b      	ldrh	r3, [r7, #8]
 8004168:	b2da      	uxtb	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	6a39      	ldr	r1, [r7, #32]
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f000 f967 	bl	8004448 <I2C_WaitOnTXEFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00d      	beq.n	800419c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	2b04      	cmp	r3, #4
 8004186:	d107      	bne.n	8004198 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004196:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e035      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f82b 	bl	8004214 <I2C_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00d      	beq.n	80041e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d103      	bne.n	80041dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e013      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041e0:	897b      	ldrh	r3, [r7, #10]
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f043 0301 	orr.w	r3, r3, #1
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	6a3a      	ldr	r2, [r7, #32]
 80041f4:	4906      	ldr	r1, [pc, #24]	; (8004210 <I2C_RequestMemoryRead+0x1cc>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f886 	bl	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3718      	adds	r7, #24
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	00010002 	.word	0x00010002

08004214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	4613      	mov	r3, r2
 8004222:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004224:	e048      	b.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422c:	d044      	beq.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fe f9bb 	bl	80025a8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <I2C_WaitOnFlagUntilTimeout+0x30>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d139      	bne.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	0c1b      	lsrs	r3, r3, #16
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b01      	cmp	r3, #1
 800424c:	d10d      	bne.n	800426a <I2C_WaitOnFlagUntilTimeout+0x56>
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	43da      	mvns	r2, r3
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	e00c      	b.n	8004284 <I2C_WaitOnFlagUntilTimeout+0x70>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	43da      	mvns	r2, r3
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	4013      	ands	r3, r2
 8004276:	b29b      	uxth	r3, r3
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	461a      	mov	r2, r3
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	429a      	cmp	r2, r3
 8004288:	d116      	bne.n	80042b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2200      	movs	r2, #0
 800428e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	f043 0220 	orr.w	r2, r3, #32
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e023      	b.n	8004300 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	0c1b      	lsrs	r3, r3, #16
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d10d      	bne.n	80042de <I2C_WaitOnFlagUntilTimeout+0xca>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	43da      	mvns	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	e00c      	b.n	80042f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	43da      	mvns	r2, r3
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	4013      	ands	r3, r2
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	79fb      	ldrb	r3, [r7, #7]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d093      	beq.n	8004226 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004316:	e071      	b.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004322:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004326:	d123      	bne.n	8004370 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004336:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004340:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2220      	movs	r2, #32
 800434c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435c:	f043 0204 	orr.w	r2, r3, #4
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e067      	b.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004376:	d041      	beq.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004378:	f7fe f916 	bl	80025a8 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d136      	bne.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	0c1b      	lsrs	r3, r3, #16
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b01      	cmp	r3, #1
 8004396:	d10c      	bne.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	43da      	mvns	r2, r3
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	4013      	ands	r3, r2
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	bf14      	ite	ne
 80043aa:	2301      	movne	r3, #1
 80043ac:	2300      	moveq	r3, #0
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	e00b      	b.n	80043ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	699b      	ldr	r3, [r3, #24]
 80043b8:	43da      	mvns	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4013      	ands	r3, r2
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	bf14      	ite	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	2300      	moveq	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d016      	beq.n	80043fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f043 0220 	orr.w	r2, r3, #32
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e021      	b.n	8004440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10c      	bne.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	e00b      	b.n	8004438 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	f47f af6d 	bne.w	8004318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004454:	e034      	b.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f8e3 	bl	8004622 <I2C_IsAcknowledgeFailed>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e034      	b.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d028      	beq.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7fe f89b 	bl	80025a8 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d11d      	bne.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800448e:	2b80      	cmp	r3, #128	; 0x80
 8004490:	d016      	beq.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2220      	movs	r2, #32
 800449c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	f043 0220 	orr.w	r2, r3, #32
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e007      	b.n	80044d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ca:	2b80      	cmp	r3, #128	; 0x80
 80044cc:	d1c3      	bne.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044e4:	e034      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 f89b 	bl	8004622 <I2C_IsAcknowledgeFailed>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d001      	beq.n	80044f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e034      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fc:	d028      	beq.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044fe:	f7fe f853 	bl	80025a8 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	429a      	cmp	r2, r3
 800450c:	d302      	bcc.n	8004514 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d11d      	bne.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b04      	cmp	r3, #4
 8004520:	d016      	beq.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d1c3      	bne.n	80044e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004574:	e049      	b.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d119      	bne.n	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e030      	b.n	800461a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fd fff6 	bl	80025a8 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11d      	bne.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d016      	beq.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e007      	b.n	800461a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004614:	2b40      	cmp	r3, #64	; 0x40
 8004616:	d1ae      	bne.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	3710      	adds	r7, #16
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}

08004622 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004622:	b480      	push	{r7}
 8004624:	b083      	sub	sp, #12
 8004626:	af00      	add	r7, sp, #0
 8004628:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d11b      	bne.n	8004672 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004642:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f043 0204 	orr.w	r2, r3, #4
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	bc80      	pop	{r7}
 800467c:	4770      	bx	lr

0800467e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b088      	sub	sp, #32
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f006 fb49 	bl	800ad22 <USB_ReadInterrupts>
 8004690:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fabb 	bl	8004c18 <PCD_EP_ISR_Handler>

    return;
 80046a2:	e119      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d013      	beq.n	80046d6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	b292      	uxth	r2, r2
 80046c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f008 f984 	bl	800c9d4 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80046cc:	2100      	movs	r1, #0
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f905 	bl	80048de <HAL_PCD_SetAddress>

    return;
 80046d4:	e100      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00c      	beq.n	80046fa <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046f2:	b292      	uxth	r2, r2
 80046f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80046f8:	e0ee      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00c      	beq.n	800471e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800470c:	b29a      	uxth	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004716:	b292      	uxth	r2, r2
 8004718:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800471c:	e0dc      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d027      	beq.n	8004778 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004730:	b29a      	uxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f022 0204 	bic.w	r2, r2, #4
 800473a:	b292      	uxth	r2, r2
 800473c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004748:	b29a      	uxth	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0208 	bic.w	r2, r2, #8
 8004752:	b292      	uxth	r2, r2
 8004754:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f008 f973 	bl	800ca44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004770:	b292      	uxth	r2, r2
 8004772:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004776:	e0af      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800477e:	2b00      	cmp	r3, #0
 8004780:	f000 8083 	beq.w	800488a <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004784:	2300      	movs	r3, #0
 8004786:	77fb      	strb	r3, [r7, #31]
 8004788:	e010      	b.n	80047ac <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	7ffb      	ldrb	r3, [r7, #31]
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	441a      	add	r2, r3
 8004796:	7ffb      	ldrb	r3, [r7, #31]
 8004798:	8812      	ldrh	r2, [r2, #0]
 800479a:	b292      	uxth	r2, r2
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	3320      	adds	r3, #32
 80047a0:	443b      	add	r3, r7
 80047a2:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80047a6:	7ffb      	ldrb	r3, [r7, #31]
 80047a8:	3301      	adds	r3, #1
 80047aa:	77fb      	strb	r3, [r7, #31]
 80047ac:	7ffb      	ldrb	r3, [r7, #31]
 80047ae:	2b07      	cmp	r3, #7
 80047b0:	d9eb      	bls.n	800478a <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	b292      	uxth	r2, r2
 80047c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f022 0201 	bic.w	r2, r2, #1
 80047dc:	b292      	uxth	r2, r2
 80047de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80047e2:	bf00      	nop
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d0f6      	beq.n	80047e4 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80047fe:	b29a      	uxth	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004808:	b292      	uxth	r2, r2
 800480a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	77fb      	strb	r3, [r7, #31]
 8004812:	e00f      	b.n	8004834 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004814:	7ffb      	ldrb	r3, [r7, #31]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	4611      	mov	r1, r2
 800481c:	7ffa      	ldrb	r2, [r7, #31]
 800481e:	0092      	lsls	r2, r2, #2
 8004820:	440a      	add	r2, r1
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	3320      	adds	r3, #32
 8004826:	443b      	add	r3, r7
 8004828:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800482c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	3301      	adds	r3, #1
 8004832:	77fb      	strb	r3, [r7, #31]
 8004834:	7ffb      	ldrb	r3, [r7, #31]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d9ec      	bls.n	8004814 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f042 0208 	orr.w	r2, r2, #8
 800484c:	b292      	uxth	r2, r2
 800484e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004864:	b292      	uxth	r2, r2
 8004866:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004872:	b29a      	uxth	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0204 	orr.w	r2, r2, #4
 800487c:	b292      	uxth	r2, r2
 800487e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f008 f8c4 	bl	800ca10 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004888:	e026      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80048a6:	b292      	uxth	r2, r2
 80048a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f008 f883 	bl	800c9b8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80048b2:	e011      	b.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048d0:	b292      	uxth	r2, r2
 80048d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80048d6:	bf00      	nop
  }
}
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b082      	sub	sp, #8
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d101      	bne.n	80048f8 <HAL_PCD_SetAddress+0x1a>
 80048f4:	2302      	movs	r3, #2
 80048f6:	e012      	b.n	800491e <HAL_PCD_SetAddress+0x40>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	78fa      	ldrb	r2, [r7, #3]
 8004904:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f006 f9f4 	bl	800acfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
 800492e:	4608      	mov	r0, r1
 8004930:	4611      	mov	r1, r2
 8004932:	461a      	mov	r2, r3
 8004934:	4603      	mov	r3, r0
 8004936:	70fb      	strb	r3, [r7, #3]
 8004938:	460b      	mov	r3, r1
 800493a:	803b      	strh	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004944:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004948:	2b00      	cmp	r3, #0
 800494a:	da0e      	bge.n	800496a <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800494c:	78fb      	ldrb	r3, [r7, #3]
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	4613      	mov	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	4413      	add	r3, r2
 8004958:	00db      	lsls	r3, r3, #3
 800495a:	3310      	adds	r3, #16
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	4413      	add	r3, r2
 8004960:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	705a      	strb	r2, [r3, #1]
 8004968:	e00e      	b.n	8004988 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	f003 0207 	and.w	r2, r3, #7
 8004970:	4613      	mov	r3, r2
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	00db      	lsls	r3, r3, #3
 8004978:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	4413      	add	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2200      	movs	r2, #0
 8004986:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004988:	78fb      	ldrb	r3, [r7, #3]
 800498a:	f003 0307 	and.w	r3, r3, #7
 800498e:	b2da      	uxtb	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004994:	883a      	ldrh	r2, [r7, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	78ba      	ldrb	r2, [r7, #2]
 800499e:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80049a0:	78bb      	ldrb	r3, [r7, #2]
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d102      	bne.n	80049ac <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_PCD_EP_Open+0x94>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e00e      	b.n	80049d8 <HAL_PCD_EP_Open+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68f9      	ldr	r1, [r7, #12]
 80049c8:	4618      	mov	r0, r3
 80049ca:	f004 f929 	bl	8008c20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80049d6:	7afb      	ldrb	r3, [r7, #11]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	607a      	str	r2, [r7, #4]
 80049ea:	603b      	str	r3, [r7, #0]
 80049ec:	460b      	mov	r3, r1
 80049ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049f0:	7afb      	ldrb	r3, [r7, #11]
 80049f2:	f003 0207 	and.w	r2, r3, #7
 80049f6:	4613      	mov	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	4413      	add	r3, r2
 8004a06:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2200      	movs	r2, #0
 8004a18:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a20:	7afb      	ldrb	r3, [r7, #11]
 8004a22:	f003 0307 	and.w	r3, r3, #7
 8004a26:	b2da      	uxtb	r2, r3
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6979      	ldr	r1, [r7, #20]
 8004a32:	4618      	mov	r0, r3
 8004a34:	f004 fcb4 	bl	80093a0 <USB_EPStartXfer>

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3718      	adds	r7, #24
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b086      	sub	sp, #24
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	607a      	str	r2, [r7, #4]
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a52:	7afb      	ldrb	r3, [r7, #11]
 8004a54:	f003 0207 	and.w	r2, r3, #7
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	3310      	adds	r3, #16
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4413      	add	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	683a      	ldr	r2, [r7, #0]
 8004a80:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a8e:	7afb      	ldrb	r3, [r7, #11]
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	b2da      	uxtb	r2, r3
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	6979      	ldr	r1, [r7, #20]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f004 fc7d 	bl	80093a0 <USB_EPStartXfer>

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b084      	sub	sp, #16
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004abc:	78fb      	ldrb	r3, [r7, #3]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	7912      	ldrb	r2, [r2, #4]
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d901      	bls.n	8004ace <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e04c      	b.n	8004b68 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	da0e      	bge.n	8004af4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ad6:	78fb      	ldrb	r3, [r7, #3]
 8004ad8:	f003 0207 	and.w	r2, r3, #7
 8004adc:	4613      	mov	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	3310      	adds	r3, #16
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	4413      	add	r3, r2
 8004aea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2201      	movs	r2, #1
 8004af0:	705a      	strb	r2, [r3, #1]
 8004af2:	e00c      	b.n	8004b0e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004af4:	78fa      	ldrb	r2, [r7, #3]
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	4413      	add	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b14:	78fb      	ldrb	r3, [r7, #3]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_PCD_EP_SetStall+0x7e>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	e01c      	b.n	8004b68 <HAL_PCD_EP_SetStall+0xb8>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f005 ffe0 	bl	800ab02 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b42:	78fb      	ldrb	r3, [r7, #3]
 8004b44:	f003 0307 	and.w	r3, r3, #7
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d108      	bne.n	8004b5e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004b56:	4619      	mov	r1, r3
 8004b58:	4610      	mov	r0, r2
 8004b5a:	f006 f8f1 	bl	800ad40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 030f 	and.w	r3, r3, #15
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	7912      	ldrb	r2, [r2, #4]
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d901      	bls.n	8004b8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e040      	b.n	8004c10 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	da0e      	bge.n	8004bb4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	f003 0207 	and.w	r2, r3, #7
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	3310      	adds	r3, #16
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4413      	add	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	705a      	strb	r2, [r3, #1]
 8004bb2:	e00e      	b.n	8004bd2 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 0207 	and.w	r2, r3, #7
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	4413      	add	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bd8:	78fb      	ldrb	r3, [r7, #3]
 8004bda:	f003 0307 	and.w	r3, r3, #7
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_PCD_EP_ClrStall+0x82>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e00e      	b.n	8004c10 <HAL_PCD_EP_ClrStall+0xa0>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68f9      	ldr	r1, [r7, #12]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f005 ffce 	bl	800aba2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b096      	sub	sp, #88	; 0x58
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004c20:	e3bc      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004c2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	f003 030f 	and.w	r3, r3, #15
 8004c38:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004c3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f040 8176 	bne.w	8004f32 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004c46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d14f      	bne.n	8004cf2 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	881b      	ldrh	r3, [r3, #0]
 8004c58:	b29b      	uxth	r3, r3
 8004c5a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c62:	81fb      	strh	r3, [r7, #14]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	89fb      	ldrh	r3, [r7, #14]
 8004c6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	3310      	adds	r3, #16
 8004c7a:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	3302      	adds	r3, #2
 8004c92:	005b      	lsls	r3, r3, #1
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c9e:	881b      	ldrh	r3, [r3, #0]
 8004ca0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ca6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004ca8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004caa:	695a      	ldr	r2, [r3, #20]
 8004cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cae:	69db      	ldr	r3, [r3, #28]
 8004cb0:	441a      	add	r2, r3
 8004cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004cb6:	2100      	movs	r1, #0
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f007 fe63 	bl	800c984 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	7b5b      	ldrb	r3, [r3, #13]
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 8369 	beq.w	800539c <PCD_EP_ISR_Handler+0x784>
 8004cca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f040 8364 	bne.w	800539c <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	7b5b      	ldrb	r3, [r3, #13]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	b292      	uxth	r2, r2
 8004ce6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	735a      	strb	r2, [r3, #13]
 8004cf0:	e354      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004cf8:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	881b      	ldrh	r3, [r3, #0]
 8004d00:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004d04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d034      	beq.n	8004d7a <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4413      	add	r3, r2
 8004d24:	3306      	adds	r3, #6
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d48:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f006 f846 	bl	800ade0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	881b      	ldrh	r3, [r3, #0]
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d60:	4013      	ands	r3, r2
 8004d62:	823b      	strh	r3, [r7, #16]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	8a3a      	ldrh	r2, [r7, #16]
 8004d6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f007 fdd9 	bl	800c92a <HAL_PCD_SetupStageCallback>
 8004d78:	e310      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004d7a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f280 830c 	bge.w	800539c <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	b29a      	uxth	r2, r3
 8004d8c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004d90:	4013      	ands	r3, r2
 8004d92:	83fb      	strh	r3, [r7, #30]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	8bfa      	ldrh	r2, [r7, #30]
 8004d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004d9e:	b292      	uxth	r2, r2
 8004da0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	00db      	lsls	r3, r3, #3
 8004db4:	4413      	add	r3, r2
 8004db6:	3306      	adds	r3, #6
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dcc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004dce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d019      	beq.n	8004e0a <PCD_EP_ISR_Handler+0x1f2>
 8004dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d015      	beq.n	8004e0a <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de4:	6959      	ldr	r1, [r3, #20]
 8004de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	f005 fff6 	bl	800ade0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004df6:	695a      	ldr	r2, [r3, #20]
 8004df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e00:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004e02:	2100      	movs	r1, #0
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f007 fda2 	bl	800c94e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	881b      	ldrh	r3, [r3, #0]
 8004e10:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004e14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f040 82bd 	bne.w	800539c <PCD_EP_ISR_Handler+0x784>
 8004e22:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e26:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004e2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004e2e:	f000 82b5 	beq.w	800539c <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	4413      	add	r3, r2
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e50:	617b      	str	r3, [r7, #20]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	881b      	ldrh	r3, [r3, #0]
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e5c:	b29a      	uxth	r2, r3
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	2b3e      	cmp	r3, #62	; 0x3e
 8004e68:	d91d      	bls.n	8004ea6 <PCD_EP_ISR_Handler+0x28e>
 8004e6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	095b      	lsrs	r3, r3, #5
 8004e70:	647b      	str	r3, [r7, #68]	; 0x44
 8004e72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	f003 031f 	and.w	r3, r3, #31
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <PCD_EP_ISR_Handler+0x26c>
 8004e7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e80:	3b01      	subs	r3, #1
 8004e82:	647b      	str	r3, [r7, #68]	; 0x44
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	b29a      	uxth	r2, r3
 8004e8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4313      	orrs	r3, r2
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e9e:	b29a      	uxth	r2, r3
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	801a      	strh	r2, [r3, #0]
 8004ea4:	e026      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x2dc>
 8004ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10a      	bne.n	8004ec4 <PCD_EP_ISR_Handler+0x2ac>
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	881b      	ldrh	r3, [r3, #0]
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ebc:	b29a      	uxth	r2, r3
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	801a      	strh	r2, [r3, #0]
 8004ec2:	e017      	b.n	8004ef4 <PCD_EP_ISR_Handler+0x2dc>
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	085b      	lsrs	r3, r3, #1
 8004eca:	647b      	str	r3, [r7, #68]	; 0x44
 8004ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d002      	beq.n	8004ede <PCD_EP_ISR_Handler+0x2c6>
 8004ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004eda:	3301      	adds	r3, #1
 8004edc:	647b      	str	r3, [r7, #68]	; 0x44
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	029b      	lsls	r3, r3, #10
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	4313      	orrs	r3, r2
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	827b      	strh	r3, [r7, #18]
 8004f06:	8a7b      	ldrh	r3, [r7, #18]
 8004f08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004f0c:	827b      	strh	r3, [r7, #18]
 8004f0e:	8a7b      	ldrh	r3, [r7, #18]
 8004f10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f14:	827b      	strh	r3, [r7, #18]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	8a7b      	ldrh	r3, [r7, #18]
 8004f1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2c:	b29b      	uxth	r3, r3
 8004f2e:	8013      	strh	r3, [r2, #0]
 8004f30:	e234      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	4413      	add	r3, r2
 8004f40:	881b      	ldrh	r3, [r3, #0]
 8004f42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004f46:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f280 80fc 	bge.w	8005148 <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	4413      	add	r3, r2
 8004f5e:	881b      	ldrh	r3, [r3, #0]
 8004f60:	b29a      	uxth	r2, r3
 8004f62:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004f66:	4013      	ands	r3, r2
 8004f68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	461a      	mov	r2, r3
 8004f72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004f7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f82:	b292      	uxth	r2, r2
 8004f84:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004f86:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f9e:	7b1b      	ldrb	r3, [r3, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d125      	bne.n	8004ff0 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	00db      	lsls	r3, r3, #3
 8004fb6:	4413      	add	r3, r2
 8004fb8:	3306      	adds	r3, #6
 8004fba:	005b      	lsls	r3, r3, #1
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6812      	ldr	r2, [r2, #0]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004fc6:	881b      	ldrh	r3, [r3, #0]
 8004fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fcc:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004fd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8092 	beq.w	80050fe <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe0:	6959      	ldr	r1, [r3, #20]
 8004fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe4:	88da      	ldrh	r2, [r3, #6]
 8004fe6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fea:	f005 fef9 	bl	800ade0 <USB_ReadPMA>
 8004fee:	e086      	b.n	80050fe <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff2:	78db      	ldrb	r3, [r3, #3]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d10a      	bne.n	800500e <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004ff8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f9d9 	bl	80053b8 <HAL_PCD_EP_DB_Receive>
 8005006:	4603      	mov	r3, r0
 8005008:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800500c:	e077      	b.n	80050fe <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005016:	781b      	ldrb	r3, [r3, #0]
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	881b      	ldrh	r3, [r3, #0]
 800501e:	b29b      	uxth	r3, r3
 8005020:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	441a      	add	r2, r3
 800503a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800503e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005042:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005046:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800504a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800504e:	b29b      	uxth	r3, r3
 8005050:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d024      	beq.n	80050b6 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005074:	b29b      	uxth	r3, r3
 8005076:	461a      	mov	r2, r3
 8005078:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	00db      	lsls	r3, r3, #3
 800507e:	4413      	add	r3, r2
 8005080:	3302      	adds	r3, #2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	4413      	add	r3, r2
 800508a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005094:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005098:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800509c:	2b00      	cmp	r3, #0
 800509e:	d02e      	beq.n	80050fe <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6818      	ldr	r0, [r3, #0]
 80050a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a6:	6959      	ldr	r1, [r3, #20]
 80050a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050aa:	891a      	ldrh	r2, [r3, #8]
 80050ac:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050b0:	f005 fe96 	bl	800ade0 <USB_ReadPMA>
 80050b4:	e023      	b.n	80050fe <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050be:	b29b      	uxth	r3, r3
 80050c0:	461a      	mov	r2, r3
 80050c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	4413      	add	r3, r2
 80050ca:	3306      	adds	r3, #6
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050de:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80050e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f0:	6959      	ldr	r1, [r3, #20]
 80050f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050f4:	895a      	ldrh	r2, [r3, #10]
 80050f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80050fa:	f005 fe71 	bl	800ade0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80050fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005100:	69da      	ldr	r2, [r3, #28]
 8005102:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005106:	441a      	add	r2, r3
 8005108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800510c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005114:	441a      	add	r2, r3
 8005116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005118:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800511a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d005      	beq.n	800512e <PCD_EP_ISR_Handler+0x516>
 8005122:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	429a      	cmp	r2, r3
 800512c:	d206      	bcs.n	800513c <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800512e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	4619      	mov	r1, r3
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f007 fc0a 	bl	800c94e <HAL_PCD_DataOutStageCallback>
 800513a:	e005      	b.n	8005148 <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005142:	4618      	mov	r0, r3
 8005144:	f004 f92c 	bl	80093a0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005148:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800514c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005150:	2b00      	cmp	r3, #0
 8005152:	f000 8123 	beq.w	800539c <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8005156:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	00db      	lsls	r3, r3, #3
 8005162:	3310      	adds	r3, #16
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	4413      	add	r3, r2
 8005168:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	461a      	mov	r2, r3
 8005170:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	b29b      	uxth	r3, r3
 800517c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	441a      	add	r2, r3
 8005196:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800519a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800519e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	78db      	ldrb	r3, [r3, #3]
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	f040 80a2 	bne.w	80052f4 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80051b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b2:	2200      	movs	r2, #0
 80051b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80051b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b8:	7b1b      	ldrb	r3, [r3, #12]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f000 8093 	beq.w	80052e6 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80051c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d046      	beq.n	800525a <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ce:	785b      	ldrb	r3, [r3, #1]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d126      	bne.n	8005222 <PCD_EP_ISR_Handler+0x60a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	627b      	str	r3, [r7, #36]	; 0x24
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e8:	4413      	add	r3, r2
 80051ea:	627b      	str	r3, [r7, #36]	; 0x24
 80051ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	011a      	lsls	r2, r3, #4
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	4413      	add	r3, r2
 80051f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051fa:	623b      	str	r3, [r7, #32]
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	881b      	ldrh	r3, [r3, #0]
 8005200:	b29b      	uxth	r3, r3
 8005202:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005206:	b29a      	uxth	r2, r3
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	801a      	strh	r2, [r3, #0]
 800520c:	6a3b      	ldr	r3, [r7, #32]
 800520e:	881b      	ldrh	r3, [r3, #0]
 8005210:	b29b      	uxth	r3, r3
 8005212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800521a:	b29a      	uxth	r2, r3
 800521c:	6a3b      	ldr	r3, [r7, #32]
 800521e:	801a      	strh	r2, [r3, #0]
 8005220:	e061      	b.n	80052e6 <PCD_EP_ISR_Handler+0x6ce>
 8005222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005224:	785b      	ldrb	r3, [r3, #1]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d15d      	bne.n	80052e6 <PCD_EP_ISR_Handler+0x6ce>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005238:	b29b      	uxth	r3, r3
 800523a:	461a      	mov	r2, r3
 800523c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523e:	4413      	add	r3, r2
 8005240:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524a:	4413      	add	r3, r2
 800524c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005250:	62bb      	str	r3, [r7, #40]	; 0x28
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	2200      	movs	r2, #0
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e045      	b.n	80052e6 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005262:	785b      	ldrb	r3, [r3, #1]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d126      	bne.n	80052b6 <PCD_EP_ISR_Handler+0x69e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	637b      	str	r3, [r7, #52]	; 0x34
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005276:	b29b      	uxth	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	4413      	add	r3, r2
 800527e:	637b      	str	r3, [r7, #52]	; 0x34
 8005280:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	011a      	lsls	r2, r3, #4
 8005286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005288:	4413      	add	r3, r2
 800528a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800528e:	633b      	str	r3, [r7, #48]	; 0x30
 8005290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005292:	881b      	ldrh	r3, [r3, #0]
 8005294:	b29b      	uxth	r3, r3
 8005296:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800529a:	b29a      	uxth	r2, r3
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	801a      	strh	r2, [r3, #0]
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	881b      	ldrh	r3, [r3, #0]
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ae:	b29a      	uxth	r2, r3
 80052b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b2:	801a      	strh	r2, [r3, #0]
 80052b4:	e017      	b.n	80052e6 <PCD_EP_ISR_Handler+0x6ce>
 80052b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b8:	785b      	ldrb	r3, [r3, #1]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d113      	bne.n	80052e6 <PCD_EP_ISR_Handler+0x6ce>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	461a      	mov	r2, r3
 80052ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052cc:	4413      	add	r3, r2
 80052ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	011a      	lsls	r2, r3, #4
 80052d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052d8:	4413      	add	r3, r2
 80052da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80052de:	63bb      	str	r3, [r7, #56]	; 0x38
 80052e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e2:	2200      	movs	r2, #0
 80052e4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80052e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e8:	781b      	ldrb	r3, [r3, #0]
 80052ea:	4619      	mov	r1, r3
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f007 fb49 	bl	800c984 <HAL_PCD_DataInStageCallback>
 80052f2:	e053      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80052f4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80052f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d146      	bne.n	800538e <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005308:	b29b      	uxth	r3, r3
 800530a:	461a      	mov	r2, r3
 800530c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	3302      	adds	r3, #2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	687a      	ldr	r2, [r7, #4]
 800531a:	6812      	ldr	r2, [r2, #0]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005328:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800532c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005334:	429a      	cmp	r2, r3
 8005336:	d907      	bls.n	8005348 <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8005338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800533a:	699a      	ldr	r2, [r3, #24]
 800533c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005340:	1ad2      	subs	r2, r2, r3
 8005342:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005344:	619a      	str	r2, [r3, #24]
 8005346:	e002      	b.n	800534e <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8005348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534a:	2200      	movs	r2, #0
 800534c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800534e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f007 fb11 	bl	800c984 <HAL_PCD_DataInStageCallback>
 8005362:	e01b      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005364:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005366:	695a      	ldr	r2, [r3, #20]
 8005368:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800536c:	441a      	add	r2, r3
 800536e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005370:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005374:	69da      	ldr	r2, [r3, #28]
 8005376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800537a:	441a      	add	r2, r3
 800537c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005386:	4618      	mov	r0, r3
 8005388:	f004 f80a 	bl	80093a0 <USB_EPStartXfer>
 800538c:	e006      	b.n	800539c <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800538e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005392:	461a      	mov	r2, r3
 8005394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 f91b 	bl	80055d2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	b21b      	sxth	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f6ff ac3a 	blt.w	8004c22 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3758      	adds	r7, #88	; 0x58
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b088      	sub	sp, #32
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	4613      	mov	r3, r2
 80053c4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80053c6:	88fb      	ldrh	r3, [r7, #6]
 80053c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d07e      	beq.n	80054ce <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d8:	b29b      	uxth	r3, r3
 80053da:	461a      	mov	r2, r3
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	00db      	lsls	r3, r3, #3
 80053e2:	4413      	add	r3, r2
 80053e4:	3302      	adds	r3, #2
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	6812      	ldr	r2, [r2, #0]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053f8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	8b7b      	ldrh	r3, [r7, #26]
 8005400:	429a      	cmp	r2, r3
 8005402:	d306      	bcc.n	8005412 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	699a      	ldr	r2, [r3, #24]
 8005408:	8b7b      	ldrh	r3, [r7, #26]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	619a      	str	r2, [r3, #24]
 8005410:	e002      	b.n	8005418 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	2200      	movs	r2, #0
 8005416:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	699b      	ldr	r3, [r3, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d123      	bne.n	8005468 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	461a      	mov	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29b      	uxth	r3, r3
 8005432:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800543a:	833b      	strh	r3, [r7, #24]
 800543c:	8b3b      	ldrh	r3, [r7, #24]
 800543e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005442:	833b      	strh	r3, [r7, #24]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	461a      	mov	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	441a      	add	r2, r3
 8005452:	8b3b      	ldrh	r3, [r7, #24]
 8005454:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005458:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800545c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005464:	b29b      	uxth	r3, r3
 8005466:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005468:	88fb      	ldrh	r3, [r7, #6]
 800546a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d01f      	beq.n	80054b2 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	4413      	add	r3, r2
 8005480:	881b      	ldrh	r3, [r3, #0]
 8005482:	b29b      	uxth	r3, r3
 8005484:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005488:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548c:	82fb      	strh	r3, [r7, #22]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	441a      	add	r2, r3
 800549c:	8afb      	ldrh	r3, [r7, #22]
 800549e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054aa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80054b2:	8b7b      	ldrh	r3, [r7, #26]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 8087 	beq.w	80055c8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	6959      	ldr	r1, [r3, #20]
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	891a      	ldrh	r2, [r3, #8]
 80054c6:	8b7b      	ldrh	r3, [r7, #26]
 80054c8:	f005 fc8a 	bl	800ade0 <USB_ReadPMA>
 80054cc:	e07c      	b.n	80055c8 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4413      	add	r3, r2
 80054e2:	3306      	adds	r3, #6
 80054e4:	005b      	lsls	r3, r3, #1
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	6812      	ldr	r2, [r2, #0]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054f0:	881b      	ldrh	r3, [r3, #0]
 80054f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054f6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	699a      	ldr	r2, [r3, #24]
 80054fc:	8b7b      	ldrh	r3, [r7, #26]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d306      	bcc.n	8005510 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	699a      	ldr	r2, [r3, #24]
 8005506:	8b7b      	ldrh	r3, [r7, #26]
 8005508:	1ad2      	subs	r2, r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	619a      	str	r2, [r3, #24]
 800550e:	e002      	b.n	8005516 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d123      	bne.n	8005566 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	b29b      	uxth	r3, r3
 8005530:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005538:	83fb      	strh	r3, [r7, #30]
 800553a:	8bfb      	ldrh	r3, [r7, #30]
 800553c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005540:	83fb      	strh	r3, [r7, #30]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	441a      	add	r2, r3
 8005550:	8bfb      	ldrh	r3, [r7, #30]
 8005552:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005556:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800555a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800555e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005562:	b29b      	uxth	r3, r3
 8005564:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556c:	2b00      	cmp	r3, #0
 800556e:	d11f      	bne.n	80055b0 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	881b      	ldrh	r3, [r3, #0]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	83bb      	strh	r3, [r7, #28]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	441a      	add	r2, r3
 800559a:	8bbb      	ldrh	r3, [r7, #28]
 800559c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80055a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80055a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80055a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80055b0:	8b7b      	ldrh	r3, [r7, #26]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6818      	ldr	r0, [r3, #0]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	895a      	ldrh	r2, [r3, #10]
 80055c2:	8b7b      	ldrh	r3, [r7, #26]
 80055c4:	f005 fc0c 	bl	800ade0 <USB_ReadPMA>
    }
  }

  return count;
 80055c8:	8b7b      	ldrh	r3, [r7, #26]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b0a4      	sub	sp, #144	; 0x90
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	4613      	mov	r3, r2
 80055de:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 81dd 	beq.w	80059a6 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	461a      	mov	r2, r3
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	781b      	ldrb	r3, [r3, #0]
 80055fc:	00db      	lsls	r3, r3, #3
 80055fe:	4413      	add	r3, r2
 8005600:	3302      	adds	r3, #2
 8005602:	005b      	lsls	r3, r3, #1
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	4413      	add	r3, r2
 800560a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800560e:	881b      	ldrh	r3, [r3, #0]
 8005610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005614:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005620:	429a      	cmp	r2, r3
 8005622:	d907      	bls.n	8005634 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	699a      	ldr	r2, [r3, #24]
 8005628:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800562c:	1ad2      	subs	r2, r2, r3
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	619a      	str	r2, [r3, #24]
 8005632:	e002      	b.n	800563a <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2200      	movs	r2, #0
 8005638:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 80b9 	bne.w	80057b6 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	785b      	ldrb	r3, [r3, #1]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d126      	bne.n	800569a <HAL_PCD_EP_DB_Transmit+0xc8>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800565a:	b29b      	uxth	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	4413      	add	r3, r2
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	011a      	lsls	r2, r3, #4
 800566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566c:	4413      	add	r3, r2
 800566e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005672:	62bb      	str	r3, [r7, #40]	; 0x28
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29b      	uxth	r3, r3
 800567a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800567e:	b29a      	uxth	r2, r3
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	801a      	strh	r2, [r3, #0]
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	b29b      	uxth	r3, r3
 800568a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800568e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005692:	b29a      	uxth	r2, r3
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	801a      	strh	r2, [r3, #0]
 8005698:	e01a      	b.n	80056d0 <HAL_PCD_EP_DB_Transmit+0xfe>
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d116      	bne.n	80056d0 <HAL_PCD_EP_DB_Transmit+0xfe>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b6:	4413      	add	r3, r2
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	011a      	lsls	r2, r3, #4
 80056c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c2:	4413      	add	r3, r2
 80056c4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056c8:	633b      	str	r3, [r7, #48]	; 0x30
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	2200      	movs	r2, #0
 80056ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	785b      	ldrb	r3, [r3, #1]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d126      	bne.n	800572c <HAL_PCD_EP_DB_Transmit+0x15a>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	61fb      	str	r3, [r7, #28]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	4413      	add	r3, r2
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	011a      	lsls	r2, r3, #4
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	4413      	add	r3, r2
 8005700:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	b29b      	uxth	r3, r3
 800570c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005710:	b29a      	uxth	r2, r3
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	801a      	strh	r2, [r3, #0]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	881b      	ldrh	r3, [r3, #0]
 800571a:	b29b      	uxth	r3, r3
 800571c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005720:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005724:	b29a      	uxth	r2, r3
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	801a      	strh	r2, [r3, #0]
 800572a:	e017      	b.n	800575c <HAL_PCD_EP_DB_Transmit+0x18a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	785b      	ldrb	r3, [r3, #1]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d113      	bne.n	800575c <HAL_PCD_EP_DB_Transmit+0x18a>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573c:	b29b      	uxth	r3, r3
 800573e:	461a      	mov	r2, r3
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	4413      	add	r3, r2
 8005744:	627b      	str	r3, [r7, #36]	; 0x24
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	011a      	lsls	r2, r3, #4
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	4413      	add	r3, r2
 8005750:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005754:	623b      	str	r3, [r7, #32]
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	2200      	movs	r2, #0
 800575a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4619      	mov	r1, r3
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f007 f90e 	bl	800c984 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 82fc 	beq.w	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	461a      	mov	r2, r3
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	881b      	ldrh	r3, [r3, #0]
 8005784:	b29b      	uxth	r3, r3
 8005786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	82fb      	strh	r3, [r7, #22]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	461a      	mov	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	8afb      	ldrh	r3, [r7, #22]
 80057a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	8013      	strh	r3, [r2, #0]
 80057b4:	e2da      	b.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80057b6:	88fb      	ldrh	r3, [r7, #6]
 80057b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d021      	beq.n	8005804 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	461a      	mov	r2, r3
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	009b      	lsls	r3, r3, #2
 80057cc:	4413      	add	r3, r2
 80057ce:	881b      	ldrh	r3, [r3, #0]
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	441a      	add	r2, r3
 80057ec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80057f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005800:	b29b      	uxth	r3, r3
 8005802:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800580a:	2b01      	cmp	r3, #1
 800580c:	f040 82ae 	bne.w	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	695a      	ldr	r2, [r3, #20]
 8005814:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005818:	441a      	add	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005826:	441a      	add	r2, r3
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6a1a      	ldr	r2, [r3, #32]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	429a      	cmp	r2, r3
 8005836:	d30b      	bcc.n	8005850 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005848:	1ad2      	subs	r2, r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	621a      	str	r2, [r3, #32]
 800584e:	e017      	b.n	8005880 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	6a1b      	ldr	r3, [r3, #32]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d108      	bne.n	800586a <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005858:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800585c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005868:	e00a      	b.n	8005880 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	785b      	ldrb	r3, [r3, #1]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d165      	bne.n	8005954 <HAL_PCD_EP_DB_Transmit+0x382>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005896:	b29b      	uxth	r3, r3
 8005898:	461a      	mov	r2, r3
 800589a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589c:	4413      	add	r3, r2
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	011a      	lsls	r2, r3, #4
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	4413      	add	r3, r2
 80058aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	801a      	strh	r2, [r3, #0]
 80058c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c4:	2b3e      	cmp	r3, #62	; 0x3e
 80058c6:	d91d      	bls.n	8005904 <HAL_PCD_EP_DB_Transmit+0x332>
 80058c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80058d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058d4:	f003 031f 	and.w	r3, r3, #31
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d102      	bne.n	80058e2 <HAL_PCD_EP_DB_Transmit+0x310>
 80058dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058de:	3b01      	subs	r3, #1
 80058e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e4:	881b      	ldrh	r3, [r3, #0]
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	029b      	lsls	r3, r3, #10
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4313      	orrs	r3, r2
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058fc:	b29a      	uxth	r2, r3
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	801a      	strh	r2, [r3, #0]
 8005902:	e044      	b.n	800598e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005904:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10a      	bne.n	8005922 <HAL_PCD_EP_DB_Transmit+0x350>
 800590c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	b29b      	uxth	r3, r3
 8005912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800591a:	b29a      	uxth	r2, r3
 800591c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800591e:	801a      	strh	r2, [r3, #0]
 8005920:	e035      	b.n	800598e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005922:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005926:	085b      	lsrs	r3, r3, #1
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
 800592a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800592e:	f003 0301 	and.w	r3, r3, #1
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_PCD_EP_DB_Transmit+0x36a>
 8005936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005938:	3301      	adds	r3, #1
 800593a:	64bb      	str	r3, [r7, #72]	; 0x48
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	881b      	ldrh	r3, [r3, #0]
 8005940:	b29a      	uxth	r2, r3
 8005942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005944:	b29b      	uxth	r3, r3
 8005946:	029b      	lsls	r3, r3, #10
 8005948:	b29b      	uxth	r3, r3
 800594a:	4313      	orrs	r3, r2
 800594c:	b29a      	uxth	r2, r3
 800594e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005950:	801a      	strh	r2, [r3, #0]
 8005952:	e01c      	b.n	800598e <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	785b      	ldrb	r3, [r3, #1]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d118      	bne.n	800598e <HAL_PCD_EP_DB_Transmit+0x3bc>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	647b      	str	r3, [r7, #68]	; 0x44
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596a:	b29b      	uxth	r3, r3
 800596c:	461a      	mov	r2, r3
 800596e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005970:	4413      	add	r3, r2
 8005972:	647b      	str	r3, [r7, #68]	; 0x44
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	011a      	lsls	r2, r3, #4
 800597a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800597c:	4413      	add	r3, r2
 800597e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005982:	643b      	str	r3, [r7, #64]	; 0x40
 8005984:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005988:	b29a      	uxth	r2, r3
 800598a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6959      	ldr	r1, [r3, #20]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	891a      	ldrh	r2, [r3, #8]
 800599a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f005 f9d9 	bl	800ad56 <USB_WritePMA>
 80059a4:	e1e2      	b.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	461a      	mov	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	00db      	lsls	r3, r3, #3
 80059b8:	4413      	add	r3, r2
 80059ba:	3306      	adds	r3, #6
 80059bc:	005b      	lsls	r3, r3, #1
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c8:	881b      	ldrh	r3, [r3, #0]
 80059ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	699a      	ldr	r2, [r3, #24]
 80059d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059da:	429a      	cmp	r2, r3
 80059dc:	d307      	bcc.n	80059ee <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	699a      	ldr	r2, [r3, #24]
 80059e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	619a      	str	r2, [r3, #24]
 80059ec:	e002      	b.n	80059f4 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	2200      	movs	r2, #0
 80059f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 80c0 	bne.w	8005b7e <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	785b      	ldrb	r3, [r3, #1]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d126      	bne.n	8005a54 <HAL_PCD_EP_DB_Transmit+0x482>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	461a      	mov	r2, r3
 8005a18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a1a:	4413      	add	r3, r2
 8005a1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	011a      	lsls	r2, r3, #4
 8005a24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a26:	4413      	add	r3, r2
 8005a28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29b      	uxth	r3, r3
 8005a34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a40:	881b      	ldrh	r3, [r3, #0]
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a4c:	b29a      	uxth	r2, r3
 8005a4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a50:	801a      	strh	r2, [r3, #0]
 8005a52:	e01a      	b.n	8005a8a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	785b      	ldrb	r3, [r3, #1]
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d116      	bne.n	8005a8a <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	667b      	str	r3, [r7, #100]	; 0x64
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a70:	4413      	add	r3, r2
 8005a72:	667b      	str	r3, [r7, #100]	; 0x64
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	011a      	lsls	r2, r3, #4
 8005a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a82:	663b      	str	r3, [r7, #96]	; 0x60
 8005a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a86:	2200      	movs	r2, #0
 8005a88:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	677b      	str	r3, [r7, #116]	; 0x74
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	785b      	ldrb	r3, [r3, #1]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d12b      	bne.n	8005af0 <HAL_PCD_EP_DB_Transmit+0x51e>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005aac:	4413      	add	r3, r2
 8005aae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	781b      	ldrb	r3, [r3, #0]
 8005ab4:	011a      	lsls	r2, r3, #4
 8005ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ab8:	4413      	add	r3, r2
 8005aba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005abe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ac2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ad4:	801a      	strh	r2, [r3, #0]
 8005ad6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005aec:	801a      	strh	r2, [r3, #0]
 8005aee:	e017      	b.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	785b      	ldrb	r3, [r3, #1]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d113      	bne.n	8005b20 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b06:	4413      	add	r3, r2
 8005b08:	677b      	str	r3, [r7, #116]	; 0x74
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	781b      	ldrb	r3, [r3, #0]
 8005b0e:	011a      	lsls	r2, r3, #4
 8005b10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b12:	4413      	add	r3, r2
 8005b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b18:	673b      	str	r3, [r7, #112]	; 0x70
 8005b1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	4619      	mov	r1, r3
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f006 ff2c 	bl	800c984 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b2c:	88fb      	ldrh	r3, [r7, #6]
 8005b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 811a 	bne.w	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b52:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	441a      	add	r2, r3
 8005b64:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005b68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	8013      	strh	r3, [r2, #0]
 8005b7c:	e0f6      	b.n	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005b7e:	88fb      	ldrh	r3, [r7, #6]
 8005b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d121      	bne.n	8005bcc <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	881b      	ldrh	r3, [r3, #0]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	441a      	add	r2, r3
 8005bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005bb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	f040 80ca 	bne.w	8005d6c <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005be0:	441a      	add	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005bee:	441a      	add	r2, r3
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	6a1a      	ldr	r2, [r3, #32]
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d30b      	bcc.n	8005c18 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	6a1a      	ldr	r2, [r3, #32]
 8005c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c10:	1ad2      	subs	r2, r2, r3
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	621a      	str	r2, [r3, #32]
 8005c16:	e017      	b.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6a1b      	ldr	r3, [r3, #32]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005c20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005c30:	e00a      	b.n	8005c48 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	657b      	str	r3, [r7, #84]	; 0x54
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d165      	bne.n	8005d22 <HAL_PCD_EP_DB_Transmit+0x750>
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	461a      	mov	r2, r3
 8005c68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c6a:	4413      	add	r3, r2
 8005c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	011a      	lsls	r2, r3, #4
 8005c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c8c:	801a      	strh	r2, [r3, #0]
 8005c8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c92:	2b3e      	cmp	r3, #62	; 0x3e
 8005c94:	d91d      	bls.n	8005cd2 <HAL_PCD_EP_DB_Transmit+0x700>
 8005c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c9a:	095b      	lsrs	r3, r3, #5
 8005c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ca2:	f003 031f 	and.w	r3, r3, #31
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <HAL_PCD_EP_DB_Transmit+0x6de>
 8005caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cac:	3b01      	subs	r3, #1
 8005cae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	029b      	lsls	r3, r3, #10
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cce:	801a      	strh	r2, [r3, #0]
 8005cd0:	e041      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x784>
 8005cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_PCD_EP_DB_Transmit+0x71e>
 8005cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cdc:	881b      	ldrh	r3, [r3, #0]
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ce4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cec:	801a      	strh	r2, [r3, #0]
 8005cee:	e032      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x784>
 8005cf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_PCD_EP_DB_Transmit+0x738>
 8005d04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d06:	3301      	adds	r3, #1
 8005d08:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e019      	b.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x784>
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	785b      	ldrb	r3, [r3, #1]
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d115      	bne.n	8005d56 <HAL_PCD_EP_DB_Transmit+0x784>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d38:	4413      	add	r3, r2
 8005d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	011a      	lsls	r2, r3, #4
 8005d42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d44:	4413      	add	r3, r2
 8005d46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005d4a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d54:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6818      	ldr	r0, [r3, #0]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	6959      	ldr	r1, [r3, #20]
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	895a      	ldrh	r2, [r3, #10]
 8005d62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	f004 fff5 	bl	800ad56 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d86:	82bb      	strh	r3, [r7, #20]
 8005d88:	8abb      	ldrh	r3, [r7, #20]
 8005d8a:	f083 0310 	eor.w	r3, r3, #16
 8005d8e:	82bb      	strh	r3, [r7, #20]
 8005d90:	8abb      	ldrh	r3, [r7, #20]
 8005d92:	f083 0320 	eor.w	r3, r3, #32
 8005d96:	82bb      	strh	r3, [r7, #20]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	009b      	lsls	r3, r3, #2
 8005da4:	441a      	add	r2, r3
 8005da6:	8abb      	ldrh	r3, [r7, #20]
 8005da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3790      	adds	r7, #144	; 0x90
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
	...

08005dc8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005dcc:	4b03      	ldr	r3, [pc, #12]	; (8005ddc <HAL_PWR_EnableBkUpAccess+0x14>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	601a      	str	r2, [r3, #0]
}
 8005dd2:	bf00      	nop
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bc80      	pop	{r7}
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	420e0020 	.word	0x420e0020

08005de0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b086      	sub	sp, #24
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e272      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8087 	beq.w	8005f0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e00:	4b92      	ldr	r3, [pc, #584]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f003 030c 	and.w	r3, r3, #12
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d00c      	beq.n	8005e26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e0c:	4b8f      	ldr	r3, [pc, #572]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f003 030c 	and.w	r3, r3, #12
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d112      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
 8005e18:	4b8c      	ldr	r3, [pc, #560]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e24:	d10b      	bne.n	8005e3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e26:	4b89      	ldr	r3, [pc, #548]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d06c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x12c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d168      	bne.n	8005f0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e24c      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d106      	bne.n	8005e56 <HAL_RCC_OscConfig+0x76>
 8005e48:	4b80      	ldr	r3, [pc, #512]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a7f      	ldr	r2, [pc, #508]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	e02e      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10c      	bne.n	8005e78 <HAL_RCC_OscConfig+0x98>
 8005e5e:	4b7b      	ldr	r3, [pc, #492]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a7a      	ldr	r2, [pc, #488]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	4b78      	ldr	r3, [pc, #480]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a77      	ldr	r2, [pc, #476]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	e01d      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e80:	d10c      	bne.n	8005e9c <HAL_RCC_OscConfig+0xbc>
 8005e82:	4b72      	ldr	r3, [pc, #456]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a71      	ldr	r2, [pc, #452]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e8c:	6013      	str	r3, [r2, #0]
 8005e8e:	4b6f      	ldr	r3, [pc, #444]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a6e      	ldr	r2, [pc, #440]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e98:	6013      	str	r3, [r2, #0]
 8005e9a:	e00b      	b.n	8005eb4 <HAL_RCC_OscConfig+0xd4>
 8005e9c:	4b6b      	ldr	r3, [pc, #428]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6a      	ldr	r2, [pc, #424]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	4b68      	ldr	r3, [pc, #416]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a67      	ldr	r2, [pc, #412]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005eb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d013      	beq.n	8005ee4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ebc:	f7fc fb74 	bl	80025a8 <HAL_GetTick>
 8005ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ec4:	f7fc fb70 	bl	80025a8 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e200      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed6:	4b5d      	ldr	r3, [pc, #372]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0xe4>
 8005ee2:	e014      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fc fb60 	bl	80025a8 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eec:	f7fc fb5c 	bl	80025a8 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b64      	cmp	r3, #100	; 0x64
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e1ec      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005efe:	4b53      	ldr	r3, [pc, #332]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x10c>
 8005f0a:	e000      	b.n	8005f0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d063      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f1a:	4b4c      	ldr	r3, [pc, #304]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	f003 030c 	and.w	r3, r3, #12
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00b      	beq.n	8005f3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f26:	4b49      	ldr	r3, [pc, #292]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f003 030c 	and.w	r3, r3, #12
 8005f2e:	2b08      	cmp	r3, #8
 8005f30:	d11c      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
 8005f32:	4b46      	ldr	r3, [pc, #280]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d116      	bne.n	8005f6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f3e:	4b43      	ldr	r3, [pc, #268]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0302 	and.w	r3, r3, #2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d001      	beq.n	8005f56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e1c0      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f56:	4b3d      	ldr	r3, [pc, #244]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	695b      	ldr	r3, [r3, #20]
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	4939      	ldr	r1, [pc, #228]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f6a:	e03a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCC_OscConfig+0x270>)
 8005f76:	2201      	movs	r2, #1
 8005f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7a:	f7fc fb15 	bl	80025a8 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f80:	e008      	b.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f82:	f7fc fb11 	bl	80025a8 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d901      	bls.n	8005f94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005f90:	2303      	movs	r3, #3
 8005f92:	e1a1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f94:	4b2d      	ldr	r3, [pc, #180]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0302 	and.w	r3, r3, #2
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d0f0      	beq.n	8005f82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa0:	4b2a      	ldr	r3, [pc, #168]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	4927      	ldr	r1, [pc, #156]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	600b      	str	r3, [r1, #0]
 8005fb4:	e015      	b.n	8005fe2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fb6:	4b26      	ldr	r3, [pc, #152]	; (8006050 <HAL_RCC_OscConfig+0x270>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fbc:	f7fc faf4 	bl	80025a8 <HAL_GetTick>
 8005fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc2:	e008      	b.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fc4:	f7fc faf0 	bl	80025a8 <HAL_GetTick>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	1ad3      	subs	r3, r2, r3
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d901      	bls.n	8005fd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e180      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fd6:	4b1d      	ldr	r3, [pc, #116]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d1f0      	bne.n	8005fc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d03a      	beq.n	8006064 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d019      	beq.n	800602a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff6:	4b17      	ldr	r3, [pc, #92]	; (8006054 <HAL_RCC_OscConfig+0x274>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ffc:	f7fc fad4 	bl	80025a8 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7fc fad0 	bl	80025a8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e160      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006016:	4b0d      	ldr	r3, [pc, #52]	; (800604c <HAL_RCC_OscConfig+0x26c>)
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006022:	2001      	movs	r0, #1
 8006024:	f000 face 	bl	80065c4 <RCC_Delay>
 8006028:	e01c      	b.n	8006064 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800602a:	4b0a      	ldr	r3, [pc, #40]	; (8006054 <HAL_RCC_OscConfig+0x274>)
 800602c:	2200      	movs	r2, #0
 800602e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006030:	f7fc faba 	bl	80025a8 <HAL_GetTick>
 8006034:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006036:	e00f      	b.n	8006058 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006038:	f7fc fab6 	bl	80025a8 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d908      	bls.n	8006058 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e146      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 800604a:	bf00      	nop
 800604c:	40021000 	.word	0x40021000
 8006050:	42420000 	.word	0x42420000
 8006054:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006058:	4b92      	ldr	r3, [pc, #584]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800605a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605c:	f003 0302 	and.w	r3, r3, #2
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e9      	bne.n	8006038 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80a6 	beq.w	80061be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006072:	2300      	movs	r3, #0
 8006074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006076:	4b8b      	ldr	r3, [pc, #556]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006082:	4b88      	ldr	r3, [pc, #544]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006084:	69db      	ldr	r3, [r3, #28]
 8006086:	4a87      	ldr	r2, [pc, #540]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608c:	61d3      	str	r3, [r2, #28]
 800608e:	4b85      	ldr	r3, [pc, #532]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006090:	69db      	ldr	r3, [r3, #28]
 8006092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800609e:	4b82      	ldr	r3, [pc, #520]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d118      	bne.n	80060dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060aa:	4b7f      	ldr	r3, [pc, #508]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a7e      	ldr	r2, [pc, #504]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060b6:	f7fc fa77 	bl	80025a8 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060bc:	e008      	b.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060be:	f7fc fa73 	bl	80025a8 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	2b64      	cmp	r3, #100	; 0x64
 80060ca:	d901      	bls.n	80060d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e103      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060d0:	4b75      	ldr	r3, [pc, #468]	; (80062a8 <HAL_RCC_OscConfig+0x4c8>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d0f0      	beq.n	80060be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d106      	bne.n	80060f2 <HAL_RCC_OscConfig+0x312>
 80060e4:	4b6f      	ldr	r3, [pc, #444]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060e6:	6a1b      	ldr	r3, [r3, #32]
 80060e8:	4a6e      	ldr	r2, [pc, #440]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	f043 0301 	orr.w	r3, r3, #1
 80060ee:	6213      	str	r3, [r2, #32]
 80060f0:	e02d      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10c      	bne.n	8006114 <HAL_RCC_OscConfig+0x334>
 80060fa:	4b6a      	ldr	r3, [pc, #424]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	4a69      	ldr	r2, [pc, #420]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006100:	f023 0301 	bic.w	r3, r3, #1
 8006104:	6213      	str	r3, [r2, #32]
 8006106:	4b67      	ldr	r3, [pc, #412]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	4a66      	ldr	r2, [pc, #408]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800610c:	f023 0304 	bic.w	r3, r3, #4
 8006110:	6213      	str	r3, [r2, #32]
 8006112:	e01c      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	2b05      	cmp	r3, #5
 800611a:	d10c      	bne.n	8006136 <HAL_RCC_OscConfig+0x356>
 800611c:	4b61      	ldr	r3, [pc, #388]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800611e:	6a1b      	ldr	r3, [r3, #32]
 8006120:	4a60      	ldr	r2, [pc, #384]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006122:	f043 0304 	orr.w	r3, r3, #4
 8006126:	6213      	str	r3, [r2, #32]
 8006128:	4b5e      	ldr	r3, [pc, #376]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	4a5d      	ldr	r2, [pc, #372]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800612e:	f043 0301 	orr.w	r3, r3, #1
 8006132:	6213      	str	r3, [r2, #32]
 8006134:	e00b      	b.n	800614e <HAL_RCC_OscConfig+0x36e>
 8006136:	4b5b      	ldr	r3, [pc, #364]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	4a5a      	ldr	r2, [pc, #360]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800613c:	f023 0301 	bic.w	r3, r3, #1
 8006140:	6213      	str	r3, [r2, #32]
 8006142:	4b58      	ldr	r3, [pc, #352]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	4a57      	ldr	r2, [pc, #348]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006148:	f023 0304 	bic.w	r3, r3, #4
 800614c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d015      	beq.n	8006182 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7fc fa27 	bl	80025a8 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800615c:	e00a      	b.n	8006174 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800615e:	f7fc fa23 	bl	80025a8 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0b1      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006174:	4b4b      	ldr	r3, [pc, #300]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	f003 0302 	and.w	r3, r3, #2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ee      	beq.n	800615e <HAL_RCC_OscConfig+0x37e>
 8006180:	e014      	b.n	80061ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006182:	f7fc fa11 	bl	80025a8 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006188:	e00a      	b.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800618a:	f7fc fa0d 	bl	80025a8 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	f241 3288 	movw	r2, #5000	; 0x1388
 8006198:	4293      	cmp	r3, r2
 800619a:	d901      	bls.n	80061a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800619c:	2303      	movs	r3, #3
 800619e:	e09b      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061a0:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061a2:	6a1b      	ldr	r3, [r3, #32]
 80061a4:	f003 0302 	and.w	r3, r3, #2
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ee      	bne.n	800618a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061ac:	7dfb      	ldrb	r3, [r7, #23]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d105      	bne.n	80061be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061b2:	4b3c      	ldr	r3, [pc, #240]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	4a3b      	ldr	r2, [pc, #236]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8087 	beq.w	80062d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80061c8:	4b36      	ldr	r3, [pc, #216]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d061      	beq.n	8006298 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d146      	bne.n	800626a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061dc:	4b33      	ldr	r3, [pc, #204]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e2:	f7fc f9e1 	bl	80025a8 <HAL_GetTick>
 80061e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061e8:	e008      	b.n	80061fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061ea:	f7fc f9dd 	bl	80025a8 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e06d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061fc:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d1f0      	bne.n	80061ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006210:	d108      	bne.n	8006224 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	4921      	ldr	r1, [pc, #132]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006220:	4313      	orrs	r3, r2
 8006222:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006224:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a19      	ldr	r1, [r3, #32]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006234:	430b      	orrs	r3, r1
 8006236:	491b      	ldr	r1, [pc, #108]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 8006238:	4313      	orrs	r3, r2
 800623a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800623c:	4b1b      	ldr	r3, [pc, #108]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800623e:	2201      	movs	r2, #1
 8006240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006242:	f7fc f9b1 	bl	80025a8 <HAL_GetTick>
 8006246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006248:	e008      	b.n	800625c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800624a:	f7fc f9ad 	bl	80025a8 <HAL_GetTick>
 800624e:	4602      	mov	r2, r0
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	2b02      	cmp	r3, #2
 8006256:	d901      	bls.n	800625c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006258:	2303      	movs	r3, #3
 800625a:	e03d      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800625c:	4b11      	ldr	r3, [pc, #68]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d0f0      	beq.n	800624a <HAL_RCC_OscConfig+0x46a>
 8006268:	e035      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626a:	4b10      	ldr	r3, [pc, #64]	; (80062ac <HAL_RCC_OscConfig+0x4cc>)
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006270:	f7fc f99a 	bl	80025a8 <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006278:	f7fc f996 	bl	80025a8 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e026      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_RCC_OscConfig+0x4c4>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x498>
 8006296:	e01e      	b.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	69db      	ldr	r3, [r3, #28]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d107      	bne.n	80062b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	e019      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
 80062a4:	40021000 	.word	0x40021000
 80062a8:	40007000 	.word	0x40007000
 80062ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80062b0:	4b0b      	ldr	r3, [pc, #44]	; (80062e0 <HAL_RCC_OscConfig+0x500>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d106      	bne.n	80062d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d001      	beq.n	80062d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e000      	b.n	80062d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40021000 	.word	0x40021000

080062e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0d0      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b6a      	ldr	r3, [pc, #424]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d910      	bls.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b67      	ldr	r3, [pc, #412]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f023 0207 	bic.w	r2, r3, #7
 800630e:	4965      	ldr	r1, [pc, #404]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	4313      	orrs	r3, r2
 8006314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006316:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0307 	and.w	r3, r3, #7
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	429a      	cmp	r2, r3
 8006322:	d001      	beq.n	8006328 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e0b8      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d020      	beq.n	8006376 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	d005      	beq.n	800634c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006340:	4b59      	ldr	r3, [pc, #356]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	4a58      	ldr	r2, [pc, #352]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006346:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800634a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f003 0308 	and.w	r3, r3, #8
 8006354:	2b00      	cmp	r3, #0
 8006356:	d005      	beq.n	8006364 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006358:	4b53      	ldr	r3, [pc, #332]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4a52      	ldr	r2, [pc, #328]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800635e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006362:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006364:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	494d      	ldr	r1, [pc, #308]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006372:	4313      	orrs	r3, r2
 8006374:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0301 	and.w	r3, r3, #1
 800637e:	2b00      	cmp	r3, #0
 8006380:	d040      	beq.n	8006404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b01      	cmp	r3, #1
 8006388:	d107      	bne.n	800639a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006392:	2b00      	cmp	r3, #0
 8006394:	d115      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e07f      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	4b41      	ldr	r3, [pc, #260]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e073      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	4b3d      	ldr	r3, [pc, #244]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e06b      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4936      	ldr	r1, [pc, #216]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fc f8e8 	bl	80025a8 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fc f8e4 	bl	80025a8 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e053      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b2d      	ldr	r3, [pc, #180]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d210      	bcs.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b24      	ldr	r3, [pc, #144]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f023 0207 	bic.w	r2, r3, #7
 800641a:	4922      	ldr	r1, [pc, #136]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	4313      	orrs	r3, r2
 8006420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006422:	4b20      	ldr	r3, [pc, #128]	; (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0307 	and.w	r3, r3, #7
 800642a:	683a      	ldr	r2, [r7, #0]
 800642c:	429a      	cmp	r2, r3
 800642e:	d001      	beq.n	8006434 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	e032      	b.n	800649a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	d008      	beq.n	8006452 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006440:	4b19      	ldr	r3, [pc, #100]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	4916      	ldr	r1, [pc, #88]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800644e:	4313      	orrs	r3, r2
 8006450:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800645e:	4b12      	ldr	r3, [pc, #72]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	00db      	lsls	r3, r3, #3
 800646c:	490e      	ldr	r1, [pc, #56]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800646e:	4313      	orrs	r3, r2
 8006470:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006472:	f000 f821 	bl	80064b8 <HAL_RCC_GetSysClockFreq>
 8006476:	4602      	mov	r2, r0
 8006478:	4b0b      	ldr	r3, [pc, #44]	; (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	091b      	lsrs	r3, r3, #4
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	490a      	ldr	r1, [pc, #40]	; (80064ac <HAL_RCC_ClockConfig+0x1c8>)
 8006484:	5ccb      	ldrb	r3, [r1, r3]
 8006486:	fa22 f303 	lsr.w	r3, r2, r3
 800648a:	4a09      	ldr	r2, [pc, #36]	; (80064b0 <HAL_RCC_ClockConfig+0x1cc>)
 800648c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800648e:	4b09      	ldr	r3, [pc, #36]	; (80064b4 <HAL_RCC_ClockConfig+0x1d0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f7fc f846 	bl	8002524 <HAL_InitTick>

  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	40022000 	.word	0x40022000
 80064a8:	40021000 	.word	0x40021000
 80064ac:	0800fa20 	.word	0x0800fa20
 80064b0:	20000000 	.word	0x20000000
 80064b4:	20000004 	.word	0x20000004

080064b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
 80064c2:	2300      	movs	r3, #0
 80064c4:	60bb      	str	r3, [r7, #8]
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
 80064ca:	2300      	movs	r3, #0
 80064cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80064d2:	4b1e      	ldr	r3, [pc, #120]	; (800654c <HAL_RCC_GetSysClockFreq+0x94>)
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f003 030c 	and.w	r3, r3, #12
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d002      	beq.n	80064e8 <HAL_RCC_GetSysClockFreq+0x30>
 80064e2:	2b08      	cmp	r3, #8
 80064e4:	d003      	beq.n	80064ee <HAL_RCC_GetSysClockFreq+0x36>
 80064e6:	e027      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 80064ea:	613b      	str	r3, [r7, #16]
      break;
 80064ec:	e027      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	0c9b      	lsrs	r3, r3, #18
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	4a17      	ldr	r2, [pc, #92]	; (8006554 <HAL_RCC_GetSysClockFreq+0x9c>)
 80064f8:	5cd3      	ldrb	r3, [r2, r3]
 80064fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d010      	beq.n	8006528 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006506:	4b11      	ldr	r3, [pc, #68]	; (800654c <HAL_RCC_GetSysClockFreq+0x94>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	0c5b      	lsrs	r3, r3, #17
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	4a11      	ldr	r2, [pc, #68]	; (8006558 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006512:	5cd3      	ldrb	r3, [r2, r3]
 8006514:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 800651a:	fb03 f202 	mul.w	r2, r3, r2
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	fbb2 f3f3 	udiv	r3, r2, r3
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e004      	b.n	8006532 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a0c      	ldr	r2, [pc, #48]	; (800655c <HAL_RCC_GetSysClockFreq+0xa4>)
 800652c:	fb02 f303 	mul.w	r3, r2, r3
 8006530:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	613b      	str	r3, [r7, #16]
      break;
 8006536:	e002      	b.n	800653e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <HAL_RCC_GetSysClockFreq+0x98>)
 800653a:	613b      	str	r3, [r7, #16]
      break;
 800653c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800653e:	693b      	ldr	r3, [r7, #16]
}
 8006540:	4618      	mov	r0, r3
 8006542:	371c      	adds	r7, #28
 8006544:	46bd      	mov	sp, r7
 8006546:	bc80      	pop	{r7}
 8006548:	4770      	bx	lr
 800654a:	bf00      	nop
 800654c:	40021000 	.word	0x40021000
 8006550:	007a1200 	.word	0x007a1200
 8006554:	0800fa4c 	.word	0x0800fa4c
 8006558:	0800fa5c 	.word	0x0800fa5c
 800655c:	003d0900 	.word	0x003d0900

08006560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b02      	ldr	r3, [pc, #8]	; (8006570 <HAL_RCC_GetHCLKFreq+0x10>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	bc80      	pop	{r7}
 800656e:	4770      	bx	lr
 8006570:	20000000 	.word	0x20000000

08006574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006578:	f7ff fff2 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 800657c:	4602      	mov	r2, r0
 800657e:	4b05      	ldr	r3, [pc, #20]	; (8006594 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	0a1b      	lsrs	r3, r3, #8
 8006584:	f003 0307 	and.w	r3, r3, #7
 8006588:	4903      	ldr	r1, [pc, #12]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x24>)
 800658a:	5ccb      	ldrb	r3, [r1, r3]
 800658c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006590:	4618      	mov	r0, r3
 8006592:	bd80      	pop	{r7, pc}
 8006594:	40021000 	.word	0x40021000
 8006598:	0800fa30 	.word	0x0800fa30

0800659c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065a0:	f7ff ffde 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065a4:	4602      	mov	r2, r0
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	0adb      	lsrs	r3, r3, #11
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	4903      	ldr	r1, [pc, #12]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b2:	5ccb      	ldrb	r3, [r1, r3]
 80065b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	bd80      	pop	{r7, pc}
 80065bc:	40021000 	.word	0x40021000
 80065c0:	0800fa30 	.word	0x0800fa30

080065c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <RCC_Delay+0x34>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a0a      	ldr	r2, [pc, #40]	; (80065fc <RCC_Delay+0x38>)
 80065d2:	fba2 2303 	umull	r2, r3, r2, r3
 80065d6:	0a5b      	lsrs	r3, r3, #9
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	fb02 f303 	mul.w	r3, r2, r3
 80065de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80065e0:	bf00      	nop
  }
  while (Delay --);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1e5a      	subs	r2, r3, #1
 80065e6:	60fa      	str	r2, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f9      	bne.n	80065e0 <RCC_Delay+0x1c>
}
 80065ec:	bf00      	nop
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bc80      	pop	{r7}
 80065f6:	4770      	bx	lr
 80065f8:	20000000 	.word	0x20000000
 80065fc:	10624dd3 	.word	0x10624dd3

08006600 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	2300      	movs	r3, #0
 800660e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b00      	cmp	r3, #0
 800661a:	d07d      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800661c:	2300      	movs	r3, #0
 800661e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006620:	4b4f      	ldr	r3, [pc, #316]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10d      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800662c:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800662e:	69db      	ldr	r3, [r3, #28]
 8006630:	4a4b      	ldr	r2, [pc, #300]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006636:	61d3      	str	r3, [r2, #28]
 8006638:	4b49      	ldr	r3, [pc, #292]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663a:	69db      	ldr	r3, [r3, #28]
 800663c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006640:	60bb      	str	r3, [r7, #8]
 8006642:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006644:	2301      	movs	r3, #1
 8006646:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006648:	4b46      	ldr	r3, [pc, #280]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006650:	2b00      	cmp	r3, #0
 8006652:	d118      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006654:	4b43      	ldr	r3, [pc, #268]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a42      	ldr	r2, [pc, #264]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800665a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006660:	f7fb ffa2 	bl	80025a8 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006666:	e008      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006668:	f7fb ff9e 	bl	80025a8 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	2b64      	cmp	r3, #100	; 0x64
 8006674:	d901      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e06d      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667a:	4b3a      	ldr	r3, [pc, #232]	; (8006764 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0f0      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006686:	4b36      	ldr	r3, [pc, #216]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d02e      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d027      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066a4:	4b2e      	ldr	r3, [pc, #184]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066ae:	4b2e      	ldr	r3, [pc, #184]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066b4:	4b2c      	ldr	r3, [pc, #176]	; (8006768 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80066ba:	4a29      	ldr	r2, [pc, #164]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d014      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ca:	f7fb ff6d 	bl	80025a8 <HAL_GetTick>
 80066ce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	e00a      	b.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066d2:	f7fb ff69 	bl	80025a8 <HAL_GetTick>
 80066d6:	4602      	mov	r2, r0
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	1ad3      	subs	r3, r2, r3
 80066dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d901      	bls.n	80066e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	e036      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066e8:	4b1d      	ldr	r3, [pc, #116]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ea:	6a1b      	ldr	r3, [r3, #32]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d0ee      	beq.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066f4:	4b1a      	ldr	r3, [pc, #104]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	4917      	ldr	r1, [pc, #92]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006702:	4313      	orrs	r3, r2
 8006704:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2b01      	cmp	r3, #1
 800670a:	d105      	bne.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670e:	69db      	ldr	r3, [r3, #28]
 8006710:	4a13      	ldr	r2, [pc, #76]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006716:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d008      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006724:	4b0e      	ldr	r3, [pc, #56]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	490b      	ldr	r1, [pc, #44]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006732:	4313      	orrs	r3, r2
 8006734:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006742:	4b07      	ldr	r3, [pc, #28]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006744:	685b      	ldr	r3, [r3, #4]
 8006746:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	4904      	ldr	r1, [pc, #16]	; (8006760 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006750:	4313      	orrs	r3, r2
 8006752:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	40021000 	.word	0x40021000
 8006764:	40007000 	.word	0x40007000
 8006768:	42420440 	.word	0x42420440

0800676c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b088      	sub	sp, #32
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006774:	2300      	movs	r3, #0
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	2300      	movs	r3, #0
 800677a:	61fb      	str	r3, [r7, #28]
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]
 8006784:	2300      	movs	r3, #0
 8006786:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b10      	cmp	r3, #16
 800678c:	d00a      	beq.n	80067a4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b10      	cmp	r3, #16
 8006792:	f200 808a 	bhi.w	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d045      	beq.n	8006828 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2b02      	cmp	r3, #2
 80067a0:	d075      	beq.n	800688e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80067a2:	e082      	b.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80067a4:	4b46      	ldr	r3, [pc, #280]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80067aa:	4b45      	ldr	r3, [pc, #276]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d07b      	beq.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	0c9b      	lsrs	r3, r3, #18
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	4a41      	ldr	r2, [pc, #260]	; (80068c4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80067c0:	5cd3      	ldrb	r3, [r2, r3]
 80067c2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d015      	beq.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80067ce:	4b3c      	ldr	r3, [pc, #240]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	0c5b      	lsrs	r3, r3, #17
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	4a3b      	ldr	r2, [pc, #236]	; (80068c8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80067da:	5cd3      	ldrb	r3, [r2, r3]
 80067dc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00d      	beq.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80067e8:	4a38      	ldr	r2, [pc, #224]	; (80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	61fb      	str	r3, [r7, #28]
 80067f8:	e004      	b.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	4a34      	ldr	r2, [pc, #208]	; (80068d0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8006804:	4b2e      	ldr	r3, [pc, #184]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800680c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006810:	d102      	bne.n	8006818 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	61bb      	str	r3, [r7, #24]
      break;
 8006816:	e04a      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4a2d      	ldr	r2, [pc, #180]	; (80068d4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800681e:	fba2 2303 	umull	r2, r3, r2, r3
 8006822:	085b      	lsrs	r3, r3, #1
 8006824:	61bb      	str	r3, [r7, #24]
      break;
 8006826:	e042      	b.n	80068ae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006838:	d108      	bne.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f003 0302 	and.w	r3, r3, #2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8006844:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e01f      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006852:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006856:	d109      	bne.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8006858:	4b19      	ldr	r3, [pc, #100]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	f003 0302 	and.w	r3, r3, #2
 8006860:	2b00      	cmp	r3, #0
 8006862:	d003      	beq.n	800686c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006864:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006868:	61bb      	str	r3, [r7, #24]
 800686a:	e00f      	b.n	800688c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006872:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006876:	d11c      	bne.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006884:	f24f 4324 	movw	r3, #62500	; 0xf424
 8006888:	61bb      	str	r3, [r7, #24]
      break;
 800688a:	e012      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800688c:	e011      	b.n	80068b2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800688e:	f7ff fe85 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 8006892:	4602      	mov	r2, r0
 8006894:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	0b9b      	lsrs	r3, r3, #14
 800689a:	f003 0303 	and.w	r3, r3, #3
 800689e:	3301      	adds	r3, #1
 80068a0:	005b      	lsls	r3, r3, #1
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	61bb      	str	r3, [r7, #24]
      break;
 80068a8:	e004      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80068aa:	bf00      	nop
 80068ac:	e002      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80068ae:	bf00      	nop
 80068b0:	e000      	b.n	80068b4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80068b2:	bf00      	nop
    }
  }
  return (frequency);
 80068b4:	69bb      	ldr	r3, [r7, #24]
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	40021000 	.word	0x40021000
 80068c4:	0800fa60 	.word	0x0800fa60
 80068c8:	0800fa70 	.word	0x0800fa70
 80068cc:	007a1200 	.word	0x007a1200
 80068d0:	003d0900 	.word	0x003d0900
 80068d4:	aaaaaaab 	.word	0xaaaaaaab

080068d8 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80068e0:	2300      	movs	r3, #0
 80068e2:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e07a      	b.n	80069e4 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	7c5b      	ldrb	r3, [r3, #17]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d105      	bne.n	8006904 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7fb f9ae 	bl	8001c60 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2202      	movs	r2, #2
 8006908:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 f9be 	bl	8006c8c <HAL_RTC_WaitForSynchro>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d004      	beq.n	8006920 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2204      	movs	r2, #4
 800691a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e061      	b.n	80069e4 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa77 	bl	8006e14 <RTC_EnterInitMode>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d004      	beq.n	8006936 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2204      	movs	r2, #4
 8006930:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e056      	b.n	80069e4 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685a      	ldr	r2, [r3, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0207 	bic.w	r2, r2, #7
 8006944:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800694e:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RTC_Init+0x114>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_RTC_Init+0x114>)
 8006954:	f023 0301 	bic.w	r3, r3, #1
 8006958:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 800695a:	4b24      	ldr	r3, [pc, #144]	; (80069ec <HAL_RTC_Init+0x114>)
 800695c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695e:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	4921      	ldr	r1, [pc, #132]	; (80069ec <HAL_RTC_Init+0x114>)
 8006968:	4313      	orrs	r3, r2
 800696a:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006974:	d003      	beq.n	800697e <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	60fb      	str	r3, [r7, #12]
 800697c:	e00e      	b.n	800699c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800697e:	2001      	movs	r0, #1
 8006980:	f7ff fef4 	bl	800676c <HAL_RCCEx_GetPeriphCLKFreq>
 8006984:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d104      	bne.n	8006996 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2204      	movs	r2, #4
 8006990:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e026      	b.n	80069e4 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3b01      	subs	r3, #1
 800699a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	0c1a      	lsrs	r2, r3, #16
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f002 020f 	and.w	r2, r2, #15
 80069a8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	b292      	uxth	r2, r2
 80069b2:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fa55 	bl	8006e64 <RTC_ExitInitMode>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2204      	movs	r2, #4
 80069c4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e00c      	b.n	80069e4 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80069e2:	2300      	movs	r3, #0
  }
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	40006c00 	.word	0x40006c00

080069f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80069f0:	b590      	push	{r4, r7, lr}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	2300      	movs	r3, #0
 8006a02:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d002      	beq.n	8006a10 <HAL_RTC_SetTime+0x20>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e080      	b.n	8006b16 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	7c1b      	ldrb	r3, [r3, #16]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d101      	bne.n	8006a20 <HAL_RTC_SetTime+0x30>
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	e07a      	b.n	8006b16 <HAL_RTC_SetTime+0x126>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2201      	movs	r2, #1
 8006a24:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2202      	movs	r2, #2
 8006a2a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d113      	bne.n	8006a5a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006a3c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	785b      	ldrb	r3, [r3, #1]
 8006a44:	4619      	mov	r1, r3
 8006a46:	460b      	mov	r3, r1
 8006a48:	011b      	lsls	r3, r3, #4
 8006a4a:	1a5b      	subs	r3, r3, r1
 8006a4c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006a4e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8006a54:	4413      	add	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
 8006a58:	e01e      	b.n	8006a98 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fa28 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006a64:	4603      	mov	r3, r0
 8006a66:	461a      	mov	r2, r3
 8006a68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006a6c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	785b      	ldrb	r3, [r3, #1]
 8006a74:	4618      	mov	r0, r3
 8006a76:	f000 fa1d 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	461a      	mov	r2, r3
 8006a7e:	4613      	mov	r3, r2
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	1a9b      	subs	r3, r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006a86:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	789b      	ldrb	r3, [r3, #2]
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 fa11 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006a92:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006a94:	4423      	add	r3, r4
 8006a96:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006a98:	6979      	ldr	r1, [r7, #20]
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 f953 	bl	8006d46 <RTC_WriteTimeCounter>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2204      	movs	r2, #4
 8006aaa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e02f      	b.n	8006b16 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 0205 	bic.w	r2, r2, #5
 8006ac4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f000 f964 	bl	8006d94 <RTC_ReadAlarmCounter>
 8006acc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ad4:	d018      	beq.n	8006b08 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	697b      	ldr	r3, [r7, #20]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d214      	bcs.n	8006b08 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006ae4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006ae8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006aea:	6939      	ldr	r1, [r7, #16]
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f000 f96a 	bl	8006dc6 <RTC_WriteAlarmCounter>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d007      	beq.n	8006b08 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2204      	movs	r2, #4
 8006afc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e006      	b.n	8006b16 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2200      	movs	r2, #0
 8006b12:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8006b14:	2300      	movs	r3, #0
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	371c      	adds	r7, #28
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd90      	pop	{r4, r7, pc}
	...

08006b20 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b088      	sub	sp, #32
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]
 8006b30:	2300      	movs	r3, #0
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	2300      	movs	r3, #0
 8006b36:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d002      	beq.n	8006b44 <HAL_RTC_SetDate+0x24>
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e097      	b.n	8006c78 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	7c1b      	ldrb	r3, [r3, #16]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d101      	bne.n	8006b54 <HAL_RTC_SetDate+0x34>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e091      	b.n	8006c78 <HAL_RTC_SetDate+0x158>
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2201      	movs	r2, #1
 8006b58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10c      	bne.n	8006b80 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	78da      	ldrb	r2, [r3, #3]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	785a      	ldrb	r2, [r3, #1]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	789a      	ldrb	r2, [r3, #2]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	739a      	strb	r2, [r3, #14]
 8006b7e:	e01a      	b.n	8006bb6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	78db      	ldrb	r3, [r3, #3]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f000 f995 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f98c 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	789b      	ldrb	r3, [r3, #2]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f983 	bl	8006eb4 <RTC_Bcd2ToByte>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	7bdb      	ldrb	r3, [r3, #15]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	7b59      	ldrb	r1, [r3, #13]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	7b9b      	ldrb	r3, [r3, #14]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f000 f993 	bl	8006ef0 <RTC_WeekDayNum>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	461a      	mov	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	7b1a      	ldrb	r2, [r3, #12]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 f883 	bl	8006ce6 <RTC_ReadTimeCounter>
 8006be0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4a26      	ldr	r2, [pc, #152]	; (8006c80 <HAL_RTC_SetDate+0x160>)
 8006be6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bea:	0adb      	lsrs	r3, r3, #11
 8006bec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b18      	cmp	r3, #24
 8006bf2:	d93a      	bls.n	8006c6a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	4a23      	ldr	r2, [pc, #140]	; (8006c84 <HAL_RTC_SetDate+0x164>)
 8006bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfc:	091b      	lsrs	r3, r3, #4
 8006bfe:	4a22      	ldr	r2, [pc, #136]	; (8006c88 <HAL_RTC_SetDate+0x168>)
 8006c00:	fb02 f303 	mul.w	r3, r2, r3
 8006c04:	69fa      	ldr	r2, [r7, #28]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8006c0a:	69f9      	ldr	r1, [r7, #28]
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 f89a 	bl	8006d46 <RTC_WriteTimeCounter>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d007      	beq.n	8006c28 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2204      	movs	r2, #4
 8006c1c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e027      	b.n	8006c78 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f8b3 	bl	8006d94 <RTC_ReadAlarmCounter>
 8006c2e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c36:	d018      	beq.n	8006c6a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d214      	bcs.n	8006c6a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006c46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006c4a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8006c4c:	69b9      	ldr	r1, [r7, #24]
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f000 f8b9 	bl	8006dc6 <RTC_WriteAlarmCounter>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d007      	beq.n	8006c6a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2204      	movs	r2, #4
 8006c5e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2200      	movs	r2, #0
 8006c64:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e006      	b.n	8006c78 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2200      	movs	r2, #0
 8006c74:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8006c76:	2300      	movs	r3, #0
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3720      	adds	r7, #32
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	91a2b3c5 	.word	0x91a2b3c5
 8006c84:	aaaaaaab 	.word	0xaaaaaaab
 8006c88:	00015180 	.word	0x00015180

08006c8c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006c94:	2300      	movs	r3, #0
 8006c96:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e01d      	b.n	8006cde <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685a      	ldr	r2, [r3, #4]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0208 	bic.w	r2, r2, #8
 8006cb0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006cb2:	f7fb fc79 	bl	80025a8 <HAL_GetTick>
 8006cb6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006cb8:	e009      	b.n	8006cce <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006cba:	f7fb fc75 	bl	80025a8 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cc8:	d901      	bls.n	8006cce <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e007      	b.n	8006cde <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0ee      	beq.n	8006cba <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	827b      	strh	r3, [r7, #18]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	823b      	strh	r3, [r7, #16]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	699b      	ldr	r3, [r3, #24]
 8006d14:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8006d16:	8a7a      	ldrh	r2, [r7, #18]
 8006d18:	8a3b      	ldrh	r3, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d008      	beq.n	8006d30 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8006d1e:	8a3b      	ldrh	r3, [r7, #16]
 8006d20:	041a      	lsls	r2, r3, #16
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e004      	b.n	8006d3a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8006d30:	8a7b      	ldrh	r3, [r7, #18]
 8006d32:	041a      	lsls	r2, r3, #16
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8006d3a:	697b      	ldr	r3, [r7, #20]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	371c      	adds	r7, #28
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bc80      	pop	{r7}
 8006d44:	4770      	bx	lr

08006d46 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d50:	2300      	movs	r3, #0
 8006d52:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f85d 	bl	8006e14 <RTC_EnterInitMode>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	73fb      	strb	r3, [r7, #15]
 8006d64:	e011      	b.n	8006d8a <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	0c12      	lsrs	r2, r2, #16
 8006d6e:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	b292      	uxth	r2, r2
 8006d78:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f872 	bl	8006e64 <RTC_ExitInitMode>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	81fb      	strh	r3, [r7, #14]
 8006da0:	2300      	movs	r3, #0
 8006da2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006db4:	89fb      	ldrh	r3, [r7, #14]
 8006db6:	041a      	lsls	r2, r3, #16
 8006db8:	89bb      	ldrh	r3, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bc80      	pop	{r7}
 8006dc4:	4770      	bx	lr

08006dc6 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
 8006dce:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 f81d 	bl	8006e14 <RTC_EnterInitMode>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	73fb      	strb	r3, [r7, #15]
 8006de4:	e011      	b.n	8006e0a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	683a      	ldr	r2, [r7, #0]
 8006dec:	0c12      	lsrs	r2, r2, #16
 8006dee:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	683a      	ldr	r2, [r7, #0]
 8006df6:	b292      	uxth	r2, r2
 8006df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f832 	bl	8006e64 <RTC_ExitInitMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8006e20:	f7fb fbc2 	bl	80025a8 <HAL_GetTick>
 8006e24:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006e26:	e009      	b.n	8006e3c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e28:	f7fb fbbe 	bl	80025a8 <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e36:	d901      	bls.n	8006e3c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e00f      	b.n	8006e5c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f003 0320 	and.w	r3, r3, #32
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d0ee      	beq.n	8006e28 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0210 	orr.w	r2, r2, #16
 8006e58:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	685a      	ldr	r2, [r3, #4]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0210 	bic.w	r2, r2, #16
 8006e7e:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006e80:	f7fb fb92 	bl	80025a8 <HAL_GetTick>
 8006e84:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006e86:	e009      	b.n	8006e9c <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8006e88:	f7fb fb8e 	bl	80025a8 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e96:	d901      	bls.n	8006e9c <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e007      	b.n	8006eac <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0ee      	beq.n	8006e88 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	4603      	mov	r3, r0
 8006ebc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	b2db      	uxtb	r3, r3
 8006ec8:	461a      	mov	r2, r3
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	005b      	lsls	r3, r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	f003 030f 	and.w	r3, r3, #15
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b2db      	uxtb	r3, r3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bc80      	pop	{r7}
 8006eec:	4770      	bx	lr
	...

08006ef0 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b085      	sub	sp, #20
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	70fb      	strb	r3, [r7, #3]
 8006efc:	4613      	mov	r3, r2
 8006efe:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60bb      	str	r3, [r7, #8]
 8006f04:	2300      	movs	r3, #0
 8006f06:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8006f0e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8006f10:	78fb      	ldrb	r3, [r7, #3]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d82d      	bhi.n	8006f72 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	005b      	lsls	r3, r3, #1
 8006f1c:	4413      	add	r3, r2
 8006f1e:	00db      	lsls	r3, r3, #3
 8006f20:	1a9b      	subs	r3, r3, r2
 8006f22:	4a2c      	ldr	r2, [pc, #176]	; (8006fd4 <RTC_WeekDayNum+0xe4>)
 8006f24:	fba2 2303 	umull	r2, r3, r2, r3
 8006f28:	085a      	lsrs	r2, r3, #1
 8006f2a:	78bb      	ldrb	r3, [r7, #2]
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	441a      	add	r2, r3
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	089b      	lsrs	r3, r3, #2
 8006f38:	441a      	add	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	4926      	ldr	r1, [pc, #152]	; (8006fd8 <RTC_WeekDayNum+0xe8>)
 8006f40:	fba1 1303 	umull	r1, r3, r1, r3
 8006f44:	095b      	lsrs	r3, r3, #5
 8006f46:	1ad2      	subs	r2, r2, r3
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	4922      	ldr	r1, [pc, #136]	; (8006fd8 <RTC_WeekDayNum+0xe8>)
 8006f4e:	fba1 1303 	umull	r1, r3, r1, r3
 8006f52:	09db      	lsrs	r3, r3, #7
 8006f54:	4413      	add	r3, r2
 8006f56:	1d1a      	adds	r2, r3, #4
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <RTC_WeekDayNum+0xec>)
 8006f5a:	fba3 1302 	umull	r1, r3, r3, r2
 8006f5e:	1ad1      	subs	r1, r2, r3
 8006f60:	0849      	lsrs	r1, r1, #1
 8006f62:	440b      	add	r3, r1
 8006f64:	0899      	lsrs	r1, r3, #2
 8006f66:	460b      	mov	r3, r1
 8006f68:	00db      	lsls	r3, r3, #3
 8006f6a:	1a5b      	subs	r3, r3, r1
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	60fb      	str	r3, [r7, #12]
 8006f70:	e029      	b.n	8006fc6 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006f72:	78fa      	ldrb	r2, [r7, #3]
 8006f74:	4613      	mov	r3, r2
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	4413      	add	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <RTC_WeekDayNum+0xe4>)
 8006f80:	fba2 2303 	umull	r2, r3, r2, r3
 8006f84:	085a      	lsrs	r2, r3, #1
 8006f86:	78bb      	ldrb	r3, [r7, #2]
 8006f88:	441a      	add	r2, r3
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	441a      	add	r2, r3
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	441a      	add	r2, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	4910      	ldr	r1, [pc, #64]	; (8006fd8 <RTC_WeekDayNum+0xe8>)
 8006f98:	fba1 1303 	umull	r1, r3, r1, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	490d      	ldr	r1, [pc, #52]	; (8006fd8 <RTC_WeekDayNum+0xe8>)
 8006fa4:	fba1 1303 	umull	r1, r3, r1, r3
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	4413      	add	r3, r2
 8006fac:	1c9a      	adds	r2, r3, #2
 8006fae:	4b0b      	ldr	r3, [pc, #44]	; (8006fdc <RTC_WeekDayNum+0xec>)
 8006fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fb4:	1ad1      	subs	r1, r2, r3
 8006fb6:	0849      	lsrs	r1, r1, #1
 8006fb8:	440b      	add	r3, r1
 8006fba:	0899      	lsrs	r1, r3, #2
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	1a5b      	subs	r3, r3, r1
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	b2db      	uxtb	r3, r3
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bc80      	pop	{r7}
 8006fd2:	4770      	bx	lr
 8006fd4:	38e38e39 	.word	0x38e38e39
 8006fd8:	51eb851f 	.word	0x51eb851f
 8006fdc:	24924925 	.word	0x24924925

08006fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e076      	b.n	80070e0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d108      	bne.n	800700c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007002:	d009      	beq.n	8007018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	61da      	str	r2, [r3, #28]
 800700a:	e005      	b.n	8007018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007024:	b2db      	uxtb	r3, r3
 8007026:	2b00      	cmp	r3, #0
 8007028:	d106      	bne.n	8007038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f7fa fe38 	bl	8001ca8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2202      	movs	r2, #2
 800703c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800704e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	f003 0302 	and.w	r3, r3, #2
 8007074:	431a      	orrs	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	431a      	orrs	r2, r3
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007088:	431a      	orrs	r2, r3
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800709c:	ea42 0103 	orr.w	r1, r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	430a      	orrs	r2, r1
 80070ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	0c1a      	lsrs	r2, r3, #16
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f002 0204 	and.w	r2, r2, #4
 80070be:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69da      	ldr	r2, [r3, #28]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070ce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80070de:	2300      	movs	r3, #0
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3708      	adds	r7, #8
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	603b      	str	r3, [r7, #0]
 80070f4:	4613      	mov	r3, r2
 80070f6:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80070f8:	f7fb fa56 	bl	80025a8 <HAL_GetTick>
 80070fc:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80070fe:	88fb      	ldrh	r3, [r7, #6]
 8007100:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d001      	beq.n	8007112 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800710e:	2302      	movs	r3, #2
 8007110:	e12a      	b.n	8007368 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d002      	beq.n	800711e <HAL_SPI_Transmit+0x36>
 8007118:	88fb      	ldrh	r3, [r7, #6]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e122      	b.n	8007368 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007128:	2b01      	cmp	r3, #1
 800712a:	d101      	bne.n	8007130 <HAL_SPI_Transmit+0x48>
 800712c:	2302      	movs	r3, #2
 800712e:	e11b      	b.n	8007368 <HAL_SPI_Transmit+0x280>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2203      	movs	r2, #3
 800713c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2200      	movs	r2, #0
 8007144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	88fa      	ldrh	r2, [r7, #6]
 8007150:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	88fa      	ldrh	r2, [r7, #6]
 8007156:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2200      	movs	r2, #0
 800715c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717e:	d10f      	bne.n	80071a0 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800718e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	681a      	ldr	r2, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800719e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071aa:	2b40      	cmp	r3, #64	; 0x40
 80071ac:	d007      	beq.n	80071be <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071c6:	d152      	bne.n	800726e <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d002      	beq.n	80071d6 <HAL_SPI_Transmit+0xee>
 80071d0:	8b7b      	ldrh	r3, [r7, #26]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d145      	bne.n	8007262 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	881a      	ldrh	r2, [r3, #0]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e6:	1c9a      	adds	r2, r3, #2
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80071fa:	e032      	b.n	8007262 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b02      	cmp	r3, #2
 8007208:	d112      	bne.n	8007230 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	881a      	ldrh	r2, [r3, #0]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	1c9a      	adds	r2, r3, #2
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007224:	b29b      	uxth	r3, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	86da      	strh	r2, [r3, #54]	; 0x36
 800722e:	e018      	b.n	8007262 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007230:	f7fb f9ba 	bl	80025a8 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	429a      	cmp	r2, r3
 800723e:	d803      	bhi.n	8007248 <HAL_SPI_Transmit+0x160>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007246:	d102      	bne.n	800724e <HAL_SPI_Transmit+0x166>
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d109      	bne.n	8007262 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e082      	b.n	8007368 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007266:	b29b      	uxth	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1c7      	bne.n	80071fc <HAL_SPI_Transmit+0x114>
 800726c:	e053      	b.n	8007316 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_SPI_Transmit+0x194>
 8007276:	8b7b      	ldrh	r3, [r7, #26]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d147      	bne.n	800730c <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80072a2:	e033      	b.n	800730c <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d113      	bne.n	80072da <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	330c      	adds	r3, #12
 80072bc:	7812      	ldrb	r2, [r2, #0]
 80072be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c4:	1c5a      	adds	r2, r3, #1
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	3b01      	subs	r3, #1
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80072d8:	e018      	b.n	800730c <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072da:	f7fb f965 	bl	80025a8 <HAL_GetTick>
 80072de:	4602      	mov	r2, r0
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d803      	bhi.n	80072f2 <HAL_SPI_Transmit+0x20a>
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f0:	d102      	bne.n	80072f8 <HAL_SPI_Transmit+0x210>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d109      	bne.n	800730c <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e02d      	b.n	8007368 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007310:	b29b      	uxth	r3, r3
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1c6      	bne.n	80072a4 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	6839      	ldr	r1, [r7, #0]
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 fa5a 	bl	80077d4 <SPI_EndRxTxTransaction>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10a      	bne.n	800734a <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e000      	b.n	8007368 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007366:	2300      	movs	r3, #0
  }
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b08a      	sub	sp, #40	; 0x28
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800737e:	2301      	movs	r3, #1
 8007380:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007382:	f7fb f911 	bl	80025a8 <HAL_GetTick>
 8007386:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800738e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007396:	887b      	ldrh	r3, [r7, #2]
 8007398:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800739a:	7ffb      	ldrb	r3, [r7, #31]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d00c      	beq.n	80073ba <HAL_SPI_TransmitReceive+0x4a>
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073a6:	d106      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <HAL_SPI_TransmitReceive+0x46>
 80073b0:	7ffb      	ldrb	r3, [r7, #31]
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d001      	beq.n	80073ba <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80073b6:	2302      	movs	r3, #2
 80073b8:	e17f      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d005      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x5c>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d002      	beq.n	80073cc <HAL_SPI_TransmitReceive+0x5c>
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e174      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d101      	bne.n	80073de <HAL_SPI_TransmitReceive+0x6e>
 80073da:	2302      	movs	r3, #2
 80073dc:	e16d      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2201      	movs	r2, #1
 80073e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d003      	beq.n	80073fa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2205      	movs	r2, #5
 80073f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	887a      	ldrh	r2, [r7, #2]
 800740a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	887a      	ldrh	r2, [r7, #2]
 8007410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	887a      	ldrh	r2, [r7, #2]
 800741c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	887a      	ldrh	r2, [r7, #2]
 8007422:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800743a:	2b40      	cmp	r3, #64	; 0x40
 800743c:	d007      	beq.n	800744e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800744c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007456:	d17e      	bne.n	8007556 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <HAL_SPI_TransmitReceive+0xf6>
 8007460:	8afb      	ldrh	r3, [r7, #22]
 8007462:	2b01      	cmp	r3, #1
 8007464:	d16c      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	881a      	ldrh	r2, [r3, #0]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	1c9a      	adds	r2, r3, #2
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007480:	b29b      	uxth	r3, r3
 8007482:	3b01      	subs	r3, #1
 8007484:	b29a      	uxth	r2, r3
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800748a:	e059      	b.n	8007540 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b02      	cmp	r3, #2
 8007498:	d11b      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x162>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800749e:	b29b      	uxth	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d016      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0x162>
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d113      	bne.n	80074d2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ae:	881a      	ldrh	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	1c9a      	adds	r2, r3, #2
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	3b01      	subs	r3, #1
 80074c8:	b29a      	uxth	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80074ce:	2300      	movs	r3, #0
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d119      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x1a4>
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d014      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	68da      	ldr	r2, [r3, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f4:	b292      	uxth	r2, r2
 80074f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074fc:	1c9a      	adds	r2, r3, #2
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007506:	b29b      	uxth	r3, r3
 8007508:	3b01      	subs	r3, #1
 800750a:	b29a      	uxth	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007510:	2301      	movs	r3, #1
 8007512:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007514:	f7fb f848 	bl	80025a8 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007520:	429a      	cmp	r2, r3
 8007522:	d80d      	bhi.n	8007540 <HAL_SPI_TransmitReceive+0x1d0>
 8007524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800752a:	d009      	beq.n	8007540 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e0bc      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1a0      	bne.n	800748c <HAL_SPI_TransmitReceive+0x11c>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800754e:	b29b      	uxth	r3, r3
 8007550:	2b00      	cmp	r3, #0
 8007552:	d19b      	bne.n	800748c <HAL_SPI_TransmitReceive+0x11c>
 8007554:	e082      	b.n	800765c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_SPI_TransmitReceive+0x1f4>
 800755e:	8afb      	ldrh	r3, [r7, #22]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d171      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	330c      	adds	r3, #12
 800756e:	7812      	ldrb	r2, [r2, #0]
 8007570:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007580:	b29b      	uxth	r3, r3
 8007582:	3b01      	subs	r3, #1
 8007584:	b29a      	uxth	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800758a:	e05d      	b.n	8007648 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	f003 0302 	and.w	r3, r3, #2
 8007596:	2b02      	cmp	r3, #2
 8007598:	d11c      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x264>
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800759e:	b29b      	uxth	r3, r3
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d017      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x264>
 80075a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d114      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	330c      	adds	r3, #12
 80075b4:	7812      	ldrb	r2, [r2, #0]
 80075b6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075bc:	1c5a      	adds	r2, r3, #1
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	3b01      	subs	r3, #1
 80075ca:	b29a      	uxth	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 0301 	and.w	r3, r3, #1
 80075de:	2b01      	cmp	r3, #1
 80075e0:	d119      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x2a6>
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d014      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	b2d2      	uxtb	r2, r2
 80075f8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	1c5a      	adds	r2, r3, #1
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007612:	2301      	movs	r3, #1
 8007614:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007616:	f7fa ffc7 	bl	80025a8 <HAL_GetTick>
 800761a:	4602      	mov	r2, r0
 800761c:	6a3b      	ldr	r3, [r7, #32]
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007622:	429a      	cmp	r2, r3
 8007624:	d803      	bhi.n	800762e <HAL_SPI_TransmitReceive+0x2be>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800762c:	d102      	bne.n	8007634 <HAL_SPI_TransmitReceive+0x2c4>
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	2b00      	cmp	r3, #0
 8007632:	d109      	bne.n	8007648 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 8007644:	2303      	movs	r3, #3
 8007646:	e038      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	2b00      	cmp	r3, #0
 8007650:	d19c      	bne.n	800758c <HAL_SPI_TransmitReceive+0x21c>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007656:	b29b      	uxth	r3, r3
 8007658:	2b00      	cmp	r3, #0
 800765a:	d197      	bne.n	800758c <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800765c:	6a3a      	ldr	r2, [r7, #32]
 800765e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f000 f8b7 	bl	80077d4 <SPI_EndRxTxTransaction>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d008      	beq.n	800767e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2220      	movs	r2, #32
 8007670:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e01d      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10a      	bne.n	800769c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	613b      	str	r3, [r7, #16]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d001      	beq.n	80076b8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	e000      	b.n	80076ba <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80076b8:	2300      	movs	r3, #0
  }
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
	...

080076c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076d4:	f7fa ff68 	bl	80025a8 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	1a9b      	subs	r3, r3, r2
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4413      	add	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076e4:	f7fa ff60 	bl	80025a8 <HAL_GetTick>
 80076e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ea:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	015b      	lsls	r3, r3, #5
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076fa:	e054      	b.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d050      	beq.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007704:	f7fa ff50 	bl	80025a8 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	429a      	cmp	r2, r3
 8007712:	d902      	bls.n	800771a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d13d      	bne.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007732:	d111      	bne.n	8007758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773c:	d004      	beq.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007746:	d107      	bne.n	8007758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007760:	d10f      	bne.n	8007782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e017      	b.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d19b      	bne.n	80076fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000000 	.word	0x20000000

080077d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	9300      	str	r3, [sp, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	2201      	movs	r2, #1
 80077e8:	2102      	movs	r1, #2
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff ff6a 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077fa:	f043 0220 	orr.w	r2, r3, #32
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e013      	b.n	800782e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	9300      	str	r3, [sp, #0]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2200      	movs	r2, #0
 800780e:	2180      	movs	r1, #128	; 0x80
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	f7ff ff57 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 8007816:	4603      	mov	r3, r0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d007      	beq.n	800782c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007820:	f043 0220 	orr.w	r2, r3, #32
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e000      	b.n	800782e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800782c:	2300      	movs	r3, #0
}
 800782e:	4618      	mov	r0, r3
 8007830:	3710      	adds	r7, #16
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007836:	b580      	push	{r7, lr}
 8007838:	b082      	sub	sp, #8
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d101      	bne.n	8007848 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007844:	2301      	movs	r3, #1
 8007846:	e041      	b.n	80078cc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784e:	b2db      	uxtb	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d106      	bne.n	8007862 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7fa fa6d 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	3304      	adds	r3, #4
 8007872:	4619      	mov	r1, r3
 8007874:	4610      	mov	r0, r2
 8007876:	f000 fbb7 	bl	8007fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2201      	movs	r2, #1
 800787e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2201      	movs	r2, #1
 8007886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2201      	movs	r2, #1
 800788e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2201      	movs	r2, #1
 8007896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2201      	movs	r2, #1
 800789e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3708      	adds	r7, #8
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d101      	bne.n	80078e6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e041      	b.n	800796a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d106      	bne.n	8007900 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 f839 	bl	8007972 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	3304      	adds	r3, #4
 8007910:	4619      	mov	r1, r3
 8007912:	4610      	mov	r0, r2
 8007914:	f000 fb68 	bl	8007fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2201      	movs	r2, #1
 800792c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2201      	movs	r2, #1
 8007934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	bc80      	pop	{r7}
 8007982:	4770      	bx	lr

08007984 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d101      	bne.n	8007996 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e041      	b.n	8007a1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f000 f839 	bl	8007a22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	4619      	mov	r1, r3
 80079c2:	4610      	mov	r0, r2
 80079c4:	f000 fb10 	bl	8007fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a18:	2300      	movs	r3, #0
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3708      	adds	r7, #8
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a22:	b480      	push	{r7}
 8007a24:	b083      	sub	sp, #12
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a2a:	bf00      	nop
 8007a2c:	370c      	adds	r7, #12
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bc80      	pop	{r7}
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b082      	sub	sp, #8
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e041      	b.n	8007aca <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d106      	bne.n	8007a60 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f839 	bl	8007ad2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	3304      	adds	r3, #4
 8007a70:	4619      	mov	r1, r3
 8007a72:	4610      	mov	r0, r2
 8007a74:	f000 fab8 	bl	8007fe8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2201      	movs	r2, #1
 8007ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	b083      	sub	sp, #12
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bc80      	pop	{r7}
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b086      	sub	sp, #24
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_TIM_OC_ConfigChannel+0x1e>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e048      	b.n	8007b94 <HAL_TIM_OC_ConfigChannel+0xb0>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2b0c      	cmp	r3, #12
 8007b0e:	d839      	bhi.n	8007b84 <HAL_TIM_OC_ConfigChannel+0xa0>
 8007b10:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <HAL_TIM_OC_ConfigChannel+0x34>)
 8007b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b16:	bf00      	nop
 8007b18:	08007b4d 	.word	0x08007b4d
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	08007b5b 	.word	0x08007b5b
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007b85 	.word	0x08007b85
 8007b38:	08007b69 	.word	0x08007b69
 8007b3c:	08007b85 	.word	0x08007b85
 8007b40:	08007b85 	.word	0x08007b85
 8007b44:	08007b85 	.word	0x08007b85
 8007b48:	08007b77 	.word	0x08007b77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68b9      	ldr	r1, [r7, #8]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fab6 	bl	80080c4 <TIM_OC1_SetConfig>
      break;
 8007b58:	e017      	b.n	8007b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68b9      	ldr	r1, [r7, #8]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f000 fb15 	bl	8008190 <TIM_OC2_SetConfig>
      break;
 8007b66:	e010      	b.n	8007b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68b9      	ldr	r1, [r7, #8]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f000 fb78 	bl	8008264 <TIM_OC3_SetConfig>
      break;
 8007b74:	e009      	b.n	8007b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fbdb 	bl	8008338 <TIM_OC4_SetConfig>
      break;
 8007b82:	e002      	b.n	8007b8a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	75fb      	strb	r3, [r7, #23]
      break;
 8007b88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b92:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3718      	adds	r7, #24
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_TIM_IC_ConfigChannel+0x1e>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e088      	b.n	8007ccc <HAL_TIM_IC_ConfigChannel+0x130>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d11b      	bne.n	8007c00 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8007bd8:	f000 fbfc 	bl	80083d4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	699a      	ldr	r2, [r3, #24]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f022 020c 	bic.w	r2, r2, #12
 8007bea:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6999      	ldr	r1, [r3, #24]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	689a      	ldr	r2, [r3, #8]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	619a      	str	r2, [r3, #24]
 8007bfe:	e060      	b.n	8007cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b04      	cmp	r3, #4
 8007c04:	d11c      	bne.n	8007c40 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8007c16:	f000 fc65 	bl	80084e4 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	699a      	ldr	r2, [r3, #24]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c28:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	6999      	ldr	r1, [r3, #24]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	021a      	lsls	r2, r3, #8
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	619a      	str	r2, [r3, #24]
 8007c3e:	e040      	b.n	8007cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b08      	cmp	r3, #8
 8007c44:	d11b      	bne.n	8007c7e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007c56:	f000 fcb0 	bl	80085ba <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69da      	ldr	r2, [r3, #28]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 020c 	bic.w	r2, r2, #12
 8007c68:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	69d9      	ldr	r1, [r3, #28]
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	689a      	ldr	r2, [r3, #8]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	430a      	orrs	r2, r1
 8007c7a:	61da      	str	r2, [r3, #28]
 8007c7c:	e021      	b.n	8007cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2b0c      	cmp	r3, #12
 8007c82:	d11c      	bne.n	8007cbe <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8007c8c:	68bb      	ldr	r3, [r7, #8]
 8007c8e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007c94:	f000 fccc 	bl	8008630 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69da      	ldr	r2, [r3, #28]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ca6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	69d9      	ldr	r1, [r3, #28]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021a      	lsls	r2, r3, #8
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	430a      	orrs	r2, r1
 8007cba:	61da      	str	r2, [r3, #28]
 8007cbc:	e001      	b.n	8007cc2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3718      	adds	r7, #24
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b086      	sub	sp, #24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e0ae      	b.n	8007e50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2b0c      	cmp	r3, #12
 8007cfe:	f200 809f 	bhi.w	8007e40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d3d 	.word	0x08007d3d
 8007d0c:	08007e41 	.word	0x08007e41
 8007d10:	08007e41 	.word	0x08007e41
 8007d14:	08007e41 	.word	0x08007e41
 8007d18:	08007d7d 	.word	0x08007d7d
 8007d1c:	08007e41 	.word	0x08007e41
 8007d20:	08007e41 	.word	0x08007e41
 8007d24:	08007e41 	.word	0x08007e41
 8007d28:	08007dbf 	.word	0x08007dbf
 8007d2c:	08007e41 	.word	0x08007e41
 8007d30:	08007e41 	.word	0x08007e41
 8007d34:	08007e41 	.word	0x08007e41
 8007d38:	08007dff 	.word	0x08007dff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 f9be 	bl	80080c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	699a      	ldr	r2, [r3, #24]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0208 	orr.w	r2, r2, #8
 8007d56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0204 	bic.w	r2, r2, #4
 8007d66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6999      	ldr	r1, [r3, #24]
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	619a      	str	r2, [r3, #24]
      break;
 8007d7a:	e064      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fa04 	bl	8008190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	699a      	ldr	r2, [r3, #24]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	699a      	ldr	r2, [r3, #24]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6999      	ldr	r1, [r3, #24]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	021a      	lsls	r2, r3, #8
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	619a      	str	r2, [r3, #24]
      break;
 8007dbc:	e043      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68b9      	ldr	r1, [r7, #8]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f000 fa4d 	bl	8008264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69da      	ldr	r2, [r3, #28]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0208 	orr.w	r2, r2, #8
 8007dd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	69da      	ldr	r2, [r3, #28]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0204 	bic.w	r2, r2, #4
 8007de8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69d9      	ldr	r1, [r3, #28]
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	691a      	ldr	r2, [r3, #16]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	61da      	str	r2, [r3, #28]
      break;
 8007dfc:	e023      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	68b9      	ldr	r1, [r7, #8]
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fa97 	bl	8008338 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69da      	ldr	r2, [r3, #28]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69da      	ldr	r2, [r3, #28]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69d9      	ldr	r1, [r3, #28]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	021a      	lsls	r2, r3, #8
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	430a      	orrs	r2, r1
 8007e3c:	61da      	str	r2, [r3, #28]
      break;
 8007e3e:	e002      	b.n	8007e46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
      break;
 8007e44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e62:	2300      	movs	r3, #0
 8007e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIM_ConfigClockSource+0x1c>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e0b4      	b.n	8007fde <HAL_TIM_ConfigClockSource+0x186>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2202      	movs	r2, #2
 8007e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eac:	d03e      	beq.n	8007f2c <HAL_TIM_ConfigClockSource+0xd4>
 8007eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eb2:	f200 8087 	bhi.w	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eba:	f000 8086 	beq.w	8007fca <HAL_TIM_ConfigClockSource+0x172>
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d87f      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ec4:	2b70      	cmp	r3, #112	; 0x70
 8007ec6:	d01a      	beq.n	8007efe <HAL_TIM_ConfigClockSource+0xa6>
 8007ec8:	2b70      	cmp	r3, #112	; 0x70
 8007eca:	d87b      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ecc:	2b60      	cmp	r3, #96	; 0x60
 8007ece:	d050      	beq.n	8007f72 <HAL_TIM_ConfigClockSource+0x11a>
 8007ed0:	2b60      	cmp	r3, #96	; 0x60
 8007ed2:	d877      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ed4:	2b50      	cmp	r3, #80	; 0x50
 8007ed6:	d03c      	beq.n	8007f52 <HAL_TIM_ConfigClockSource+0xfa>
 8007ed8:	2b50      	cmp	r3, #80	; 0x50
 8007eda:	d873      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007edc:	2b40      	cmp	r3, #64	; 0x40
 8007ede:	d058      	beq.n	8007f92 <HAL_TIM_ConfigClockSource+0x13a>
 8007ee0:	2b40      	cmp	r3, #64	; 0x40
 8007ee2:	d86f      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee4:	2b30      	cmp	r3, #48	; 0x30
 8007ee6:	d064      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ee8:	2b30      	cmp	r3, #48	; 0x30
 8007eea:	d86b      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	2b20      	cmp	r3, #32
 8007eee:	d060      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ef0:	2b20      	cmp	r3, #32
 8007ef2:	d867      	bhi.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d05c      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ef8:	2b10      	cmp	r3, #16
 8007efa:	d05a      	beq.n	8007fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8007efc:	e062      	b.n	8007fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f0e:	f000 fbe5 	bl	80086dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	609a      	str	r2, [r3, #8]
      break;
 8007f2a:	e04f      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007f3c:	f000 fbce 	bl	80086dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f4e:	609a      	str	r2, [r3, #8]
      break;
 8007f50:	e03c      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f000 fa92 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2150      	movs	r1, #80	; 0x50
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 fb9c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007f70:	e02c      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f7e:	461a      	mov	r2, r3
 8007f80:	f000 faec 	bl	800855c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2160      	movs	r1, #96	; 0x60
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f000 fb8c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007f90:	e01c      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f000 fa72 	bl	8008488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2140      	movs	r1, #64	; 0x40
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fb7c 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007fb0:	e00c      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4610      	mov	r0, r2
 8007fbe:	f000 fb73 	bl	80086a8 <TIM_ITRx_SetConfig>
      break;
 8007fc2:	e003      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8007fc8:	e000      	b.n	8007fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
	...

08007fe8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a2f      	ldr	r2, [pc, #188]	; (80080b8 <TIM_Base_SetConfig+0xd0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <TIM_Base_SetConfig+0x30>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008006:	d007      	beq.n	8008018 <TIM_Base_SetConfig+0x30>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <TIM_Base_SetConfig+0xd4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0x30>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a2b      	ldr	r2, [pc, #172]	; (80080c0 <TIM_Base_SetConfig+0xd8>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d108      	bne.n	800802a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800801e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a22      	ldr	r2, [pc, #136]	; (80080b8 <TIM_Base_SetConfig+0xd0>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d00b      	beq.n	800804a <TIM_Base_SetConfig+0x62>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008038:	d007      	beq.n	800804a <TIM_Base_SetConfig+0x62>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	4a1f      	ldr	r2, [pc, #124]	; (80080bc <TIM_Base_SetConfig+0xd4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d003      	beq.n	800804a <TIM_Base_SetConfig+0x62>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4a1e      	ldr	r2, [pc, #120]	; (80080c0 <TIM_Base_SetConfig+0xd8>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d108      	bne.n	800805c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	695b      	ldr	r3, [r3, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a0d      	ldr	r2, [pc, #52]	; (80080b8 <TIM_Base_SetConfig+0xd0>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d103      	bne.n	8008090 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	691a      	ldr	r2, [r3, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	f003 0301 	and.w	r3, r3, #1
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	f023 0201 	bic.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	611a      	str	r2, [r3, #16]
  }
}
 80080ae:	bf00      	nop
 80080b0:	3714      	adds	r7, #20
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bc80      	pop	{r7}
 80080b6:	4770      	bx	lr
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40000400 	.word	0x40000400
 80080c0:	40000800 	.word	0x40000800

080080c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b087      	sub	sp, #28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6a1b      	ldr	r3, [r3, #32]
 80080d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a1b      	ldr	r3, [r3, #32]
 80080d8:	f023 0201 	bic.w	r2, r3, #1
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699b      	ldr	r3, [r3, #24]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f023 0303 	bic.w	r3, r3, #3
 80080fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	4313      	orrs	r3, r2
 8008104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f023 0302 	bic.w	r3, r3, #2
 800810c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a1c      	ldr	r2, [pc, #112]	; (800818c <TIM_OC1_SetConfig+0xc8>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d10c      	bne.n	800813a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0308 	bic.w	r3, r3, #8
 8008126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	f023 0304 	bic.w	r3, r3, #4
 8008138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	4a13      	ldr	r2, [pc, #76]	; (800818c <TIM_OC1_SetConfig+0xc8>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d111      	bne.n	8008166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	695b      	ldr	r3, [r3, #20]
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	693a      	ldr	r2, [r7, #16]
 8008162:	4313      	orrs	r3, r2
 8008164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68fa      	ldr	r2, [r7, #12]
 8008170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685a      	ldr	r2, [r3, #4]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	621a      	str	r2, [r3, #32]
}
 8008180:	bf00      	nop
 8008182:	371c      	adds	r7, #28
 8008184:	46bd      	mov	sp, r7
 8008186:	bc80      	pop	{r7}
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40012c00 	.word	0x40012c00

08008190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6a1b      	ldr	r3, [r3, #32]
 800819e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	f023 0210 	bic.w	r2, r3, #16
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	f023 0320 	bic.w	r3, r3, #32
 80081da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	011b      	lsls	r3, r3, #4
 80081e2:	697a      	ldr	r2, [r7, #20]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1d      	ldr	r2, [pc, #116]	; (8008260 <TIM_OC2_SetConfig+0xd0>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d10d      	bne.n	800820c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	011b      	lsls	r3, r3, #4
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800820a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a14      	ldr	r2, [pc, #80]	; (8008260 <TIM_OC2_SetConfig+0xd0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d113      	bne.n	800823c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800821a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	693a      	ldr	r2, [r7, #16]
 800822c:	4313      	orrs	r3, r2
 800822e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	699b      	ldr	r3, [r3, #24]
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	4313      	orrs	r3, r2
 800823a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	621a      	str	r2, [r3, #32]
}
 8008256:	bf00      	nop
 8008258:	371c      	adds	r7, #28
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr
 8008260:	40012c00 	.word	0x40012c00

08008264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6a1b      	ldr	r3, [r3, #32]
 8008278:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a1d      	ldr	r2, [pc, #116]	; (8008334 <TIM_OC3_SetConfig+0xd0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d10d      	bne.n	80082de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	68db      	ldr	r3, [r3, #12]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a14      	ldr	r2, [pc, #80]	; (8008334 <TIM_OC3_SetConfig+0xd0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d113      	bne.n	800830e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	011b      	lsls	r3, r3, #4
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	011b      	lsls	r3, r3, #4
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	621a      	str	r2, [r3, #32]
}
 8008328:	bf00      	nop
 800832a:	371c      	adds	r7, #28
 800832c:	46bd      	mov	sp, r7
 800832e:	bc80      	pop	{r7}
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	40012c00 	.word	0x40012c00

08008338 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a1b      	ldr	r3, [r3, #32]
 8008346:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6a1b      	ldr	r3, [r3, #32]
 800834c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	69db      	ldr	r3, [r3, #28]
 800835e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800836e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	021b      	lsls	r3, r3, #8
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	4313      	orrs	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008382:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	031b      	lsls	r3, r3, #12
 800838a:	693a      	ldr	r2, [r7, #16]
 800838c:	4313      	orrs	r3, r2
 800838e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a0f      	ldr	r2, [pc, #60]	; (80083d0 <TIM_OC4_SetConfig+0x98>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d109      	bne.n	80083ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800839e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	697a      	ldr	r2, [r7, #20]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	685a      	ldr	r2, [r3, #4]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bc80      	pop	{r7}
 80083ce:	4770      	bx	lr
 80083d0:	40012c00 	.word	0x40012c00

080083d4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b087      	sub	sp, #28
 80083d8:	af00      	add	r7, sp, #0
 80083da:	60f8      	str	r0, [r7, #12]
 80083dc:	60b9      	str	r1, [r7, #8]
 80083de:	607a      	str	r2, [r7, #4]
 80083e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	6a1b      	ldr	r3, [r3, #32]
 80083ec:	f023 0201 	bic.w	r2, r3, #1
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4a1f      	ldr	r2, [pc, #124]	; (800847c <TIM_TI1_SetConfig+0xa8>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00b      	beq.n	800841a <TIM_TI1_SetConfig+0x46>
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008408:	d007      	beq.n	800841a <TIM_TI1_SetConfig+0x46>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a1c      	ldr	r2, [pc, #112]	; (8008480 <TIM_TI1_SetConfig+0xac>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d003      	beq.n	800841a <TIM_TI1_SetConfig+0x46>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a1b      	ldr	r2, [pc, #108]	; (8008484 <TIM_TI1_SetConfig+0xb0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d101      	bne.n	800841e <TIM_TI1_SetConfig+0x4a>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <TIM_TI1_SetConfig+0x4c>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d008      	beq.n	8008436 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800842c:	697a      	ldr	r2, [r7, #20]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4313      	orrs	r3, r2
 8008432:	617b      	str	r3, [r7, #20]
 8008434:	e003      	b.n	800843e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	f043 0301 	orr.w	r3, r3, #1
 800843c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008444:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	011b      	lsls	r3, r3, #4
 800844a:	b2db      	uxtb	r3, r3
 800844c:	697a      	ldr	r2, [r7, #20]
 800844e:	4313      	orrs	r3, r2
 8008450:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	f023 030a 	bic.w	r3, r3, #10
 8008458:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	f003 030a 	and.w	r3, r3, #10
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	4313      	orrs	r3, r2
 8008464:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	697a      	ldr	r2, [r7, #20]
 800846a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	621a      	str	r2, [r3, #32]
}
 8008472:	bf00      	nop
 8008474:	371c      	adds	r7, #28
 8008476:	46bd      	mov	sp, r7
 8008478:	bc80      	pop	{r7}
 800847a:	4770      	bx	lr
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800

08008488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 030a 	bic.w	r3, r3, #10
 80084c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	bc80      	pop	{r7}
 80084e2:	4770      	bx	lr

080084e4 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	60f8      	str	r0, [r7, #12]
 80084ec:	60b9      	str	r1, [r7, #8]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	f023 0210 	bic.w	r2, r3, #16
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	699b      	ldr	r3, [r3, #24]
 8008508:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008510:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	021b      	lsls	r3, r3, #8
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4313      	orrs	r3, r2
 800851a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008522:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008524:	683b      	ldr	r3, [r7, #0]
 8008526:	031b      	lsls	r3, r3, #12
 8008528:	b29b      	uxth	r3, r3
 800852a:	693a      	ldr	r2, [r7, #16]
 800852c:	4313      	orrs	r3, r2
 800852e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008536:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	011b      	lsls	r3, r3, #4
 800853c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008540:	697a      	ldr	r2, [r7, #20]
 8008542:	4313      	orrs	r3, r2
 8008544:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	697a      	ldr	r2, [r7, #20]
 8008550:	621a      	str	r2, [r3, #32]
}
 8008552:	bf00      	nop
 8008554:	371c      	adds	r7, #28
 8008556:	46bd      	mov	sp, r7
 8008558:	bc80      	pop	{r7}
 800855a:	4770      	bx	lr

0800855c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	f023 0210 	bic.w	r2, r3, #16
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	031b      	lsls	r3, r3, #12
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008598:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	697a      	ldr	r2, [r7, #20]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bc80      	pop	{r7}
 80085b8:	4770      	bx	lr

080085ba <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	f023 0303 	bic.w	r3, r3, #3
 80085e6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085f6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	4313      	orrs	r3, r2
 8008602:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800860a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	021b      	lsls	r3, r3, #8
 8008610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	bc80      	pop	{r7}
 800862e:	4770      	bx	lr

08008630 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008630:	b480      	push	{r7}
 8008632:	b087      	sub	sp, #28
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a1b      	ldr	r3, [r3, #32]
 8008648:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800865c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	021b      	lsls	r3, r3, #8
 8008662:	693a      	ldr	r2, [r7, #16]
 8008664:	4313      	orrs	r3, r2
 8008666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800866e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	031b      	lsls	r3, r3, #12
 8008674:	b29b      	uxth	r3, r3
 8008676:	693a      	ldr	r2, [r7, #16]
 8008678:	4313      	orrs	r3, r2
 800867a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008682:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	031b      	lsls	r3, r3, #12
 8008688:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800868c:	697a      	ldr	r2, [r7, #20]
 800868e:	4313      	orrs	r3, r2
 8008690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	693a      	ldr	r2, [r7, #16]
 8008696:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	621a      	str	r2, [r3, #32]
}
 800869e:	bf00      	nop
 80086a0:	371c      	adds	r7, #28
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bc80      	pop	{r7}
 80086a6:	4770      	bx	lr

080086a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b085      	sub	sp, #20
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
 80086b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	689b      	ldr	r3, [r3, #8]
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f043 0307 	orr.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68fa      	ldr	r2, [r7, #12]
 80086d0:	609a      	str	r2, [r3, #8]
}
 80086d2:	bf00      	nop
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	bc80      	pop	{r7}
 80086da:	4770      	bx	lr

080086dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086dc:	b480      	push	{r7}
 80086de:	b087      	sub	sp, #28
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	607a      	str	r2, [r7, #4]
 80086e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	021a      	lsls	r2, r3, #8
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	431a      	orrs	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4313      	orrs	r3, r2
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	609a      	str	r2, [r3, #8]
}
 8008710:	bf00      	nop
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	bc80      	pop	{r7}
 8008718:	4770      	bx	lr
	...

0800871c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008730:	2302      	movs	r3, #2
 8008732:	e046      	b.n	80087c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	4313      	orrs	r3, r2
 8008764:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4a16      	ldr	r2, [pc, #88]	; (80087cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008774:	4293      	cmp	r3, r2
 8008776:	d00e      	beq.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008780:	d009      	beq.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a12      	ldr	r2, [pc, #72]	; (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d004      	beq.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a10      	ldr	r2, [pc, #64]	; (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d10c      	bne.n	80087b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800879c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68ba      	ldr	r2, [r7, #8]
 80087ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bc80      	pop	{r7}
 80087ca:	4770      	bx	lr
 80087cc:	40012c00 	.word	0x40012c00
 80087d0:	40000400 	.word	0x40000400
 80087d4:	40000800 	.word	0x40000800

080087d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d101      	bne.n	80087ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e6:	2301      	movs	r3, #1
 80087e8:	e042      	b.n	8008870 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d106      	bne.n	8008804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087fe:	6878      	ldr	r0, [r7, #4]
 8008800:	f7f9 fb34 	bl	8001e6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2224      	movs	r2, #36	; 0x24
 8008808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68da      	ldr	r2, [r3, #12]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800881a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 f971 	bl	8008b04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	695a      	ldr	r2, [r3, #20]
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2220      	movs	r2, #32
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2220      	movs	r2, #32
 8008864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2200      	movs	r2, #0
 800886c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}

08008878 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b08a      	sub	sp, #40	; 0x28
 800887c:	af02      	add	r7, sp, #8
 800887e:	60f8      	str	r0, [r7, #12]
 8008880:	60b9      	str	r1, [r7, #8]
 8008882:	603b      	str	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b20      	cmp	r3, #32
 8008896:	d175      	bne.n	8008984 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d002      	beq.n	80088a4 <HAL_UART_Transmit+0x2c>
 800889e:	88fb      	ldrh	r3, [r7, #6]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d101      	bne.n	80088a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	e06e      	b.n	8008986 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2221      	movs	r2, #33	; 0x21
 80088b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80088b6:	f7f9 fe77 	bl	80025a8 <HAL_GetTick>
 80088ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	88fa      	ldrh	r2, [r7, #6]
 80088c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088d0:	d108      	bne.n	80088e4 <HAL_UART_Transmit+0x6c>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d104      	bne.n	80088e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80088da:	2300      	movs	r3, #0
 80088dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	61bb      	str	r3, [r7, #24]
 80088e2:	e003      	b.n	80088ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80088ec:	e02e      	b.n	800894c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	9300      	str	r3, [sp, #0]
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	2200      	movs	r2, #0
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f000 f848 	bl	800898e <UART_WaitOnFlagUntilTimeout>
 80088fe:	4603      	mov	r3, r0
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	e03a      	b.n	8008986 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10b      	bne.n	800892e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	881b      	ldrh	r3, [r3, #0]
 800891a:	461a      	mov	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008924:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008926:	69bb      	ldr	r3, [r7, #24]
 8008928:	3302      	adds	r3, #2
 800892a:	61bb      	str	r3, [r7, #24]
 800892c:	e007      	b.n	800893e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	781a      	ldrb	r2, [r3, #0]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	3301      	adds	r3, #1
 800893c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008942:	b29b      	uxth	r3, r3
 8008944:	3b01      	subs	r3, #1
 8008946:	b29a      	uxth	r2, r3
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008950:	b29b      	uxth	r3, r3
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1cb      	bne.n	80088ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	2140      	movs	r1, #64	; 0x40
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 f814 	bl	800898e <UART_WaitOnFlagUntilTimeout>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d005      	beq.n	8008978 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2220      	movs	r2, #32
 8008970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e006      	b.n	8008986 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2220      	movs	r2, #32
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3720      	adds	r7, #32
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b086      	sub	sp, #24
 8008992:	af00      	add	r7, sp, #0
 8008994:	60f8      	str	r0, [r7, #12]
 8008996:	60b9      	str	r1, [r7, #8]
 8008998:	603b      	str	r3, [r7, #0]
 800899a:	4613      	mov	r3, r2
 800899c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800899e:	e03b      	b.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a6:	d037      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089a8:	f7f9 fdfe 	bl	80025a8 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	6a3a      	ldr	r2, [r7, #32]
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d302      	bcc.n	80089be <UART_WaitOnFlagUntilTimeout+0x30>
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d101      	bne.n	80089c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089be:	2303      	movs	r3, #3
 80089c0:	e03a      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	f003 0304 	and.w	r3, r3, #4
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d023      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2b80      	cmp	r3, #128	; 0x80
 80089d4:	d020      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b40      	cmp	r3, #64	; 0x40
 80089da:	d01d      	beq.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 0308 	and.w	r3, r3, #8
 80089e6:	2b08      	cmp	r3, #8
 80089e8:	d116      	bne.n	8008a18 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80089ea:	2300      	movs	r3, #0
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]
 80089fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a00:	68f8      	ldr	r0, [r7, #12]
 8008a02:	f000 f81d 	bl	8008a40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2208      	movs	r2, #8
 8008a0a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008a14:	2301      	movs	r3, #1
 8008a16:	e00f      	b.n	8008a38 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4013      	ands	r3, r2
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	bf0c      	ite	eq
 8008a28:	2301      	moveq	r3, #1
 8008a2a:	2300      	movne	r3, #0
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	461a      	mov	r2, r3
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d0b4      	beq.n	80089a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b095      	sub	sp, #84	; 0x54
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	330c      	adds	r3, #12
 8008a4e:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	330c      	adds	r3, #12
 8008a66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a68:	643a      	str	r2, [r7, #64]	; 0x40
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e5      	bne.n	8008a48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3314      	adds	r3, #20
 8008a82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6a3b      	ldr	r3, [r7, #32]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	f023 0301 	bic.w	r3, r3, #1
 8008a92:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	3314      	adds	r3, #20
 8008a9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aa4:	e841 2300 	strex	r3, r2, [r1]
 8008aa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1e5      	bne.n	8008a7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab4:	2b01      	cmp	r3, #1
 8008ab6:	d119      	bne.n	8008aec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	330c      	adds	r3, #12
 8008abe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	e853 3f00 	ldrex	r3, [r3]
 8008ac6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	f023 0310 	bic.w	r3, r3, #16
 8008ace:	647b      	str	r3, [r7, #68]	; 0x44
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	330c      	adds	r3, #12
 8008ad6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ad8:	61ba      	str	r2, [r7, #24]
 8008ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008adc:	6979      	ldr	r1, [r7, #20]
 8008ade:	69ba      	ldr	r2, [r7, #24]
 8008ae0:	e841 2300 	strex	r3, r2, [r1]
 8008ae4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d1e5      	bne.n	8008ab8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2220      	movs	r2, #32
 8008af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008afa:	bf00      	nop
 8008afc:	3754      	adds	r7, #84	; 0x54
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bc80      	pop	{r7}
 8008b02:	4770      	bx	lr

08008b04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	691b      	ldr	r3, [r3, #16]
 8008b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	68da      	ldr	r2, [r3, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	430a      	orrs	r2, r1
 8008b20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008b3e:	f023 030c 	bic.w	r3, r3, #12
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	6812      	ldr	r2, [r2, #0]
 8008b46:	68b9      	ldr	r1, [r7, #8]
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	695b      	ldr	r3, [r3, #20]
 8008b52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	699a      	ldr	r2, [r3, #24]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	430a      	orrs	r2, r1
 8008b60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4a2c      	ldr	r2, [pc, #176]	; (8008c18 <UART_SetConfig+0x114>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d103      	bne.n	8008b74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008b6c:	f7fd fd16 	bl	800659c <HAL_RCC_GetPCLK2Freq>
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	e002      	b.n	8008b7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b74:	f7fd fcfe 	bl	8006574 <HAL_RCC_GetPCLK1Freq>
 8008b78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	4613      	mov	r3, r2
 8008b7e:	009b      	lsls	r3, r3, #2
 8008b80:	4413      	add	r3, r2
 8008b82:	009a      	lsls	r2, r3, #2
 8008b84:	441a      	add	r2, r3
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b90:	4a22      	ldr	r2, [pc, #136]	; (8008c1c <UART_SetConfig+0x118>)
 8008b92:	fba2 2303 	umull	r2, r3, r2, r3
 8008b96:	095b      	lsrs	r3, r3, #5
 8008b98:	0119      	lsls	r1, r3, #4
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	4613      	mov	r3, r2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	009a      	lsls	r2, r3, #2
 8008ba4:	441a      	add	r2, r3
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bb0:	4b1a      	ldr	r3, [pc, #104]	; (8008c1c <UART_SetConfig+0x118>)
 8008bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8008bb6:	095b      	lsrs	r3, r3, #5
 8008bb8:	2064      	movs	r0, #100	; 0x64
 8008bba:	fb00 f303 	mul.w	r3, r0, r3
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	3332      	adds	r3, #50	; 0x32
 8008bc4:	4a15      	ldr	r2, [pc, #84]	; (8008c1c <UART_SetConfig+0x118>)
 8008bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd0:	4419      	add	r1, r3
 8008bd2:	68fa      	ldr	r2, [r7, #12]
 8008bd4:	4613      	mov	r3, r2
 8008bd6:	009b      	lsls	r3, r3, #2
 8008bd8:	4413      	add	r3, r2
 8008bda:	009a      	lsls	r2, r3, #2
 8008bdc:	441a      	add	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <UART_SetConfig+0x118>)
 8008bea:	fba3 0302 	umull	r0, r3, r3, r2
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	2064      	movs	r0, #100	; 0x64
 8008bf2:	fb00 f303 	mul.w	r3, r0, r3
 8008bf6:	1ad3      	subs	r3, r2, r3
 8008bf8:	011b      	lsls	r3, r3, #4
 8008bfa:	3332      	adds	r3, #50	; 0x32
 8008bfc:	4a07      	ldr	r2, [pc, #28]	; (8008c1c <UART_SetConfig+0x118>)
 8008bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008c02:	095b      	lsrs	r3, r3, #5
 8008c04:	f003 020f 	and.w	r2, r3, #15
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	440a      	add	r2, r1
 8008c0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8008c10:	bf00      	nop
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}
 8008c18:	40013800 	.word	0x40013800
 8008c1c:	51eb851f 	.word	0x51eb851f

08008c20 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b09d      	sub	sp, #116	; 0x74
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	009b      	lsls	r3, r3, #2
 8008c38:	4413      	add	r3, r2
 8008c3a:	881b      	ldrh	r3, [r3, #0]
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008c42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c46:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	78db      	ldrb	r3, [r3, #3]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d81f      	bhi.n	8008c92 <USB_ActivateEndpoint+0x72>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <USB_ActivateEndpoint+0x38>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c85 	.word	0x08008c85
 8008c60:	08008c9b 	.word	0x08008c9b
 8008c64:	08008c77 	.word	0x08008c77
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008c68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008c6c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008c74:	e012      	b.n	8008c9c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008c76:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008c7a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008c7e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008c82:	e00b      	b.n	8008c9c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008c84:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c8c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008c90:	e004      	b.n	8008c9c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008c98:	e000      	b.n	8008c9c <USB_ActivateEndpoint+0x7c>
      break;
 8008c9a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	009b      	lsls	r3, r3, #2
 8008ca4:	441a      	add	r2, r3
 8008ca6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cba:	b29b      	uxth	r3, r3
 8008cbc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	781b      	ldrb	r3, [r3, #0]
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	4413      	add	r3, r2
 8008cc8:	881b      	ldrh	r3, [r3, #0]
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cd4:	b29a      	uxth	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	009b      	lsls	r3, r3, #2
 8008cea:	441a      	add	r2, r3
 8008cec:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008cf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	7b1b      	ldrb	r3, [r3, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f040 8178 	bne.w	8008ffe <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	785b      	ldrb	r3, [r3, #1]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 8084 	beq.w	8008e20 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	61bb      	str	r3, [r7, #24]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d22:	b29b      	uxth	r3, r3
 8008d24:	461a      	mov	r2, r3
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	4413      	add	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	011a      	lsls	r2, r3, #4
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008d3a:	617b      	str	r3, [r7, #20]
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	085b      	lsrs	r3, r3, #1
 8008d42:	b29b      	uxth	r3, r3
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	697b      	ldr	r3, [r7, #20]
 8008d4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	881b      	ldrh	r3, [r3, #0]
 8008d58:	827b      	strh	r3, [r7, #18]
 8008d5a:	8a7b      	ldrh	r3, [r7, #18]
 8008d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d01b      	beq.n	8008d9c <USB_ActivateEndpoint+0x17c>
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	4413      	add	r3, r2
 8008d6e:	881b      	ldrh	r3, [r3, #0]
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d7a:	823b      	strh	r3, [r7, #16]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	441a      	add	r2, r3
 8008d86:	8a3b      	ldrh	r3, [r7, #16]
 8008d88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	78db      	ldrb	r3, [r3, #3]
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d020      	beq.n	8008de6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	881b      	ldrh	r3, [r3, #0]
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008db6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dba:	81bb      	strh	r3, [r7, #12]
 8008dbc:	89bb      	ldrh	r3, [r7, #12]
 8008dbe:	f083 0320 	eor.w	r3, r3, #32
 8008dc2:	81bb      	strh	r3, [r7, #12]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	781b      	ldrb	r3, [r3, #0]
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	441a      	add	r2, r3
 8008dce:	89bb      	ldrh	r3, [r7, #12]
 8008dd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008dd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ddc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	8013      	strh	r3, [r2, #0]
 8008de4:	e2d5      	b.n	8009392 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29b      	uxth	r3, r3
 8008df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008df8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dfc:	81fb      	strh	r3, [r7, #14]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	441a      	add	r2, r3
 8008e08:	89fb      	ldrh	r3, [r7, #14]
 8008e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e1a:	b29b      	uxth	r3, r3
 8008e1c:	8013      	strh	r3, [r2, #0]
 8008e1e:	e2b8      	b.n	8009392 <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	633b      	str	r3, [r7, #48]	; 0x30
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	461a      	mov	r2, r3
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	4413      	add	r3, r2
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	781b      	ldrb	r3, [r3, #0]
 8008e38:	011a      	lsls	r2, r3, #4
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8008e42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	88db      	ldrh	r3, [r3, #6]
 8008e48:	085b      	lsrs	r3, r3, #1
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e52:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	461a      	mov	r2, r3
 8008e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e64:	4413      	add	r3, r2
 8008e66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	781b      	ldrb	r3, [r3, #0]
 8008e6c:	011a      	lsls	r2, r3, #4
 8008e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e70:	4413      	add	r3, r2
 8008e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e76:	627b      	str	r3, [r7, #36]	; 0x24
 8008e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7a:	881b      	ldrh	r3, [r3, #0]
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e82:	b29a      	uxth	r2, r3
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	801a      	strh	r2, [r3, #0]
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b3e      	cmp	r3, #62	; 0x3e
 8008e8e:	d91d      	bls.n	8008ecc <USB_ActivateEndpoint+0x2ac>
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	095b      	lsrs	r3, r3, #5
 8008e96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f003 031f 	and.w	r3, r3, #31
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d102      	bne.n	8008eaa <USB_ActivateEndpoint+0x28a>
 8008ea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eac:	881b      	ldrh	r3, [r3, #0]
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008eb2:	b29b      	uxth	r3, r3
 8008eb4:	029b      	lsls	r3, r3, #10
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec8:	801a      	strh	r2, [r3, #0]
 8008eca:	e026      	b.n	8008f1a <USB_ActivateEndpoint+0x2fa>
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	691b      	ldr	r3, [r3, #16]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <USB_ActivateEndpoint+0x2ca>
 8008ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	b29b      	uxth	r3, r3
 8008eda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ede:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ee6:	801a      	strh	r2, [r3, #0]
 8008ee8:	e017      	b.n	8008f1a <USB_ActivateEndpoint+0x2fa>
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	691b      	ldr	r3, [r3, #16]
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d002      	beq.n	8008f04 <USB_ActivateEndpoint+0x2e4>
 8008efe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f00:	3301      	adds	r3, #1
 8008f02:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	029b      	lsls	r3, r3, #10
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	4313      	orrs	r3, r2
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f18:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4413      	add	r3, r2
 8008f24:	881b      	ldrh	r3, [r3, #0]
 8008f26:	847b      	strh	r3, [r7, #34]	; 0x22
 8008f28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d01b      	beq.n	8008f6a <USB_ActivateEndpoint+0x34a>
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	4413      	add	r3, r2
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f48:	843b      	strh	r3, [r7, #32]
 8008f4a:	687a      	ldr	r2, [r7, #4]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	781b      	ldrb	r3, [r3, #0]
 8008f50:	009b      	lsls	r3, r3, #2
 8008f52:	441a      	add	r2, r3
 8008f54:	8c3b      	ldrh	r3, [r7, #32]
 8008f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f5e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d124      	bne.n	8008fbc <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	4413      	add	r3, r2
 8008f7c:	881b      	ldrh	r3, [r3, #0]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f88:	83bb      	strh	r3, [r7, #28]
 8008f8a:	8bbb      	ldrh	r3, [r7, #28]
 8008f8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008f90:	83bb      	strh	r3, [r7, #28]
 8008f92:	8bbb      	ldrh	r3, [r7, #28]
 8008f94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008f98:	83bb      	strh	r3, [r7, #28]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	441a      	add	r2, r3
 8008fa4:	8bbb      	ldrh	r3, [r7, #28]
 8008fa6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008faa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	8013      	strh	r3, [r2, #0]
 8008fba:	e1ea      	b.n	8009392 <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	781b      	ldrb	r3, [r3, #0]
 8008fc2:	009b      	lsls	r3, r3, #2
 8008fc4:	4413      	add	r3, r2
 8008fc6:	881b      	ldrh	r3, [r3, #0]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fd2:	83fb      	strh	r3, [r7, #30]
 8008fd4:	8bfb      	ldrh	r3, [r7, #30]
 8008fd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008fda:	83fb      	strh	r3, [r7, #30]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	441a      	add	r2, r3
 8008fe6:	8bfb      	ldrh	r3, [r7, #30]
 8008fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ff8:	b29b      	uxth	r3, r3
 8008ffa:	8013      	strh	r3, [r2, #0]
 8008ffc:	e1c9      	b.n	8009392 <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008ffe:	683b      	ldr	r3, [r7, #0]
 8009000:	78db      	ldrb	r3, [r3, #3]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d11e      	bne.n	8009044 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	781b      	ldrb	r3, [r3, #0]
 800900c:	009b      	lsls	r3, r3, #2
 800900e:	4413      	add	r3, r2
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	b29b      	uxth	r3, r3
 8009014:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800901c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	441a      	add	r2, r3
 800902a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800902e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009036:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	b29b      	uxth	r3, r3
 8009040:	8013      	strh	r3, [r2, #0]
 8009042:	e01d      	b.n	8009080 <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	881b      	ldrh	r3, [r3, #0]
 8009050:	b29b      	uxth	r3, r3
 8009052:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	009b      	lsls	r3, r3, #2
 8009066:	441a      	add	r2, r3
 8009068:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800906c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009070:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009074:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800907c:	b29b      	uxth	r3, r3
 800907e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800908a:	b29b      	uxth	r3, r3
 800908c:	461a      	mov	r2, r3
 800908e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009090:	4413      	add	r3, r2
 8009092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	011a      	lsls	r2, r3, #4
 800909a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800909c:	4413      	add	r3, r2
 800909e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80090a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	891b      	ldrh	r3, [r3, #8]
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	005b      	lsls	r3, r3, #1
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80090b2:	801a      	strh	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	657b      	str	r3, [r7, #84]	; 0x54
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090be:	b29b      	uxth	r3, r3
 80090c0:	461a      	mov	r2, r3
 80090c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090c4:	4413      	add	r3, r2
 80090c6:	657b      	str	r3, [r7, #84]	; 0x54
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	781b      	ldrb	r3, [r3, #0]
 80090cc:	011a      	lsls	r2, r3, #4
 80090ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80090d6:	653b      	str	r3, [r7, #80]	; 0x50
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	895b      	ldrh	r3, [r3, #10]
 80090dc:	085b      	lsrs	r3, r3, #1
 80090de:	b29b      	uxth	r3, r3
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090e6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f040 8093 	bne.w	8009218 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	4413      	add	r3, r2
 80090fc:	881b      	ldrh	r3, [r3, #0]
 80090fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009102:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01b      	beq.n	8009146 <USB_ActivateEndpoint+0x526>
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	4413      	add	r3, r2
 8009118:	881b      	ldrh	r3, [r3, #0]
 800911a:	b29b      	uxth	r3, r3
 800911c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009120:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009124:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009126:	687a      	ldr	r2, [r7, #4]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	441a      	add	r2, r3
 8009130:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800913a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800913e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009142:	b29b      	uxth	r3, r3
 8009144:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	781b      	ldrb	r3, [r3, #0]
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	881b      	ldrh	r3, [r3, #0]
 8009152:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009154:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800915a:	2b00      	cmp	r3, #0
 800915c:	d01b      	beq.n	8009196 <USB_ActivateEndpoint+0x576>
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	781b      	ldrb	r3, [r3, #0]
 8009164:	009b      	lsls	r3, r3, #2
 8009166:	4413      	add	r3, r2
 8009168:	881b      	ldrh	r3, [r3, #0]
 800916a:	b29b      	uxth	r3, r3
 800916c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009170:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009174:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	009b      	lsls	r3, r3, #2
 800917e:	441a      	add	r2, r3
 8009180:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800918a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800918e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009192:	b29b      	uxth	r3, r3
 8009194:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	873b      	strh	r3, [r7, #56]	; 0x38
 80091ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80091b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091bc:	873b      	strh	r3, [r7, #56]	; 0x38
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	441a      	add	r2, r3
 80091c8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80091ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091de:	687a      	ldr	r2, [r7, #4]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	4413      	add	r3, r2
 80091e8:	881b      	ldrh	r3, [r3, #0]
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091f4:	86fb      	strh	r3, [r7, #54]	; 0x36
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	009b      	lsls	r3, r3, #2
 80091fe:	441a      	add	r2, r3
 8009200:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800920a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800920e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009212:	b29b      	uxth	r3, r3
 8009214:	8013      	strh	r3, [r2, #0]
 8009216:	e0bc      	b.n	8009392 <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	881b      	ldrh	r3, [r3, #0]
 8009224:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009228:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800922c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009230:	2b00      	cmp	r3, #0
 8009232:	d01d      	beq.n	8009270 <USB_ActivateEndpoint+0x650>
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	881b      	ldrh	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800924a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	009b      	lsls	r3, r3, #2
 8009256:	441a      	add	r2, r3
 8009258:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800925c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009260:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009264:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800926c:	b29b      	uxth	r3, r3
 800926e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	4413      	add	r3, r2
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009280:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009288:	2b00      	cmp	r3, #0
 800928a:	d01d      	beq.n	80092c8 <USB_ActivateEndpoint+0x6a8>
 800928c:	687a      	ldr	r2, [r7, #4]
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	4413      	add	r3, r2
 8009296:	881b      	ldrh	r3, [r3, #0]
 8009298:	b29b      	uxth	r3, r3
 800929a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800929e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	441a      	add	r2, r3
 80092b0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80092b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80092c4:	b29b      	uxth	r3, r3
 80092c6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	78db      	ldrb	r3, [r3, #3]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d024      	beq.n	800931a <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	781b      	ldrb	r3, [r3, #0]
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	881b      	ldrh	r3, [r3, #0]
 80092dc:	b29b      	uxth	r3, r3
 80092de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80092ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80092ee:	f083 0320 	eor.w	r3, r3, #32
 80092f2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	441a      	add	r2, r3
 8009300:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009304:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009308:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800930c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009314:	b29b      	uxth	r3, r3
 8009316:	8013      	strh	r3, [r2, #0]
 8009318:	e01d      	b.n	8009356 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800931a:	687a      	ldr	r2, [r7, #4]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	b29b      	uxth	r3, r3
 8009328:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800932c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009330:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	781b      	ldrb	r3, [r3, #0]
 800933a:	009b      	lsls	r3, r3, #2
 800933c:	441a      	add	r2, r3
 800933e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009342:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009346:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800934a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800934e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009352:	b29b      	uxth	r3, r3
 8009354:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009356:	687a      	ldr	r2, [r7, #4]
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4413      	add	r3, r2
 8009360:	881b      	ldrh	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800936c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	441a      	add	r2, r3
 800937a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800937e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009382:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800938a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800938e:	b29b      	uxth	r3, r3
 8009390:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009392:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009396:	4618      	mov	r0, r3
 8009398:	3774      	adds	r7, #116	; 0x74
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b0c2      	sub	sp, #264	; 0x108
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ae:	6018      	str	r0, [r3, #0]
 80093b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b8:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	785b      	ldrb	r3, [r3, #1]
 80093c6:	2b01      	cmp	r3, #1
 80093c8:	f040 86b7 	bne.w	800a13a <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80093cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	699a      	ldr	r2, [r3, #24]
 80093d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	691b      	ldr	r3, [r3, #16]
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d908      	bls.n	80093fa <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80093e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	691b      	ldr	r3, [r3, #16]
 80093f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80093f8:	e007      	b.n	800940a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80093fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	7b1b      	ldrb	r3, [r3, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d13a      	bne.n	8009490 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800941a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	6959      	ldr	r1, [r3, #20]
 8009426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	88da      	ldrh	r2, [r3, #6]
 8009432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009436:	b29b      	uxth	r3, r3
 8009438:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800943c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009440:	6800      	ldr	r0, [r0, #0]
 8009442:	f001 fc88 	bl	800ad56 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	613b      	str	r3, [r7, #16]
 8009452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009456:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009460:	b29b      	uxth	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	613b      	str	r3, [r7, #16]
 800946a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	011a      	lsls	r2, r3, #4
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	4413      	add	r3, r2
 800947c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009480:	60fb      	str	r3, [r7, #12]
 8009482:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009486:	b29a      	uxth	r2, r3
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	801a      	strh	r2, [r3, #0]
 800948c:	f000 be1f 	b.w	800a0ce <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009490:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009494:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	78db      	ldrb	r3, [r3, #3]
 800949c:	2b02      	cmp	r3, #2
 800949e:	f040 8462 	bne.w	8009d66 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80094a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	6a1a      	ldr	r2, [r3, #32]
 80094ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	429a      	cmp	r2, r3
 80094bc:	f240 83df 	bls.w	8009c7e <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80094c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	881b      	ldrh	r3, [r3, #0]
 80094dc:	b29b      	uxth	r3, r3
 80094de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80094ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	781b      	ldrb	r3, [r3, #0]
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	441a      	add	r2, r3
 8009504:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800950c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009510:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009518:	b29b      	uxth	r3, r3
 800951a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800951c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	6a1a      	ldr	r2, [r3, #32]
 8009528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800952c:	1ad2      	subs	r2, r2, r3
 800952e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009532:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800953a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009548:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	4413      	add	r3, r2
 8009554:	881b      	ldrh	r3, [r3, #0]
 8009556:	b29b      	uxth	r3, r3
 8009558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	f000 81c7 	beq.w	80098f0 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	633b      	str	r3, [r7, #48]	; 0x30
 800956e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	785b      	ldrb	r3, [r3, #1]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d177      	bne.n	800966e <USB_EPStartXfer+0x2ce>
 800957e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009582:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
 800958a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009598:	b29b      	uxth	r3, r3
 800959a:	461a      	mov	r2, r3
 800959c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959e:	4413      	add	r3, r2
 80095a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	011a      	lsls	r2, r3, #4
 80095b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b2:	4413      	add	r3, r2
 80095b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80095b8:	627b      	str	r3, [r7, #36]	; 0x24
 80095ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095bc:	881b      	ldrh	r3, [r3, #0]
 80095be:	b29b      	uxth	r3, r3
 80095c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	801a      	strh	r2, [r3, #0]
 80095ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095ce:	2b3e      	cmp	r3, #62	; 0x3e
 80095d0:	d921      	bls.n	8009616 <USB_EPStartXfer+0x276>
 80095d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095e0:	f003 031f 	and.w	r3, r3, #31
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d104      	bne.n	80095f2 <USB_EPStartXfer+0x252>
 80095e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095ec:	3b01      	subs	r3, #1
 80095ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	881b      	ldrh	r3, [r3, #0]
 80095f6:	b29a      	uxth	r2, r3
 80095f8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	029b      	lsls	r3, r3, #10
 8009600:	b29b      	uxth	r3, r3
 8009602:	4313      	orrs	r3, r2
 8009604:	b29b      	uxth	r3, r3
 8009606:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800960a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800960e:	b29a      	uxth	r2, r3
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	801a      	strh	r2, [r3, #0]
 8009614:	e050      	b.n	80096b8 <USB_EPStartXfer+0x318>
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10a      	bne.n	8009634 <USB_EPStartXfer+0x294>
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	881b      	ldrh	r3, [r3, #0]
 8009622:	b29b      	uxth	r3, r3
 8009624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800962c:	b29a      	uxth	r2, r3
 800962e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009630:	801a      	strh	r2, [r3, #0]
 8009632:	e041      	b.n	80096b8 <USB_EPStartXfer+0x318>
 8009634:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009638:	085b      	lsrs	r3, r3, #1
 800963a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800963e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009642:	f003 0301 	and.w	r3, r3, #1
 8009646:	2b00      	cmp	r3, #0
 8009648:	d004      	beq.n	8009654 <USB_EPStartXfer+0x2b4>
 800964a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800964e:	3301      	adds	r3, #1
 8009650:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	881b      	ldrh	r3, [r3, #0]
 8009658:	b29a      	uxth	r2, r3
 800965a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800965e:	b29b      	uxth	r3, r3
 8009660:	029b      	lsls	r3, r3, #10
 8009662:	b29b      	uxth	r3, r3
 8009664:	4313      	orrs	r3, r2
 8009666:	b29a      	uxth	r2, r3
 8009668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966a:	801a      	strh	r2, [r3, #0]
 800966c:	e024      	b.n	80096b8 <USB_EPStartXfer+0x318>
 800966e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	785b      	ldrb	r3, [r3, #1]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d11c      	bne.n	80096b8 <USB_EPStartXfer+0x318>
 800967e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009682:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800968c:	b29b      	uxth	r3, r3
 800968e:	461a      	mov	r2, r3
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	4413      	add	r3, r2
 8009694:	633b      	str	r3, [r7, #48]	; 0x30
 8009696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800969a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	011a      	lsls	r2, r3, #4
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	4413      	add	r3, r2
 80096a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80096ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80096ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b2:	b29a      	uxth	r2, r3
 80096b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80096b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	895b      	ldrh	r3, [r3, #10]
 80096c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	6959      	ldr	r1, [r3, #20]
 80096d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096d8:	b29b      	uxth	r3, r3
 80096da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80096de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80096e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80096e6:	6800      	ldr	r0, [r0, #0]
 80096e8:	f001 fb35 	bl	800ad56 <USB_WritePMA>
            ep->xfer_buff += len;
 80096ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	695a      	ldr	r2, [r3, #20]
 80096f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096fc:	441a      	add	r2, r3
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800971a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	691b      	ldr	r3, [r3, #16]
 8009722:	429a      	cmp	r2, r3
 8009724:	d90f      	bls.n	8009746 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800972a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6a1a      	ldr	r2, [r3, #32]
 8009732:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009736:	1ad2      	subs	r2, r2, r3
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	621a      	str	r2, [r3, #32]
 8009744:	e00e      	b.n	8009764 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009746:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6a1b      	ldr	r3, [r3, #32]
 8009752:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2200      	movs	r2, #0
 8009762:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d177      	bne.n	8009864 <USB_EPStartXfer+0x4c4>
 8009774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	61bb      	str	r3, [r7, #24]
 8009780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009784:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800978e:	b29b      	uxth	r3, r3
 8009790:	461a      	mov	r2, r3
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	4413      	add	r3, r2
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	011a      	lsls	r2, r3, #4
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	4413      	add	r3, r2
 80097aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80097ae:	617b      	str	r3, [r7, #20]
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ba:	b29a      	uxth	r2, r3
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	801a      	strh	r2, [r3, #0]
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097c4:	2b3e      	cmp	r3, #62	; 0x3e
 80097c6:	d921      	bls.n	800980c <USB_EPStartXfer+0x46c>
 80097c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097cc:	095b      	lsrs	r3, r3, #5
 80097ce:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097d6:	f003 031f 	and.w	r3, r3, #31
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d104      	bne.n	80097e8 <USB_EPStartXfer+0x448>
 80097de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097e2:	3b01      	subs	r3, #1
 80097e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29a      	uxth	r2, r3
 80097ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097f2:	b29b      	uxth	r3, r3
 80097f4:	029b      	lsls	r3, r3, #10
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009800:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009804:	b29a      	uxth	r2, r3
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	801a      	strh	r2, [r3, #0]
 800980a:	e056      	b.n	80098ba <USB_EPStartXfer+0x51a>
 800980c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <USB_EPStartXfer+0x48a>
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800981e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009822:	b29a      	uxth	r2, r3
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	801a      	strh	r2, [r3, #0]
 8009828:	e047      	b.n	80098ba <USB_EPStartXfer+0x51a>
 800982a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982e:	085b      	lsrs	r3, r3, #1
 8009830:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009834:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009838:	f003 0301 	and.w	r3, r3, #1
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <USB_EPStartXfer+0x4aa>
 8009840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009844:	3301      	adds	r3, #1
 8009846:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800984a:	697b      	ldr	r3, [r7, #20]
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29a      	uxth	r2, r3
 8009850:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009854:	b29b      	uxth	r3, r3
 8009856:	029b      	lsls	r3, r3, #10
 8009858:	b29b      	uxth	r3, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	b29a      	uxth	r2, r3
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e02a      	b.n	80098ba <USB_EPStartXfer+0x51a>
 8009864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	785b      	ldrb	r3, [r3, #1]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d122      	bne.n	80098ba <USB_EPStartXfer+0x51a>
 8009874:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009878:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009884:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800988e:	b29b      	uxth	r3, r3
 8009890:	461a      	mov	r2, r3
 8009892:	6a3b      	ldr	r3, [r7, #32]
 8009894:	4413      	add	r3, r2
 8009896:	623b      	str	r3, [r7, #32]
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	781b      	ldrb	r3, [r3, #0]
 80098a4:	011a      	lsls	r2, r3, #4
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	4413      	add	r3, r2
 80098aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80098ae:	61fb      	str	r3, [r7, #28]
 80098b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	891b      	ldrh	r3, [r3, #8]
 80098c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6959      	ldr	r1, [r3, #20]
 80098d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098da:	b29b      	uxth	r3, r3
 80098dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80098e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80098e8:	6800      	ldr	r0, [r0, #0]
 80098ea:	f001 fa34 	bl	800ad56 <USB_WritePMA>
 80098ee:	e3ee      	b.n	800a0ce <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80098f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	785b      	ldrb	r3, [r3, #1]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d177      	bne.n	80099f0 <USB_EPStartXfer+0x650>
 8009900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009904:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	64bb      	str	r3, [r7, #72]	; 0x48
 800990c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800991a:	b29b      	uxth	r3, r3
 800991c:	461a      	mov	r2, r3
 800991e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009920:	4413      	add	r3, r2
 8009922:	64bb      	str	r3, [r7, #72]	; 0x48
 8009924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	011a      	lsls	r2, r3, #4
 8009932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009934:	4413      	add	r3, r2
 8009936:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800993a:	647b      	str	r3, [r7, #68]	; 0x44
 800993c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800993e:	881b      	ldrh	r3, [r3, #0]
 8009940:	b29b      	uxth	r3, r3
 8009942:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009946:	b29a      	uxth	r2, r3
 8009948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800994a:	801a      	strh	r2, [r3, #0]
 800994c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009950:	2b3e      	cmp	r3, #62	; 0x3e
 8009952:	d921      	bls.n	8009998 <USB_EPStartXfer+0x5f8>
 8009954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009958:	095b      	lsrs	r3, r3, #5
 800995a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800995e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009962:	f003 031f 	and.w	r3, r3, #31
 8009966:	2b00      	cmp	r3, #0
 8009968:	d104      	bne.n	8009974 <USB_EPStartXfer+0x5d4>
 800996a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800996e:	3b01      	subs	r3, #1
 8009970:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29a      	uxth	r2, r3
 800997a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800997e:	b29b      	uxth	r3, r3
 8009980:	029b      	lsls	r3, r3, #10
 8009982:	b29b      	uxth	r3, r3
 8009984:	4313      	orrs	r3, r2
 8009986:	b29b      	uxth	r3, r3
 8009988:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009990:	b29a      	uxth	r2, r3
 8009992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	e056      	b.n	8009a46 <USB_EPStartXfer+0x6a6>
 8009998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800999c:	2b00      	cmp	r3, #0
 800999e:	d10a      	bne.n	80099b6 <USB_EPStartXfer+0x616>
 80099a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099a2:	881b      	ldrh	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099b2:	801a      	strh	r2, [r3, #0]
 80099b4:	e047      	b.n	8009a46 <USB_EPStartXfer+0x6a6>
 80099b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099ba:	085b      	lsrs	r3, r3, #1
 80099bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c4:	f003 0301 	and.w	r3, r3, #1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d004      	beq.n	80099d6 <USB_EPStartXfer+0x636>
 80099cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80099d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	029b      	lsls	r3, r3, #10
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4313      	orrs	r3, r2
 80099e8:	b29a      	uxth	r2, r3
 80099ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099ec:	801a      	strh	r2, [r3, #0]
 80099ee:	e02a      	b.n	8009a46 <USB_EPStartXfer+0x6a6>
 80099f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	785b      	ldrb	r3, [r3, #1]
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d122      	bne.n	8009a46 <USB_EPStartXfer+0x6a6>
 8009a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	653b      	str	r3, [r7, #80]	; 0x50
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a20:	4413      	add	r3, r2
 8009a22:	653b      	str	r3, [r7, #80]	; 0x50
 8009a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	011a      	lsls	r2, r3, #4
 8009a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a34:	4413      	add	r3, r2
 8009a36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a40:	b29a      	uxth	r2, r3
 8009a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a44:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009a46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	891b      	ldrh	r3, [r3, #8]
 8009a52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6959      	ldr	r1, [r3, #20]
 8009a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009a6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a74:	6800      	ldr	r0, [r0, #0]
 8009a76:	f001 f96e 	bl	800ad56 <USB_WritePMA>
            ep->xfer_buff += len;
 8009a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	695a      	ldr	r2, [r3, #20]
 8009a86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a8a:	441a      	add	r2, r3
 8009a8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6a1a      	ldr	r2, [r3, #32]
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d90f      	bls.n	8009ad4 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8009ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	6a1a      	ldr	r2, [r3, #32]
 8009ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ac4:	1ad2      	subs	r2, r2, r3
 8009ac6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	621a      	str	r2, [r3, #32]
 8009ad2:	e00e      	b.n	8009af2 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8009ad4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	2200      	movs	r2, #0
 8009af0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009af2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	643b      	str	r3, [r7, #64]	; 0x40
 8009afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	785b      	ldrb	r3, [r3, #1]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d177      	bne.n	8009bfe <USB_EPStartXfer+0x85e>
 8009b0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	4413      	add	r3, r2
 8009b30:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	011a      	lsls	r2, r3, #4
 8009b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b42:	4413      	add	r3, r2
 8009b44:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009b48:	637b      	str	r3, [r7, #52]	; 0x34
 8009b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	801a      	strh	r2, [r3, #0]
 8009b5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b5e:	2b3e      	cmp	r3, #62	; 0x3e
 8009b60:	d921      	bls.n	8009ba6 <USB_EPStartXfer+0x806>
 8009b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b70:	f003 031f 	and.w	r3, r3, #31
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d104      	bne.n	8009b82 <USB_EPStartXfer+0x7e2>
 8009b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b7c:	3b01      	subs	r3, #1
 8009b7e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b8c:	b29b      	uxth	r3, r3
 8009b8e:	029b      	lsls	r3, r3, #10
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	4313      	orrs	r3, r2
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b9e:	b29a      	uxth	r2, r3
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba2:	801a      	strh	r2, [r3, #0]
 8009ba4:	e050      	b.n	8009c48 <USB_EPStartXfer+0x8a8>
 8009ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d10a      	bne.n	8009bc4 <USB_EPStartXfer+0x824>
 8009bae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bc0:	801a      	strh	r2, [r3, #0]
 8009bc2:	e041      	b.n	8009c48 <USB_EPStartXfer+0x8a8>
 8009bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bc8:	085b      	lsrs	r3, r3, #1
 8009bca:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd2:	f003 0301 	and.w	r3, r3, #1
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <USB_EPStartXfer+0x844>
 8009bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bde:	3301      	adds	r3, #1
 8009be0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	029b      	lsls	r3, r3, #10
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	b29a      	uxth	r2, r3
 8009bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bfa:	801a      	strh	r2, [r3, #0]
 8009bfc:	e024      	b.n	8009c48 <USB_EPStartXfer+0x8a8>
 8009bfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	785b      	ldrb	r3, [r3, #1]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d11c      	bne.n	8009c48 <USB_EPStartXfer+0x8a8>
 8009c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	461a      	mov	r2, r3
 8009c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c22:	4413      	add	r3, r2
 8009c24:	643b      	str	r3, [r7, #64]	; 0x40
 8009c26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	011a      	lsls	r2, r3, #4
 8009c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c36:	4413      	add	r3, r2
 8009c38:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c42:	b29a      	uxth	r2, r3
 8009c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009c48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	895b      	ldrh	r3, [r3, #10]
 8009c54:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009c58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	6959      	ldr	r1, [r3, #20]
 8009c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009c6e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009c72:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009c76:	6800      	ldr	r0, [r0, #0]
 8009c78:	f001 f86d 	bl	800ad56 <USB_WritePMA>
 8009c7c:	e227      	b.n	800a0ce <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009c7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	009b      	lsls	r3, r3, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	881b      	ldrh	r3, [r3, #0]
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cc0:	681a      	ldr	r2, [r3, #0]
 8009cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	441a      	add	r2, r3
 8009cd2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ce6:	b29b      	uxth	r3, r3
 8009ce8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	461a      	mov	r2, r3
 8009d08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d0a:	4413      	add	r3, r2
 8009d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	011a      	lsls	r2, r3, #4
 8009d1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d1e:	4413      	add	r3, r2
 8009d20:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009d24:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009d30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	891b      	ldrh	r3, [r3, #8]
 8009d3c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6959      	ldr	r1, [r3, #20]
 8009d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009d56:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009d5a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009d5e:	6800      	ldr	r0, [r0, #0]
 8009d60:	f000 fff9 	bl	800ad56 <USB_WritePMA>
 8009d64:	e1b3      	b.n	800a0ce <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6a1a      	ldr	r2, [r3, #32]
 8009d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d76:	1ad2      	subs	r2, r2, r3
 8009d78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8c:	681a      	ldr	r2, [r3, #0]
 8009d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	881b      	ldrh	r3, [r3, #0]
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	f000 80c6 	beq.w	8009f38 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	673b      	str	r3, [r7, #112]	; 0x70
 8009db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	785b      	ldrb	r3, [r3, #1]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d177      	bne.n	8009eb8 <USB_EPStartXfer+0xb18>
 8009dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dcc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009de2:	b29b      	uxth	r3, r3
 8009de4:	461a      	mov	r2, r3
 8009de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009de8:	4413      	add	r3, r2
 8009dea:	66bb      	str	r3, [r7, #104]	; 0x68
 8009dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	011a      	lsls	r2, r3, #4
 8009dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009e02:	667b      	str	r3, [r7, #100]	; 0x64
 8009e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e0e:	b29a      	uxth	r2, r3
 8009e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e12:	801a      	strh	r2, [r3, #0]
 8009e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e18:	2b3e      	cmp	r3, #62	; 0x3e
 8009e1a:	d921      	bls.n	8009e60 <USB_EPStartXfer+0xac0>
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e20:	095b      	lsrs	r3, r3, #5
 8009e22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	f003 031f 	and.w	r3, r3, #31
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d104      	bne.n	8009e3c <USB_EPStartXfer+0xa9c>
 8009e32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e36:	3b01      	subs	r3, #1
 8009e38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e3e:	881b      	ldrh	r3, [r3, #0]
 8009e40:	b29a      	uxth	r2, r3
 8009e42:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	029b      	lsls	r3, r3, #10
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e58:	b29a      	uxth	r2, r3
 8009e5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e5c:	801a      	strh	r2, [r3, #0]
 8009e5e:	e050      	b.n	8009f02 <USB_EPStartXfer+0xb62>
 8009e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d10a      	bne.n	8009e7e <USB_EPStartXfer+0xade>
 8009e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e6a:	881b      	ldrh	r3, [r3, #0]
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e7a:	801a      	strh	r2, [r3, #0]
 8009e7c:	e041      	b.n	8009f02 <USB_EPStartXfer+0xb62>
 8009e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e82:	085b      	lsrs	r3, r3, #1
 8009e84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8c:	f003 0301 	and.w	r3, r3, #1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d004      	beq.n	8009e9e <USB_EPStartXfer+0xafe>
 8009e94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009e9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	029b      	lsls	r3, r3, #10
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009eb4:	801a      	strh	r2, [r3, #0]
 8009eb6:	e024      	b.n	8009f02 <USB_EPStartXfer+0xb62>
 8009eb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	785b      	ldrb	r3, [r3, #1]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d11c      	bne.n	8009f02 <USB_EPStartXfer+0xb62>
 8009ec8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ecc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	461a      	mov	r2, r3
 8009eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009edc:	4413      	add	r3, r2
 8009ede:	673b      	str	r3, [r7, #112]	; 0x70
 8009ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	011a      	lsls	r2, r3, #4
 8009eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009f00:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	895b      	ldrh	r3, [r3, #10]
 8009f0e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6959      	ldr	r1, [r3, #20]
 8009f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f28:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f2c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f30:	6800      	ldr	r0, [r0, #0]
 8009f32:	f000 ff10 	bl	800ad56 <USB_WritePMA>
 8009f36:	e0ca      	b.n	800a0ce <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009f38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	785b      	ldrb	r3, [r3, #1]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d177      	bne.n	800a038 <USB_EPStartXfer+0xc98>
 8009f48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	461a      	mov	r2, r3
 8009f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f68:	4413      	add	r3, r2
 8009f6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	011a      	lsls	r2, r3, #4
 8009f7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8009f84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f86:	881b      	ldrh	r3, [r3, #0]
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f8e:	b29a      	uxth	r2, r3
 8009f90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f92:	801a      	strh	r2, [r3, #0]
 8009f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f98:	2b3e      	cmp	r3, #62	; 0x3e
 8009f9a:	d921      	bls.n	8009fe0 <USB_EPStartXfer+0xc40>
 8009f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa0:	095b      	lsrs	r3, r3, #5
 8009fa2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009faa:	f003 031f 	and.w	r3, r3, #31
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d104      	bne.n	8009fbc <USB_EPStartXfer+0xc1c>
 8009fb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009fbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	029b      	lsls	r3, r3, #10
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fdc:	801a      	strh	r2, [r3, #0]
 8009fde:	e05c      	b.n	800a09a <USB_EPStartXfer+0xcfa>
 8009fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <USB_EPStartXfer+0xc5e>
 8009fe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ff2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ffa:	801a      	strh	r2, [r3, #0]
 8009ffc:	e04d      	b.n	800a09a <USB_EPStartXfer+0xcfa>
 8009ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a002:	085b      	lsrs	r3, r3, #1
 800a004:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a008:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a00c:	f003 0301 	and.w	r3, r3, #1
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <USB_EPStartXfer+0xc7e>
 800a014:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a018:	3301      	adds	r3, #1
 800a01a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a01e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a020:	881b      	ldrh	r3, [r3, #0]
 800a022:	b29a      	uxth	r2, r3
 800a024:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a028:	b29b      	uxth	r3, r3
 800a02a:	029b      	lsls	r3, r3, #10
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	4313      	orrs	r3, r2
 800a030:	b29a      	uxth	r2, r3
 800a032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a034:	801a      	strh	r2, [r3, #0]
 800a036:	e030      	b.n	800a09a <USB_EPStartXfer+0xcfa>
 800a038:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a03c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	785b      	ldrb	r3, [r3, #1]
 800a044:	2b01      	cmp	r3, #1
 800a046:	d128      	bne.n	800a09a <USB_EPStartXfer+0xcfa>
 800a048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a064:	b29b      	uxth	r3, r3
 800a066:	461a      	mov	r2, r3
 800a068:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a06c:	4413      	add	r3, r2
 800a06e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a076:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	011a      	lsls	r2, r3, #4
 800a080:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a084:	4413      	add	r3, r2
 800a086:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a08a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a08e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a092:	b29a      	uxth	r2, r3
 800a094:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a098:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	891b      	ldrh	r3, [r3, #8]
 800a0a6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a0aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6959      	ldr	r1, [r3, #20]
 800a0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0ba:	b29b      	uxth	r3, r3
 800a0bc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a0c0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a0c4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a0c8:	6800      	ldr	r0, [r0, #0]
 800a0ca:	f000 fe44 	bl	800ad56 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a0ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0d6:	681a      	ldr	r2, [r3, #0]
 800a0d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	4413      	add	r3, r2
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	b29b      	uxth	r3, r3
 800a0ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f4:	817b      	strh	r3, [r7, #10]
 800a0f6:	897b      	ldrh	r3, [r7, #10]
 800a0f8:	f083 0310 	eor.w	r3, r3, #16
 800a0fc:	817b      	strh	r3, [r7, #10]
 800a0fe:	897b      	ldrh	r3, [r7, #10]
 800a100:	f083 0320 	eor.w	r3, r3, #32
 800a104:	817b      	strh	r3, [r7, #10]
 800a106:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	441a      	add	r2, r3
 800a120:	897b      	ldrh	r3, [r7, #10]
 800a122:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a126:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a12a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a12e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a132:	b29b      	uxth	r3, r3
 800a134:	8013      	strh	r3, [r2, #0]
 800a136:	f000 bcde 	b.w	800aaf6 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a13a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a13e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	7b1b      	ldrb	r3, [r3, #12]
 800a146:	2b00      	cmp	r3, #0
 800a148:	f040 80bb 	bne.w	800a2c2 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a15c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	429a      	cmp	r2, r3
 800a166:	d917      	bls.n	800a198 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a16c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	699a      	ldr	r2, [r3, #24]
 800a184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a188:	1ad2      	subs	r2, r2, r3
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	619a      	str	r2, [r3, #24]
 800a196:	e00e      	b.n	800a1b6 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a198:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	699b      	ldr	r3, [r3, #24]
 800a1a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1d2:	b29b      	uxth	r3, r3
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1da:	4413      	add	r3, r2
 800a1dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a1e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	781b      	ldrb	r3, [r3, #0]
 800a1ec:	011a      	lsls	r2, r3, #4
 800a1ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a1f2:	4413      	add	r3, r2
 800a1f4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a1f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a1fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29b      	uxth	r3, r3
 800a204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a208:	b29a      	uxth	r2, r3
 800a20a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a20e:	801a      	strh	r2, [r3, #0]
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	2b3e      	cmp	r3, #62	; 0x3e
 800a216:	d924      	bls.n	800a262 <USB_EPStartXfer+0xec2>
 800a218:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a21c:	095b      	lsrs	r3, r3, #5
 800a21e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a226:	f003 031f 	and.w	r3, r3, #31
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d104      	bne.n	800a238 <USB_EPStartXfer+0xe98>
 800a22e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a232:	3b01      	subs	r3, #1
 800a234:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a238:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	b29a      	uxth	r2, r3
 800a240:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a244:	b29b      	uxth	r3, r3
 800a246:	029b      	lsls	r3, r3, #10
 800a248:	b29b      	uxth	r3, r3
 800a24a:	4313      	orrs	r3, r2
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a256:	b29a      	uxth	r2, r3
 800a258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a25c:	801a      	strh	r2, [r3, #0]
 800a25e:	f000 bc10 	b.w	800aa82 <USB_EPStartXfer+0x16e2>
 800a262:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a266:	2b00      	cmp	r3, #0
 800a268:	d10c      	bne.n	800a284 <USB_EPStartXfer+0xee4>
 800a26a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a26e:	881b      	ldrh	r3, [r3, #0]
 800a270:	b29b      	uxth	r3, r3
 800a272:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a276:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a280:	801a      	strh	r2, [r3, #0]
 800a282:	e3fe      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
 800a284:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a288:	085b      	lsrs	r3, r3, #1
 800a28a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b00      	cmp	r3, #0
 800a298:	d004      	beq.n	800a2a4 <USB_EPStartXfer+0xf04>
 800a29a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a29e:	3301      	adds	r3, #1
 800a2a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2a8:	881b      	ldrh	r3, [r3, #0]
 800a2aa:	b29a      	uxth	r2, r3
 800a2ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	029b      	lsls	r3, r3, #10
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a2be:	801a      	strh	r2, [r3, #0]
 800a2c0:	e3df      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	78db      	ldrb	r3, [r3, #3]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	f040 8218 	bne.w	800a704 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a2d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	f040 809d 	bne.w	800a420 <USB_EPStartXfer+0x1080>
 800a2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a302:	b29b      	uxth	r3, r3
 800a304:	461a      	mov	r2, r3
 800a306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a30a:	4413      	add	r3, r2
 800a30c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	011a      	lsls	r2, r3, #4
 800a31e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a322:	4413      	add	r3, r2
 800a324:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a328:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a32c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a330:	881b      	ldrh	r3, [r3, #0]
 800a332:	b29b      	uxth	r3, r3
 800a334:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a338:	b29a      	uxth	r2, r3
 800a33a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a33e:	801a      	strh	r2, [r3, #0]
 800a340:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a344:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	2b3e      	cmp	r3, #62	; 0x3e
 800a34e:	d92b      	bls.n	800a3a8 <USB_EPStartXfer+0x1008>
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	691b      	ldr	r3, [r3, #16]
 800a35c:	095b      	lsrs	r3, r3, #5
 800a35e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 031f 	and.w	r3, r3, #31
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <USB_EPStartXfer+0xfe0>
 800a376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37a:	3b01      	subs	r3, #1
 800a37c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a380:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a384:	881b      	ldrh	r3, [r3, #0]
 800a386:	b29a      	uxth	r2, r3
 800a388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a38c:	b29b      	uxth	r3, r3
 800a38e:	029b      	lsls	r3, r3, #10
 800a390:	b29b      	uxth	r3, r3
 800a392:	4313      	orrs	r3, r2
 800a394:	b29b      	uxth	r3, r3
 800a396:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a39a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	e070      	b.n	800a48a <USB_EPStartXfer+0x10ea>
 800a3a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d10c      	bne.n	800a3d2 <USB_EPStartXfer+0x1032>
 800a3b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3bc:	881b      	ldrh	r3, [r3, #0]
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a3ce:	801a      	strh	r2, [r3, #0]
 800a3d0:	e05b      	b.n	800a48a <USB_EPStartXfer+0x10ea>
 800a3d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	085b      	lsrs	r3, r3, #1
 800a3e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	f003 0301 	and.w	r3, r3, #1
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d004      	beq.n	800a402 <USB_EPStartXfer+0x1062>
 800a3f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3fc:	3301      	adds	r3, #1
 800a3fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a402:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29a      	uxth	r2, r3
 800a40a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a40e:	b29b      	uxth	r3, r3
 800a410:	029b      	lsls	r3, r3, #10
 800a412:	b29b      	uxth	r3, r3
 800a414:	4313      	orrs	r3, r2
 800a416:	b29a      	uxth	r2, r3
 800a418:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a41c:	801a      	strh	r2, [r3, #0]
 800a41e:	e034      	b.n	800a48a <USB_EPStartXfer+0x10ea>
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	785b      	ldrb	r3, [r3, #1]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d12c      	bne.n	800a48a <USB_EPStartXfer+0x10ea>
 800a430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a434:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a43e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	461a      	mov	r2, r3
 800a450:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a454:	4413      	add	r3, r2
 800a456:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	781b      	ldrb	r3, [r3, #0]
 800a466:	011a      	lsls	r2, r3, #4
 800a468:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a46c:	4413      	add	r3, r2
 800a46e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a472:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	b29a      	uxth	r2, r3
 800a484:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a488:	801a      	strh	r2, [r3, #0]
 800a48a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	785b      	ldrb	r3, [r3, #1]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	f040 809d 	bne.w	800a5e4 <USB_EPStartXfer+0x1244>
 800a4aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4c6:	b29b      	uxth	r3, r3
 800a4c8:	461a      	mov	r2, r3
 800a4ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a4d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	781b      	ldrb	r3, [r3, #0]
 800a4e0:	011a      	lsls	r2, r3, #4
 800a4e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a4e6:	4413      	add	r3, r2
 800a4e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a4ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a4f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4f4:	881b      	ldrh	r3, [r3, #0]
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a502:	801a      	strh	r2, [r3, #0]
 800a504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	691b      	ldr	r3, [r3, #16]
 800a510:	2b3e      	cmp	r3, #62	; 0x3e
 800a512:	d92b      	bls.n	800a56c <USB_EPStartXfer+0x11cc>
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	691b      	ldr	r3, [r3, #16]
 800a520:	095b      	lsrs	r3, r3, #5
 800a522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a52a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f003 031f 	and.w	r3, r3, #31
 800a536:	2b00      	cmp	r3, #0
 800a538:	d104      	bne.n	800a544 <USB_EPStartXfer+0x11a4>
 800a53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a53e:	3b01      	subs	r3, #1
 800a540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a550:	b29b      	uxth	r3, r3
 800a552:	029b      	lsls	r3, r3, #10
 800a554:	b29b      	uxth	r3, r3
 800a556:	4313      	orrs	r3, r2
 800a558:	b29b      	uxth	r3, r3
 800a55a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a55e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a562:	b29a      	uxth	r2, r3
 800a564:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a568:	801a      	strh	r2, [r3, #0]
 800a56a:	e069      	b.n	800a640 <USB_EPStartXfer+0x12a0>
 800a56c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d10c      	bne.n	800a596 <USB_EPStartXfer+0x11f6>
 800a57c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	b29b      	uxth	r3, r3
 800a584:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a588:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a592:	801a      	strh	r2, [r3, #0]
 800a594:	e054      	b.n	800a640 <USB_EPStartXfer+0x12a0>
 800a596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	691b      	ldr	r3, [r3, #16]
 800a5a2:	085b      	lsrs	r3, r3, #1
 800a5a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	691b      	ldr	r3, [r3, #16]
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d004      	beq.n	800a5c6 <USB_EPStartXfer+0x1226>
 800a5bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a5c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a5d2:	b29b      	uxth	r3, r3
 800a5d4:	029b      	lsls	r3, r3, #10
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	4313      	orrs	r3, r2
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a5e0:	801a      	strh	r2, [r3, #0]
 800a5e2:	e02d      	b.n	800a640 <USB_EPStartXfer+0x12a0>
 800a5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	785b      	ldrb	r3, [r3, #1]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d125      	bne.n	800a640 <USB_EPStartXfer+0x12a0>
 800a5f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a602:	b29b      	uxth	r3, r3
 800a604:	461a      	mov	r2, r3
 800a606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a60a:	4413      	add	r3, r2
 800a60c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a610:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a614:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	011a      	lsls	r2, r3, #4
 800a61e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a622:	4413      	add	r3, r2
 800a624:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a62c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a630:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	b29a      	uxth	r2, r3
 800a63a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a63e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f000 8218 	beq.w	800aa82 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	009b      	lsls	r3, r3, #2
 800a66a:	4413      	add	r3, r2
 800a66c:	881b      	ldrh	r3, [r3, #0]
 800a66e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a672:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a676:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d005      	beq.n	800a68a <USB_EPStartXfer+0x12ea>
 800a67e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10d      	bne.n	800a6a6 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a68a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a68e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a692:	2b00      	cmp	r3, #0
 800a694:	f040 81f5 	bne.w	800aa82 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a698:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f040 81ee 	bne.w	800aa82 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a6a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	881b      	ldrh	r3, [r3, #0]
 800a6c2:	b29b      	uxth	r3, r3
 800a6c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6cc:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	441a      	add	r2, r3
 800a6ea:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a6ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a6f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a6f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a6fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	8013      	strh	r3, [r2, #0]
 800a702:	e1be      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	78db      	ldrb	r3, [r3, #3]
 800a710:	2b01      	cmp	r3, #1
 800a712:	f040 81b4 	bne.w	800aa7e <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	699a      	ldr	r2, [r3, #24]
 800a722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	429a      	cmp	r2, r3
 800a730:	d917      	bls.n	800a762 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	699a      	ldr	r2, [r3, #24]
 800a74e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a752:	1ad2      	subs	r2, r2, r3
 800a754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	619a      	str	r2, [r3, #24]
 800a760:	e00e      	b.n	800a780 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	2200      	movs	r2, #0
 800a77e:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a780:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a784:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	785b      	ldrb	r3, [r3, #1]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	f040 8085 	bne.w	800a89c <USB_EPStartXfer+0x14fc>
 800a792:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a796:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7b6:	4413      	add	r3, r2
 800a7b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a7bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	781b      	ldrb	r3, [r3, #0]
 800a7c8:	011a      	lsls	r2, r3, #4
 800a7ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a7ce:	4413      	add	r3, r2
 800a7d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a7d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7dc:	881b      	ldrh	r3, [r3, #0]
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7e4:	b29a      	uxth	r2, r3
 800a7e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a7ea:	801a      	strh	r2, [r3, #0]
 800a7ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a7f2:	d923      	bls.n	800a83c <USB_EPStartXfer+0x149c>
 800a7f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7f8:	095b      	lsrs	r3, r3, #5
 800a7fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a7fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a802:	f003 031f 	and.w	r3, r3, #31
 800a806:	2b00      	cmp	r3, #0
 800a808:	d104      	bne.n	800a814 <USB_EPStartXfer+0x1474>
 800a80a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a80e:	3b01      	subs	r3, #1
 800a810:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a814:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a818:	881b      	ldrh	r3, [r3, #0]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a820:	b29b      	uxth	r3, r3
 800a822:	029b      	lsls	r3, r3, #10
 800a824:	b29b      	uxth	r3, r3
 800a826:	4313      	orrs	r3, r2
 800a828:	b29b      	uxth	r3, r3
 800a82a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a82e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a832:	b29a      	uxth	r2, r3
 800a834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a838:	801a      	strh	r2, [r3, #0]
 800a83a:	e060      	b.n	800a8fe <USB_EPStartXfer+0x155e>
 800a83c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10c      	bne.n	800a85e <USB_EPStartXfer+0x14be>
 800a844:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a850:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a854:	b29a      	uxth	r2, r3
 800a856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a85a:	801a      	strh	r2, [r3, #0]
 800a85c:	e04f      	b.n	800a8fe <USB_EPStartXfer+0x155e>
 800a85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a862:	085b      	lsrs	r3, r3, #1
 800a864:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86c:	f003 0301 	and.w	r3, r3, #1
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <USB_EPStartXfer+0x14de>
 800a874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a878:	3301      	adds	r3, #1
 800a87a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a87e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a882:	881b      	ldrh	r3, [r3, #0]
 800a884:	b29a      	uxth	r2, r3
 800a886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	b29b      	uxth	r3, r3
 800a890:	4313      	orrs	r3, r2
 800a892:	b29a      	uxth	r2, r3
 800a894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a898:	801a      	strh	r2, [r3, #0]
 800a89a:	e030      	b.n	800a8fe <USB_EPStartXfer+0x155e>
 800a89c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	785b      	ldrb	r3, [r3, #1]
 800a8a8:	2b01      	cmp	r3, #1
 800a8aa:	d128      	bne.n	800a8fe <USB_EPStartXfer+0x155e>
 800a8ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8c8:	b29b      	uxth	r3, r3
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8d0:	4413      	add	r3, r2
 800a8d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	011a      	lsls	r2, r3, #4
 800a8e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f6:	b29a      	uxth	r2, r3
 800a8f8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a8fc:	801a      	strh	r2, [r3, #0]
 800a8fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a902:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a910:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	785b      	ldrb	r3, [r3, #1]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	f040 8085 	bne.w	800aa28 <USB_EPStartXfer+0x1688>
 800a91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a92c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a930:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	461a      	mov	r2, r3
 800a93e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a942:	4413      	add	r3, r2
 800a944:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a94c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	011a      	lsls	r2, r3, #4
 800a956:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a95a:	4413      	add	r3, r2
 800a95c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a964:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a968:	881b      	ldrh	r3, [r3, #0]
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a970:	b29a      	uxth	r2, r3
 800a972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a976:	801a      	strh	r2, [r3, #0]
 800a978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a97c:	2b3e      	cmp	r3, #62	; 0x3e
 800a97e:	d923      	bls.n	800a9c8 <USB_EPStartXfer+0x1628>
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	095b      	lsrs	r3, r3, #5
 800a986:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a98e:	f003 031f 	and.w	r3, r3, #31
 800a992:	2b00      	cmp	r3, #0
 800a994:	d104      	bne.n	800a9a0 <USB_EPStartXfer+0x1600>
 800a996:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a99a:	3b01      	subs	r3, #1
 800a99c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	029b      	lsls	r3, r3, #10
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	b29b      	uxth	r3, r3
 800a9b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9c4:	801a      	strh	r2, [r3, #0]
 800a9c6:	e05c      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
 800a9c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d10c      	bne.n	800a9ea <USB_EPStartXfer+0x164a>
 800a9d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9e0:	b29a      	uxth	r2, r3
 800a9e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a9e6:	801a      	strh	r2, [r3, #0]
 800a9e8:	e04b      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	085b      	lsrs	r3, r3, #1
 800a9f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d004      	beq.n	800aa0a <USB_EPStartXfer+0x166a>
 800aa00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa04:	3301      	adds	r3, #1
 800aa06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aa0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29a      	uxth	r2, r3
 800aa12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	029b      	lsls	r3, r3, #10
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	b29a      	uxth	r2, r3
 800aa20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800aa24:	801a      	strh	r2, [r3, #0]
 800aa26:	e02c      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
 800aa28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	785b      	ldrb	r3, [r3, #1]
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d124      	bne.n	800aa82 <USB_EPStartXfer+0x16e2>
 800aa38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	461a      	mov	r2, r3
 800aa4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa4e:	4413      	add	r3, r2
 800aa50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aa54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	011a      	lsls	r2, r3, #4
 800aa62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800aa66:	4413      	add	r3, r2
 800aa68:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa74:	b29a      	uxth	r2, r3
 800aa76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800aa7a:	801a      	strh	r2, [r3, #0]
 800aa7c:	e001      	b.n	800aa82 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e03a      	b.n	800aaf8 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	4413      	add	r3, r2
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaa8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aaac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aab0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800aab4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aab8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aabc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800aac0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800aac4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aac8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	441a      	add	r2, r3
 800aade:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aaea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ab02:	b480      	push	{r7}
 800ab04:	b085      	sub	sp, #20
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	785b      	ldrb	r3, [r3, #1]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d020      	beq.n	800ab56 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	881b      	ldrh	r3, [r3, #0]
 800ab20:	b29b      	uxth	r3, r3
 800ab22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab2a:	81bb      	strh	r3, [r7, #12]
 800ab2c:	89bb      	ldrh	r3, [r7, #12]
 800ab2e:	f083 0310 	eor.w	r3, r3, #16
 800ab32:	81bb      	strh	r3, [r7, #12]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	441a      	add	r2, r3
 800ab3e:	89bb      	ldrh	r3, [r7, #12]
 800ab40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab50:	b29b      	uxth	r3, r3
 800ab52:	8013      	strh	r3, [r2, #0]
 800ab54:	e01f      	b.n	800ab96 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	4413      	add	r3, r2
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	b29b      	uxth	r3, r3
 800ab64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab6c:	81fb      	strh	r3, [r7, #14]
 800ab6e:	89fb      	ldrh	r3, [r7, #14]
 800ab70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab74:	81fb      	strh	r3, [r7, #14]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	441a      	add	r2, r3
 800ab80:	89fb      	ldrh	r3, [r7, #14]
 800ab82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr

0800aba2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aba2:	b480      	push	{r7}
 800aba4:	b087      	sub	sp, #28
 800aba6:	af00      	add	r7, sp, #0
 800aba8:	6078      	str	r0, [r7, #4]
 800abaa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	7b1b      	ldrb	r3, [r3, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	f040 809d 	bne.w	800acf0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	785b      	ldrb	r3, [r3, #1]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d04c      	beq.n	800ac58 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	881b      	ldrh	r3, [r3, #0]
 800abca:	823b      	strh	r3, [r7, #16]
 800abcc:	8a3b      	ldrh	r3, [r7, #16]
 800abce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d01b      	beq.n	800ac0e <USB_EPClearStall+0x6c>
 800abd6:	687a      	ldr	r2, [r7, #4]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	009b      	lsls	r3, r3, #2
 800abde:	4413      	add	r3, r2
 800abe0:	881b      	ldrh	r3, [r3, #0]
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800abe8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abec:	81fb      	strh	r3, [r7, #14]
 800abee:	687a      	ldr	r2, [r7, #4]
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	441a      	add	r2, r3
 800abf8:	89fb      	ldrh	r3, [r7, #14]
 800abfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800abfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	78db      	ldrb	r3, [r3, #3]
 800ac12:	2b01      	cmp	r3, #1
 800ac14:	d06c      	beq.n	800acf0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ac16:	687a      	ldr	r2, [r7, #4]
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	881b      	ldrh	r3, [r3, #0]
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac2c:	81bb      	strh	r3, [r7, #12]
 800ac2e:	89bb      	ldrh	r3, [r7, #12]
 800ac30:	f083 0320 	eor.w	r3, r3, #32
 800ac34:	81bb      	strh	r3, [r7, #12]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	441a      	add	r2, r3
 800ac40:	89bb      	ldrh	r3, [r7, #12]
 800ac42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	8013      	strh	r3, [r2, #0]
 800ac56:	e04b      	b.n	800acf0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	4413      	add	r3, r2
 800ac62:	881b      	ldrh	r3, [r3, #0]
 800ac64:	82fb      	strh	r3, [r7, #22]
 800ac66:	8afb      	ldrh	r3, [r7, #22]
 800ac68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d01b      	beq.n	800aca8 <USB_EPClearStall+0x106>
 800ac70:	687a      	ldr	r2, [r7, #4]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	881b      	ldrh	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac86:	82bb      	strh	r3, [r7, #20]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	781b      	ldrb	r3, [r3, #0]
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	441a      	add	r2, r3
 800ac92:	8abb      	ldrh	r3, [r7, #20]
 800ac94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	781b      	ldrb	r3, [r3, #0]
 800acae:	009b      	lsls	r3, r3, #2
 800acb0:	4413      	add	r3, r2
 800acb2:	881b      	ldrh	r3, [r3, #0]
 800acb4:	b29b      	uxth	r3, r3
 800acb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acbe:	827b      	strh	r3, [r7, #18]
 800acc0:	8a7b      	ldrh	r3, [r7, #18]
 800acc2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800acc6:	827b      	strh	r3, [r7, #18]
 800acc8:	8a7b      	ldrh	r3, [r7, #18]
 800acca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800acce:	827b      	strh	r3, [r7, #18]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	441a      	add	r2, r3
 800acda:	8a7b      	ldrh	r3, [r7, #18]
 800acdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ace0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ace4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ace8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acec:	b29b      	uxth	r3, r3
 800acee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	371c      	adds	r7, #28
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bc80      	pop	{r7}
 800acfa:	4770      	bx	lr

0800acfc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b083      	sub	sp, #12
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ad08:	78fb      	ldrb	r3, [r7, #3]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d103      	bne.n	800ad16 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2280      	movs	r2, #128	; 0x80
 800ad12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	370c      	adds	r7, #12
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bc80      	pop	{r7}
 800ad20:	4770      	bx	lr

0800ad22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ad34:	68fb      	ldr	r3, [r7, #12]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	3714      	adds	r7, #20
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bc80      	pop	{r7}
 800ad3e:	4770      	bx	lr

0800ad40 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800ad4a:	2300      	movs	r3, #0
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bc80      	pop	{r7}
 800ad54:	4770      	bx	lr

0800ad56 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ad56:	b480      	push	{r7}
 800ad58:	b08b      	sub	sp, #44	; 0x2c
 800ad5a:	af00      	add	r7, sp, #0
 800ad5c:	60f8      	str	r0, [r7, #12]
 800ad5e:	60b9      	str	r1, [r7, #8]
 800ad60:	4611      	mov	r1, r2
 800ad62:	461a      	mov	r2, r3
 800ad64:	460b      	mov	r3, r1
 800ad66:	80fb      	strh	r3, [r7, #6]
 800ad68:	4613      	mov	r3, r2
 800ad6a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ad6c:	88bb      	ldrh	r3, [r7, #4]
 800ad6e:	3301      	adds	r3, #1
 800ad70:	085b      	lsrs	r3, r3, #1
 800ad72:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ad7c:	88fb      	ldrh	r3, [r7, #6]
 800ad7e:	005a      	lsls	r2, r3, #1
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	4413      	add	r3, r2
 800ad84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad88:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad8e:	e01e      	b.n	800adce <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	021b      	lsls	r3, r3, #8
 800ad9e:	b21a      	sxth	r2, r3
 800ada0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b21b      	sxth	r3, r3
 800ada8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800adaa:	6a3b      	ldr	r3, [r7, #32]
 800adac:	8a7a      	ldrh	r2, [r7, #18]
 800adae:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	3302      	adds	r3, #2
 800adb4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	3302      	adds	r3, #2
 800adba:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	3301      	adds	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	3301      	adds	r3, #1
 800adc6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adca:	3b01      	subs	r3, #1
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
 800adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1dd      	bne.n	800ad90 <USB_WritePMA+0x3a>
  }
}
 800add4:	bf00      	nop
 800add6:	bf00      	nop
 800add8:	372c      	adds	r7, #44	; 0x2c
 800adda:	46bd      	mov	sp, r7
 800addc:	bc80      	pop	{r7}
 800adde:	4770      	bx	lr

0800ade0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b08b      	sub	sp, #44	; 0x2c
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	60f8      	str	r0, [r7, #12]
 800ade8:	60b9      	str	r1, [r7, #8]
 800adea:	4611      	mov	r1, r2
 800adec:	461a      	mov	r2, r3
 800adee:	460b      	mov	r3, r1
 800adf0:	80fb      	strh	r3, [r7, #6]
 800adf2:	4613      	mov	r3, r2
 800adf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800adf6:	88bb      	ldrh	r3, [r7, #4]
 800adf8:	085b      	lsrs	r3, r3, #1
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ae06:	88fb      	ldrh	r3, [r7, #6]
 800ae08:	005a      	lsls	r2, r3, #1
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ae12:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ae14:	69bb      	ldr	r3, [r7, #24]
 800ae16:	627b      	str	r3, [r7, #36]	; 0x24
 800ae18:	e01b      	b.n	800ae52 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	881b      	ldrh	r3, [r3, #0]
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	3302      	adds	r3, #2
 800ae26:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae30:	69fb      	ldr	r3, [r7, #28]
 800ae32:	3301      	adds	r3, #1
 800ae34:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	0a1b      	lsrs	r3, r3, #8
 800ae3a:	b2da      	uxtb	r2, r3
 800ae3c:	69fb      	ldr	r3, [r7, #28]
 800ae3e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	3301      	adds	r3, #1
 800ae44:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800ae46:	6a3b      	ldr	r3, [r7, #32]
 800ae48:	3302      	adds	r3, #2
 800ae4a:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	3b01      	subs	r3, #1
 800ae50:	627b      	str	r3, [r7, #36]	; 0x24
 800ae52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d1e0      	bne.n	800ae1a <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800ae58:	88bb      	ldrh	r3, [r7, #4]
 800ae5a:	f003 0301 	and.w	r3, r3, #1
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d007      	beq.n	800ae74 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800ae64:	6a3b      	ldr	r3, [r7, #32]
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	b2da      	uxtb	r2, r3
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	701a      	strb	r2, [r3, #0]
  }
}
 800ae74:	bf00      	nop
 800ae76:	372c      	adds	r7, #44	; 0x2c
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bc80      	pop	{r7}
 800ae7c:	4770      	bx	lr
	...

0800ae80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ae84:	4904      	ldr	r1, [pc, #16]	; (800ae98 <MX_FATFS_Init+0x18>)
 800ae86:	4805      	ldr	r0, [pc, #20]	; (800ae9c <MX_FATFS_Init+0x1c>)
 800ae88:	f001 fd40 	bl	800c90c <FATFS_LinkDriver>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4b03      	ldr	r3, [pc, #12]	; (800aea0 <MX_FATFS_Init+0x20>)
 800ae92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ae94:	bf00      	nop
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	20000494 	.word	0x20000494
 800ae9c:	2000000c 	.word	0x2000000c
 800aea0:	20000490 	.word	0x20000490

0800aea4 <SELECT>:

//-----[ SPI Functions ]-----

/* slave select */
static void SELECT(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2110      	movs	r1, #16
 800aeac:	4802      	ldr	r0, [pc, #8]	; (800aeb8 <SELECT+0x14>)
 800aeae:	f7f8 fb4f 	bl	8003550 <HAL_GPIO_WritePin>
}
 800aeb2:	bf00      	nop
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40010800 	.word	0x40010800

0800aebc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800aec0:	2201      	movs	r2, #1
 800aec2:	2110      	movs	r1, #16
 800aec4:	4802      	ldr	r0, [pc, #8]	; (800aed0 <DESELECT+0x14>)
 800aec6:	f7f8 fb43 	bl	8003550 <HAL_GPIO_WritePin>
}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	40010800 	.word	0x40010800

0800aed4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	4603      	mov	r3, r0
 800aedc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800aede:	bf00      	nop
 800aee0:	4b08      	ldr	r3, [pc, #32]	; (800af04 <SPI_TxByte+0x30>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	f003 0302 	and.w	r3, r3, #2
 800aeea:	2b02      	cmp	r3, #2
 800aeec:	d1f8      	bne.n	800aee0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800aeee:	1df9      	adds	r1, r7, #7
 800aef0:	2364      	movs	r3, #100	; 0x64
 800aef2:	2201      	movs	r2, #1
 800aef4:	4803      	ldr	r0, [pc, #12]	; (800af04 <SPI_TxByte+0x30>)
 800aef6:	f7fc f8f7 	bl	80070e8 <HAL_SPI_Transmit>
}
 800aefa:	bf00      	nop
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
 800af02:	bf00      	nop
 800af04:	200002c4 	.word	0x200002c4

0800af08 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800af14:	bf00      	nop
 800af16:	4b08      	ldr	r3, [pc, #32]	; (800af38 <SPI_TxBuffer+0x30>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	689b      	ldr	r3, [r3, #8]
 800af1c:	f003 0302 	and.w	r3, r3, #2
 800af20:	2b02      	cmp	r3, #2
 800af22:	d1f8      	bne.n	800af16 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 800af24:	887a      	ldrh	r2, [r7, #2]
 800af26:	2364      	movs	r3, #100	; 0x64
 800af28:	6879      	ldr	r1, [r7, #4]
 800af2a:	4803      	ldr	r0, [pc, #12]	; (800af38 <SPI_TxBuffer+0x30>)
 800af2c:	f7fc f8dc 	bl	80070e8 <HAL_SPI_Transmit>
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	200002c4 	.word	0x200002c4

0800af3c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800af42:	23ff      	movs	r3, #255	; 0xff
 800af44:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800af46:	bf00      	nop
 800af48:	4b09      	ldr	r3, [pc, #36]	; (800af70 <SPI_RxByte+0x34>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f003 0302 	and.w	r3, r3, #2
 800af52:	2b02      	cmp	r3, #2
 800af54:	d1f8      	bne.n	800af48 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800af56:	1dba      	adds	r2, r7, #6
 800af58:	1df9      	adds	r1, r7, #7
 800af5a:	2364      	movs	r3, #100	; 0x64
 800af5c:	9300      	str	r3, [sp, #0]
 800af5e:	2301      	movs	r3, #1
 800af60:	4803      	ldr	r0, [pc, #12]	; (800af70 <SPI_RxByte+0x34>)
 800af62:	f7fc fa05 	bl	8007370 <HAL_SPI_TransmitReceive>
  return data;
 800af66:	79bb      	ldrb	r3, [r7, #6]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}
 800af70:	200002c4 	.word	0x200002c4

0800af74 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800af7c:	f7ff ffde 	bl	800af3c <SPI_RxByte>
 800af80:	4603      	mov	r3, r0
 800af82:	461a      	mov	r2, r3
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	701a      	strb	r2, [r3, #0]
}
 800af88:	bf00      	nop
 800af8a:	3708      	adds	r7, #8
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}

0800af90 <SD_ReadyWait>:

//-----[ SD Card Functions ]-----

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800af90:	b580      	push	{r7, lr}
 800af92:	b082      	sub	sp, #8
 800af94:	af00      	add	r7, sp, #0
  uint8_t res;
  /* timeout 500ms */
  Timer2 = 500;
 800af96:	4b0a      	ldr	r3, [pc, #40]	; (800afc0 <SD_ReadyWait+0x30>)
 800af98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800af9c:	801a      	strh	r2, [r3, #0]
  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 800af9e:	f7ff ffcd 	bl	800af3c <SPI_RxByte>
 800afa2:	4603      	mov	r3, r0
 800afa4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	2bff      	cmp	r3, #255	; 0xff
 800afaa:	d003      	beq.n	800afb4 <SD_ReadyWait+0x24>
 800afac:	4b04      	ldr	r3, [pc, #16]	; (800afc0 <SD_ReadyWait+0x30>)
 800afae:	881b      	ldrh	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1f4      	bne.n	800af9e <SD_ReadyWait+0xe>
  return res;
 800afb4:	79fb      	ldrb	r3, [r7, #7]
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3708      	adds	r7, #8
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}
 800afbe:	bf00      	nop
 800afc0:	2000049a 	.word	0x2000049a

0800afc4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 800afca:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800afce:	60fb      	str	r3, [r7, #12]
  /* transmit bytes to wake up */
  DESELECT();
 800afd0:	f7ff ff74 	bl	800aebc <DESELECT>
  for(int i = 0; i < 10; i++)
 800afd4:	2300      	movs	r3, #0
 800afd6:	60bb      	str	r3, [r7, #8]
 800afd8:	e005      	b.n	800afe6 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 800afda:	20ff      	movs	r0, #255	; 0xff
 800afdc:	f7ff ff7a 	bl	800aed4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	3301      	adds	r3, #1
 800afe4:	60bb      	str	r3, [r7, #8]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	2b09      	cmp	r3, #9
 800afea:	ddf6      	ble.n	800afda <SD_PowerOn+0x16>
  }
  /* slave select */
  SELECT();
 800afec:	f7ff ff5a 	bl	800aea4 <SELECT>
  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 800aff0:	2340      	movs	r3, #64	; 0x40
 800aff2:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 800aff4:	2300      	movs	r3, #0
 800aff6:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 800aff8:	2300      	movs	r3, #0
 800affa:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 800affc:	2300      	movs	r3, #0
 800affe:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;
 800b004:	2395      	movs	r3, #149	; 0x95
 800b006:	717b      	strb	r3, [r7, #5]
  SPI_TxBuffer(args, sizeof(args));
 800b008:	463b      	mov	r3, r7
 800b00a:	2106      	movs	r1, #6
 800b00c:	4618      	mov	r0, r3
 800b00e:	f7ff ff7b 	bl	800af08 <SPI_TxBuffer>
  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 800b012:	e002      	b.n	800b01a <SD_PowerOn+0x56>
  {
    cnt--;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3b01      	subs	r3, #1
 800b018:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 800b01a:	f7ff ff8f 	bl	800af3c <SPI_RxByte>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b01      	cmp	r3, #1
 800b022:	d002      	beq.n	800b02a <SD_PowerOn+0x66>
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d1f4      	bne.n	800b014 <SD_PowerOn+0x50>
  }
  DESELECT();
 800b02a:	f7ff ff47 	bl	800aebc <DESELECT>
  SPI_TxByte(0XFF);
 800b02e:	20ff      	movs	r0, #255	; 0xff
 800b030:	f7ff ff50 	bl	800aed4 <SPI_TxByte>
  PowerFlag = 1;
 800b034:	4b03      	ldr	r3, [pc, #12]	; (800b044 <SD_PowerOn+0x80>)
 800b036:	2201      	movs	r2, #1
 800b038:	701a      	strb	r2, [r3, #0]
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	2000049d 	.word	0x2000049d

0800b048 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800b048:	b480      	push	{r7}
 800b04a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800b04c:	4b03      	ldr	r3, [pc, #12]	; (800b05c <SD_PowerOff+0x14>)
 800b04e:	2200      	movs	r2, #0
 800b050:	701a      	strb	r2, [r3, #0]
}
 800b052:	bf00      	nop
 800b054:	46bd      	mov	sp, r7
 800b056:	bc80      	pop	{r7}
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	2000049d 	.word	0x2000049d

0800b060 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 800b060:	b480      	push	{r7}
 800b062:	af00      	add	r7, sp, #0
  return PowerFlag;
 800b064:	4b02      	ldr	r3, [pc, #8]	; (800b070 <SD_CheckPower+0x10>)
 800b066:	781b      	ldrb	r3, [r3, #0]
}
 800b068:	4618      	mov	r0, r3
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bc80      	pop	{r7}
 800b06e:	4770      	bx	lr
 800b070:	2000049d 	.word	0x2000049d

0800b074 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
 800b07c:	6039      	str	r1, [r7, #0]
  uint8_t token;
  /* timeout 200ms */
  Timer1 = 200;
 800b07e:	4b13      	ldr	r3, [pc, #76]	; (800b0cc <SD_RxDataBlock+0x58>)
 800b080:	22c8      	movs	r2, #200	; 0xc8
 800b082:	801a      	strh	r2, [r3, #0]
  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800b084:	f7ff ff5a 	bl	800af3c <SPI_RxByte>
 800b088:	4603      	mov	r3, r0
 800b08a:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
 800b08e:	2bff      	cmp	r3, #255	; 0xff
 800b090:	d103      	bne.n	800b09a <SD_RxDataBlock+0x26>
 800b092:	4b0e      	ldr	r3, [pc, #56]	; (800b0cc <SD_RxDataBlock+0x58>)
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d1f4      	bne.n	800b084 <SD_RxDataBlock+0x10>
  /* invalid response */
  if(token != 0xFE) return FALSE;
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	2bfe      	cmp	r3, #254	; 0xfe
 800b09e:	d001      	beq.n	800b0a4 <SD_RxDataBlock+0x30>
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	e00f      	b.n	800b0c4 <SD_RxDataBlock+0x50>
  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	1c5a      	adds	r2, r3, #1
 800b0a8:	607a      	str	r2, [r7, #4]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff ff62 	bl	800af74 <SPI_RxBytePtr>
  } while(len--);
 800b0b0:	683b      	ldr	r3, [r7, #0]
 800b0b2:	1e5a      	subs	r2, r3, #1
 800b0b4:	603a      	str	r2, [r7, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1f4      	bne.n	800b0a4 <SD_RxDataBlock+0x30>
  /* discard CRC */
  SPI_RxByte();
 800b0ba:	f7ff ff3f 	bl	800af3c <SPI_RxByte>
  SPI_RxByte();
 800b0be:	f7ff ff3d 	bl	800af3c <SPI_RxByte>
  return TRUE;
 800b0c2:	2301      	movs	r3, #1
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3710      	adds	r7, #16
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	20000498 	.word	0x20000498

0800b0d0 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b084      	sub	sp, #16
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
 800b0d8:	460b      	mov	r3, r1
 800b0da:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	73bb      	strb	r3, [r7, #14]
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 800b0e0:	f7ff ff56 	bl	800af90 <SD_ReadyWait>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2bff      	cmp	r3, #255	; 0xff
 800b0e8:	d001      	beq.n	800b0ee <SD_TxDataBlock+0x1e>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	e02f      	b.n	800b14e <SD_TxDataBlock+0x7e>
  /* transmit token */
  SPI_TxByte(token);
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff feef 	bl	800aed4 <SPI_TxByte>
  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 800b0f6:	78fb      	ldrb	r3, [r7, #3]
 800b0f8:	2bfd      	cmp	r3, #253	; 0xfd
 800b0fa:	d020      	beq.n	800b13e <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 800b0fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ff01 	bl	800af08 <SPI_TxBuffer>
    /* discard CRC */
    SPI_RxByte();
 800b106:	f7ff ff19 	bl	800af3c <SPI_RxByte>
    SPI_RxByte();
 800b10a:	f7ff ff17 	bl	800af3c <SPI_RxByte>
    /* receive response */
    while (i <= 64)
 800b10e:	e00b      	b.n	800b128 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 800b110:	f7ff ff14 	bl	800af3c <SPI_RxByte>
 800b114:	4603      	mov	r3, r0
 800b116:	73fb      	strb	r3, [r7, #15]
      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 800b118:	7bfb      	ldrb	r3, [r7, #15]
 800b11a:	f003 031f 	and.w	r3, r3, #31
 800b11e:	2b05      	cmp	r3, #5
 800b120:	d006      	beq.n	800b130 <SD_TxDataBlock+0x60>
      i++;
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	3301      	adds	r3, #1
 800b126:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 800b128:	7bbb      	ldrb	r3, [r7, #14]
 800b12a:	2b40      	cmp	r3, #64	; 0x40
 800b12c:	d9f0      	bls.n	800b110 <SD_TxDataBlock+0x40>
 800b12e:	e000      	b.n	800b132 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 800b130:	bf00      	nop
    }
    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800b132:	bf00      	nop
 800b134:	f7ff ff02 	bl	800af3c <SPI_RxByte>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0fa      	beq.n	800b134 <SD_TxDataBlock+0x64>
  }
  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
 800b140:	f003 031f 	and.w	r3, r3, #31
 800b144:	2b05      	cmp	r3, #5
 800b146:	d101      	bne.n	800b14c <SD_TxDataBlock+0x7c>
 800b148:	2301      	movs	r3, #1
 800b14a:	e000      	b.n	800b14e <SD_TxDataBlock+0x7e>

  return FALSE;
 800b14c:	2300      	movs	r3, #0
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3710      	adds	r7, #16
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}

0800b156 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800b156:	b580      	push	{r7, lr}
 800b158:	b084      	sub	sp, #16
 800b15a:	af00      	add	r7, sp, #0
 800b15c:	4603      	mov	r3, r0
 800b15e:	6039      	str	r1, [r7, #0]
 800b160:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800b162:	f7ff ff15 	bl	800af90 <SD_ReadyWait>
 800b166:	4603      	mov	r3, r0
 800b168:	2bff      	cmp	r3, #255	; 0xff
 800b16a:	d001      	beq.n	800b170 <SD_SendCmd+0x1a>
 800b16c:	23ff      	movs	r3, #255	; 0xff
 800b16e:	e042      	b.n	800b1f6 <SD_SendCmd+0xa0>
  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	4618      	mov	r0, r3
 800b174:	f7ff feae 	bl	800aed4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	0e1b      	lsrs	r3, r3, #24
 800b17c:	b2db      	uxtb	r3, r3
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff fea8 	bl	800aed4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	0c1b      	lsrs	r3, r3, #16
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff fea2 	bl	800aed4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 800b190:	683b      	ldr	r3, [r7, #0]
 800b192:	0a1b      	lsrs	r3, r3, #8
 800b194:	b2db      	uxtb	r3, r3
 800b196:	4618      	mov	r0, r3
 800b198:	f7ff fe9c 	bl	800aed4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff fe97 	bl	800aed4 <SPI_TxByte>
  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800b1a6:	79fb      	ldrb	r3, [r7, #7]
 800b1a8:	2b40      	cmp	r3, #64	; 0x40
 800b1aa:	d102      	bne.n	800b1b2 <SD_SendCmd+0x5c>
 800b1ac:	2395      	movs	r3, #149	; 0x95
 800b1ae:	73fb      	strb	r3, [r7, #15]
 800b1b0:	e007      	b.n	800b1c2 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800b1b2:	79fb      	ldrb	r3, [r7, #7]
 800b1b4:	2b48      	cmp	r3, #72	; 0x48
 800b1b6:	d102      	bne.n	800b1be <SD_SendCmd+0x68>
 800b1b8:	2387      	movs	r3, #135	; 0x87
 800b1ba:	73fb      	strb	r3, [r7, #15]
 800b1bc:	e001      	b.n	800b1c2 <SD_SendCmd+0x6c>
  else crc = 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	73fb      	strb	r3, [r7, #15]
  /* transmit CRC */
  SPI_TxByte(crc);
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fe85 	bl	800aed4 <SPI_TxByte>
  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 800b1ca:	79fb      	ldrb	r3, [r7, #7]
 800b1cc:	2b4c      	cmp	r3, #76	; 0x4c
 800b1ce:	d101      	bne.n	800b1d4 <SD_SendCmd+0x7e>
 800b1d0:	f7ff feb4 	bl	800af3c <SPI_RxByte>
  /* receive response */
  uint8_t n = 10;
 800b1d4:	230a      	movs	r3, #10
 800b1d6:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 800b1d8:	f7ff feb0 	bl	800af3c <SPI_RxByte>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800b1e0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	da05      	bge.n	800b1f4 <SD_SendCmd+0x9e>
 800b1e8:	7bbb      	ldrb	r3, [r7, #14]
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	73bb      	strb	r3, [r7, #14]
 800b1ee:	7bbb      	ldrb	r3, [r7, #14]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d1f1      	bne.n	800b1d8 <SD_SendCmd+0x82>

  return res;
 800b1f4:	7b7b      	ldrb	r3, [r7, #13]
}
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	3710      	adds	r7, #16
 800b1fa:	46bd      	mov	sp, r7
 800b1fc:	bd80      	pop	{r7, pc}
	...

0800b200 <SD_disk_initialize>:

//-----[ user_diskio.c Functions ]-----

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 800b200:	b590      	push	{r4, r7, lr}
 800b202:	b085      	sub	sp, #20
 800b204:	af00      	add	r7, sp, #0
 800b206:	4603      	mov	r3, r0
 800b208:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 800b20a:	79fb      	ldrb	r3, [r7, #7]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <SD_disk_initialize+0x14>
 800b210:	2301      	movs	r3, #1
 800b212:	e0d1      	b.n	800b3b8 <SD_disk_initialize+0x1b8>
  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 800b214:	4b6a      	ldr	r3, [pc, #424]	; (800b3c0 <SD_disk_initialize+0x1c0>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	b2db      	uxtb	r3, r3
 800b21a:	f003 0302 	and.w	r3, r3, #2
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <SD_disk_initialize+0x2a>
 800b222:	4b67      	ldr	r3, [pc, #412]	; (800b3c0 <SD_disk_initialize+0x1c0>)
 800b224:	781b      	ldrb	r3, [r3, #0]
 800b226:	b2db      	uxtb	r3, r3
 800b228:	e0c6      	b.n	800b3b8 <SD_disk_initialize+0x1b8>
  /* power on */
  SD_PowerOn();
 800b22a:	f7ff fecb 	bl	800afc4 <SD_PowerOn>
  /* slave select */
  SELECT();
 800b22e:	f7ff fe39 	bl	800aea4 <SELECT>
  /* check disk type */
  type = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	73bb      	strb	r3, [r7, #14]
  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800b236:	2100      	movs	r1, #0
 800b238:	2040      	movs	r0, #64	; 0x40
 800b23a:	f7ff ff8c 	bl	800b156 <SD_SendCmd>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b01      	cmp	r3, #1
 800b242:	f040 80a1 	bne.w	800b388 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800b246:	4b5f      	ldr	r3, [pc, #380]	; (800b3c4 <SD_disk_initialize+0x1c4>)
 800b248:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b24c:	801a      	strh	r2, [r3, #0]
    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800b24e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b252:	2048      	movs	r0, #72	; 0x48
 800b254:	f7ff ff7f 	bl	800b156 <SD_SendCmd>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b01      	cmp	r3, #1
 800b25c:	d155      	bne.n	800b30a <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 800b25e:	2300      	movs	r3, #0
 800b260:	73fb      	strb	r3, [r7, #15]
 800b262:	e00c      	b.n	800b27e <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800b264:	7bfc      	ldrb	r4, [r7, #15]
 800b266:	f7ff fe69 	bl	800af3c <SPI_RxByte>
 800b26a:	4603      	mov	r3, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	f104 0310 	add.w	r3, r4, #16
 800b272:	443b      	add	r3, r7
 800b274:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	3301      	adds	r3, #1
 800b27c:	73fb      	strb	r3, [r7, #15]
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d9ef      	bls.n	800b264 <SD_disk_initialize+0x64>
      }
      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800b284:	7abb      	ldrb	r3, [r7, #10]
 800b286:	2b01      	cmp	r3, #1
 800b288:	d17e      	bne.n	800b388 <SD_disk_initialize+0x188>
 800b28a:	7afb      	ldrb	r3, [r7, #11]
 800b28c:	2baa      	cmp	r3, #170	; 0xaa
 800b28e:	d17b      	bne.n	800b388 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b290:	2100      	movs	r1, #0
 800b292:	2077      	movs	r0, #119	; 0x77
 800b294:	f7ff ff5f 	bl	800b156 <SD_SendCmd>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d807      	bhi.n	800b2ae <SD_disk_initialize+0xae>
 800b29e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b2a2:	2069      	movs	r0, #105	; 0x69
 800b2a4:	f7ff ff57 	bl	800b156 <SD_SendCmd>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d004      	beq.n	800b2b8 <SD_disk_initialize+0xb8>
        } while (Timer1);
 800b2ae:	4b45      	ldr	r3, [pc, #276]	; (800b3c4 <SD_disk_initialize+0x1c4>)
 800b2b0:	881b      	ldrh	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1ec      	bne.n	800b290 <SD_disk_initialize+0x90>
 800b2b6:	e000      	b.n	800b2ba <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800b2b8:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800b2ba:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <SD_disk_initialize+0x1c4>)
 800b2bc:	881b      	ldrh	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d062      	beq.n	800b388 <SD_disk_initialize+0x188>
 800b2c2:	2100      	movs	r1, #0
 800b2c4:	207a      	movs	r0, #122	; 0x7a
 800b2c6:	f7ff ff46 	bl	800b156 <SD_SendCmd>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d15b      	bne.n	800b388 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73fb      	strb	r3, [r7, #15]
 800b2d4:	e00c      	b.n	800b2f0 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 800b2d6:	7bfc      	ldrb	r4, [r7, #15]
 800b2d8:	f7ff fe30 	bl	800af3c <SPI_RxByte>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	461a      	mov	r2, r3
 800b2e0:	f104 0310 	add.w	r3, r4, #16
 800b2e4:	443b      	add	r3, r7
 800b2e6:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800b2ea:	7bfb      	ldrb	r3, [r7, #15]
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	73fb      	strb	r3, [r7, #15]
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d9ef      	bls.n	800b2d6 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800b2f6:	7a3b      	ldrb	r3, [r7, #8]
 800b2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d001      	beq.n	800b304 <SD_disk_initialize+0x104>
 800b300:	230c      	movs	r3, #12
 800b302:	e000      	b.n	800b306 <SD_disk_initialize+0x106>
 800b304:	2304      	movs	r3, #4
 800b306:	73bb      	strb	r3, [r7, #14]
 800b308:	e03e      	b.n	800b388 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800b30a:	2100      	movs	r1, #0
 800b30c:	2077      	movs	r0, #119	; 0x77
 800b30e:	f7ff ff22 	bl	800b156 <SD_SendCmd>
 800b312:	4603      	mov	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d808      	bhi.n	800b32a <SD_disk_initialize+0x12a>
 800b318:	2100      	movs	r1, #0
 800b31a:	2069      	movs	r0, #105	; 0x69
 800b31c:	f7ff ff1b 	bl	800b156 <SD_SendCmd>
 800b320:	4603      	mov	r3, r0
 800b322:	2b01      	cmp	r3, #1
 800b324:	d801      	bhi.n	800b32a <SD_disk_initialize+0x12a>
 800b326:	2302      	movs	r3, #2
 800b328:	e000      	b.n	800b32c <SD_disk_initialize+0x12c>
 800b32a:	2301      	movs	r3, #1
 800b32c:	73bb      	strb	r3, [r7, #14]
      do
      {
        if (type == CT_SD1)
 800b32e:	7bbb      	ldrb	r3, [r7, #14]
 800b330:	2b02      	cmp	r3, #2
 800b332:	d10e      	bne.n	800b352 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800b334:	2100      	movs	r1, #0
 800b336:	2077      	movs	r0, #119	; 0x77
 800b338:	f7ff ff0d 	bl	800b156 <SD_SendCmd>
 800b33c:	4603      	mov	r3, r0
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d80e      	bhi.n	800b360 <SD_disk_initialize+0x160>
 800b342:	2100      	movs	r1, #0
 800b344:	2069      	movs	r0, #105	; 0x69
 800b346:	f7ff ff06 	bl	800b156 <SD_SendCmd>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d107      	bne.n	800b360 <SD_disk_initialize+0x160>
 800b350:	e00c      	b.n	800b36c <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b352:	2100      	movs	r1, #0
 800b354:	2041      	movs	r0, #65	; 0x41
 800b356:	f7ff fefe 	bl	800b156 <SD_SendCmd>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <SD_disk_initialize+0x16a>
        }
      } while (Timer1);
 800b360:	4b18      	ldr	r3, [pc, #96]	; (800b3c4 <SD_disk_initialize+0x1c4>)
 800b362:	881b      	ldrh	r3, [r3, #0]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d1e2      	bne.n	800b32e <SD_disk_initialize+0x12e>
 800b368:	e000      	b.n	800b36c <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800b36a:	bf00      	nop
      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800b36c:	4b15      	ldr	r3, [pc, #84]	; (800b3c4 <SD_disk_initialize+0x1c4>)
 800b36e:	881b      	ldrh	r3, [r3, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d007      	beq.n	800b384 <SD_disk_initialize+0x184>
 800b374:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b378:	2050      	movs	r0, #80	; 0x50
 800b37a:	f7ff feec 	bl	800b156 <SD_SendCmd>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b00      	cmp	r3, #0
 800b382:	d001      	beq.n	800b388 <SD_disk_initialize+0x188>
 800b384:	2300      	movs	r3, #0
 800b386:	73bb      	strb	r3, [r7, #14]
    }
  }
  CardType = type;
 800b388:	4a0f      	ldr	r2, [pc, #60]	; (800b3c8 <SD_disk_initialize+0x1c8>)
 800b38a:	7bbb      	ldrb	r3, [r7, #14]
 800b38c:	7013      	strb	r3, [r2, #0]
  /* Idle */
  DESELECT();
 800b38e:	f7ff fd95 	bl	800aebc <DESELECT>
  SPI_RxByte();
 800b392:	f7ff fdd3 	bl	800af3c <SPI_RxByte>
  /* Clear STA_NOINIT */
  if (type)
 800b396:	7bbb      	ldrb	r3, [r7, #14]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d008      	beq.n	800b3ae <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 800b39c:	4b08      	ldr	r3, [pc, #32]	; (800b3c0 <SD_disk_initialize+0x1c0>)
 800b39e:	781b      	ldrb	r3, [r3, #0]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	f023 0301 	bic.w	r3, r3, #1
 800b3a6:	b2da      	uxtb	r2, r3
 800b3a8:	4b05      	ldr	r3, [pc, #20]	; (800b3c0 <SD_disk_initialize+0x1c0>)
 800b3aa:	701a      	strb	r2, [r3, #0]
 800b3ac:	e001      	b.n	800b3b2 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800b3ae:	f7ff fe4b 	bl	800b048 <SD_PowerOff>
  }
  return Stat;
 800b3b2:	4b03      	ldr	r3, [pc, #12]	; (800b3c0 <SD_disk_initialize+0x1c0>)
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	b2db      	uxtb	r3, r3
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3714      	adds	r7, #20
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd90      	pop	{r4, r7, pc}
 800b3c0:	20000009 	.word	0x20000009
 800b3c4:	20000498 	.word	0x20000498
 800b3c8:	2000049c 	.word	0x2000049c

0800b3cc <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 800b3d6:	79fb      	ldrb	r3, [r7, #7]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <SD_disk_status+0x14>
 800b3dc:	2301      	movs	r3, #1
 800b3de:	e002      	b.n	800b3e6 <SD_disk_status+0x1a>
  return Stat;
 800b3e0:	4b03      	ldr	r3, [pc, #12]	; (800b3f0 <SD_disk_status+0x24>)
 800b3e2:	781b      	ldrb	r3, [r3, #0]
 800b3e4:	b2db      	uxtb	r3, r3
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	370c      	adds	r7, #12
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bc80      	pop	{r7}
 800b3ee:	4770      	bx	lr
 800b3f0:	20000009 	.word	0x20000009

0800b3f4 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
 800b3fe:	603b      	str	r3, [r7, #0]
 800b400:	4603      	mov	r3, r0
 800b402:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d102      	bne.n	800b410 <SD_disk_read+0x1c>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d101      	bne.n	800b414 <SD_disk_read+0x20>
 800b410:	2304      	movs	r3, #4
 800b412:	e051      	b.n	800b4b8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b414:	4b2a      	ldr	r3, [pc, #168]	; (800b4c0 <SD_disk_read+0xcc>)
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	f003 0301 	and.w	r3, r3, #1
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <SD_disk_read+0x32>
 800b422:	2303      	movs	r3, #3
 800b424:	e048      	b.n	800b4b8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800b426:	4b27      	ldr	r3, [pc, #156]	; (800b4c4 <SD_disk_read+0xd0>)
 800b428:	781b      	ldrb	r3, [r3, #0]
 800b42a:	f003 0304 	and.w	r3, r3, #4
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d102      	bne.n	800b438 <SD_disk_read+0x44>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	025b      	lsls	r3, r3, #9
 800b436:	607b      	str	r3, [r7, #4]

  SELECT();
 800b438:	f7ff fd34 	bl	800aea4 <SELECT>

  if (count == 1)
 800b43c:	683b      	ldr	r3, [r7, #0]
 800b43e:	2b01      	cmp	r3, #1
 800b440:	d111      	bne.n	800b466 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800b442:	6879      	ldr	r1, [r7, #4]
 800b444:	2051      	movs	r0, #81	; 0x51
 800b446:	f7ff fe86 	bl	800b156 <SD_SendCmd>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d129      	bne.n	800b4a4 <SD_disk_read+0xb0>
 800b450:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	f7ff fe0d 	bl	800b074 <SD_RxDataBlock>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d021      	beq.n	800b4a4 <SD_disk_read+0xb0>
 800b460:	2300      	movs	r3, #0
 800b462:	603b      	str	r3, [r7, #0]
 800b464:	e01e      	b.n	800b4a4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	2052      	movs	r0, #82	; 0x52
 800b46a:	f7ff fe74 	bl	800b156 <SD_SendCmd>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d117      	bne.n	800b4a4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800b474:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b478:	68b8      	ldr	r0, [r7, #8]
 800b47a:	f7ff fdfb 	bl	800b074 <SD_RxDataBlock>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d00a      	beq.n	800b49a <SD_disk_read+0xa6>
        buff += 512;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b48a:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	3b01      	subs	r3, #1
 800b490:	603b      	str	r3, [r7, #0]
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d1ed      	bne.n	800b474 <SD_disk_read+0x80>
 800b498:	e000      	b.n	800b49c <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 800b49a:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 800b49c:	2100      	movs	r1, #0
 800b49e:	204c      	movs	r0, #76	; 0x4c
 800b4a0:	f7ff fe59 	bl	800b156 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 800b4a4:	f7ff fd0a 	bl	800aebc <DESELECT>
  SPI_RxByte();
 800b4a8:	f7ff fd48 	bl	800af3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	bf14      	ite	ne
 800b4b2:	2301      	movne	r3, #1
 800b4b4:	2300      	moveq	r3, #0
 800b4b6:	b2db      	uxtb	r3, r3
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3710      	adds	r7, #16
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000009 	.word	0x20000009
 800b4c4:	2000049c 	.word	0x2000049c

0800b4c8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	60b9      	str	r1, [r7, #8]
 800b4d0:	607a      	str	r2, [r7, #4]
 800b4d2:	603b      	str	r3, [r7, #0]
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d102      	bne.n	800b4e4 <SD_disk_write+0x1c>
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d101      	bne.n	800b4e8 <SD_disk_write+0x20>
 800b4e4:	2304      	movs	r3, #4
 800b4e6:	e06b      	b.n	800b5c0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b4e8:	4b37      	ldr	r3, [pc, #220]	; (800b5c8 <SD_disk_write+0x100>)
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	f003 0301 	and.w	r3, r3, #1
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d001      	beq.n	800b4fa <SD_disk_write+0x32>
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e062      	b.n	800b5c0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800b4fa:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <SD_disk_write+0x100>)
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	b2db      	uxtb	r3, r3
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d001      	beq.n	800b50c <SD_disk_write+0x44>
 800b508:	2302      	movs	r3, #2
 800b50a:	e059      	b.n	800b5c0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800b50c:	4b2f      	ldr	r3, [pc, #188]	; (800b5cc <SD_disk_write+0x104>)
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	f003 0304 	and.w	r3, r3, #4
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <SD_disk_write+0x56>
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	025b      	lsls	r3, r3, #9
 800b51c:	607b      	str	r3, [r7, #4]

  SELECT();
 800b51e:	f7ff fcc1 	bl	800aea4 <SELECT>

  if (count == 1)
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d110      	bne.n	800b54a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	2058      	movs	r0, #88	; 0x58
 800b52c:	f7ff fe13 	bl	800b156 <SD_SendCmd>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d13a      	bne.n	800b5ac <SD_disk_write+0xe4>
 800b536:	21fe      	movs	r1, #254	; 0xfe
 800b538:	68b8      	ldr	r0, [r7, #8]
 800b53a:	f7ff fdc9 	bl	800b0d0 <SD_TxDataBlock>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d033      	beq.n	800b5ac <SD_disk_write+0xe4>
      count = 0;
 800b544:	2300      	movs	r3, #0
 800b546:	603b      	str	r3, [r7, #0]
 800b548:	e030      	b.n	800b5ac <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800b54a:	4b20      	ldr	r3, [pc, #128]	; (800b5cc <SD_disk_write+0x104>)
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	f003 0302 	and.w	r3, r3, #2
 800b552:	2b00      	cmp	r3, #0
 800b554:	d007      	beq.n	800b566 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800b556:	2100      	movs	r1, #0
 800b558:	2077      	movs	r0, #119	; 0x77
 800b55a:	f7ff fdfc 	bl	800b156 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	2057      	movs	r0, #87	; 0x57
 800b562:	f7ff fdf8 	bl	800b156 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800b566:	6879      	ldr	r1, [r7, #4]
 800b568:	2059      	movs	r0, #89	; 0x59
 800b56a:	f7ff fdf4 	bl	800b156 <SD_SendCmd>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d11b      	bne.n	800b5ac <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b574:	21fc      	movs	r1, #252	; 0xfc
 800b576:	68b8      	ldr	r0, [r7, #8]
 800b578:	f7ff fdaa 	bl	800b0d0 <SD_TxDataBlock>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00a      	beq.n	800b598 <SD_disk_write+0xd0>
        buff += 512;
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b588:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	3b01      	subs	r3, #1
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d1ee      	bne.n	800b574 <SD_disk_write+0xac>
 800b596:	e000      	b.n	800b59a <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800b598:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 800b59a:	21fd      	movs	r1, #253	; 0xfd
 800b59c:	2000      	movs	r0, #0
 800b59e:	f7ff fd97 	bl	800b0d0 <SD_TxDataBlock>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d101      	bne.n	800b5ac <SD_disk_write+0xe4>
      {
        count = 1;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 800b5ac:	f7ff fc86 	bl	800aebc <DESELECT>
  SPI_RxByte();
 800b5b0:	f7ff fcc4 	bl	800af3c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf14      	ite	ne
 800b5ba:	2301      	movne	r3, #1
 800b5bc:	2300      	moveq	r3, #0
 800b5be:	b2db      	uxtb	r3, r3
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	20000009 	.word	0x20000009
 800b5cc:	2000049c 	.word	0x2000049c

0800b5d0 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b08b      	sub	sp, #44	; 0x2c
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	603a      	str	r2, [r7, #0]
 800b5da:	71fb      	strb	r3, [r7, #7]
 800b5dc:	460b      	mov	r3, r1
 800b5de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d001      	beq.n	800b5ee <SD_disk_ioctl+0x1e>
 800b5ea:	2304      	movs	r3, #4
 800b5ec:	e115      	b.n	800b81a <SD_disk_ioctl+0x24a>
  res = RES_ERROR;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 800b5f4:	79bb      	ldrb	r3, [r7, #6]
 800b5f6:	2b05      	cmp	r3, #5
 800b5f8:	d124      	bne.n	800b644 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800b5fa:	6a3b      	ldr	r3, [r7, #32]
 800b5fc:	781b      	ldrb	r3, [r3, #0]
 800b5fe:	2b02      	cmp	r3, #2
 800b600:	d012      	beq.n	800b628 <SD_disk_ioctl+0x58>
 800b602:	2b02      	cmp	r3, #2
 800b604:	dc1a      	bgt.n	800b63c <SD_disk_ioctl+0x6c>
 800b606:	2b00      	cmp	r3, #0
 800b608:	d002      	beq.n	800b610 <SD_disk_ioctl+0x40>
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d006      	beq.n	800b61c <SD_disk_ioctl+0x4c>
 800b60e:	e015      	b.n	800b63c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 800b610:	f7ff fd1a 	bl	800b048 <SD_PowerOff>
      res = RES_OK;
 800b614:	2300      	movs	r3, #0
 800b616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b61a:	e0fc      	b.n	800b816 <SD_disk_ioctl+0x246>
    case 1:
      SD_PowerOn();   /* Power On */
 800b61c:	f7ff fcd2 	bl	800afc4 <SD_PowerOn>
      res = RES_OK;
 800b620:	2300      	movs	r3, #0
 800b622:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b626:	e0f6      	b.n	800b816 <SD_disk_ioctl+0x246>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 800b628:	6a3b      	ldr	r3, [r7, #32]
 800b62a:	1c5c      	adds	r4, r3, #1
 800b62c:	f7ff fd18 	bl	800b060 <SD_CheckPower>
 800b630:	4603      	mov	r3, r0
 800b632:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800b634:	2300      	movs	r3, #0
 800b636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b63a:	e0ec      	b.n	800b816 <SD_disk_ioctl+0x246>
    default:
      res = RES_PARERR;
 800b63c:	2304      	movs	r3, #4
 800b63e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b642:	e0e8      	b.n	800b816 <SD_disk_ioctl+0x246>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT){
 800b644:	4b77      	ldr	r3, [pc, #476]	; (800b824 <SD_disk_ioctl+0x254>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	f003 0301 	and.w	r3, r3, #1
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d001      	beq.n	800b656 <SD_disk_ioctl+0x86>
    	return RES_NOTRDY;
 800b652:	2303      	movs	r3, #3
 800b654:	e0e1      	b.n	800b81a <SD_disk_ioctl+0x24a>
    }
    SELECT();
 800b656:	f7ff fc25 	bl	800aea4 <SELECT>
    switch (ctrl)
 800b65a:	79bb      	ldrb	r3, [r7, #6]
 800b65c:	2b0d      	cmp	r3, #13
 800b65e:	f200 80cb 	bhi.w	800b7f8 <SD_disk_ioctl+0x228>
 800b662:	a201      	add	r2, pc, #4	; (adr r2, 800b668 <SD_disk_ioctl+0x98>)
 800b664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b668:	0800b763 	.word	0x0800b763
 800b66c:	0800b6a1 	.word	0x0800b6a1
 800b670:	0800b753 	.word	0x0800b753
 800b674:	0800b7f9 	.word	0x0800b7f9
 800b678:	0800b7f9 	.word	0x0800b7f9
 800b67c:	0800b7f9 	.word	0x0800b7f9
 800b680:	0800b7f9 	.word	0x0800b7f9
 800b684:	0800b7f9 	.word	0x0800b7f9
 800b688:	0800b7f9 	.word	0x0800b7f9
 800b68c:	0800b7f9 	.word	0x0800b7f9
 800b690:	0800b7f9 	.word	0x0800b7f9
 800b694:	0800b775 	.word	0x0800b775
 800b698:	0800b799 	.word	0x0800b799
 800b69c:	0800b7bd 	.word	0x0800b7bd
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 800b6a0:	2100      	movs	r1, #0
 800b6a2:	2049      	movs	r0, #73	; 0x49
 800b6a4:	f7ff fd57 	bl	800b156 <SD_SendCmd>
 800b6a8:	4603      	mov	r3, r0
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f040 80a8 	bne.w	800b800 <SD_disk_ioctl+0x230>
 800b6b0:	f107 030c 	add.w	r3, r7, #12
 800b6b4:	2110      	movs	r1, #16
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7ff fcdc 	bl	800b074 <SD_RxDataBlock>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f000 809e 	beq.w	800b800 <SD_disk_ioctl+0x230>
      {
        if ((csd[0] >> 6) == 1)
 800b6c4:	7b3b      	ldrb	r3, [r7, #12]
 800b6c6:	099b      	lsrs	r3, r3, #6
 800b6c8:	b2db      	uxtb	r3, r3
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d10e      	bne.n	800b6ec <SD_disk_ioctl+0x11c>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800b6ce:	7d7b      	ldrb	r3, [r7, #21]
 800b6d0:	b29a      	uxth	r2, r3
 800b6d2:	7d3b      	ldrb	r3, [r7, #20]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	021b      	lsls	r3, r3, #8
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	4413      	add	r3, r2
 800b6dc:	b29b      	uxth	r3, r3
 800b6de:	3301      	adds	r3, #1
 800b6e0:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 800b6e2:	8bfb      	ldrh	r3, [r7, #30]
 800b6e4:	029a      	lsls	r2, r3, #10
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	601a      	str	r2, [r3, #0]
 800b6ea:	e02e      	b.n	800b74a <SD_disk_ioctl+0x17a>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b6ec:	7c7b      	ldrb	r3, [r7, #17]
 800b6ee:	f003 030f 	and.w	r3, r3, #15
 800b6f2:	b2da      	uxtb	r2, r3
 800b6f4:	7dbb      	ldrb	r3, [r7, #22]
 800b6f6:	09db      	lsrs	r3, r3, #7
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	7d7b      	ldrb	r3, [r7, #21]
 800b700:	005b      	lsls	r3, r3, #1
 800b702:	b2db      	uxtb	r3, r3
 800b704:	f003 0306 	and.w	r3, r3, #6
 800b708:	b2db      	uxtb	r3, r3
 800b70a:	4413      	add	r3, r2
 800b70c:	b2db      	uxtb	r3, r3
 800b70e:	3302      	adds	r3, #2
 800b710:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800b714:	7d3b      	ldrb	r3, [r7, #20]
 800b716:	099b      	lsrs	r3, r3, #6
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	b29a      	uxth	r2, r3
 800b71c:	7cfb      	ldrb	r3, [r7, #19]
 800b71e:	b29b      	uxth	r3, r3
 800b720:	009b      	lsls	r3, r3, #2
 800b722:	b29b      	uxth	r3, r3
 800b724:	4413      	add	r3, r2
 800b726:	b29a      	uxth	r2, r3
 800b728:	7cbb      	ldrb	r3, [r7, #18]
 800b72a:	029b      	lsls	r3, r3, #10
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b732:	b29b      	uxth	r3, r3
 800b734:	4413      	add	r3, r2
 800b736:	b29b      	uxth	r3, r3
 800b738:	3301      	adds	r3, #1
 800b73a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800b73c:	8bfa      	ldrh	r2, [r7, #30]
 800b73e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b742:	3b09      	subs	r3, #9
 800b744:	409a      	lsls	r2, r3
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800b74a:	2300      	movs	r3, #0
 800b74c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 800b750:	e056      	b.n	800b800 <SD_disk_ioctl+0x230>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b758:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800b75a:	2300      	movs	r3, #0
 800b75c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b760:	e055      	b.n	800b80e <SD_disk_ioctl+0x23e>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800b762:	f7ff fc15 	bl	800af90 <SD_ReadyWait>
 800b766:	4603      	mov	r3, r0
 800b768:	2bff      	cmp	r3, #255	; 0xff
 800b76a:	d14b      	bne.n	800b804 <SD_disk_ioctl+0x234>
 800b76c:	2300      	movs	r3, #0
 800b76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b772:	e047      	b.n	800b804 <SD_disk_ioctl+0x234>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b774:	2100      	movs	r1, #0
 800b776:	2049      	movs	r0, #73	; 0x49
 800b778:	f7ff fced 	bl	800b156 <SD_SendCmd>
 800b77c:	4603      	mov	r3, r0
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d142      	bne.n	800b808 <SD_disk_ioctl+0x238>
 800b782:	2110      	movs	r1, #16
 800b784:	6a38      	ldr	r0, [r7, #32]
 800b786:	f7ff fc75 	bl	800b074 <SD_RxDataBlock>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d03b      	beq.n	800b808 <SD_disk_ioctl+0x238>
 800b790:	2300      	movs	r3, #0
 800b792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b796:	e037      	b.n	800b808 <SD_disk_ioctl+0x238>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800b798:	2100      	movs	r1, #0
 800b79a:	204a      	movs	r0, #74	; 0x4a
 800b79c:	f7ff fcdb 	bl	800b156 <SD_SendCmd>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d132      	bne.n	800b80c <SD_disk_ioctl+0x23c>
 800b7a6:	2110      	movs	r1, #16
 800b7a8:	6a38      	ldr	r0, [r7, #32]
 800b7aa:	f7ff fc63 	bl	800b074 <SD_RxDataBlock>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d02b      	beq.n	800b80c <SD_disk_ioctl+0x23c>
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800b7ba:	e027      	b.n	800b80c <SD_disk_ioctl+0x23c>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 800b7bc:	2100      	movs	r1, #0
 800b7be:	207a      	movs	r0, #122	; 0x7a
 800b7c0:	f7ff fcc9 	bl	800b156 <SD_SendCmd>
 800b7c4:	4603      	mov	r3, r0
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d116      	bne.n	800b7f8 <SD_disk_ioctl+0x228>
      {
        for (n = 0; n < 4; n++)
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7d0:	e00b      	b.n	800b7ea <SD_disk_ioctl+0x21a>
        {
          *ptr++ = SPI_RxByte();
 800b7d2:	6a3c      	ldr	r4, [r7, #32]
 800b7d4:	1c63      	adds	r3, r4, #1
 800b7d6:	623b      	str	r3, [r7, #32]
 800b7d8:	f7ff fbb0 	bl	800af3c <SPI_RxByte>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800b7e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b7ee:	2b03      	cmp	r3, #3
 800b7f0:	d9ef      	bls.n	800b7d2 <SD_disk_ioctl+0x202>
        }
        res = RES_OK;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
    default:
      res = RES_PARERR;
 800b7f8:	2304      	movs	r3, #4
 800b7fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b7fe:	e006      	b.n	800b80e <SD_disk_ioctl+0x23e>
      break;
 800b800:	bf00      	nop
 800b802:	e004      	b.n	800b80e <SD_disk_ioctl+0x23e>
      break;
 800b804:	bf00      	nop
 800b806:	e002      	b.n	800b80e <SD_disk_ioctl+0x23e>
      break;
 800b808:	bf00      	nop
 800b80a:	e000      	b.n	800b80e <SD_disk_ioctl+0x23e>
      break;
 800b80c:	bf00      	nop
    }
    DESELECT();
 800b80e:	f7ff fb55 	bl	800aebc <DESELECT>
    SPI_RxByte();
 800b812:	f7ff fb93 	bl	800af3c <SPI_RxByte>
  }
  return res;
 800b816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b81a:	4618      	mov	r0, r3
 800b81c:	372c      	adds	r7, #44	; 0x2c
 800b81e:	46bd      	mov	sp, r7
 800b820:	bd90      	pop	{r4, r7, pc}
 800b822:	bf00      	nop
 800b824:	20000009 	.word	0x20000009

0800b828 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800b832:	79fb      	ldrb	r3, [r7, #7]
 800b834:	4618      	mov	r0, r3
 800b836:	f7ff fce3 	bl	800b200 <SD_disk_initialize>
 800b83a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	 return SD_disk_status(pdrv);
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	4618      	mov	r0, r3
 800b852:	f7ff fdbb 	bl	800b3cc <SD_disk_status>
 800b856:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	60b9      	str	r1, [r7, #8]
 800b868:	607a      	str	r2, [r7, #4]
 800b86a:	603b      	str	r3, [r7, #0]
 800b86c:	4603      	mov	r3, r0
 800b86e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800b870:	7bf8      	ldrb	r0, [r7, #15]
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	68b9      	ldr	r1, [r7, #8]
 800b878:	f7ff fdbc 	bl	800b3f4 <SD_disk_read>
 800b87c:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3710      	adds	r7, #16
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b084      	sub	sp, #16
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
 800b890:	603b      	str	r3, [r7, #0]
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800b896:	7bf8      	ldrb	r0, [r7, #15]
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	687a      	ldr	r2, [r7, #4]
 800b89c:	68b9      	ldr	r1, [r7, #8]
 800b89e:	f7ff fe13 	bl	800b4c8 <SD_disk_write>
 800b8a2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	603a      	str	r2, [r7, #0]
 800b8b6:	71fb      	strb	r3, [r7, #7]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800b8bc:	79b9      	ldrb	r1, [r7, #6]
 800b8be:	79fb      	ldrb	r3, [r7, #7]
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7ff fe84 	bl	800b5d0 <SD_disk_ioctl>
 800b8c8:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b8da:	2300      	movs	r3, #0
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bc80      	pop	{r7}
 800b8e4:	4770      	bx	lr

0800b8e6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b8e6:	b580      	push	{r7, lr}
 800b8e8:	b084      	sub	sp, #16
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b8f2:	2302      	movs	r3, #2
 800b8f4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00c      	beq.n	800b91a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	78fa      	ldrb	r2, [r7, #3]
 800b90a:	4611      	mov	r1, r2
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	4798      	blx	r3
 800b910:	4603      	mov	r3, r0
 800b912:	2b00      	cmp	r3, #0
 800b914:	d101      	bne.n	800b91a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800b916:	2300      	movs	r3, #0
 800b918:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800b91a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	460b      	mov	r3, r1
 800b92e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	78fa      	ldrb	r2, [r7, #3]
 800b93a:	4611      	mov	r1, r2
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	4798      	blx	r3

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
 800b952:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	4618      	mov	r0, r3
 800b95e:	f000 fed8 	bl	800c712 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2201      	movs	r2, #1
 800b966:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b970:	461a      	mov	r2, r3
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b97e:	f003 031f 	and.w	r3, r3, #31
 800b982:	2b02      	cmp	r3, #2
 800b984:	d016      	beq.n	800b9b4 <USBD_LL_SetupStage+0x6a>
 800b986:	2b02      	cmp	r3, #2
 800b988:	d81c      	bhi.n	800b9c4 <USBD_LL_SetupStage+0x7a>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d002      	beq.n	800b994 <USBD_LL_SetupStage+0x4a>
 800b98e:	2b01      	cmp	r3, #1
 800b990:	d008      	beq.n	800b9a4 <USBD_LL_SetupStage+0x5a>
 800b992:	e017      	b.n	800b9c4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f000 f9cb 	bl	800bd38 <USBD_StdDevReq>
      break;
 800b9a2:	e01a      	b.n	800b9da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f000 fa2d 	bl	800be0c <USBD_StdItfReq>
      break;
 800b9b2:	e012      	b.n	800b9da <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f000 fa6d 	bl	800be9c <USBD_StdEPReq>
      break;
 800b9c2:	e00a      	b.n	800b9da <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800b9ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b9ce:	b2db      	uxtb	r3, r3
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f001 f86a 	bl	800caac <USBD_LL_StallEP>
      break;
 800b9d8:	bf00      	nop
  }

  return USBD_OK;
 800b9da:	2300      	movs	r3, #0
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}

0800b9e4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	60f8      	str	r0, [r7, #12]
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	607a      	str	r2, [r7, #4]
 800b9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800b9f2:	7afb      	ldrb	r3, [r7, #11]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d14b      	bne.n	800ba90 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b9fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba06:	2b03      	cmp	r3, #3
 800ba08:	d134      	bne.n	800ba74 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d919      	bls.n	800ba4a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	68da      	ldr	r2, [r3, #12]
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	1ad2      	subs	r2, r2, r3
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	68da      	ldr	r2, [r3, #12]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d203      	bcs.n	800ba38 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	e002      	b.n	800ba3e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	461a      	mov	r2, r3
 800ba40:	6879      	ldr	r1, [r7, #4]
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 fee0 	bl	800c808 <USBD_CtlContinueRx>
 800ba48:	e038      	b.n	800babc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba50:	691b      	ldr	r3, [r3, #16]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00a      	beq.n	800ba6c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d105      	bne.n	800ba6c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba66:	691b      	ldr	r3, [r3, #16]
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 fedd 	bl	800c82c <USBD_CtlSendStatus>
 800ba72:	e023      	b.n	800babc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba7a:	2b05      	cmp	r3, #5
 800ba7c:	d11e      	bne.n	800babc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2200      	movs	r2, #0
 800ba82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800ba86:	2100      	movs	r1, #0
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f001 f80f 	bl	800caac <USBD_LL_StallEP>
 800ba8e:	e015      	b.n	800babc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d00d      	beq.n	800bab8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800baa2:	2b03      	cmp	r3, #3
 800baa4:	d108      	bne.n	800bab8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baac:	699b      	ldr	r3, [r3, #24]
 800baae:	7afa      	ldrb	r2, [r7, #11]
 800bab0:	4611      	mov	r1, r2
 800bab2:	68f8      	ldr	r0, [r7, #12]
 800bab4:	4798      	blx	r3
 800bab6:	e001      	b.n	800babc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bab8:	2302      	movs	r3, #2
 800baba:	e000      	b.n	800babe <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b086      	sub	sp, #24
 800baca:	af00      	add	r7, sp, #0
 800bacc:	60f8      	str	r0, [r7, #12]
 800bace:	460b      	mov	r3, r1
 800bad0:	607a      	str	r2, [r7, #4]
 800bad2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bad4:	7afb      	ldrb	r3, [r7, #11]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d17f      	bne.n	800bbda <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3314      	adds	r3, #20
 800bade:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bae6:	2b02      	cmp	r3, #2
 800bae8:	d15c      	bne.n	800bba4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	68da      	ldr	r2, [r3, #12]
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	429a      	cmp	r2, r3
 800baf4:	d915      	bls.n	800bb22 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800baf6:	697b      	ldr	r3, [r7, #20]
 800baf8:	68da      	ldr	r2, [r3, #12]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	1ad2      	subs	r2, r2, r3
 800bb00:	697b      	ldr	r3, [r7, #20]
 800bb02:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	b29b      	uxth	r3, r3
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	6879      	ldr	r1, [r7, #4]
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	f000 fe68 	bl	800c7e4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb14:	2300      	movs	r3, #0
 800bb16:	2200      	movs	r2, #0
 800bb18:	2100      	movs	r1, #0
 800bb1a:	68f8      	ldr	r0, [r7, #12]
 800bb1c:	f001 f871 	bl	800cc02 <USBD_LL_PrepareReceive>
 800bb20:	e04e      	b.n	800bbc0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	689b      	ldr	r3, [r3, #8]
 800bb26:	697a      	ldr	r2, [r7, #20]
 800bb28:	6912      	ldr	r2, [r2, #16]
 800bb2a:	fbb3 f1f2 	udiv	r1, r3, r2
 800bb2e:	fb01 f202 	mul.w	r2, r1, r2
 800bb32:	1a9b      	subs	r3, r3, r2
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d11c      	bne.n	800bb72 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	689a      	ldr	r2, [r3, #8]
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d316      	bcc.n	800bb72 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	689a      	ldr	r2, [r3, #8]
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb4e:	429a      	cmp	r2, r3
 800bb50:	d20f      	bcs.n	800bb72 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb52:	2200      	movs	r2, #0
 800bb54:	2100      	movs	r1, #0
 800bb56:	68f8      	ldr	r0, [r7, #12]
 800bb58:	f000 fe44 	bl	800c7e4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2200      	movs	r2, #0
 800bb60:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb64:	2300      	movs	r3, #0
 800bb66:	2200      	movs	r2, #0
 800bb68:	2100      	movs	r1, #0
 800bb6a:	68f8      	ldr	r0, [r7, #12]
 800bb6c:	f001 f849 	bl	800cc02 <USBD_LL_PrepareReceive>
 800bb70:	e026      	b.n	800bbc0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bb84:	2b03      	cmp	r3, #3
 800bb86:	d105      	bne.n	800bb94 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bb94:	2180      	movs	r1, #128	; 0x80
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	f000 ff88 	bl	800caac <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800bb9c:	68f8      	ldr	r0, [r7, #12]
 800bb9e:	f000 fe58 	bl	800c852 <USBD_CtlReceiveStatus>
 800bba2:	e00d      	b.n	800bbc0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbaa:	2b04      	cmp	r3, #4
 800bbac:	d004      	beq.n	800bbb8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d103      	bne.n	800bbc0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bbb8:	2180      	movs	r1, #128	; 0x80
 800bbba:	68f8      	ldr	r0, [r7, #12]
 800bbbc:	f000 ff76 	bl	800caac <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bbc6:	2b01      	cmp	r3, #1
 800bbc8:	d11d      	bne.n	800bc06 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f7ff fe81 	bl	800b8d2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bbd8:	e015      	b.n	800bc06 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbe0:	695b      	ldr	r3, [r3, #20]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d00d      	beq.n	800bc02 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbec:	2b03      	cmp	r3, #3
 800bbee:	d108      	bne.n	800bc02 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbf6:	695b      	ldr	r3, [r3, #20]
 800bbf8:	7afa      	ldrb	r2, [r7, #11]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	4798      	blx	r3
 800bc00:	e001      	b.n	800bc06 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc02:	2302      	movs	r3, #2
 800bc04:	e000      	b.n	800bc08 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bc06:	2300      	movs	r3, #0
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3718      	adds	r7, #24
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b082      	sub	sp, #8
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc18:	2340      	movs	r3, #64	; 0x40
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 ff1e 	bl	800ca60 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2201      	movs	r2, #1
 800bc28:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2240      	movs	r2, #64	; 0x40
 800bc30:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc34:	2340      	movs	r3, #64	; 0x40
 800bc36:	2200      	movs	r2, #0
 800bc38:	2180      	movs	r1, #128	; 0x80
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f000 ff10 	bl	800ca60 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2240      	movs	r2, #64	; 0x40
 800bc4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2200      	movs	r2, #0
 800bc58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d009      	beq.n	800bc88 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	6852      	ldr	r2, [r2, #4]
 800bc80:	b2d2      	uxtb	r2, r2
 800bc82:	4611      	mov	r1, r2
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	4798      	blx	r3
  }

  return USBD_OK;
 800bc88:	2300      	movs	r3, #0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b083      	sub	sp, #12
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bc80      	pop	{r7}
 800bcae:	4770      	bx	lr

0800bcb0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	b083      	sub	sp, #12
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2204      	movs	r2, #4
 800bcc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bc80      	pop	{r7}
 800bcd6:	4770      	bx	lr

0800bcd8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d105      	bne.n	800bcf6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bc80      	pop	{r7}
 800bd00:	4770      	bx	lr

0800bd02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b082      	sub	sp, #8
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd10:	2b03      	cmp	r3, #3
 800bd12:	d10b      	bne.n	800bd2c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d005      	beq.n	800bd2c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd26:	69db      	ldr	r3, [r3, #28]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
	...

0800bd38 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd4e:	2b40      	cmp	r3, #64	; 0x40
 800bd50:	d005      	beq.n	800bd5e <USBD_StdDevReq+0x26>
 800bd52:	2b40      	cmp	r3, #64	; 0x40
 800bd54:	d84f      	bhi.n	800bdf6 <USBD_StdDevReq+0xbe>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d009      	beq.n	800bd6e <USBD_StdDevReq+0x36>
 800bd5a:	2b20      	cmp	r3, #32
 800bd5c:	d14b      	bne.n	800bdf6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	4798      	blx	r3
      break;
 800bd6c:	e048      	b.n	800be00 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	785b      	ldrb	r3, [r3, #1]
 800bd72:	2b09      	cmp	r3, #9
 800bd74:	d839      	bhi.n	800bdea <USBD_StdDevReq+0xb2>
 800bd76:	a201      	add	r2, pc, #4	; (adr r2, 800bd7c <USBD_StdDevReq+0x44>)
 800bd78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd7c:	0800bdcd 	.word	0x0800bdcd
 800bd80:	0800bde1 	.word	0x0800bde1
 800bd84:	0800bdeb 	.word	0x0800bdeb
 800bd88:	0800bdd7 	.word	0x0800bdd7
 800bd8c:	0800bdeb 	.word	0x0800bdeb
 800bd90:	0800bdaf 	.word	0x0800bdaf
 800bd94:	0800bda5 	.word	0x0800bda5
 800bd98:	0800bdeb 	.word	0x0800bdeb
 800bd9c:	0800bdc3 	.word	0x0800bdc3
 800bda0:	0800bdb9 	.word	0x0800bdb9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bda4:	6839      	ldr	r1, [r7, #0]
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f000 f9dc 	bl	800c164 <USBD_GetDescriptor>
          break;
 800bdac:	e022      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdae:	6839      	ldr	r1, [r7, #0]
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fb3f 	bl	800c434 <USBD_SetAddress>
          break;
 800bdb6:	e01d      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f000 fb7e 	bl	800c4bc <USBD_SetConfig>
          break;
 800bdc0:	e018      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f000 fc07 	bl	800c5d8 <USBD_GetConfig>
          break;
 800bdca:	e013      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fc37 	bl	800c642 <USBD_GetStatus>
          break;
 800bdd4:	e00e      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bdd6:	6839      	ldr	r1, [r7, #0]
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f000 fc65 	bl	800c6a8 <USBD_SetFeature>
          break;
 800bdde:	e009      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bde0:	6839      	ldr	r1, [r7, #0]
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 fc74 	bl	800c6d0 <USBD_ClrFeature>
          break;
 800bde8:	e004      	b.n	800bdf4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 fccc 	bl	800c78a <USBD_CtlError>
          break;
 800bdf2:	bf00      	nop
      }
      break;
 800bdf4:	e004      	b.n	800be00 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800bdf6:	6839      	ldr	r1, [r7, #0]
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f000 fcc6 	bl	800c78a <USBD_CtlError>
      break;
 800bdfe:	bf00      	nop
  }

  return ret;
 800be00:	7bfb      	ldrb	r3, [r7, #15]
}
 800be02:	4618      	mov	r0, r3
 800be04:	3710      	adds	r7, #16
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}
 800be0a:	bf00      	nop

0800be0c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be22:	2b40      	cmp	r3, #64	; 0x40
 800be24:	d005      	beq.n	800be32 <USBD_StdItfReq+0x26>
 800be26:	2b40      	cmp	r3, #64	; 0x40
 800be28:	d82e      	bhi.n	800be88 <USBD_StdItfReq+0x7c>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d001      	beq.n	800be32 <USBD_StdItfReq+0x26>
 800be2e:	2b20      	cmp	r3, #32
 800be30:	d12a      	bne.n	800be88 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be38:	3b01      	subs	r3, #1
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d81d      	bhi.n	800be7a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	889b      	ldrh	r3, [r3, #4]
 800be42:	b2db      	uxtb	r3, r3
 800be44:	2b01      	cmp	r3, #1
 800be46:	d813      	bhi.n	800be70 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	88db      	ldrh	r3, [r3, #6]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d110      	bne.n	800be84 <USBD_StdItfReq+0x78>
 800be62:	7bfb      	ldrb	r3, [r7, #15]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d10d      	bne.n	800be84 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fcdf 	bl	800c82c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800be6e:	e009      	b.n	800be84 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fc89 	bl	800c78a <USBD_CtlError>
          break;
 800be78:	e004      	b.n	800be84 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fc84 	bl	800c78a <USBD_CtlError>
          break;
 800be82:	e000      	b.n	800be86 <USBD_StdItfReq+0x7a>
          break;
 800be84:	bf00      	nop
      }
      break;
 800be86:	e004      	b.n	800be92 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fc7d 	bl	800c78a <USBD_CtlError>
      break;
 800be90:	bf00      	nop
  }

  return USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	3710      	adds	r7, #16
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b084      	sub	sp, #16
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bea6:	2300      	movs	r3, #0
 800bea8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	889b      	ldrh	r3, [r3, #4]
 800beae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800beb8:	2b40      	cmp	r3, #64	; 0x40
 800beba:	d007      	beq.n	800becc <USBD_StdEPReq+0x30>
 800bebc:	2b40      	cmp	r3, #64	; 0x40
 800bebe:	f200 8146 	bhi.w	800c14e <USBD_StdEPReq+0x2b2>
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d00a      	beq.n	800bedc <USBD_StdEPReq+0x40>
 800bec6:	2b20      	cmp	r3, #32
 800bec8:	f040 8141 	bne.w	800c14e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	4798      	blx	r3
      break;
 800beda:	e13d      	b.n	800c158 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bee4:	2b20      	cmp	r3, #32
 800bee6:	d10a      	bne.n	800befe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	4798      	blx	r3
 800bef6:	4603      	mov	r3, r0
 800bef8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	e12d      	b.n	800c15a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	785b      	ldrb	r3, [r3, #1]
 800bf02:	2b03      	cmp	r3, #3
 800bf04:	d007      	beq.n	800bf16 <USBD_StdEPReq+0x7a>
 800bf06:	2b03      	cmp	r3, #3
 800bf08:	f300 811b 	bgt.w	800c142 <USBD_StdEPReq+0x2a6>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d072      	beq.n	800bff6 <USBD_StdEPReq+0x15a>
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d03a      	beq.n	800bf8a <USBD_StdEPReq+0xee>
 800bf14:	e115      	b.n	800c142 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d002      	beq.n	800bf26 <USBD_StdEPReq+0x8a>
 800bf20:	2b03      	cmp	r3, #3
 800bf22:	d015      	beq.n	800bf50 <USBD_StdEPReq+0xb4>
 800bf24:	e02b      	b.n	800bf7e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf26:	7bbb      	ldrb	r3, [r7, #14]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00c      	beq.n	800bf46 <USBD_StdEPReq+0xaa>
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	2b80      	cmp	r3, #128	; 0x80
 800bf30:	d009      	beq.n	800bf46 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	4619      	mov	r1, r3
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fdb8 	bl	800caac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bf3c:	2180      	movs	r1, #128	; 0x80
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f000 fdb4 	bl	800caac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf44:	e020      	b.n	800bf88 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f000 fc1e 	bl	800c78a <USBD_CtlError>
              break;
 800bf4e:	e01b      	b.n	800bf88 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	885b      	ldrh	r3, [r3, #2]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10e      	bne.n	800bf76 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d00b      	beq.n	800bf76 <USBD_StdEPReq+0xda>
 800bf5e:	7bbb      	ldrb	r3, [r7, #14]
 800bf60:	2b80      	cmp	r3, #128	; 0x80
 800bf62:	d008      	beq.n	800bf76 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	88db      	ldrh	r3, [r3, #6]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d104      	bne.n	800bf76 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800bf6c:	7bbb      	ldrb	r3, [r7, #14]
 800bf6e:	4619      	mov	r1, r3
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fd9b 	bl	800caac <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fc58 	bl	800c82c <USBD_CtlSendStatus>

              break;
 800bf7c:	e004      	b.n	800bf88 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fc02 	bl	800c78a <USBD_CtlError>
              break;
 800bf86:	bf00      	nop
          }
          break;
 800bf88:	e0e0      	b.n	800c14c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf90:	2b02      	cmp	r3, #2
 800bf92:	d002      	beq.n	800bf9a <USBD_StdEPReq+0xfe>
 800bf94:	2b03      	cmp	r3, #3
 800bf96:	d015      	beq.n	800bfc4 <USBD_StdEPReq+0x128>
 800bf98:	e026      	b.n	800bfe8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d00c      	beq.n	800bfba <USBD_StdEPReq+0x11e>
 800bfa0:	7bbb      	ldrb	r3, [r7, #14]
 800bfa2:	2b80      	cmp	r3, #128	; 0x80
 800bfa4:	d009      	beq.n	800bfba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800bfa6:	7bbb      	ldrb	r3, [r7, #14]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fd7e 	bl	800caac <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800bfb0:	2180      	movs	r1, #128	; 0x80
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 fd7a 	bl	800caac <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bfb8:	e01c      	b.n	800bff4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800bfba:	6839      	ldr	r1, [r7, #0]
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f000 fbe4 	bl	800c78a <USBD_CtlError>
              break;
 800bfc2:	e017      	b.n	800bff4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	885b      	ldrh	r3, [r3, #2]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	d112      	bne.n	800bff2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bfcc:	7bbb      	ldrb	r3, [r7, #14]
 800bfce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d004      	beq.n	800bfe0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800bfd6:	7bbb      	ldrb	r3, [r7, #14]
 800bfd8:	4619      	mov	r1, r3
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 fd85 	bl	800caea <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fc23 	bl	800c82c <USBD_CtlSendStatus>
              }
              break;
 800bfe6:	e004      	b.n	800bff2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 fbcd 	bl	800c78a <USBD_CtlError>
              break;
 800bff0:	e000      	b.n	800bff4 <USBD_StdEPReq+0x158>
              break;
 800bff2:	bf00      	nop
          }
          break;
 800bff4:	e0aa      	b.n	800c14c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d002      	beq.n	800c006 <USBD_StdEPReq+0x16a>
 800c000:	2b03      	cmp	r3, #3
 800c002:	d032      	beq.n	800c06a <USBD_StdEPReq+0x1ce>
 800c004:	e097      	b.n	800c136 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c006:	7bbb      	ldrb	r3, [r7, #14]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d007      	beq.n	800c01c <USBD_StdEPReq+0x180>
 800c00c:	7bbb      	ldrb	r3, [r7, #14]
 800c00e:	2b80      	cmp	r3, #128	; 0x80
 800c010:	d004      	beq.n	800c01c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800c012:	6839      	ldr	r1, [r7, #0]
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 fbb8 	bl	800c78a <USBD_CtlError>
                break;
 800c01a:	e091      	b.n	800c140 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c01c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	da0b      	bge.n	800c03c <USBD_StdEPReq+0x1a0>
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c02a:	4613      	mov	r3, r2
 800c02c:	009b      	lsls	r3, r3, #2
 800c02e:	4413      	add	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	3310      	adds	r3, #16
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	4413      	add	r3, r2
 800c038:	3304      	adds	r3, #4
 800c03a:	e00b      	b.n	800c054 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
 800c03e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c042:	4613      	mov	r3, r2
 800c044:	009b      	lsls	r3, r3, #2
 800c046:	4413      	add	r3, r2
 800c048:	009b      	lsls	r3, r3, #2
 800c04a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	4413      	add	r3, r2
 800c052:	3304      	adds	r3, #4
 800c054:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	2200      	movs	r2, #0
 800c05a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	2202      	movs	r2, #2
 800c060:	4619      	mov	r1, r3
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 fba2 	bl	800c7ac <USBD_CtlSendData>
              break;
 800c068:	e06a      	b.n	800c140 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c06a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	da11      	bge.n	800c096 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c072:	7bbb      	ldrb	r3, [r7, #14]
 800c074:	f003 020f 	and.w	r2, r3, #15
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	440b      	add	r3, r1
 800c084:	3318      	adds	r3, #24
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d117      	bne.n	800c0bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c08c:	6839      	ldr	r1, [r7, #0]
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f000 fb7b 	bl	800c78a <USBD_CtlError>
                  break;
 800c094:	e054      	b.n	800c140 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c096:	7bbb      	ldrb	r3, [r7, #14]
 800c098:	f003 020f 	and.w	r2, r3, #15
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d104      	bne.n	800c0bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800c0b2:	6839      	ldr	r1, [r7, #0]
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f000 fb68 	bl	800c78a <USBD_CtlError>
                  break;
 800c0ba:	e041      	b.n	800c140 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	da0b      	bge.n	800c0dc <USBD_StdEPReq+0x240>
 800c0c4:	7bbb      	ldrb	r3, [r7, #14]
 800c0c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	3310      	adds	r3, #16
 800c0d4:	687a      	ldr	r2, [r7, #4]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	3304      	adds	r3, #4
 800c0da:	e00b      	b.n	800c0f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0dc:	7bbb      	ldrb	r3, [r7, #14]
 800c0de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0f6:	7bbb      	ldrb	r3, [r7, #14]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <USBD_StdEPReq+0x266>
 800c0fc:	7bbb      	ldrb	r3, [r7, #14]
 800c0fe:	2b80      	cmp	r3, #128	; 0x80
 800c100:	d103      	bne.n	800c10a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	2200      	movs	r2, #0
 800c106:	601a      	str	r2, [r3, #0]
 800c108:	e00e      	b.n	800c128 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	4619      	mov	r1, r3
 800c10e:	6878      	ldr	r0, [r7, #4]
 800c110:	f000 fd0a 	bl	800cb28 <USBD_LL_IsStallEP>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d003      	beq.n	800c122 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	2201      	movs	r2, #1
 800c11e:	601a      	str	r2, [r3, #0]
 800c120:	e002      	b.n	800c128 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2200      	movs	r2, #0
 800c126:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	2202      	movs	r2, #2
 800c12c:	4619      	mov	r1, r3
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fb3c 	bl	800c7ac <USBD_CtlSendData>
              break;
 800c134:	e004      	b.n	800c140 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 fb26 	bl	800c78a <USBD_CtlError>
              break;
 800c13e:	bf00      	nop
          }
          break;
 800c140:	e004      	b.n	800c14c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	f000 fb20 	bl	800c78a <USBD_CtlError>
          break;
 800c14a:	bf00      	nop
      }
      break;
 800c14c:	e004      	b.n	800c158 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800c14e:	6839      	ldr	r1, [r7, #0]
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fb1a 	bl	800c78a <USBD_CtlError>
      break;
 800c156:	bf00      	nop
  }

  return ret;
 800c158:	7bfb      	ldrb	r3, [r7, #15]
}
 800c15a:	4618      	mov	r0, r3
 800c15c:	3710      	adds	r7, #16
 800c15e:	46bd      	mov	sp, r7
 800c160:	bd80      	pop	{r7, pc}
	...

0800c164 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c16e:	2300      	movs	r3, #0
 800c170:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c172:	2300      	movs	r3, #0
 800c174:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c176:	2300      	movs	r3, #0
 800c178:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	885b      	ldrh	r3, [r3, #2]
 800c17e:	0a1b      	lsrs	r3, r3, #8
 800c180:	b29b      	uxth	r3, r3
 800c182:	3b01      	subs	r3, #1
 800c184:	2b06      	cmp	r3, #6
 800c186:	f200 8128 	bhi.w	800c3da <USBD_GetDescriptor+0x276>
 800c18a:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <USBD_GetDescriptor+0x2c>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c1ad 	.word	0x0800c1ad
 800c194:	0800c1c5 	.word	0x0800c1c5
 800c198:	0800c205 	.word	0x0800c205
 800c19c:	0800c3db 	.word	0x0800c3db
 800c1a0:	0800c3db 	.word	0x0800c3db
 800c1a4:	0800c37b 	.word	0x0800c37b
 800c1a8:	0800c3a7 	.word	0x0800c3a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	687a      	ldr	r2, [r7, #4]
 800c1b6:	7c12      	ldrb	r2, [r2, #16]
 800c1b8:	f107 0108 	add.w	r1, r7, #8
 800c1bc:	4610      	mov	r0, r2
 800c1be:	4798      	blx	r3
 800c1c0:	60f8      	str	r0, [r7, #12]
      break;
 800c1c2:	e112      	b.n	800c3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	7c1b      	ldrb	r3, [r3, #16]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10d      	bne.n	800c1e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1d4:	f107 0208 	add.w	r2, r7, #8
 800c1d8:	4610      	mov	r0, r2
 800c1da:	4798      	blx	r3
 800c1dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	2202      	movs	r2, #2
 800c1e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1e6:	e100      	b.n	800c3ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f0:	f107 0208 	add.w	r2, r7, #8
 800c1f4:	4610      	mov	r0, r2
 800c1f6:	4798      	blx	r3
 800c1f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	2202      	movs	r2, #2
 800c200:	701a      	strb	r2, [r3, #0]
      break;
 800c202:	e0f2      	b.n	800c3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c204:	683b      	ldr	r3, [r7, #0]
 800c206:	885b      	ldrh	r3, [r3, #2]
 800c208:	b2db      	uxtb	r3, r3
 800c20a:	2b05      	cmp	r3, #5
 800c20c:	f200 80ac 	bhi.w	800c368 <USBD_GetDescriptor+0x204>
 800c210:	a201      	add	r2, pc, #4	; (adr r2, 800c218 <USBD_GetDescriptor+0xb4>)
 800c212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c216:	bf00      	nop
 800c218:	0800c231 	.word	0x0800c231
 800c21c:	0800c265 	.word	0x0800c265
 800c220:	0800c299 	.word	0x0800c299
 800c224:	0800c2cd 	.word	0x0800c2cd
 800c228:	0800c301 	.word	0x0800c301
 800c22c:	0800c335 	.word	0x0800c335
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c236:	685b      	ldr	r3, [r3, #4]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00b      	beq.n	800c254 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	687a      	ldr	r2, [r7, #4]
 800c246:	7c12      	ldrb	r2, [r2, #16]
 800c248:	f107 0108 	add.w	r1, r7, #8
 800c24c:	4610      	mov	r0, r2
 800c24e:	4798      	blx	r3
 800c250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c252:	e091      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fa97 	bl	800c78a <USBD_CtlError>
            err++;
 800c25c:	7afb      	ldrb	r3, [r7, #11]
 800c25e:	3301      	adds	r3, #1
 800c260:	72fb      	strb	r3, [r7, #11]
          break;
 800c262:	e089      	b.n	800c378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c26a:	689b      	ldr	r3, [r3, #8]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d00b      	beq.n	800c288 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	7c12      	ldrb	r2, [r2, #16]
 800c27c:	f107 0108 	add.w	r1, r7, #8
 800c280:	4610      	mov	r0, r2
 800c282:	4798      	blx	r3
 800c284:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c286:	e077      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 fa7d 	bl	800c78a <USBD_CtlError>
            err++;
 800c290:	7afb      	ldrb	r3, [r7, #11]
 800c292:	3301      	adds	r3, #1
 800c294:	72fb      	strb	r3, [r7, #11]
          break;
 800c296:	e06f      	b.n	800c378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d00b      	beq.n	800c2bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2aa:	68db      	ldr	r3, [r3, #12]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	7c12      	ldrb	r2, [r2, #16]
 800c2b0:	f107 0108 	add.w	r1, r7, #8
 800c2b4:	4610      	mov	r0, r2
 800c2b6:	4798      	blx	r3
 800c2b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ba:	e05d      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2bc:	6839      	ldr	r1, [r7, #0]
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 fa63 	bl	800c78a <USBD_CtlError>
            err++;
 800c2c4:	7afb      	ldrb	r3, [r7, #11]
 800c2c6:	3301      	adds	r3, #1
 800c2c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2ca:	e055      	b.n	800c378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00b      	beq.n	800c2f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c2de:	691b      	ldr	r3, [r3, #16]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	7c12      	ldrb	r2, [r2, #16]
 800c2e4:	f107 0108 	add.w	r1, r7, #8
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4798      	blx	r3
 800c2ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ee:	e043      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2f0:	6839      	ldr	r1, [r7, #0]
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fa49 	bl	800c78a <USBD_CtlError>
            err++;
 800c2f8:	7afb      	ldrb	r3, [r7, #11]
 800c2fa:	3301      	adds	r3, #1
 800c2fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2fe:	e03b      	b.n	800c378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c306:	695b      	ldr	r3, [r3, #20]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00b      	beq.n	800c324 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c312:	695b      	ldr	r3, [r3, #20]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	7c12      	ldrb	r2, [r2, #16]
 800c318:	f107 0108 	add.w	r1, r7, #8
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
 800c320:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c322:	e029      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c324:	6839      	ldr	r1, [r7, #0]
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 fa2f 	bl	800c78a <USBD_CtlError>
            err++;
 800c32c:	7afb      	ldrb	r3, [r7, #11]
 800c32e:	3301      	adds	r3, #1
 800c330:	72fb      	strb	r3, [r7, #11]
          break;
 800c332:	e021      	b.n	800c378 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c33a:	699b      	ldr	r3, [r3, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d00b      	beq.n	800c358 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c346:	699b      	ldr	r3, [r3, #24]
 800c348:	687a      	ldr	r2, [r7, #4]
 800c34a:	7c12      	ldrb	r2, [r2, #16]
 800c34c:	f107 0108 	add.w	r1, r7, #8
 800c350:	4610      	mov	r0, r2
 800c352:	4798      	blx	r3
 800c354:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c356:	e00f      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c358:	6839      	ldr	r1, [r7, #0]
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fa15 	bl	800c78a <USBD_CtlError>
            err++;
 800c360:	7afb      	ldrb	r3, [r7, #11]
 800c362:	3301      	adds	r3, #1
 800c364:	72fb      	strb	r3, [r7, #11]
          break;
 800c366:	e007      	b.n	800c378 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f000 fa0d 	bl	800c78a <USBD_CtlError>
          err++;
 800c370:	7afb      	ldrb	r3, [r7, #11]
 800c372:	3301      	adds	r3, #1
 800c374:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c376:	e038      	b.n	800c3ea <USBD_GetDescriptor+0x286>
 800c378:	e037      	b.n	800c3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	7c1b      	ldrb	r3, [r3, #16]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d109      	bne.n	800c396 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c38a:	f107 0208 	add.w	r2, r7, #8
 800c38e:	4610      	mov	r0, r2
 800c390:	4798      	blx	r3
 800c392:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c394:	e029      	b.n	800c3ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c396:	6839      	ldr	r1, [r7, #0]
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f000 f9f6 	bl	800c78a <USBD_CtlError>
        err++;
 800c39e:	7afb      	ldrb	r3, [r7, #11]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c3a4:	e021      	b.n	800c3ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	7c1b      	ldrb	r3, [r3, #16]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10d      	bne.n	800c3ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3b6:	f107 0208 	add.w	r2, r7, #8
 800c3ba:	4610      	mov	r0, r2
 800c3bc:	4798      	blx	r3
 800c3be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	2207      	movs	r2, #7
 800c3c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3c8:	e00f      	b.n	800c3ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f000 f9dc 	bl	800c78a <USBD_CtlError>
        err++;
 800c3d2:	7afb      	ldrb	r3, [r7, #11]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c3d8:	e007      	b.n	800c3ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f000 f9d4 	bl	800c78a <USBD_CtlError>
      err++;
 800c3e2:	7afb      	ldrb	r3, [r7, #11]
 800c3e4:	3301      	adds	r3, #1
 800c3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c3e8:	bf00      	nop
  }

  if (err != 0U)
 800c3ea:	7afb      	ldrb	r3, [r7, #11]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d11c      	bne.n	800c42a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c3f0:	893b      	ldrh	r3, [r7, #8]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d011      	beq.n	800c41a <USBD_GetDescriptor+0x2b6>
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	88db      	ldrh	r3, [r3, #6]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d00d      	beq.n	800c41a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	88da      	ldrh	r2, [r3, #6]
 800c402:	893b      	ldrh	r3, [r7, #8]
 800c404:	4293      	cmp	r3, r2
 800c406:	bf28      	it	cs
 800c408:	4613      	movcs	r3, r2
 800c40a:	b29b      	uxth	r3, r3
 800c40c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c40e:	893b      	ldrh	r3, [r7, #8]
 800c410:	461a      	mov	r2, r3
 800c412:	68f9      	ldr	r1, [r7, #12]
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 f9c9 	bl	800c7ac <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	88db      	ldrh	r3, [r3, #6]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d104      	bne.n	800c42c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fa02 	bl	800c82c <USBD_CtlSendStatus>
 800c428:	e000      	b.n	800c42c <USBD_GetDescriptor+0x2c8>
    return;
 800c42a:	bf00      	nop
    }
  }
}
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
 800c432:	bf00      	nop

0800c434 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b084      	sub	sp, #16
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	889b      	ldrh	r3, [r3, #4]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d130      	bne.n	800c4a8 <USBD_SetAddress+0x74>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	88db      	ldrh	r3, [r3, #6]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d12c      	bne.n	800c4a8 <USBD_SetAddress+0x74>
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	885b      	ldrh	r3, [r3, #2]
 800c452:	2b7f      	cmp	r3, #127	; 0x7f
 800c454:	d828      	bhi.n	800c4a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	885b      	ldrh	r3, [r3, #2]
 800c45a:	b2db      	uxtb	r3, r3
 800c45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c460:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c468:	2b03      	cmp	r3, #3
 800c46a:	d104      	bne.n	800c476 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c46c:	6839      	ldr	r1, [r7, #0]
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f98b 	bl	800c78a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c474:	e01d      	b.n	800c4b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	7bfa      	ldrb	r2, [r7, #15]
 800c47a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
 800c480:	4619      	mov	r1, r3
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fb7b 	bl	800cb7e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c488:	6878      	ldr	r0, [r7, #4]
 800c48a:	f000 f9cf 	bl	800c82c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c48e:	7bfb      	ldrb	r3, [r7, #15]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d004      	beq.n	800c49e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2202      	movs	r2, #2
 800c498:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c49c:	e009      	b.n	800c4b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	2201      	movs	r2, #1
 800c4a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4a6:	e004      	b.n	800c4b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c4a8:	6839      	ldr	r1, [r7, #0]
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f000 f96d 	bl	800c78a <USBD_CtlError>
  }
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3710      	adds	r7, #16
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
	...

0800c4bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
 800c4c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	885b      	ldrh	r3, [r3, #2]
 800c4ca:	b2da      	uxtb	r2, r3
 800c4cc:	4b41      	ldr	r3, [pc, #260]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c4ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4d0:	4b40      	ldr	r3, [pc, #256]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c4d2:	781b      	ldrb	r3, [r3, #0]
 800c4d4:	2b01      	cmp	r3, #1
 800c4d6:	d904      	bls.n	800c4e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c4d8:	6839      	ldr	r1, [r7, #0]
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 f955 	bl	800c78a <USBD_CtlError>
 800c4e0:	e075      	b.n	800c5ce <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4e8:	2b02      	cmp	r3, #2
 800c4ea:	d002      	beq.n	800c4f2 <USBD_SetConfig+0x36>
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d023      	beq.n	800c538 <USBD_SetConfig+0x7c>
 800c4f0:	e062      	b.n	800c5b8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c4f2:	4b38      	ldr	r3, [pc, #224]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c4f4:	781b      	ldrb	r3, [r3, #0]
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d01a      	beq.n	800c530 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c4fa:	4b36      	ldr	r3, [pc, #216]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	461a      	mov	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2203      	movs	r2, #3
 800c508:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c50c:	4b31      	ldr	r3, [pc, #196]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff f9e7 	bl	800b8e6 <USBD_SetClassConfig>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b02      	cmp	r3, #2
 800c51c:	d104      	bne.n	800c528 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c51e:	6839      	ldr	r1, [r7, #0]
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f000 f932 	bl	800c78a <USBD_CtlError>
            return;
 800c526:	e052      	b.n	800c5ce <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 f97f 	bl	800c82c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c52e:	e04e      	b.n	800c5ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f000 f97b 	bl	800c82c <USBD_CtlSendStatus>
        break;
 800c536:	e04a      	b.n	800c5ce <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c538:	4b26      	ldr	r3, [pc, #152]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c53a:	781b      	ldrb	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d112      	bne.n	800c566 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2202      	movs	r2, #2
 800c544:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c548:	4b22      	ldr	r3, [pc, #136]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c54a:	781b      	ldrb	r3, [r3, #0]
 800c54c:	461a      	mov	r2, r3
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c552:	4b20      	ldr	r3, [pc, #128]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	4619      	mov	r1, r3
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f7ff f9e3 	bl	800b924 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f000 f964 	bl	800c82c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c564:	e033      	b.n	800c5ce <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c566:	4b1b      	ldr	r3, [pc, #108]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c568:	781b      	ldrb	r3, [r3, #0]
 800c56a:	461a      	mov	r2, r3
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	429a      	cmp	r2, r3
 800c572:	d01d      	beq.n	800c5b0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff f9d1 	bl	800b924 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c582:	4b14      	ldr	r3, [pc, #80]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c584:	781b      	ldrb	r3, [r3, #0]
 800c586:	461a      	mov	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c58c:	4b11      	ldr	r3, [pc, #68]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff f9a7 	bl	800b8e6 <USBD_SetClassConfig>
 800c598:	4603      	mov	r3, r0
 800c59a:	2b02      	cmp	r3, #2
 800c59c:	d104      	bne.n	800c5a8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c59e:	6839      	ldr	r1, [r7, #0]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f8f2 	bl	800c78a <USBD_CtlError>
            return;
 800c5a6:	e012      	b.n	800c5ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 f93f 	bl	800c82c <USBD_CtlSendStatus>
        break;
 800c5ae:	e00e      	b.n	800c5ce <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f93b 	bl	800c82c <USBD_CtlSendStatus>
        break;
 800c5b6:	e00a      	b.n	800c5ce <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c5b8:	6839      	ldr	r1, [r7, #0]
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f8e5 	bl	800c78a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c5c0:	4b04      	ldr	r3, [pc, #16]	; (800c5d4 <USBD_SetConfig+0x118>)
 800c5c2:	781b      	ldrb	r3, [r3, #0]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7ff f9ac 	bl	800b924 <USBD_ClrClassConfig>
        break;
 800c5cc:	bf00      	nop
    }
  }
}
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	2000049e 	.word	0x2000049e

0800c5d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
 800c5e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	88db      	ldrh	r3, [r3, #6]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d004      	beq.n	800c5f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c5ea:	6839      	ldr	r1, [r7, #0]
 800c5ec:	6878      	ldr	r0, [r7, #4]
 800c5ee:	f000 f8cc 	bl	800c78a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c5f2:	e022      	b.n	800c63a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	dc02      	bgt.n	800c604 <USBD_GetConfig+0x2c>
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dc03      	bgt.n	800c60a <USBD_GetConfig+0x32>
 800c602:	e015      	b.n	800c630 <USBD_GetConfig+0x58>
 800c604:	2b03      	cmp	r3, #3
 800c606:	d00b      	beq.n	800c620 <USBD_GetConfig+0x48>
 800c608:	e012      	b.n	800c630 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2200      	movs	r2, #0
 800c60e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	3308      	adds	r3, #8
 800c614:	2201      	movs	r2, #1
 800c616:	4619      	mov	r1, r3
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f000 f8c7 	bl	800c7ac <USBD_CtlSendData>
        break;
 800c61e:	e00c      	b.n	800c63a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	3304      	adds	r3, #4
 800c624:	2201      	movs	r2, #1
 800c626:	4619      	mov	r1, r3
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f8bf 	bl	800c7ac <USBD_CtlSendData>
        break;
 800c62e:	e004      	b.n	800c63a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 f8a9 	bl	800c78a <USBD_CtlError>
        break;
 800c638:	bf00      	nop
}
 800c63a:	bf00      	nop
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}

0800c642 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c642:	b580      	push	{r7, lr}
 800c644:	b082      	sub	sp, #8
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
 800c64a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c652:	3b01      	subs	r3, #1
 800c654:	2b02      	cmp	r3, #2
 800c656:	d81e      	bhi.n	800c696 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	88db      	ldrh	r3, [r3, #6]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d004      	beq.n	800c66a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800c660:	6839      	ldr	r1, [r7, #0]
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f891 	bl	800c78a <USBD_CtlError>
        break;
 800c668:	e01a      	b.n	800c6a0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2201      	movs	r2, #1
 800c66e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c676:	2b00      	cmp	r3, #0
 800c678:	d005      	beq.n	800c686 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	f043 0202 	orr.w	r2, r3, #2
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	330c      	adds	r3, #12
 800c68a:	2202      	movs	r2, #2
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f88c 	bl	800c7ac <USBD_CtlSendData>
      break;
 800c694:	e004      	b.n	800c6a0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800c696:	6839      	ldr	r1, [r7, #0]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 f876 	bl	800c78a <USBD_CtlError>
      break;
 800c69e:	bf00      	nop
  }
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	885b      	ldrh	r3, [r3, #2]
 800c6b6:	2b01      	cmp	r3, #1
 800c6b8:	d106      	bne.n	800c6c8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f8b2 	bl	800c82c <USBD_CtlSendStatus>
  }
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
 800c6d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d80b      	bhi.n	800c6fe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	885b      	ldrh	r3, [r3, #2]
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d10c      	bne.n	800c708 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f898 	bl	800c82c <USBD_CtlSendStatus>
      }
      break;
 800c6fc:	e004      	b.n	800c708 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c6fe:	6839      	ldr	r1, [r7, #0]
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f000 f842 	bl	800c78a <USBD_CtlError>
      break;
 800c706:	e000      	b.n	800c70a <USBD_ClrFeature+0x3a>
      break;
 800c708:	bf00      	nop
  }
}
 800c70a:	bf00      	nop
 800c70c:	3708      	adds	r7, #8
 800c70e:	46bd      	mov	sp, r7
 800c710:	bd80      	pop	{r7, pc}

0800c712 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c712:	b480      	push	{r7}
 800c714:	b083      	sub	sp, #12
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	781a      	ldrb	r2, [r3, #0]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	785a      	ldrb	r2, [r3, #1]
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	3302      	adds	r3, #2
 800c730:	781b      	ldrb	r3, [r3, #0]
 800c732:	b29a      	uxth	r2, r3
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	3303      	adds	r3, #3
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	021b      	lsls	r3, r3, #8
 800c73e:	b29b      	uxth	r3, r3
 800c740:	4413      	add	r3, r2
 800c742:	b29a      	uxth	r2, r3
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	3304      	adds	r3, #4
 800c74c:	781b      	ldrb	r3, [r3, #0]
 800c74e:	b29a      	uxth	r2, r3
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	3305      	adds	r3, #5
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	b29b      	uxth	r3, r3
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	4413      	add	r3, r2
 800c75e:	b29a      	uxth	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	3306      	adds	r3, #6
 800c768:	781b      	ldrb	r3, [r3, #0]
 800c76a:	b29a      	uxth	r2, r3
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	3307      	adds	r3, #7
 800c770:	781b      	ldrb	r3, [r3, #0]
 800c772:	b29b      	uxth	r3, r3
 800c774:	021b      	lsls	r3, r3, #8
 800c776:	b29b      	uxth	r3, r3
 800c778:	4413      	add	r3, r2
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	80da      	strh	r2, [r3, #6]

}
 800c780:	bf00      	nop
 800c782:	370c      	adds	r7, #12
 800c784:	46bd      	mov	sp, r7
 800c786:	bc80      	pop	{r7}
 800c788:	4770      	bx	lr

0800c78a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800c794:	2180      	movs	r1, #128	; 0x80
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f988 	bl	800caac <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800c79c:	2100      	movs	r1, #0
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f000 f984 	bl	800caac <USBD_LL_StallEP>
}
 800c7a4:	bf00      	nop
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	2202      	movs	r2, #2
 800c7be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800c7c8:	88fa      	ldrh	r2, [r7, #6]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7ce:	88fb      	ldrh	r3, [r7, #6]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	68f8      	ldr	r0, [r7, #12]
 800c7d6:	f000 f9f1 	bl	800cbbc <USBD_LL_Transmit>

  return USBD_OK;
 800c7da:	2300      	movs	r3, #0
}
 800c7dc:	4618      	mov	r0, r3
 800c7de:	3710      	adds	r7, #16
 800c7e0:	46bd      	mov	sp, r7
 800c7e2:	bd80      	pop	{r7, pc}

0800c7e4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800c7e4:	b580      	push	{r7, lr}
 800c7e6:	b084      	sub	sp, #16
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	60f8      	str	r0, [r7, #12]
 800c7ec:	60b9      	str	r1, [r7, #8]
 800c7ee:	4613      	mov	r3, r2
 800c7f0:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c7f2:	88fb      	ldrh	r3, [r7, #6]
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	68f8      	ldr	r0, [r7, #12]
 800c7fa:	f000 f9df 	bl	800cbbc <USBD_LL_Transmit>

  return USBD_OK;
 800c7fe:	2300      	movs	r3, #0
}
 800c800:	4618      	mov	r0, r3
 800c802:	3710      	adds	r7, #16
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	4613      	mov	r3, r2
 800c814:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c816:	88fb      	ldrh	r3, [r7, #6]
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	2100      	movs	r1, #0
 800c81c:	68f8      	ldr	r0, [r7, #12]
 800c81e:	f000 f9f0 	bl	800cc02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3710      	adds	r7, #16
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2204      	movs	r2, #4
 800c838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c83c:	2300      	movs	r3, #0
 800c83e:	2200      	movs	r2, #0
 800c840:	2100      	movs	r1, #0
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 f9ba 	bl	800cbbc <USBD_LL_Transmit>

  return USBD_OK;
 800c848:	2300      	movs	r3, #0
}
 800c84a:	4618      	mov	r0, r3
 800c84c:	3708      	adds	r7, #8
 800c84e:	46bd      	mov	sp, r7
 800c850:	bd80      	pop	{r7, pc}

0800c852 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c852:	b580      	push	{r7, lr}
 800c854:	b082      	sub	sp, #8
 800c856:	af00      	add	r7, sp, #0
 800c858:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2205      	movs	r2, #5
 800c85e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c862:	2300      	movs	r3, #0
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 f9ca 	bl	800cc02 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3708      	adds	r7, #8
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c878:	b480      	push	{r7}
 800c87a:	b087      	sub	sp, #28
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	60f8      	str	r0, [r7, #12]
 800c880:	60b9      	str	r1, [r7, #8]
 800c882:	4613      	mov	r3, r2
 800c884:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c886:	2301      	movs	r3, #1
 800c888:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c88a:	2300      	movs	r3, #0
 800c88c:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800c88e:	4b1e      	ldr	r3, [pc, #120]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c890:	7a5b      	ldrb	r3, [r3, #9]
 800c892:	b2db      	uxtb	r3, r3
 800c894:	2b01      	cmp	r3, #1
 800c896:	d831      	bhi.n	800c8fc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c898:	4b1b      	ldr	r3, [pc, #108]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c89a:	7a5b      	ldrb	r3, [r3, #9]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4b19      	ldr	r3, [pc, #100]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800c8a6:	4b18      	ldr	r3, [pc, #96]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8a8:	7a5b      	ldrb	r3, [r3, #9]
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	4a16      	ldr	r2, [pc, #88]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8ae:	009b      	lsls	r3, r3, #2
 800c8b0:	4413      	add	r3, r2
 800c8b2:	68fa      	ldr	r2, [r7, #12]
 800c8b4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800c8b6:	4b14      	ldr	r3, [pc, #80]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8b8:	7a5b      	ldrb	r3, [r3, #9]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	461a      	mov	r2, r3
 800c8be:	4b12      	ldr	r3, [pc, #72]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8c0:	4413      	add	r3, r2
 800c8c2:	79fa      	ldrb	r2, [r7, #7]
 800c8c4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c8c6:	4b10      	ldr	r3, [pc, #64]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8c8:	7a5b      	ldrb	r3, [r3, #9]
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	1c5a      	adds	r2, r3, #1
 800c8ce:	b2d1      	uxtb	r1, r2
 800c8d0:	4a0d      	ldr	r2, [pc, #52]	; (800c908 <FATFS_LinkDriverEx+0x90>)
 800c8d2:	7251      	strb	r1, [r2, #9]
 800c8d4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c8d6:	7dbb      	ldrb	r3, [r7, #22]
 800c8d8:	3330      	adds	r3, #48	; 0x30
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	223a      	movs	r2, #58	; 0x3a
 800c8e6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	222f      	movs	r2, #47	; 0x2f
 800c8ee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	3303      	adds	r3, #3
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800c8fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	371c      	adds	r7, #28
 800c902:	46bd      	mov	sp, r7
 800c904:	bc80      	pop	{r7}
 800c906:	4770      	bx	lr
 800c908:	200004a0 	.word	0x200004a0

0800c90c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c916:	2200      	movs	r2, #0
 800c918:	6839      	ldr	r1, [r7, #0]
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f7ff ffac 	bl	800c878 <FATFS_LinkDriverEx>
 800c920:	4603      	mov	r3, r0
}
 800c922:	4618      	mov	r0, r3
 800c924:	3708      	adds	r7, #8
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}

0800c92a <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c92a:	b580      	push	{r7, lr}
 800c92c:	b082      	sub	sp, #8
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c93e:	4619      	mov	r1, r3
 800c940:	4610      	mov	r0, r2
 800c942:	f7ff f802 	bl	800b94a <USBD_LL_SetupStage>
}
 800c946:	bf00      	nop
 800c948:	3708      	adds	r7, #8
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}

0800c94e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c94e:	b580      	push	{r7, lr}
 800c950:	b082      	sub	sp, #8
 800c952:	af00      	add	r7, sp, #0
 800c954:	6078      	str	r0, [r7, #4]
 800c956:	460b      	mov	r3, r1
 800c958:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800c960:	78fa      	ldrb	r2, [r7, #3]
 800c962:	6879      	ldr	r1, [r7, #4]
 800c964:	4613      	mov	r3, r2
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	00db      	lsls	r3, r3, #3
 800c96c:	440b      	add	r3, r1
 800c96e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	4619      	mov	r1, r3
 800c978:	f7ff f834 	bl	800b9e4 <USBD_LL_DataOutStage>
}
 800c97c:	bf00      	nop
 800c97e:	3708      	adds	r7, #8
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b082      	sub	sp, #8
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	460b      	mov	r3, r1
 800c98e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800c996:	78fa      	ldrb	r2, [r7, #3]
 800c998:	6879      	ldr	r1, [r7, #4]
 800c99a:	4613      	mov	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	4413      	add	r3, r2
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	440b      	add	r3, r1
 800c9a4:	3324      	adds	r3, #36	; 0x24
 800c9a6:	681a      	ldr	r2, [r3, #0]
 800c9a8:	78fb      	ldrb	r3, [r7, #3]
 800c9aa:	4619      	mov	r1, r3
 800c9ac:	f7ff f88b 	bl	800bac6 <USBD_LL_DataInStage>
}
 800c9b0:	bf00      	nop
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	b082      	sub	sp, #8
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff f99b 	bl	800bd02 <USBD_LL_SOF>
}
 800c9cc:	bf00      	nop
 800c9ce:	3708      	adds	r7, #8
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	799b      	ldrb	r3, [r3, #6]
 800c9e4:	2b02      	cmp	r3, #2
 800c9e6:	d001      	beq.n	800c9ec <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c9e8:	f7f5 f820 	bl	8001a2c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9f2:	7bfa      	ldrb	r2, [r7, #15]
 800c9f4:	4611      	mov	r1, r2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff f94b 	bl	800bc92 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca02:	4618      	mov	r0, r3
 800ca04:	f7ff f904 	bl	800bc10 <USBD_LL_Reset>
}
 800ca08:	bf00      	nop
 800ca0a:	3710      	adds	r7, #16
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	bd80      	pop	{r7, pc}

0800ca10 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b082      	sub	sp, #8
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f7ff f946 	bl	800bcb0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	7a9b      	ldrb	r3, [r3, #10]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d005      	beq.n	800ca38 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ca2c:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <HAL_PCD_SuspendCallback+0x30>)
 800ca2e:	691b      	ldr	r3, [r3, #16]
 800ca30:	4a03      	ldr	r2, [pc, #12]	; (800ca40 <HAL_PCD_SuspendCallback+0x30>)
 800ca32:	f043 0306 	orr.w	r3, r3, #6
 800ca36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ca38:	bf00      	nop
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	e000ed00 	.word	0xe000ed00

0800ca44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff f940 	bl	800bcd8 <USBD_LL_Resume>
}
 800ca58:	bf00      	nop
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b084      	sub	sp, #16
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
 800ca68:	4608      	mov	r0, r1
 800ca6a:	4611      	mov	r1, r2
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	4603      	mov	r3, r0
 800ca70:	70fb      	strb	r3, [r7, #3]
 800ca72:	460b      	mov	r3, r1
 800ca74:	70bb      	strb	r3, [r7, #2]
 800ca76:	4613      	mov	r3, r2
 800ca78:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800ca88:	78bb      	ldrb	r3, [r7, #2]
 800ca8a:	883a      	ldrh	r2, [r7, #0]
 800ca8c:	78f9      	ldrb	r1, [r7, #3]
 800ca8e:	f7f7 ff4a 	bl	8004926 <HAL_PCD_EP_Open>
 800ca92:	4603      	mov	r3, r0
 800ca94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca96:	7bfb      	ldrb	r3, [r7, #15]
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f000 f8d5 	bl	800cc48 <USBD_Get_USB_Status>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caa2:	7bbb      	ldrb	r3, [r7, #14]
}
 800caa4:	4618      	mov	r0, r3
 800caa6:	3710      	adds	r7, #16
 800caa8:	46bd      	mov	sp, r7
 800caaa:	bd80      	pop	{r7, pc}

0800caac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	460b      	mov	r3, r1
 800cab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cab8:	2300      	movs	r3, #0
 800caba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cac6:	78fa      	ldrb	r2, [r7, #3]
 800cac8:	4611      	mov	r1, r2
 800caca:	4618      	mov	r0, r3
 800cacc:	f7f7 fff0 	bl	8004ab0 <HAL_PCD_EP_SetStall>
 800cad0:	4603      	mov	r3, r0
 800cad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cad4:	7bfb      	ldrb	r3, [r7, #15]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f8b6 	bl	800cc48 <USBD_Get_USB_Status>
 800cadc:	4603      	mov	r3, r0
 800cade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3710      	adds	r7, #16
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}

0800caea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800caea:	b580      	push	{r7, lr}
 800caec:	b084      	sub	sp, #16
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
 800caf2:	460b      	mov	r3, r1
 800caf4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800caf6:	2300      	movs	r3, #0
 800caf8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cafa:	2300      	movs	r3, #0
 800cafc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb04:	78fa      	ldrb	r2, [r7, #3]
 800cb06:	4611      	mov	r1, r2
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f8 f831 	bl	8004b70 <HAL_PCD_EP_ClrStall>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f000 f897 	bl	800cc48 <USBD_Get_USB_Status>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
 800cb30:	460b      	mov	r3, r1
 800cb32:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb3a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cb3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	da0b      	bge.n	800cb5c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cb44:	78fb      	ldrb	r3, [r7, #3]
 800cb46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb4a:	68f9      	ldr	r1, [r7, #12]
 800cb4c:	4613      	mov	r3, r2
 800cb4e:	009b      	lsls	r3, r3, #2
 800cb50:	4413      	add	r3, r2
 800cb52:	00db      	lsls	r3, r3, #3
 800cb54:	440b      	add	r3, r1
 800cb56:	3312      	adds	r3, #18
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	e00b      	b.n	800cb74 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cb5c:	78fb      	ldrb	r3, [r7, #3]
 800cb5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cb62:	68f9      	ldr	r1, [r7, #12]
 800cb64:	4613      	mov	r3, r2
 800cb66:	009b      	lsls	r3, r3, #2
 800cb68:	4413      	add	r3, r2
 800cb6a:	00db      	lsls	r3, r3, #3
 800cb6c:	440b      	add	r3, r1
 800cb6e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cb72:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3714      	adds	r7, #20
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bc80      	pop	{r7}
 800cb7c:	4770      	bx	lr

0800cb7e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b084      	sub	sp, #16
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cb98:	78fa      	ldrb	r2, [r7, #3]
 800cb9a:	4611      	mov	r1, r2
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f7f7 fe9e 	bl	80048de <HAL_PCD_SetAddress>
 800cba2:	4603      	mov	r3, r0
 800cba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cba6:	7bfb      	ldrb	r3, [r7, #15]
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 f84d 	bl	800cc48 <USBD_Get_USB_Status>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cbb2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3710      	adds	r7, #16
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	607a      	str	r2, [r7, #4]
 800cbc6:	461a      	mov	r2, r3
 800cbc8:	460b      	mov	r3, r1
 800cbca:	72fb      	strb	r3, [r7, #11]
 800cbcc:	4613      	mov	r3, r2
 800cbce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cbde:	893b      	ldrh	r3, [r7, #8]
 800cbe0:	7af9      	ldrb	r1, [r7, #11]
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	f7f7 ff2d 	bl	8004a42 <HAL_PCD_EP_Transmit>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 f82a 	bl	800cc48 <USBD_Get_USB_Status>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	3718      	adds	r7, #24
 800cbfe:	46bd      	mov	sp, r7
 800cc00:	bd80      	pop	{r7, pc}

0800cc02 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800cc02:	b580      	push	{r7, lr}
 800cc04:	b086      	sub	sp, #24
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	60f8      	str	r0, [r7, #12]
 800cc0a:	607a      	str	r2, [r7, #4]
 800cc0c:	461a      	mov	r2, r3
 800cc0e:	460b      	mov	r3, r1
 800cc10:	72fb      	strb	r3, [r7, #11]
 800cc12:	4613      	mov	r3, r2
 800cc14:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc16:	2300      	movs	r3, #0
 800cc18:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800cc24:	893b      	ldrh	r3, [r7, #8]
 800cc26:	7af9      	ldrb	r1, [r7, #11]
 800cc28:	687a      	ldr	r2, [r7, #4]
 800cc2a:	f7f7 fed9 	bl	80049e0 <HAL_PCD_EP_Receive>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	4618      	mov	r0, r3
 800cc36:	f000 f807 	bl	800cc48 <USBD_Get_USB_Status>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cc3e:	7dbb      	ldrb	r3, [r7, #22]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3718      	adds	r7, #24
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	4603      	mov	r3, r0
 800cc50:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc52:	2300      	movs	r3, #0
 800cc54:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	2b03      	cmp	r3, #3
 800cc5a:	d817      	bhi.n	800cc8c <USBD_Get_USB_Status+0x44>
 800cc5c:	a201      	add	r2, pc, #4	; (adr r2, 800cc64 <USBD_Get_USB_Status+0x1c>)
 800cc5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc62:	bf00      	nop
 800cc64:	0800cc75 	.word	0x0800cc75
 800cc68:	0800cc7b 	.word	0x0800cc7b
 800cc6c:	0800cc81 	.word	0x0800cc81
 800cc70:	0800cc87 	.word	0x0800cc87
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cc74:	2300      	movs	r3, #0
 800cc76:	73fb      	strb	r3, [r7, #15]
    break;
 800cc78:	e00b      	b.n	800cc92 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cc7a:	2302      	movs	r3, #2
 800cc7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cc7e:	e008      	b.n	800cc92 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cc80:	2301      	movs	r3, #1
 800cc82:	73fb      	strb	r3, [r7, #15]
    break;
 800cc84:	e005      	b.n	800cc92 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cc86:	2302      	movs	r3, #2
 800cc88:	73fb      	strb	r3, [r7, #15]
    break;
 800cc8a:	e002      	b.n	800cc92 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cc8c:	2302      	movs	r3, #2
 800cc8e:	73fb      	strb	r3, [r7, #15]
    break;
 800cc90:	bf00      	nop
  }
  return usb_status;
 800cc92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3714      	adds	r7, #20
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bc80      	pop	{r7}
 800cc9c:	4770      	bx	lr
 800cc9e:	bf00      	nop

0800cca0 <__cvt>:
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca6:	461f      	mov	r7, r3
 800cca8:	bfbb      	ittet	lt
 800ccaa:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ccae:	461f      	movlt	r7, r3
 800ccb0:	2300      	movge	r3, #0
 800ccb2:	232d      	movlt	r3, #45	; 0x2d
 800ccb4:	b088      	sub	sp, #32
 800ccb6:	4614      	mov	r4, r2
 800ccb8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ccba:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ccbc:	7013      	strb	r3, [r2, #0]
 800ccbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccc0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ccc4:	f023 0820 	bic.w	r8, r3, #32
 800ccc8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cccc:	d005      	beq.n	800ccda <__cvt+0x3a>
 800ccce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ccd2:	d100      	bne.n	800ccd6 <__cvt+0x36>
 800ccd4:	3501      	adds	r5, #1
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	e000      	b.n	800ccdc <__cvt+0x3c>
 800ccda:	2303      	movs	r3, #3
 800ccdc:	aa07      	add	r2, sp, #28
 800ccde:	9204      	str	r2, [sp, #16]
 800cce0:	aa06      	add	r2, sp, #24
 800cce2:	e9cd a202 	strd	sl, r2, [sp, #8]
 800cce6:	e9cd 3500 	strd	r3, r5, [sp]
 800ccea:	4622      	mov	r2, r4
 800ccec:	463b      	mov	r3, r7
 800ccee:	f000 fe73 	bl	800d9d8 <_dtoa_r>
 800ccf2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ccf6:	4606      	mov	r6, r0
 800ccf8:	d102      	bne.n	800cd00 <__cvt+0x60>
 800ccfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ccfc:	07db      	lsls	r3, r3, #31
 800ccfe:	d522      	bpl.n	800cd46 <__cvt+0xa6>
 800cd00:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800cd04:	eb06 0905 	add.w	r9, r6, r5
 800cd08:	d110      	bne.n	800cd2c <__cvt+0x8c>
 800cd0a:	7833      	ldrb	r3, [r6, #0]
 800cd0c:	2b30      	cmp	r3, #48	; 0x30
 800cd0e:	d10a      	bne.n	800cd26 <__cvt+0x86>
 800cd10:	2200      	movs	r2, #0
 800cd12:	2300      	movs	r3, #0
 800cd14:	4620      	mov	r0, r4
 800cd16:	4639      	mov	r1, r7
 800cd18:	f7f3 fe46 	bl	80009a8 <__aeabi_dcmpeq>
 800cd1c:	b918      	cbnz	r0, 800cd26 <__cvt+0x86>
 800cd1e:	f1c5 0501 	rsb	r5, r5, #1
 800cd22:	f8ca 5000 	str.w	r5, [sl]
 800cd26:	f8da 3000 	ldr.w	r3, [sl]
 800cd2a:	4499      	add	r9, r3
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2300      	movs	r3, #0
 800cd30:	4620      	mov	r0, r4
 800cd32:	4639      	mov	r1, r7
 800cd34:	f7f3 fe38 	bl	80009a8 <__aeabi_dcmpeq>
 800cd38:	b108      	cbz	r0, 800cd3e <__cvt+0x9e>
 800cd3a:	f8cd 901c 	str.w	r9, [sp, #28]
 800cd3e:	2230      	movs	r2, #48	; 0x30
 800cd40:	9b07      	ldr	r3, [sp, #28]
 800cd42:	454b      	cmp	r3, r9
 800cd44:	d307      	bcc.n	800cd56 <__cvt+0xb6>
 800cd46:	4630      	mov	r0, r6
 800cd48:	9b07      	ldr	r3, [sp, #28]
 800cd4a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800cd4c:	1b9b      	subs	r3, r3, r6
 800cd4e:	6013      	str	r3, [r2, #0]
 800cd50:	b008      	add	sp, #32
 800cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd56:	1c59      	adds	r1, r3, #1
 800cd58:	9107      	str	r1, [sp, #28]
 800cd5a:	701a      	strb	r2, [r3, #0]
 800cd5c:	e7f0      	b.n	800cd40 <__cvt+0xa0>

0800cd5e <__exponent>:
 800cd5e:	4603      	mov	r3, r0
 800cd60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cd62:	2900      	cmp	r1, #0
 800cd64:	f803 2b02 	strb.w	r2, [r3], #2
 800cd68:	bfb6      	itet	lt
 800cd6a:	222d      	movlt	r2, #45	; 0x2d
 800cd6c:	222b      	movge	r2, #43	; 0x2b
 800cd6e:	4249      	neglt	r1, r1
 800cd70:	2909      	cmp	r1, #9
 800cd72:	7042      	strb	r2, [r0, #1]
 800cd74:	dd2a      	ble.n	800cdcc <__exponent+0x6e>
 800cd76:	f10d 0207 	add.w	r2, sp, #7
 800cd7a:	4617      	mov	r7, r2
 800cd7c:	260a      	movs	r6, #10
 800cd7e:	fb91 f5f6 	sdiv	r5, r1, r6
 800cd82:	4694      	mov	ip, r2
 800cd84:	fb06 1415 	mls	r4, r6, r5, r1
 800cd88:	3430      	adds	r4, #48	; 0x30
 800cd8a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800cd8e:	460c      	mov	r4, r1
 800cd90:	2c63      	cmp	r4, #99	; 0x63
 800cd92:	4629      	mov	r1, r5
 800cd94:	f102 32ff 	add.w	r2, r2, #4294967295
 800cd98:	dcf1      	bgt.n	800cd7e <__exponent+0x20>
 800cd9a:	3130      	adds	r1, #48	; 0x30
 800cd9c:	f1ac 0402 	sub.w	r4, ip, #2
 800cda0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cda4:	4622      	mov	r2, r4
 800cda6:	1c41      	adds	r1, r0, #1
 800cda8:	42ba      	cmp	r2, r7
 800cdaa:	d30a      	bcc.n	800cdc2 <__exponent+0x64>
 800cdac:	f10d 0209 	add.w	r2, sp, #9
 800cdb0:	eba2 020c 	sub.w	r2, r2, ip
 800cdb4:	42bc      	cmp	r4, r7
 800cdb6:	bf88      	it	hi
 800cdb8:	2200      	movhi	r2, #0
 800cdba:	4413      	add	r3, r2
 800cdbc:	1a18      	subs	r0, r3, r0
 800cdbe:	b003      	add	sp, #12
 800cdc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdc2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800cdc6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800cdca:	e7ed      	b.n	800cda8 <__exponent+0x4a>
 800cdcc:	2330      	movs	r3, #48	; 0x30
 800cdce:	3130      	adds	r1, #48	; 0x30
 800cdd0:	7083      	strb	r3, [r0, #2]
 800cdd2:	70c1      	strb	r1, [r0, #3]
 800cdd4:	1d03      	adds	r3, r0, #4
 800cdd6:	e7f1      	b.n	800cdbc <__exponent+0x5e>

0800cdd8 <_printf_float>:
 800cdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cddc:	b091      	sub	sp, #68	; 0x44
 800cdde:	460c      	mov	r4, r1
 800cde0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800cde4:	4616      	mov	r6, r2
 800cde6:	461f      	mov	r7, r3
 800cde8:	4605      	mov	r5, r0
 800cdea:	f000 fce5 	bl	800d7b8 <_localeconv_r>
 800cdee:	6803      	ldr	r3, [r0, #0]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf4:	f7f3 f9ac 	bl	8000150 <strlen>
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	930e      	str	r3, [sp, #56]	; 0x38
 800cdfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ce00:	900a      	str	r0, [sp, #40]	; 0x28
 800ce02:	3307      	adds	r3, #7
 800ce04:	f023 0307 	bic.w	r3, r3, #7
 800ce08:	f103 0208 	add.w	r2, r3, #8
 800ce0c:	f894 9018 	ldrb.w	r9, [r4, #24]
 800ce10:	f8d4 b000 	ldr.w	fp, [r4]
 800ce14:	f8c8 2000 	str.w	r2, [r8]
 800ce18:	e9d3 a800 	ldrd	sl, r8, [r3]
 800ce1c:	4652      	mov	r2, sl
 800ce1e:	4643      	mov	r3, r8
 800ce20:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ce24:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 800ce28:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce2e:	4650      	mov	r0, sl
 800ce30:	4b9c      	ldr	r3, [pc, #624]	; (800d0a4 <_printf_float+0x2cc>)
 800ce32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce34:	f7f3 fdea 	bl	8000a0c <__aeabi_dcmpun>
 800ce38:	bb70      	cbnz	r0, 800ce98 <_printf_float+0xc0>
 800ce3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce3e:	4650      	mov	r0, sl
 800ce40:	4b98      	ldr	r3, [pc, #608]	; (800d0a4 <_printf_float+0x2cc>)
 800ce42:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ce44:	f7f3 fdc4 	bl	80009d0 <__aeabi_dcmple>
 800ce48:	bb30      	cbnz	r0, 800ce98 <_printf_float+0xc0>
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	4650      	mov	r0, sl
 800ce50:	4641      	mov	r1, r8
 800ce52:	f7f3 fdb3 	bl	80009bc <__aeabi_dcmplt>
 800ce56:	b110      	cbz	r0, 800ce5e <_printf_float+0x86>
 800ce58:	232d      	movs	r3, #45	; 0x2d
 800ce5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce5e:	4a92      	ldr	r2, [pc, #584]	; (800d0a8 <_printf_float+0x2d0>)
 800ce60:	4b92      	ldr	r3, [pc, #584]	; (800d0ac <_printf_float+0x2d4>)
 800ce62:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ce66:	bf94      	ite	ls
 800ce68:	4690      	movls	r8, r2
 800ce6a:	4698      	movhi	r8, r3
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	f04f 0a00 	mov.w	sl, #0
 800ce72:	6123      	str	r3, [r4, #16]
 800ce74:	f02b 0304 	bic.w	r3, fp, #4
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	4633      	mov	r3, r6
 800ce7c:	4621      	mov	r1, r4
 800ce7e:	4628      	mov	r0, r5
 800ce80:	9700      	str	r7, [sp, #0]
 800ce82:	aa0f      	add	r2, sp, #60	; 0x3c
 800ce84:	f000 f9d6 	bl	800d234 <_printf_common>
 800ce88:	3001      	adds	r0, #1
 800ce8a:	f040 8090 	bne.w	800cfae <_printf_float+0x1d6>
 800ce8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ce92:	b011      	add	sp, #68	; 0x44
 800ce94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce98:	4652      	mov	r2, sl
 800ce9a:	4643      	mov	r3, r8
 800ce9c:	4650      	mov	r0, sl
 800ce9e:	4641      	mov	r1, r8
 800cea0:	f7f3 fdb4 	bl	8000a0c <__aeabi_dcmpun>
 800cea4:	b148      	cbz	r0, 800ceba <_printf_float+0xe2>
 800cea6:	f1b8 0f00 	cmp.w	r8, #0
 800ceaa:	bfb8      	it	lt
 800ceac:	232d      	movlt	r3, #45	; 0x2d
 800ceae:	4a80      	ldr	r2, [pc, #512]	; (800d0b0 <_printf_float+0x2d8>)
 800ceb0:	bfb8      	it	lt
 800ceb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ceb6:	4b7f      	ldr	r3, [pc, #508]	; (800d0b4 <_printf_float+0x2dc>)
 800ceb8:	e7d3      	b.n	800ce62 <_printf_float+0x8a>
 800ceba:	6863      	ldr	r3, [r4, #4]
 800cebc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	d142      	bne.n	800cf4a <_printf_float+0x172>
 800cec4:	2306      	movs	r3, #6
 800cec6:	6063      	str	r3, [r4, #4]
 800cec8:	2200      	movs	r2, #0
 800ceca:	9206      	str	r2, [sp, #24]
 800cecc:	aa0e      	add	r2, sp, #56	; 0x38
 800cece:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800ced2:	aa0d      	add	r2, sp, #52	; 0x34
 800ced4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800ced8:	9203      	str	r2, [sp, #12]
 800ceda:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800cede:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800cee2:	6023      	str	r3, [r4, #0]
 800cee4:	6863      	ldr	r3, [r4, #4]
 800cee6:	4652      	mov	r2, sl
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	4628      	mov	r0, r5
 800ceec:	4643      	mov	r3, r8
 800ceee:	910b      	str	r1, [sp, #44]	; 0x2c
 800cef0:	f7ff fed6 	bl	800cca0 <__cvt>
 800cef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cef6:	4680      	mov	r8, r0
 800cef8:	2947      	cmp	r1, #71	; 0x47
 800cefa:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cefc:	d108      	bne.n	800cf10 <_printf_float+0x138>
 800cefe:	1cc8      	adds	r0, r1, #3
 800cf00:	db02      	blt.n	800cf08 <_printf_float+0x130>
 800cf02:	6863      	ldr	r3, [r4, #4]
 800cf04:	4299      	cmp	r1, r3
 800cf06:	dd40      	ble.n	800cf8a <_printf_float+0x1b2>
 800cf08:	f1a9 0902 	sub.w	r9, r9, #2
 800cf0c:	fa5f f989 	uxtb.w	r9, r9
 800cf10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cf14:	d81f      	bhi.n	800cf56 <_printf_float+0x17e>
 800cf16:	464a      	mov	r2, r9
 800cf18:	3901      	subs	r1, #1
 800cf1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cf1e:	910d      	str	r1, [sp, #52]	; 0x34
 800cf20:	f7ff ff1d 	bl	800cd5e <__exponent>
 800cf24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cf26:	4682      	mov	sl, r0
 800cf28:	1813      	adds	r3, r2, r0
 800cf2a:	2a01      	cmp	r2, #1
 800cf2c:	6123      	str	r3, [r4, #16]
 800cf2e:	dc02      	bgt.n	800cf36 <_printf_float+0x15e>
 800cf30:	6822      	ldr	r2, [r4, #0]
 800cf32:	07d2      	lsls	r2, r2, #31
 800cf34:	d501      	bpl.n	800cf3a <_printf_float+0x162>
 800cf36:	3301      	adds	r3, #1
 800cf38:	6123      	str	r3, [r4, #16]
 800cf3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d09b      	beq.n	800ce7a <_printf_float+0xa2>
 800cf42:	232d      	movs	r3, #45	; 0x2d
 800cf44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf48:	e797      	b.n	800ce7a <_printf_float+0xa2>
 800cf4a:	2947      	cmp	r1, #71	; 0x47
 800cf4c:	d1bc      	bne.n	800cec8 <_printf_float+0xf0>
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d1ba      	bne.n	800cec8 <_printf_float+0xf0>
 800cf52:	2301      	movs	r3, #1
 800cf54:	e7b7      	b.n	800cec6 <_printf_float+0xee>
 800cf56:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800cf5a:	d118      	bne.n	800cf8e <_printf_float+0x1b6>
 800cf5c:	2900      	cmp	r1, #0
 800cf5e:	6863      	ldr	r3, [r4, #4]
 800cf60:	dd0b      	ble.n	800cf7a <_printf_float+0x1a2>
 800cf62:	6121      	str	r1, [r4, #16]
 800cf64:	b913      	cbnz	r3, 800cf6c <_printf_float+0x194>
 800cf66:	6822      	ldr	r2, [r4, #0]
 800cf68:	07d0      	lsls	r0, r2, #31
 800cf6a:	d502      	bpl.n	800cf72 <_printf_float+0x19a>
 800cf6c:	3301      	adds	r3, #1
 800cf6e:	440b      	add	r3, r1
 800cf70:	6123      	str	r3, [r4, #16]
 800cf72:	f04f 0a00 	mov.w	sl, #0
 800cf76:	65a1      	str	r1, [r4, #88]	; 0x58
 800cf78:	e7df      	b.n	800cf3a <_printf_float+0x162>
 800cf7a:	b913      	cbnz	r3, 800cf82 <_printf_float+0x1aa>
 800cf7c:	6822      	ldr	r2, [r4, #0]
 800cf7e:	07d2      	lsls	r2, r2, #31
 800cf80:	d501      	bpl.n	800cf86 <_printf_float+0x1ae>
 800cf82:	3302      	adds	r3, #2
 800cf84:	e7f4      	b.n	800cf70 <_printf_float+0x198>
 800cf86:	2301      	movs	r3, #1
 800cf88:	e7f2      	b.n	800cf70 <_printf_float+0x198>
 800cf8a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800cf8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf90:	4299      	cmp	r1, r3
 800cf92:	db05      	blt.n	800cfa0 <_printf_float+0x1c8>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	6121      	str	r1, [r4, #16]
 800cf98:	07d8      	lsls	r0, r3, #31
 800cf9a:	d5ea      	bpl.n	800cf72 <_printf_float+0x19a>
 800cf9c:	1c4b      	adds	r3, r1, #1
 800cf9e:	e7e7      	b.n	800cf70 <_printf_float+0x198>
 800cfa0:	2900      	cmp	r1, #0
 800cfa2:	bfcc      	ite	gt
 800cfa4:	2201      	movgt	r2, #1
 800cfa6:	f1c1 0202 	rsble	r2, r1, #2
 800cfaa:	4413      	add	r3, r2
 800cfac:	e7e0      	b.n	800cf70 <_printf_float+0x198>
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	055a      	lsls	r2, r3, #21
 800cfb2:	d407      	bmi.n	800cfc4 <_printf_float+0x1ec>
 800cfb4:	6923      	ldr	r3, [r4, #16]
 800cfb6:	4642      	mov	r2, r8
 800cfb8:	4631      	mov	r1, r6
 800cfba:	4628      	mov	r0, r5
 800cfbc:	47b8      	blx	r7
 800cfbe:	3001      	adds	r0, #1
 800cfc0:	d12b      	bne.n	800d01a <_printf_float+0x242>
 800cfc2:	e764      	b.n	800ce8e <_printf_float+0xb6>
 800cfc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800cfc8:	f240 80dd 	bls.w	800d186 <_printf_float+0x3ae>
 800cfcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cfd0:	2200      	movs	r2, #0
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	f7f3 fce8 	bl	80009a8 <__aeabi_dcmpeq>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d033      	beq.n	800d044 <_printf_float+0x26c>
 800cfdc:	2301      	movs	r3, #1
 800cfde:	4631      	mov	r1, r6
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	4a35      	ldr	r2, [pc, #212]	; (800d0b8 <_printf_float+0x2e0>)
 800cfe4:	47b8      	blx	r7
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	f43f af51 	beq.w	800ce8e <_printf_float+0xb6>
 800cfec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800cff0:	429a      	cmp	r2, r3
 800cff2:	db02      	blt.n	800cffa <_printf_float+0x222>
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	07d8      	lsls	r0, r3, #31
 800cff8:	d50f      	bpl.n	800d01a <_printf_float+0x242>
 800cffa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cffe:	4631      	mov	r1, r6
 800d000:	4628      	mov	r0, r5
 800d002:	47b8      	blx	r7
 800d004:	3001      	adds	r0, #1
 800d006:	f43f af42 	beq.w	800ce8e <_printf_float+0xb6>
 800d00a:	f04f 0800 	mov.w	r8, #0
 800d00e:	f104 091a 	add.w	r9, r4, #26
 800d012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d014:	3b01      	subs	r3, #1
 800d016:	4543      	cmp	r3, r8
 800d018:	dc09      	bgt.n	800d02e <_printf_float+0x256>
 800d01a:	6823      	ldr	r3, [r4, #0]
 800d01c:	079b      	lsls	r3, r3, #30
 800d01e:	f100 8104 	bmi.w	800d22a <_printf_float+0x452>
 800d022:	68e0      	ldr	r0, [r4, #12]
 800d024:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d026:	4298      	cmp	r0, r3
 800d028:	bfb8      	it	lt
 800d02a:	4618      	movlt	r0, r3
 800d02c:	e731      	b.n	800ce92 <_printf_float+0xba>
 800d02e:	2301      	movs	r3, #1
 800d030:	464a      	mov	r2, r9
 800d032:	4631      	mov	r1, r6
 800d034:	4628      	mov	r0, r5
 800d036:	47b8      	blx	r7
 800d038:	3001      	adds	r0, #1
 800d03a:	f43f af28 	beq.w	800ce8e <_printf_float+0xb6>
 800d03e:	f108 0801 	add.w	r8, r8, #1
 800d042:	e7e6      	b.n	800d012 <_printf_float+0x23a>
 800d044:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d046:	2b00      	cmp	r3, #0
 800d048:	dc38      	bgt.n	800d0bc <_printf_float+0x2e4>
 800d04a:	2301      	movs	r3, #1
 800d04c:	4631      	mov	r1, r6
 800d04e:	4628      	mov	r0, r5
 800d050:	4a19      	ldr	r2, [pc, #100]	; (800d0b8 <_printf_float+0x2e0>)
 800d052:	47b8      	blx	r7
 800d054:	3001      	adds	r0, #1
 800d056:	f43f af1a 	beq.w	800ce8e <_printf_float+0xb6>
 800d05a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d05e:	4313      	orrs	r3, r2
 800d060:	d102      	bne.n	800d068 <_printf_float+0x290>
 800d062:	6823      	ldr	r3, [r4, #0]
 800d064:	07d9      	lsls	r1, r3, #31
 800d066:	d5d8      	bpl.n	800d01a <_printf_float+0x242>
 800d068:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d06c:	4631      	mov	r1, r6
 800d06e:	4628      	mov	r0, r5
 800d070:	47b8      	blx	r7
 800d072:	3001      	adds	r0, #1
 800d074:	f43f af0b 	beq.w	800ce8e <_printf_float+0xb6>
 800d078:	f04f 0900 	mov.w	r9, #0
 800d07c:	f104 0a1a 	add.w	sl, r4, #26
 800d080:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d082:	425b      	negs	r3, r3
 800d084:	454b      	cmp	r3, r9
 800d086:	dc01      	bgt.n	800d08c <_printf_float+0x2b4>
 800d088:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d08a:	e794      	b.n	800cfb6 <_printf_float+0x1de>
 800d08c:	2301      	movs	r3, #1
 800d08e:	4652      	mov	r2, sl
 800d090:	4631      	mov	r1, r6
 800d092:	4628      	mov	r0, r5
 800d094:	47b8      	blx	r7
 800d096:	3001      	adds	r0, #1
 800d098:	f43f aef9 	beq.w	800ce8e <_printf_float+0xb6>
 800d09c:	f109 0901 	add.w	r9, r9, #1
 800d0a0:	e7ee      	b.n	800d080 <_printf_float+0x2a8>
 800d0a2:	bf00      	nop
 800d0a4:	7fefffff 	.word	0x7fefffff
 800d0a8:	0800fa72 	.word	0x0800fa72
 800d0ac:	0800fa76 	.word	0x0800fa76
 800d0b0:	0800fa7a 	.word	0x0800fa7a
 800d0b4:	0800fa7e 	.word	0x0800fa7e
 800d0b8:	0800fa82 	.word	0x0800fa82
 800d0bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	bfa8      	it	ge
 800d0c4:	461a      	movge	r2, r3
 800d0c6:	2a00      	cmp	r2, #0
 800d0c8:	4691      	mov	r9, r2
 800d0ca:	dc37      	bgt.n	800d13c <_printf_float+0x364>
 800d0cc:	f04f 0b00 	mov.w	fp, #0
 800d0d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d0d4:	f104 021a 	add.w	r2, r4, #26
 800d0d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d0dc:	ebaa 0309 	sub.w	r3, sl, r9
 800d0e0:	455b      	cmp	r3, fp
 800d0e2:	dc33      	bgt.n	800d14c <_printf_float+0x374>
 800d0e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d0e8:	429a      	cmp	r2, r3
 800d0ea:	db3b      	blt.n	800d164 <_printf_float+0x38c>
 800d0ec:	6823      	ldr	r3, [r4, #0]
 800d0ee:	07da      	lsls	r2, r3, #31
 800d0f0:	d438      	bmi.n	800d164 <_printf_float+0x38c>
 800d0f2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800d0f6:	eba2 0903 	sub.w	r9, r2, r3
 800d0fa:	eba2 020a 	sub.w	r2, r2, sl
 800d0fe:	4591      	cmp	r9, r2
 800d100:	bfa8      	it	ge
 800d102:	4691      	movge	r9, r2
 800d104:	f1b9 0f00 	cmp.w	r9, #0
 800d108:	dc34      	bgt.n	800d174 <_printf_float+0x39c>
 800d10a:	f04f 0800 	mov.w	r8, #0
 800d10e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d112:	f104 0a1a 	add.w	sl, r4, #26
 800d116:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800d11a:	1a9b      	subs	r3, r3, r2
 800d11c:	eba3 0309 	sub.w	r3, r3, r9
 800d120:	4543      	cmp	r3, r8
 800d122:	f77f af7a 	ble.w	800d01a <_printf_float+0x242>
 800d126:	2301      	movs	r3, #1
 800d128:	4652      	mov	r2, sl
 800d12a:	4631      	mov	r1, r6
 800d12c:	4628      	mov	r0, r5
 800d12e:	47b8      	blx	r7
 800d130:	3001      	adds	r0, #1
 800d132:	f43f aeac 	beq.w	800ce8e <_printf_float+0xb6>
 800d136:	f108 0801 	add.w	r8, r8, #1
 800d13a:	e7ec      	b.n	800d116 <_printf_float+0x33e>
 800d13c:	4613      	mov	r3, r2
 800d13e:	4631      	mov	r1, r6
 800d140:	4642      	mov	r2, r8
 800d142:	4628      	mov	r0, r5
 800d144:	47b8      	blx	r7
 800d146:	3001      	adds	r0, #1
 800d148:	d1c0      	bne.n	800d0cc <_printf_float+0x2f4>
 800d14a:	e6a0      	b.n	800ce8e <_printf_float+0xb6>
 800d14c:	2301      	movs	r3, #1
 800d14e:	4631      	mov	r1, r6
 800d150:	4628      	mov	r0, r5
 800d152:	920b      	str	r2, [sp, #44]	; 0x2c
 800d154:	47b8      	blx	r7
 800d156:	3001      	adds	r0, #1
 800d158:	f43f ae99 	beq.w	800ce8e <_printf_float+0xb6>
 800d15c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d15e:	f10b 0b01 	add.w	fp, fp, #1
 800d162:	e7b9      	b.n	800d0d8 <_printf_float+0x300>
 800d164:	4631      	mov	r1, r6
 800d166:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d16a:	4628      	mov	r0, r5
 800d16c:	47b8      	blx	r7
 800d16e:	3001      	adds	r0, #1
 800d170:	d1bf      	bne.n	800d0f2 <_printf_float+0x31a>
 800d172:	e68c      	b.n	800ce8e <_printf_float+0xb6>
 800d174:	464b      	mov	r3, r9
 800d176:	4631      	mov	r1, r6
 800d178:	4628      	mov	r0, r5
 800d17a:	eb08 020a 	add.w	r2, r8, sl
 800d17e:	47b8      	blx	r7
 800d180:	3001      	adds	r0, #1
 800d182:	d1c2      	bne.n	800d10a <_printf_float+0x332>
 800d184:	e683      	b.n	800ce8e <_printf_float+0xb6>
 800d186:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d188:	2a01      	cmp	r2, #1
 800d18a:	dc01      	bgt.n	800d190 <_printf_float+0x3b8>
 800d18c:	07db      	lsls	r3, r3, #31
 800d18e:	d539      	bpl.n	800d204 <_printf_float+0x42c>
 800d190:	2301      	movs	r3, #1
 800d192:	4642      	mov	r2, r8
 800d194:	4631      	mov	r1, r6
 800d196:	4628      	mov	r0, r5
 800d198:	47b8      	blx	r7
 800d19a:	3001      	adds	r0, #1
 800d19c:	f43f ae77 	beq.w	800ce8e <_printf_float+0xb6>
 800d1a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1a4:	4631      	mov	r1, r6
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	47b8      	blx	r7
 800d1aa:	3001      	adds	r0, #1
 800d1ac:	f43f ae6f 	beq.w	800ce8e <_printf_float+0xb6>
 800d1b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800d1bc:	f7f3 fbf4 	bl	80009a8 <__aeabi_dcmpeq>
 800d1c0:	b9d8      	cbnz	r0, 800d1fa <_printf_float+0x422>
 800d1c2:	f109 33ff 	add.w	r3, r9, #4294967295
 800d1c6:	f108 0201 	add.w	r2, r8, #1
 800d1ca:	4631      	mov	r1, r6
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	47b8      	blx	r7
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	d10e      	bne.n	800d1f2 <_printf_float+0x41a>
 800d1d4:	e65b      	b.n	800ce8e <_printf_float+0xb6>
 800d1d6:	2301      	movs	r3, #1
 800d1d8:	464a      	mov	r2, r9
 800d1da:	4631      	mov	r1, r6
 800d1dc:	4628      	mov	r0, r5
 800d1de:	47b8      	blx	r7
 800d1e0:	3001      	adds	r0, #1
 800d1e2:	f43f ae54 	beq.w	800ce8e <_printf_float+0xb6>
 800d1e6:	f108 0801 	add.w	r8, r8, #1
 800d1ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ec:	3b01      	subs	r3, #1
 800d1ee:	4543      	cmp	r3, r8
 800d1f0:	dcf1      	bgt.n	800d1d6 <_printf_float+0x3fe>
 800d1f2:	4653      	mov	r3, sl
 800d1f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d1f8:	e6de      	b.n	800cfb8 <_printf_float+0x1e0>
 800d1fa:	f04f 0800 	mov.w	r8, #0
 800d1fe:	f104 091a 	add.w	r9, r4, #26
 800d202:	e7f2      	b.n	800d1ea <_printf_float+0x412>
 800d204:	2301      	movs	r3, #1
 800d206:	4642      	mov	r2, r8
 800d208:	e7df      	b.n	800d1ca <_printf_float+0x3f2>
 800d20a:	2301      	movs	r3, #1
 800d20c:	464a      	mov	r2, r9
 800d20e:	4631      	mov	r1, r6
 800d210:	4628      	mov	r0, r5
 800d212:	47b8      	blx	r7
 800d214:	3001      	adds	r0, #1
 800d216:	f43f ae3a 	beq.w	800ce8e <_printf_float+0xb6>
 800d21a:	f108 0801 	add.w	r8, r8, #1
 800d21e:	68e3      	ldr	r3, [r4, #12]
 800d220:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800d222:	1a5b      	subs	r3, r3, r1
 800d224:	4543      	cmp	r3, r8
 800d226:	dcf0      	bgt.n	800d20a <_printf_float+0x432>
 800d228:	e6fb      	b.n	800d022 <_printf_float+0x24a>
 800d22a:	f04f 0800 	mov.w	r8, #0
 800d22e:	f104 0919 	add.w	r9, r4, #25
 800d232:	e7f4      	b.n	800d21e <_printf_float+0x446>

0800d234 <_printf_common>:
 800d234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d238:	4616      	mov	r6, r2
 800d23a:	4699      	mov	r9, r3
 800d23c:	688a      	ldr	r2, [r1, #8]
 800d23e:	690b      	ldr	r3, [r1, #16]
 800d240:	4607      	mov	r7, r0
 800d242:	4293      	cmp	r3, r2
 800d244:	bfb8      	it	lt
 800d246:	4613      	movlt	r3, r2
 800d248:	6033      	str	r3, [r6, #0]
 800d24a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d24e:	460c      	mov	r4, r1
 800d250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d254:	b10a      	cbz	r2, 800d25a <_printf_common+0x26>
 800d256:	3301      	adds	r3, #1
 800d258:	6033      	str	r3, [r6, #0]
 800d25a:	6823      	ldr	r3, [r4, #0]
 800d25c:	0699      	lsls	r1, r3, #26
 800d25e:	bf42      	ittt	mi
 800d260:	6833      	ldrmi	r3, [r6, #0]
 800d262:	3302      	addmi	r3, #2
 800d264:	6033      	strmi	r3, [r6, #0]
 800d266:	6825      	ldr	r5, [r4, #0]
 800d268:	f015 0506 	ands.w	r5, r5, #6
 800d26c:	d106      	bne.n	800d27c <_printf_common+0x48>
 800d26e:	f104 0a19 	add.w	sl, r4, #25
 800d272:	68e3      	ldr	r3, [r4, #12]
 800d274:	6832      	ldr	r2, [r6, #0]
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	42ab      	cmp	r3, r5
 800d27a:	dc2b      	bgt.n	800d2d4 <_printf_common+0xa0>
 800d27c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d280:	1e13      	subs	r3, r2, #0
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	bf18      	it	ne
 800d286:	2301      	movne	r3, #1
 800d288:	0692      	lsls	r2, r2, #26
 800d28a:	d430      	bmi.n	800d2ee <_printf_common+0xba>
 800d28c:	4649      	mov	r1, r9
 800d28e:	4638      	mov	r0, r7
 800d290:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d294:	47c0      	blx	r8
 800d296:	3001      	adds	r0, #1
 800d298:	d023      	beq.n	800d2e2 <_printf_common+0xae>
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	6922      	ldr	r2, [r4, #16]
 800d29e:	f003 0306 	and.w	r3, r3, #6
 800d2a2:	2b04      	cmp	r3, #4
 800d2a4:	bf14      	ite	ne
 800d2a6:	2500      	movne	r5, #0
 800d2a8:	6833      	ldreq	r3, [r6, #0]
 800d2aa:	f04f 0600 	mov.w	r6, #0
 800d2ae:	bf08      	it	eq
 800d2b0:	68e5      	ldreq	r5, [r4, #12]
 800d2b2:	f104 041a 	add.w	r4, r4, #26
 800d2b6:	bf08      	it	eq
 800d2b8:	1aed      	subeq	r5, r5, r3
 800d2ba:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d2be:	bf08      	it	eq
 800d2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	bfc4      	itt	gt
 800d2c8:	1a9b      	subgt	r3, r3, r2
 800d2ca:	18ed      	addgt	r5, r5, r3
 800d2cc:	42b5      	cmp	r5, r6
 800d2ce:	d11a      	bne.n	800d306 <_printf_common+0xd2>
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	e008      	b.n	800d2e6 <_printf_common+0xb2>
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	4652      	mov	r2, sl
 800d2d8:	4649      	mov	r1, r9
 800d2da:	4638      	mov	r0, r7
 800d2dc:	47c0      	blx	r8
 800d2de:	3001      	adds	r0, #1
 800d2e0:	d103      	bne.n	800d2ea <_printf_common+0xb6>
 800d2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ea:	3501      	adds	r5, #1
 800d2ec:	e7c1      	b.n	800d272 <_printf_common+0x3e>
 800d2ee:	2030      	movs	r0, #48	; 0x30
 800d2f0:	18e1      	adds	r1, r4, r3
 800d2f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2f6:	1c5a      	adds	r2, r3, #1
 800d2f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2fc:	4422      	add	r2, r4
 800d2fe:	3302      	adds	r3, #2
 800d300:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d304:	e7c2      	b.n	800d28c <_printf_common+0x58>
 800d306:	2301      	movs	r3, #1
 800d308:	4622      	mov	r2, r4
 800d30a:	4649      	mov	r1, r9
 800d30c:	4638      	mov	r0, r7
 800d30e:	47c0      	blx	r8
 800d310:	3001      	adds	r0, #1
 800d312:	d0e6      	beq.n	800d2e2 <_printf_common+0xae>
 800d314:	3601      	adds	r6, #1
 800d316:	e7d9      	b.n	800d2cc <_printf_common+0x98>

0800d318 <_printf_i>:
 800d318:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d31c:	7e0f      	ldrb	r7, [r1, #24]
 800d31e:	4691      	mov	r9, r2
 800d320:	2f78      	cmp	r7, #120	; 0x78
 800d322:	4680      	mov	r8, r0
 800d324:	460c      	mov	r4, r1
 800d326:	469a      	mov	sl, r3
 800d328:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d32a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d32e:	d807      	bhi.n	800d340 <_printf_i+0x28>
 800d330:	2f62      	cmp	r7, #98	; 0x62
 800d332:	d80a      	bhi.n	800d34a <_printf_i+0x32>
 800d334:	2f00      	cmp	r7, #0
 800d336:	f000 80d5 	beq.w	800d4e4 <_printf_i+0x1cc>
 800d33a:	2f58      	cmp	r7, #88	; 0x58
 800d33c:	f000 80c1 	beq.w	800d4c2 <_printf_i+0x1aa>
 800d340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d344:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d348:	e03a      	b.n	800d3c0 <_printf_i+0xa8>
 800d34a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d34e:	2b15      	cmp	r3, #21
 800d350:	d8f6      	bhi.n	800d340 <_printf_i+0x28>
 800d352:	a101      	add	r1, pc, #4	; (adr r1, 800d358 <_printf_i+0x40>)
 800d354:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d358:	0800d3b1 	.word	0x0800d3b1
 800d35c:	0800d3c5 	.word	0x0800d3c5
 800d360:	0800d341 	.word	0x0800d341
 800d364:	0800d341 	.word	0x0800d341
 800d368:	0800d341 	.word	0x0800d341
 800d36c:	0800d341 	.word	0x0800d341
 800d370:	0800d3c5 	.word	0x0800d3c5
 800d374:	0800d341 	.word	0x0800d341
 800d378:	0800d341 	.word	0x0800d341
 800d37c:	0800d341 	.word	0x0800d341
 800d380:	0800d341 	.word	0x0800d341
 800d384:	0800d4cb 	.word	0x0800d4cb
 800d388:	0800d3f1 	.word	0x0800d3f1
 800d38c:	0800d485 	.word	0x0800d485
 800d390:	0800d341 	.word	0x0800d341
 800d394:	0800d341 	.word	0x0800d341
 800d398:	0800d4ed 	.word	0x0800d4ed
 800d39c:	0800d341 	.word	0x0800d341
 800d3a0:	0800d3f1 	.word	0x0800d3f1
 800d3a4:	0800d341 	.word	0x0800d341
 800d3a8:	0800d341 	.word	0x0800d341
 800d3ac:	0800d48d 	.word	0x0800d48d
 800d3b0:	682b      	ldr	r3, [r5, #0]
 800d3b2:	1d1a      	adds	r2, r3, #4
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	602a      	str	r2, [r5, #0]
 800d3b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	e0a0      	b.n	800d506 <_printf_i+0x1ee>
 800d3c4:	6820      	ldr	r0, [r4, #0]
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	0607      	lsls	r7, r0, #24
 800d3ca:	f103 0104 	add.w	r1, r3, #4
 800d3ce:	6029      	str	r1, [r5, #0]
 800d3d0:	d501      	bpl.n	800d3d6 <_printf_i+0xbe>
 800d3d2:	681e      	ldr	r6, [r3, #0]
 800d3d4:	e003      	b.n	800d3de <_printf_i+0xc6>
 800d3d6:	0646      	lsls	r6, r0, #25
 800d3d8:	d5fb      	bpl.n	800d3d2 <_printf_i+0xba>
 800d3da:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d3de:	2e00      	cmp	r6, #0
 800d3e0:	da03      	bge.n	800d3ea <_printf_i+0xd2>
 800d3e2:	232d      	movs	r3, #45	; 0x2d
 800d3e4:	4276      	negs	r6, r6
 800d3e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3ea:	230a      	movs	r3, #10
 800d3ec:	4859      	ldr	r0, [pc, #356]	; (800d554 <_printf_i+0x23c>)
 800d3ee:	e012      	b.n	800d416 <_printf_i+0xfe>
 800d3f0:	682b      	ldr	r3, [r5, #0]
 800d3f2:	6820      	ldr	r0, [r4, #0]
 800d3f4:	1d19      	adds	r1, r3, #4
 800d3f6:	6029      	str	r1, [r5, #0]
 800d3f8:	0605      	lsls	r5, r0, #24
 800d3fa:	d501      	bpl.n	800d400 <_printf_i+0xe8>
 800d3fc:	681e      	ldr	r6, [r3, #0]
 800d3fe:	e002      	b.n	800d406 <_printf_i+0xee>
 800d400:	0641      	lsls	r1, r0, #25
 800d402:	d5fb      	bpl.n	800d3fc <_printf_i+0xe4>
 800d404:	881e      	ldrh	r6, [r3, #0]
 800d406:	2f6f      	cmp	r7, #111	; 0x6f
 800d408:	bf0c      	ite	eq
 800d40a:	2308      	moveq	r3, #8
 800d40c:	230a      	movne	r3, #10
 800d40e:	4851      	ldr	r0, [pc, #324]	; (800d554 <_printf_i+0x23c>)
 800d410:	2100      	movs	r1, #0
 800d412:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d416:	6865      	ldr	r5, [r4, #4]
 800d418:	2d00      	cmp	r5, #0
 800d41a:	bfa8      	it	ge
 800d41c:	6821      	ldrge	r1, [r4, #0]
 800d41e:	60a5      	str	r5, [r4, #8]
 800d420:	bfa4      	itt	ge
 800d422:	f021 0104 	bicge.w	r1, r1, #4
 800d426:	6021      	strge	r1, [r4, #0]
 800d428:	b90e      	cbnz	r6, 800d42e <_printf_i+0x116>
 800d42a:	2d00      	cmp	r5, #0
 800d42c:	d04b      	beq.n	800d4c6 <_printf_i+0x1ae>
 800d42e:	4615      	mov	r5, r2
 800d430:	fbb6 f1f3 	udiv	r1, r6, r3
 800d434:	fb03 6711 	mls	r7, r3, r1, r6
 800d438:	5dc7      	ldrb	r7, [r0, r7]
 800d43a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d43e:	4637      	mov	r7, r6
 800d440:	42bb      	cmp	r3, r7
 800d442:	460e      	mov	r6, r1
 800d444:	d9f4      	bls.n	800d430 <_printf_i+0x118>
 800d446:	2b08      	cmp	r3, #8
 800d448:	d10b      	bne.n	800d462 <_printf_i+0x14a>
 800d44a:	6823      	ldr	r3, [r4, #0]
 800d44c:	07de      	lsls	r6, r3, #31
 800d44e:	d508      	bpl.n	800d462 <_printf_i+0x14a>
 800d450:	6923      	ldr	r3, [r4, #16]
 800d452:	6861      	ldr	r1, [r4, #4]
 800d454:	4299      	cmp	r1, r3
 800d456:	bfde      	ittt	le
 800d458:	2330      	movle	r3, #48	; 0x30
 800d45a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d45e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d462:	1b52      	subs	r2, r2, r5
 800d464:	6122      	str	r2, [r4, #16]
 800d466:	464b      	mov	r3, r9
 800d468:	4621      	mov	r1, r4
 800d46a:	4640      	mov	r0, r8
 800d46c:	f8cd a000 	str.w	sl, [sp]
 800d470:	aa03      	add	r2, sp, #12
 800d472:	f7ff fedf 	bl	800d234 <_printf_common>
 800d476:	3001      	adds	r0, #1
 800d478:	d14a      	bne.n	800d510 <_printf_i+0x1f8>
 800d47a:	f04f 30ff 	mov.w	r0, #4294967295
 800d47e:	b004      	add	sp, #16
 800d480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d484:	6823      	ldr	r3, [r4, #0]
 800d486:	f043 0320 	orr.w	r3, r3, #32
 800d48a:	6023      	str	r3, [r4, #0]
 800d48c:	2778      	movs	r7, #120	; 0x78
 800d48e:	4832      	ldr	r0, [pc, #200]	; (800d558 <_printf_i+0x240>)
 800d490:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d494:	6823      	ldr	r3, [r4, #0]
 800d496:	6829      	ldr	r1, [r5, #0]
 800d498:	061f      	lsls	r7, r3, #24
 800d49a:	f851 6b04 	ldr.w	r6, [r1], #4
 800d49e:	d402      	bmi.n	800d4a6 <_printf_i+0x18e>
 800d4a0:	065f      	lsls	r7, r3, #25
 800d4a2:	bf48      	it	mi
 800d4a4:	b2b6      	uxthmi	r6, r6
 800d4a6:	07df      	lsls	r7, r3, #31
 800d4a8:	bf48      	it	mi
 800d4aa:	f043 0320 	orrmi.w	r3, r3, #32
 800d4ae:	6029      	str	r1, [r5, #0]
 800d4b0:	bf48      	it	mi
 800d4b2:	6023      	strmi	r3, [r4, #0]
 800d4b4:	b91e      	cbnz	r6, 800d4be <_printf_i+0x1a6>
 800d4b6:	6823      	ldr	r3, [r4, #0]
 800d4b8:	f023 0320 	bic.w	r3, r3, #32
 800d4bc:	6023      	str	r3, [r4, #0]
 800d4be:	2310      	movs	r3, #16
 800d4c0:	e7a6      	b.n	800d410 <_printf_i+0xf8>
 800d4c2:	4824      	ldr	r0, [pc, #144]	; (800d554 <_printf_i+0x23c>)
 800d4c4:	e7e4      	b.n	800d490 <_printf_i+0x178>
 800d4c6:	4615      	mov	r5, r2
 800d4c8:	e7bd      	b.n	800d446 <_printf_i+0x12e>
 800d4ca:	682b      	ldr	r3, [r5, #0]
 800d4cc:	6826      	ldr	r6, [r4, #0]
 800d4ce:	1d18      	adds	r0, r3, #4
 800d4d0:	6961      	ldr	r1, [r4, #20]
 800d4d2:	6028      	str	r0, [r5, #0]
 800d4d4:	0635      	lsls	r5, r6, #24
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	d501      	bpl.n	800d4de <_printf_i+0x1c6>
 800d4da:	6019      	str	r1, [r3, #0]
 800d4dc:	e002      	b.n	800d4e4 <_printf_i+0x1cc>
 800d4de:	0670      	lsls	r0, r6, #25
 800d4e0:	d5fb      	bpl.n	800d4da <_printf_i+0x1c2>
 800d4e2:	8019      	strh	r1, [r3, #0]
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	4615      	mov	r5, r2
 800d4e8:	6123      	str	r3, [r4, #16]
 800d4ea:	e7bc      	b.n	800d466 <_printf_i+0x14e>
 800d4ec:	682b      	ldr	r3, [r5, #0]
 800d4ee:	2100      	movs	r1, #0
 800d4f0:	1d1a      	adds	r2, r3, #4
 800d4f2:	602a      	str	r2, [r5, #0]
 800d4f4:	681d      	ldr	r5, [r3, #0]
 800d4f6:	6862      	ldr	r2, [r4, #4]
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	f000 f9d4 	bl	800d8a6 <memchr>
 800d4fe:	b108      	cbz	r0, 800d504 <_printf_i+0x1ec>
 800d500:	1b40      	subs	r0, r0, r5
 800d502:	6060      	str	r0, [r4, #4]
 800d504:	6863      	ldr	r3, [r4, #4]
 800d506:	6123      	str	r3, [r4, #16]
 800d508:	2300      	movs	r3, #0
 800d50a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d50e:	e7aa      	b.n	800d466 <_printf_i+0x14e>
 800d510:	462a      	mov	r2, r5
 800d512:	4649      	mov	r1, r9
 800d514:	4640      	mov	r0, r8
 800d516:	6923      	ldr	r3, [r4, #16]
 800d518:	47d0      	blx	sl
 800d51a:	3001      	adds	r0, #1
 800d51c:	d0ad      	beq.n	800d47a <_printf_i+0x162>
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	079b      	lsls	r3, r3, #30
 800d522:	d413      	bmi.n	800d54c <_printf_i+0x234>
 800d524:	68e0      	ldr	r0, [r4, #12]
 800d526:	9b03      	ldr	r3, [sp, #12]
 800d528:	4298      	cmp	r0, r3
 800d52a:	bfb8      	it	lt
 800d52c:	4618      	movlt	r0, r3
 800d52e:	e7a6      	b.n	800d47e <_printf_i+0x166>
 800d530:	2301      	movs	r3, #1
 800d532:	4632      	mov	r2, r6
 800d534:	4649      	mov	r1, r9
 800d536:	4640      	mov	r0, r8
 800d538:	47d0      	blx	sl
 800d53a:	3001      	adds	r0, #1
 800d53c:	d09d      	beq.n	800d47a <_printf_i+0x162>
 800d53e:	3501      	adds	r5, #1
 800d540:	68e3      	ldr	r3, [r4, #12]
 800d542:	9903      	ldr	r1, [sp, #12]
 800d544:	1a5b      	subs	r3, r3, r1
 800d546:	42ab      	cmp	r3, r5
 800d548:	dcf2      	bgt.n	800d530 <_printf_i+0x218>
 800d54a:	e7eb      	b.n	800d524 <_printf_i+0x20c>
 800d54c:	2500      	movs	r5, #0
 800d54e:	f104 0619 	add.w	r6, r4, #25
 800d552:	e7f5      	b.n	800d540 <_printf_i+0x228>
 800d554:	0800fa84 	.word	0x0800fa84
 800d558:	0800fa95 	.word	0x0800fa95

0800d55c <std>:
 800d55c:	2300      	movs	r3, #0
 800d55e:	b510      	push	{r4, lr}
 800d560:	4604      	mov	r4, r0
 800d562:	e9c0 3300 	strd	r3, r3, [r0]
 800d566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d56a:	6083      	str	r3, [r0, #8]
 800d56c:	8181      	strh	r1, [r0, #12]
 800d56e:	6643      	str	r3, [r0, #100]	; 0x64
 800d570:	81c2      	strh	r2, [r0, #14]
 800d572:	6183      	str	r3, [r0, #24]
 800d574:	4619      	mov	r1, r3
 800d576:	2208      	movs	r2, #8
 800d578:	305c      	adds	r0, #92	; 0x5c
 800d57a:	f000 f914 	bl	800d7a6 <memset>
 800d57e:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <std+0x58>)
 800d580:	6224      	str	r4, [r4, #32]
 800d582:	6263      	str	r3, [r4, #36]	; 0x24
 800d584:	4b0c      	ldr	r3, [pc, #48]	; (800d5b8 <std+0x5c>)
 800d586:	62a3      	str	r3, [r4, #40]	; 0x28
 800d588:	4b0c      	ldr	r3, [pc, #48]	; (800d5bc <std+0x60>)
 800d58a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d58c:	4b0c      	ldr	r3, [pc, #48]	; (800d5c0 <std+0x64>)
 800d58e:	6323      	str	r3, [r4, #48]	; 0x30
 800d590:	4b0c      	ldr	r3, [pc, #48]	; (800d5c4 <std+0x68>)
 800d592:	429c      	cmp	r4, r3
 800d594:	d006      	beq.n	800d5a4 <std+0x48>
 800d596:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d59a:	4294      	cmp	r4, r2
 800d59c:	d002      	beq.n	800d5a4 <std+0x48>
 800d59e:	33d0      	adds	r3, #208	; 0xd0
 800d5a0:	429c      	cmp	r4, r3
 800d5a2:	d105      	bne.n	800d5b0 <std+0x54>
 800d5a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5ac:	f000 b978 	b.w	800d8a0 <__retarget_lock_init_recursive>
 800d5b0:	bd10      	pop	{r4, pc}
 800d5b2:	bf00      	nop
 800d5b4:	0800d721 	.word	0x0800d721
 800d5b8:	0800d743 	.word	0x0800d743
 800d5bc:	0800d77b 	.word	0x0800d77b
 800d5c0:	0800d79f 	.word	0x0800d79f
 800d5c4:	20000784 	.word	0x20000784

0800d5c8 <stdio_exit_handler>:
 800d5c8:	4a02      	ldr	r2, [pc, #8]	; (800d5d4 <stdio_exit_handler+0xc>)
 800d5ca:	4903      	ldr	r1, [pc, #12]	; (800d5d8 <stdio_exit_handler+0x10>)
 800d5cc:	4803      	ldr	r0, [pc, #12]	; (800d5dc <stdio_exit_handler+0x14>)
 800d5ce:	f000 b869 	b.w	800d6a4 <_fwalk_sglue>
 800d5d2:	bf00      	nop
 800d5d4:	20000020 	.word	0x20000020
 800d5d8:	0800f23d 	.word	0x0800f23d
 800d5dc:	2000002c 	.word	0x2000002c

0800d5e0 <cleanup_stdio>:
 800d5e0:	6841      	ldr	r1, [r0, #4]
 800d5e2:	4b0c      	ldr	r3, [pc, #48]	; (800d614 <cleanup_stdio+0x34>)
 800d5e4:	b510      	push	{r4, lr}
 800d5e6:	4299      	cmp	r1, r3
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	d001      	beq.n	800d5f0 <cleanup_stdio+0x10>
 800d5ec:	f001 fe26 	bl	800f23c <_fflush_r>
 800d5f0:	68a1      	ldr	r1, [r4, #8]
 800d5f2:	4b09      	ldr	r3, [pc, #36]	; (800d618 <cleanup_stdio+0x38>)
 800d5f4:	4299      	cmp	r1, r3
 800d5f6:	d002      	beq.n	800d5fe <cleanup_stdio+0x1e>
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f001 fe1f 	bl	800f23c <_fflush_r>
 800d5fe:	68e1      	ldr	r1, [r4, #12]
 800d600:	4b06      	ldr	r3, [pc, #24]	; (800d61c <cleanup_stdio+0x3c>)
 800d602:	4299      	cmp	r1, r3
 800d604:	d004      	beq.n	800d610 <cleanup_stdio+0x30>
 800d606:	4620      	mov	r0, r4
 800d608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d60c:	f001 be16 	b.w	800f23c <_fflush_r>
 800d610:	bd10      	pop	{r4, pc}
 800d612:	bf00      	nop
 800d614:	20000784 	.word	0x20000784
 800d618:	200007ec 	.word	0x200007ec
 800d61c:	20000854 	.word	0x20000854

0800d620 <global_stdio_init.part.0>:
 800d620:	b510      	push	{r4, lr}
 800d622:	4b0b      	ldr	r3, [pc, #44]	; (800d650 <global_stdio_init.part.0+0x30>)
 800d624:	4c0b      	ldr	r4, [pc, #44]	; (800d654 <global_stdio_init.part.0+0x34>)
 800d626:	4a0c      	ldr	r2, [pc, #48]	; (800d658 <global_stdio_init.part.0+0x38>)
 800d628:	4620      	mov	r0, r4
 800d62a:	601a      	str	r2, [r3, #0]
 800d62c:	2104      	movs	r1, #4
 800d62e:	2200      	movs	r2, #0
 800d630:	f7ff ff94 	bl	800d55c <std>
 800d634:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d638:	2201      	movs	r2, #1
 800d63a:	2109      	movs	r1, #9
 800d63c:	f7ff ff8e 	bl	800d55c <std>
 800d640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d644:	2202      	movs	r2, #2
 800d646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d64a:	2112      	movs	r1, #18
 800d64c:	f7ff bf86 	b.w	800d55c <std>
 800d650:	200008bc 	.word	0x200008bc
 800d654:	20000784 	.word	0x20000784
 800d658:	0800d5c9 	.word	0x0800d5c9

0800d65c <__sfp_lock_acquire>:
 800d65c:	4801      	ldr	r0, [pc, #4]	; (800d664 <__sfp_lock_acquire+0x8>)
 800d65e:	f000 b920 	b.w	800d8a2 <__retarget_lock_acquire_recursive>
 800d662:	bf00      	nop
 800d664:	200008c5 	.word	0x200008c5

0800d668 <__sfp_lock_release>:
 800d668:	4801      	ldr	r0, [pc, #4]	; (800d670 <__sfp_lock_release+0x8>)
 800d66a:	f000 b91b 	b.w	800d8a4 <__retarget_lock_release_recursive>
 800d66e:	bf00      	nop
 800d670:	200008c5 	.word	0x200008c5

0800d674 <__sinit>:
 800d674:	b510      	push	{r4, lr}
 800d676:	4604      	mov	r4, r0
 800d678:	f7ff fff0 	bl	800d65c <__sfp_lock_acquire>
 800d67c:	6a23      	ldr	r3, [r4, #32]
 800d67e:	b11b      	cbz	r3, 800d688 <__sinit+0x14>
 800d680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d684:	f7ff bff0 	b.w	800d668 <__sfp_lock_release>
 800d688:	4b04      	ldr	r3, [pc, #16]	; (800d69c <__sinit+0x28>)
 800d68a:	6223      	str	r3, [r4, #32]
 800d68c:	4b04      	ldr	r3, [pc, #16]	; (800d6a0 <__sinit+0x2c>)
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d1f5      	bne.n	800d680 <__sinit+0xc>
 800d694:	f7ff ffc4 	bl	800d620 <global_stdio_init.part.0>
 800d698:	e7f2      	b.n	800d680 <__sinit+0xc>
 800d69a:	bf00      	nop
 800d69c:	0800d5e1 	.word	0x0800d5e1
 800d6a0:	200008bc 	.word	0x200008bc

0800d6a4 <_fwalk_sglue>:
 800d6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6a8:	4607      	mov	r7, r0
 800d6aa:	4688      	mov	r8, r1
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	2600      	movs	r6, #0
 800d6b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6b4:	f1b9 0901 	subs.w	r9, r9, #1
 800d6b8:	d505      	bpl.n	800d6c6 <_fwalk_sglue+0x22>
 800d6ba:	6824      	ldr	r4, [r4, #0]
 800d6bc:	2c00      	cmp	r4, #0
 800d6be:	d1f7      	bne.n	800d6b0 <_fwalk_sglue+0xc>
 800d6c0:	4630      	mov	r0, r6
 800d6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d6c6:	89ab      	ldrh	r3, [r5, #12]
 800d6c8:	2b01      	cmp	r3, #1
 800d6ca:	d907      	bls.n	800d6dc <_fwalk_sglue+0x38>
 800d6cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d6d0:	3301      	adds	r3, #1
 800d6d2:	d003      	beq.n	800d6dc <_fwalk_sglue+0x38>
 800d6d4:	4629      	mov	r1, r5
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	47c0      	blx	r8
 800d6da:	4306      	orrs	r6, r0
 800d6dc:	3568      	adds	r5, #104	; 0x68
 800d6de:	e7e9      	b.n	800d6b4 <_fwalk_sglue+0x10>

0800d6e0 <siprintf>:
 800d6e0:	b40e      	push	{r1, r2, r3}
 800d6e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d6e6:	b500      	push	{lr}
 800d6e8:	b09c      	sub	sp, #112	; 0x70
 800d6ea:	ab1d      	add	r3, sp, #116	; 0x74
 800d6ec:	9002      	str	r0, [sp, #8]
 800d6ee:	9006      	str	r0, [sp, #24]
 800d6f0:	9107      	str	r1, [sp, #28]
 800d6f2:	9104      	str	r1, [sp, #16]
 800d6f4:	4808      	ldr	r0, [pc, #32]	; (800d718 <siprintf+0x38>)
 800d6f6:	4909      	ldr	r1, [pc, #36]	; (800d71c <siprintf+0x3c>)
 800d6f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6fc:	9105      	str	r1, [sp, #20]
 800d6fe:	6800      	ldr	r0, [r0, #0]
 800d700:	a902      	add	r1, sp, #8
 800d702:	9301      	str	r3, [sp, #4]
 800d704:	f001 fc1a 	bl	800ef3c <_svfiprintf_r>
 800d708:	2200      	movs	r2, #0
 800d70a:	9b02      	ldr	r3, [sp, #8]
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	b01c      	add	sp, #112	; 0x70
 800d710:	f85d eb04 	ldr.w	lr, [sp], #4
 800d714:	b003      	add	sp, #12
 800d716:	4770      	bx	lr
 800d718:	20000078 	.word	0x20000078
 800d71c:	ffff0208 	.word	0xffff0208

0800d720 <__sread>:
 800d720:	b510      	push	{r4, lr}
 800d722:	460c      	mov	r4, r1
 800d724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d728:	f000 f86c 	bl	800d804 <_read_r>
 800d72c:	2800      	cmp	r0, #0
 800d72e:	bfab      	itete	ge
 800d730:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d732:	89a3      	ldrhlt	r3, [r4, #12]
 800d734:	181b      	addge	r3, r3, r0
 800d736:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d73a:	bfac      	ite	ge
 800d73c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d73e:	81a3      	strhlt	r3, [r4, #12]
 800d740:	bd10      	pop	{r4, pc}

0800d742 <__swrite>:
 800d742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d746:	461f      	mov	r7, r3
 800d748:	898b      	ldrh	r3, [r1, #12]
 800d74a:	4605      	mov	r5, r0
 800d74c:	05db      	lsls	r3, r3, #23
 800d74e:	460c      	mov	r4, r1
 800d750:	4616      	mov	r6, r2
 800d752:	d505      	bpl.n	800d760 <__swrite+0x1e>
 800d754:	2302      	movs	r3, #2
 800d756:	2200      	movs	r2, #0
 800d758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d75c:	f000 f840 	bl	800d7e0 <_lseek_r>
 800d760:	89a3      	ldrh	r3, [r4, #12]
 800d762:	4632      	mov	r2, r6
 800d764:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d768:	81a3      	strh	r3, [r4, #12]
 800d76a:	4628      	mov	r0, r5
 800d76c:	463b      	mov	r3, r7
 800d76e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d772:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d776:	f000 b857 	b.w	800d828 <_write_r>

0800d77a <__sseek>:
 800d77a:	b510      	push	{r4, lr}
 800d77c:	460c      	mov	r4, r1
 800d77e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d782:	f000 f82d 	bl	800d7e0 <_lseek_r>
 800d786:	1c43      	adds	r3, r0, #1
 800d788:	89a3      	ldrh	r3, [r4, #12]
 800d78a:	bf15      	itete	ne
 800d78c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d78e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d792:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d796:	81a3      	strheq	r3, [r4, #12]
 800d798:	bf18      	it	ne
 800d79a:	81a3      	strhne	r3, [r4, #12]
 800d79c:	bd10      	pop	{r4, pc}

0800d79e <__sclose>:
 800d79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7a2:	f000 b80d 	b.w	800d7c0 <_close_r>

0800d7a6 <memset>:
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	4402      	add	r2, r0
 800d7aa:	4293      	cmp	r3, r2
 800d7ac:	d100      	bne.n	800d7b0 <memset+0xa>
 800d7ae:	4770      	bx	lr
 800d7b0:	f803 1b01 	strb.w	r1, [r3], #1
 800d7b4:	e7f9      	b.n	800d7aa <memset+0x4>
	...

0800d7b8 <_localeconv_r>:
 800d7b8:	4800      	ldr	r0, [pc, #0]	; (800d7bc <_localeconv_r+0x4>)
 800d7ba:	4770      	bx	lr
 800d7bc:	2000016c 	.word	0x2000016c

0800d7c0 <_close_r>:
 800d7c0:	b538      	push	{r3, r4, r5, lr}
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	4d05      	ldr	r5, [pc, #20]	; (800d7dc <_close_r+0x1c>)
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	4608      	mov	r0, r1
 800d7ca:	602b      	str	r3, [r5, #0]
 800d7cc:	f7f4 fc62 	bl	8002094 <_close>
 800d7d0:	1c43      	adds	r3, r0, #1
 800d7d2:	d102      	bne.n	800d7da <_close_r+0x1a>
 800d7d4:	682b      	ldr	r3, [r5, #0]
 800d7d6:	b103      	cbz	r3, 800d7da <_close_r+0x1a>
 800d7d8:	6023      	str	r3, [r4, #0]
 800d7da:	bd38      	pop	{r3, r4, r5, pc}
 800d7dc:	200008c0 	.word	0x200008c0

0800d7e0 <_lseek_r>:
 800d7e0:	b538      	push	{r3, r4, r5, lr}
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	4d05      	ldr	r5, [pc, #20]	; (800d800 <_lseek_r+0x20>)
 800d7ec:	602a      	str	r2, [r5, #0]
 800d7ee:	461a      	mov	r2, r3
 800d7f0:	f7f4 fc74 	bl	80020dc <_lseek>
 800d7f4:	1c43      	adds	r3, r0, #1
 800d7f6:	d102      	bne.n	800d7fe <_lseek_r+0x1e>
 800d7f8:	682b      	ldr	r3, [r5, #0]
 800d7fa:	b103      	cbz	r3, 800d7fe <_lseek_r+0x1e>
 800d7fc:	6023      	str	r3, [r4, #0]
 800d7fe:	bd38      	pop	{r3, r4, r5, pc}
 800d800:	200008c0 	.word	0x200008c0

0800d804 <_read_r>:
 800d804:	b538      	push	{r3, r4, r5, lr}
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	4d05      	ldr	r5, [pc, #20]	; (800d824 <_read_r+0x20>)
 800d810:	602a      	str	r2, [r5, #0]
 800d812:	461a      	mov	r2, r3
 800d814:	f7f4 fc05 	bl	8002022 <_read>
 800d818:	1c43      	adds	r3, r0, #1
 800d81a:	d102      	bne.n	800d822 <_read_r+0x1e>
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	b103      	cbz	r3, 800d822 <_read_r+0x1e>
 800d820:	6023      	str	r3, [r4, #0]
 800d822:	bd38      	pop	{r3, r4, r5, pc}
 800d824:	200008c0 	.word	0x200008c0

0800d828 <_write_r>:
 800d828:	b538      	push	{r3, r4, r5, lr}
 800d82a:	4604      	mov	r4, r0
 800d82c:	4608      	mov	r0, r1
 800d82e:	4611      	mov	r1, r2
 800d830:	2200      	movs	r2, #0
 800d832:	4d05      	ldr	r5, [pc, #20]	; (800d848 <_write_r+0x20>)
 800d834:	602a      	str	r2, [r5, #0]
 800d836:	461a      	mov	r2, r3
 800d838:	f7f4 fc10 	bl	800205c <_write>
 800d83c:	1c43      	adds	r3, r0, #1
 800d83e:	d102      	bne.n	800d846 <_write_r+0x1e>
 800d840:	682b      	ldr	r3, [r5, #0]
 800d842:	b103      	cbz	r3, 800d846 <_write_r+0x1e>
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	bd38      	pop	{r3, r4, r5, pc}
 800d848:	200008c0 	.word	0x200008c0

0800d84c <__errno>:
 800d84c:	4b01      	ldr	r3, [pc, #4]	; (800d854 <__errno+0x8>)
 800d84e:	6818      	ldr	r0, [r3, #0]
 800d850:	4770      	bx	lr
 800d852:	bf00      	nop
 800d854:	20000078 	.word	0x20000078

0800d858 <__libc_init_array>:
 800d858:	b570      	push	{r4, r5, r6, lr}
 800d85a:	2600      	movs	r6, #0
 800d85c:	4d0c      	ldr	r5, [pc, #48]	; (800d890 <__libc_init_array+0x38>)
 800d85e:	4c0d      	ldr	r4, [pc, #52]	; (800d894 <__libc_init_array+0x3c>)
 800d860:	1b64      	subs	r4, r4, r5
 800d862:	10a4      	asrs	r4, r4, #2
 800d864:	42a6      	cmp	r6, r4
 800d866:	d109      	bne.n	800d87c <__libc_init_array+0x24>
 800d868:	f002 f888 	bl	800f97c <_init>
 800d86c:	2600      	movs	r6, #0
 800d86e:	4d0a      	ldr	r5, [pc, #40]	; (800d898 <__libc_init_array+0x40>)
 800d870:	4c0a      	ldr	r4, [pc, #40]	; (800d89c <__libc_init_array+0x44>)
 800d872:	1b64      	subs	r4, r4, r5
 800d874:	10a4      	asrs	r4, r4, #2
 800d876:	42a6      	cmp	r6, r4
 800d878:	d105      	bne.n	800d886 <__libc_init_array+0x2e>
 800d87a:	bd70      	pop	{r4, r5, r6, pc}
 800d87c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d880:	4798      	blx	r3
 800d882:	3601      	adds	r6, #1
 800d884:	e7ee      	b.n	800d864 <__libc_init_array+0xc>
 800d886:	f855 3b04 	ldr.w	r3, [r5], #4
 800d88a:	4798      	blx	r3
 800d88c:	3601      	adds	r6, #1
 800d88e:	e7f2      	b.n	800d876 <__libc_init_array+0x1e>
 800d890:	0800fde4 	.word	0x0800fde4
 800d894:	0800fde4 	.word	0x0800fde4
 800d898:	0800fde4 	.word	0x0800fde4
 800d89c:	0800fde8 	.word	0x0800fde8

0800d8a0 <__retarget_lock_init_recursive>:
 800d8a0:	4770      	bx	lr

0800d8a2 <__retarget_lock_acquire_recursive>:
 800d8a2:	4770      	bx	lr

0800d8a4 <__retarget_lock_release_recursive>:
 800d8a4:	4770      	bx	lr

0800d8a6 <memchr>:
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	b510      	push	{r4, lr}
 800d8aa:	b2c9      	uxtb	r1, r1
 800d8ac:	4402      	add	r2, r0
 800d8ae:	4293      	cmp	r3, r2
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	d101      	bne.n	800d8b8 <memchr+0x12>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	e003      	b.n	800d8c0 <memchr+0x1a>
 800d8b8:	7804      	ldrb	r4, [r0, #0]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	428c      	cmp	r4, r1
 800d8be:	d1f6      	bne.n	800d8ae <memchr+0x8>
 800d8c0:	bd10      	pop	{r4, pc}

0800d8c2 <quorem>:
 800d8c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8c6:	6903      	ldr	r3, [r0, #16]
 800d8c8:	690c      	ldr	r4, [r1, #16]
 800d8ca:	4607      	mov	r7, r0
 800d8cc:	42a3      	cmp	r3, r4
 800d8ce:	db7f      	blt.n	800d9d0 <quorem+0x10e>
 800d8d0:	3c01      	subs	r4, #1
 800d8d2:	f100 0514 	add.w	r5, r0, #20
 800d8d6:	f101 0814 	add.w	r8, r1, #20
 800d8da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d8de:	9301      	str	r3, [sp, #4]
 800d8e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d8e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d8e8:	3301      	adds	r3, #1
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800d8f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d8f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d8f8:	d331      	bcc.n	800d95e <quorem+0x9c>
 800d8fa:	f04f 0e00 	mov.w	lr, #0
 800d8fe:	4640      	mov	r0, r8
 800d900:	46ac      	mov	ip, r5
 800d902:	46f2      	mov	sl, lr
 800d904:	f850 2b04 	ldr.w	r2, [r0], #4
 800d908:	b293      	uxth	r3, r2
 800d90a:	fb06 e303 	mla	r3, r6, r3, lr
 800d90e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d912:	0c1a      	lsrs	r2, r3, #16
 800d914:	b29b      	uxth	r3, r3
 800d916:	fb06 220e 	mla	r2, r6, lr, r2
 800d91a:	ebaa 0303 	sub.w	r3, sl, r3
 800d91e:	f8dc a000 	ldr.w	sl, [ip]
 800d922:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d926:	fa1f fa8a 	uxth.w	sl, sl
 800d92a:	4453      	add	r3, sl
 800d92c:	f8dc a000 	ldr.w	sl, [ip]
 800d930:	b292      	uxth	r2, r2
 800d932:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d936:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d940:	4581      	cmp	r9, r0
 800d942:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d946:	f84c 3b04 	str.w	r3, [ip], #4
 800d94a:	d2db      	bcs.n	800d904 <quorem+0x42>
 800d94c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d950:	b92b      	cbnz	r3, 800d95e <quorem+0x9c>
 800d952:	9b01      	ldr	r3, [sp, #4]
 800d954:	3b04      	subs	r3, #4
 800d956:	429d      	cmp	r5, r3
 800d958:	461a      	mov	r2, r3
 800d95a:	d32d      	bcc.n	800d9b8 <quorem+0xf6>
 800d95c:	613c      	str	r4, [r7, #16]
 800d95e:	4638      	mov	r0, r7
 800d960:	f001 f994 	bl	800ec8c <__mcmp>
 800d964:	2800      	cmp	r0, #0
 800d966:	db23      	blt.n	800d9b0 <quorem+0xee>
 800d968:	4629      	mov	r1, r5
 800d96a:	2000      	movs	r0, #0
 800d96c:	3601      	adds	r6, #1
 800d96e:	f858 2b04 	ldr.w	r2, [r8], #4
 800d972:	f8d1 c000 	ldr.w	ip, [r1]
 800d976:	b293      	uxth	r3, r2
 800d978:	1ac3      	subs	r3, r0, r3
 800d97a:	0c12      	lsrs	r2, r2, #16
 800d97c:	fa1f f08c 	uxth.w	r0, ip
 800d980:	4403      	add	r3, r0
 800d982:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800d986:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d98a:	b29b      	uxth	r3, r3
 800d98c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d990:	45c1      	cmp	r9, r8
 800d992:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d996:	f841 3b04 	str.w	r3, [r1], #4
 800d99a:	d2e8      	bcs.n	800d96e <quorem+0xac>
 800d99c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d9a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d9a4:	b922      	cbnz	r2, 800d9b0 <quorem+0xee>
 800d9a6:	3b04      	subs	r3, #4
 800d9a8:	429d      	cmp	r5, r3
 800d9aa:	461a      	mov	r2, r3
 800d9ac:	d30a      	bcc.n	800d9c4 <quorem+0x102>
 800d9ae:	613c      	str	r4, [r7, #16]
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	b003      	add	sp, #12
 800d9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9b8:	6812      	ldr	r2, [r2, #0]
 800d9ba:	3b04      	subs	r3, #4
 800d9bc:	2a00      	cmp	r2, #0
 800d9be:	d1cd      	bne.n	800d95c <quorem+0x9a>
 800d9c0:	3c01      	subs	r4, #1
 800d9c2:	e7c8      	b.n	800d956 <quorem+0x94>
 800d9c4:	6812      	ldr	r2, [r2, #0]
 800d9c6:	3b04      	subs	r3, #4
 800d9c8:	2a00      	cmp	r2, #0
 800d9ca:	d1f0      	bne.n	800d9ae <quorem+0xec>
 800d9cc:	3c01      	subs	r4, #1
 800d9ce:	e7eb      	b.n	800d9a8 <quorem+0xe6>
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	e7ee      	b.n	800d9b2 <quorem+0xf0>
 800d9d4:	0000      	movs	r0, r0
	...

0800d9d8 <_dtoa_r>:
 800d9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9dc:	4616      	mov	r6, r2
 800d9de:	461f      	mov	r7, r3
 800d9e0:	69c4      	ldr	r4, [r0, #28]
 800d9e2:	b099      	sub	sp, #100	; 0x64
 800d9e4:	4605      	mov	r5, r0
 800d9e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800d9ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800d9ee:	b974      	cbnz	r4, 800da0e <_dtoa_r+0x36>
 800d9f0:	2010      	movs	r0, #16
 800d9f2:	f000 fe1d 	bl	800e630 <malloc>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	61e8      	str	r0, [r5, #28]
 800d9fa:	b920      	cbnz	r0, 800da06 <_dtoa_r+0x2e>
 800d9fc:	21ef      	movs	r1, #239	; 0xef
 800d9fe:	4bac      	ldr	r3, [pc, #688]	; (800dcb0 <_dtoa_r+0x2d8>)
 800da00:	48ac      	ldr	r0, [pc, #688]	; (800dcb4 <_dtoa_r+0x2dc>)
 800da02:	f001 fc7b 	bl	800f2fc <__assert_func>
 800da06:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800da0a:	6004      	str	r4, [r0, #0]
 800da0c:	60c4      	str	r4, [r0, #12]
 800da0e:	69eb      	ldr	r3, [r5, #28]
 800da10:	6819      	ldr	r1, [r3, #0]
 800da12:	b151      	cbz	r1, 800da2a <_dtoa_r+0x52>
 800da14:	685a      	ldr	r2, [r3, #4]
 800da16:	2301      	movs	r3, #1
 800da18:	4093      	lsls	r3, r2
 800da1a:	604a      	str	r2, [r1, #4]
 800da1c:	608b      	str	r3, [r1, #8]
 800da1e:	4628      	mov	r0, r5
 800da20:	f000 fefa 	bl	800e818 <_Bfree>
 800da24:	2200      	movs	r2, #0
 800da26:	69eb      	ldr	r3, [r5, #28]
 800da28:	601a      	str	r2, [r3, #0]
 800da2a:	1e3b      	subs	r3, r7, #0
 800da2c:	bfaf      	iteee	ge
 800da2e:	2300      	movge	r3, #0
 800da30:	2201      	movlt	r2, #1
 800da32:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800da36:	9305      	strlt	r3, [sp, #20]
 800da38:	bfa8      	it	ge
 800da3a:	f8c8 3000 	strge.w	r3, [r8]
 800da3e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800da42:	4b9d      	ldr	r3, [pc, #628]	; (800dcb8 <_dtoa_r+0x2e0>)
 800da44:	bfb8      	it	lt
 800da46:	f8c8 2000 	strlt.w	r2, [r8]
 800da4a:	ea33 0309 	bics.w	r3, r3, r9
 800da4e:	d119      	bne.n	800da84 <_dtoa_r+0xac>
 800da50:	f242 730f 	movw	r3, #9999	; 0x270f
 800da54:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800da56:	6013      	str	r3, [r2, #0]
 800da58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800da5c:	4333      	orrs	r3, r6
 800da5e:	f000 8589 	beq.w	800e574 <_dtoa_r+0xb9c>
 800da62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800da64:	b953      	cbnz	r3, 800da7c <_dtoa_r+0xa4>
 800da66:	4b95      	ldr	r3, [pc, #596]	; (800dcbc <_dtoa_r+0x2e4>)
 800da68:	e023      	b.n	800dab2 <_dtoa_r+0xda>
 800da6a:	4b95      	ldr	r3, [pc, #596]	; (800dcc0 <_dtoa_r+0x2e8>)
 800da6c:	9303      	str	r3, [sp, #12]
 800da6e:	3308      	adds	r3, #8
 800da70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800da72:	6013      	str	r3, [r2, #0]
 800da74:	9803      	ldr	r0, [sp, #12]
 800da76:	b019      	add	sp, #100	; 0x64
 800da78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da7c:	4b8f      	ldr	r3, [pc, #572]	; (800dcbc <_dtoa_r+0x2e4>)
 800da7e:	9303      	str	r3, [sp, #12]
 800da80:	3303      	adds	r3, #3
 800da82:	e7f5      	b.n	800da70 <_dtoa_r+0x98>
 800da84:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800da88:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800da8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800da90:	2200      	movs	r2, #0
 800da92:	2300      	movs	r3, #0
 800da94:	f7f2 ff88 	bl	80009a8 <__aeabi_dcmpeq>
 800da98:	4680      	mov	r8, r0
 800da9a:	b160      	cbz	r0, 800dab6 <_dtoa_r+0xde>
 800da9c:	2301      	movs	r3, #1
 800da9e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800daa0:	6013      	str	r3, [r2, #0]
 800daa2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f000 8562 	beq.w	800e56e <_dtoa_r+0xb96>
 800daaa:	4b86      	ldr	r3, [pc, #536]	; (800dcc4 <_dtoa_r+0x2ec>)
 800daac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800daae:	6013      	str	r3, [r2, #0]
 800dab0:	3b01      	subs	r3, #1
 800dab2:	9303      	str	r3, [sp, #12]
 800dab4:	e7de      	b.n	800da74 <_dtoa_r+0x9c>
 800dab6:	ab16      	add	r3, sp, #88	; 0x58
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	ab17      	add	r3, sp, #92	; 0x5c
 800dabc:	9300      	str	r3, [sp, #0]
 800dabe:	4628      	mov	r0, r5
 800dac0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dac4:	f001 f98a 	bl	800eddc <__d2b>
 800dac8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dacc:	4682      	mov	sl, r0
 800dace:	2c00      	cmp	r4, #0
 800dad0:	d07e      	beq.n	800dbd0 <_dtoa_r+0x1f8>
 800dad2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dad8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800dadc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dae0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800dae4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800dae8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800daec:	4619      	mov	r1, r3
 800daee:	2200      	movs	r2, #0
 800daf0:	4b75      	ldr	r3, [pc, #468]	; (800dcc8 <_dtoa_r+0x2f0>)
 800daf2:	f7f2 fb39 	bl	8000168 <__aeabi_dsub>
 800daf6:	a368      	add	r3, pc, #416	; (adr r3, 800dc98 <_dtoa_r+0x2c0>)
 800daf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dafc:	f7f2 fcec 	bl	80004d8 <__aeabi_dmul>
 800db00:	a367      	add	r3, pc, #412	; (adr r3, 800dca0 <_dtoa_r+0x2c8>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	f7f2 fb31 	bl	800016c <__adddf3>
 800db0a:	4606      	mov	r6, r0
 800db0c:	4620      	mov	r0, r4
 800db0e:	460f      	mov	r7, r1
 800db10:	f7f2 fc78 	bl	8000404 <__aeabi_i2d>
 800db14:	a364      	add	r3, pc, #400	; (adr r3, 800dca8 <_dtoa_r+0x2d0>)
 800db16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1a:	f7f2 fcdd 	bl	80004d8 <__aeabi_dmul>
 800db1e:	4602      	mov	r2, r0
 800db20:	460b      	mov	r3, r1
 800db22:	4630      	mov	r0, r6
 800db24:	4639      	mov	r1, r7
 800db26:	f7f2 fb21 	bl	800016c <__adddf3>
 800db2a:	4606      	mov	r6, r0
 800db2c:	460f      	mov	r7, r1
 800db2e:	f7f2 ff83 	bl	8000a38 <__aeabi_d2iz>
 800db32:	2200      	movs	r2, #0
 800db34:	4683      	mov	fp, r0
 800db36:	2300      	movs	r3, #0
 800db38:	4630      	mov	r0, r6
 800db3a:	4639      	mov	r1, r7
 800db3c:	f7f2 ff3e 	bl	80009bc <__aeabi_dcmplt>
 800db40:	b148      	cbz	r0, 800db56 <_dtoa_r+0x17e>
 800db42:	4658      	mov	r0, fp
 800db44:	f7f2 fc5e 	bl	8000404 <__aeabi_i2d>
 800db48:	4632      	mov	r2, r6
 800db4a:	463b      	mov	r3, r7
 800db4c:	f7f2 ff2c 	bl	80009a8 <__aeabi_dcmpeq>
 800db50:	b908      	cbnz	r0, 800db56 <_dtoa_r+0x17e>
 800db52:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db56:	f1bb 0f16 	cmp.w	fp, #22
 800db5a:	d857      	bhi.n	800dc0c <_dtoa_r+0x234>
 800db5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800db60:	4b5a      	ldr	r3, [pc, #360]	; (800dccc <_dtoa_r+0x2f4>)
 800db62:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db6a:	f7f2 ff27 	bl	80009bc <__aeabi_dcmplt>
 800db6e:	2800      	cmp	r0, #0
 800db70:	d04e      	beq.n	800dc10 <_dtoa_r+0x238>
 800db72:	2300      	movs	r3, #0
 800db74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800db78:	930f      	str	r3, [sp, #60]	; 0x3c
 800db7a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800db7c:	1b1b      	subs	r3, r3, r4
 800db7e:	1e5a      	subs	r2, r3, #1
 800db80:	bf46      	itte	mi
 800db82:	f1c3 0901 	rsbmi	r9, r3, #1
 800db86:	2300      	movmi	r3, #0
 800db88:	f04f 0900 	movpl.w	r9, #0
 800db8c:	9209      	str	r2, [sp, #36]	; 0x24
 800db8e:	bf48      	it	mi
 800db90:	9309      	strmi	r3, [sp, #36]	; 0x24
 800db92:	f1bb 0f00 	cmp.w	fp, #0
 800db96:	db3d      	blt.n	800dc14 <_dtoa_r+0x23c>
 800db98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db9a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800db9e:	445b      	add	r3, fp
 800dba0:	9309      	str	r3, [sp, #36]	; 0x24
 800dba2:	2300      	movs	r3, #0
 800dba4:	930a      	str	r3, [sp, #40]	; 0x28
 800dba6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dba8:	2b09      	cmp	r3, #9
 800dbaa:	d867      	bhi.n	800dc7c <_dtoa_r+0x2a4>
 800dbac:	2b05      	cmp	r3, #5
 800dbae:	bfc4      	itt	gt
 800dbb0:	3b04      	subgt	r3, #4
 800dbb2:	9322      	strgt	r3, [sp, #136]	; 0x88
 800dbb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800dbb6:	bfc8      	it	gt
 800dbb8:	2400      	movgt	r4, #0
 800dbba:	f1a3 0302 	sub.w	r3, r3, #2
 800dbbe:	bfd8      	it	le
 800dbc0:	2401      	movle	r4, #1
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	f200 8086 	bhi.w	800dcd4 <_dtoa_r+0x2fc>
 800dbc8:	e8df f003 	tbb	[pc, r3]
 800dbcc:	5637392c 	.word	0x5637392c
 800dbd0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800dbd4:	441c      	add	r4, r3
 800dbd6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800dbda:	2b20      	cmp	r3, #32
 800dbdc:	bfc1      	itttt	gt
 800dbde:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dbe2:	fa09 f903 	lslgt.w	r9, r9, r3
 800dbe6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800dbea:	fa26 f303 	lsrgt.w	r3, r6, r3
 800dbee:	bfd6      	itet	le
 800dbf0:	f1c3 0320 	rsble	r3, r3, #32
 800dbf4:	ea49 0003 	orrgt.w	r0, r9, r3
 800dbf8:	fa06 f003 	lslle.w	r0, r6, r3
 800dbfc:	f7f2 fbf2 	bl	80003e4 <__aeabi_ui2d>
 800dc00:	2201      	movs	r2, #1
 800dc02:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800dc06:	3c01      	subs	r4, #1
 800dc08:	9213      	str	r2, [sp, #76]	; 0x4c
 800dc0a:	e76f      	b.n	800daec <_dtoa_r+0x114>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	e7b3      	b.n	800db78 <_dtoa_r+0x1a0>
 800dc10:	900f      	str	r0, [sp, #60]	; 0x3c
 800dc12:	e7b2      	b.n	800db7a <_dtoa_r+0x1a2>
 800dc14:	f1cb 0300 	rsb	r3, fp, #0
 800dc18:	930a      	str	r3, [sp, #40]	; 0x28
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	eba9 090b 	sub.w	r9, r9, fp
 800dc20:	930e      	str	r3, [sp, #56]	; 0x38
 800dc22:	e7c0      	b.n	800dba6 <_dtoa_r+0x1ce>
 800dc24:	2300      	movs	r3, #0
 800dc26:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc28:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dc55      	bgt.n	800dcda <_dtoa_r+0x302>
 800dc2e:	2301      	movs	r3, #1
 800dc30:	461a      	mov	r2, r3
 800dc32:	9306      	str	r3, [sp, #24]
 800dc34:	9308      	str	r3, [sp, #32]
 800dc36:	9223      	str	r2, [sp, #140]	; 0x8c
 800dc38:	e00b      	b.n	800dc52 <_dtoa_r+0x27a>
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e7f3      	b.n	800dc26 <_dtoa_r+0x24e>
 800dc3e:	2300      	movs	r3, #0
 800dc40:	930b      	str	r3, [sp, #44]	; 0x2c
 800dc42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dc44:	445b      	add	r3, fp
 800dc46:	9306      	str	r3, [sp, #24]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	9308      	str	r3, [sp, #32]
 800dc4e:	bfb8      	it	lt
 800dc50:	2301      	movlt	r3, #1
 800dc52:	2100      	movs	r1, #0
 800dc54:	2204      	movs	r2, #4
 800dc56:	69e8      	ldr	r0, [r5, #28]
 800dc58:	f102 0614 	add.w	r6, r2, #20
 800dc5c:	429e      	cmp	r6, r3
 800dc5e:	d940      	bls.n	800dce2 <_dtoa_r+0x30a>
 800dc60:	6041      	str	r1, [r0, #4]
 800dc62:	4628      	mov	r0, r5
 800dc64:	f000 fd98 	bl	800e798 <_Balloc>
 800dc68:	9003      	str	r0, [sp, #12]
 800dc6a:	2800      	cmp	r0, #0
 800dc6c:	d13c      	bne.n	800dce8 <_dtoa_r+0x310>
 800dc6e:	4602      	mov	r2, r0
 800dc70:	f240 11af 	movw	r1, #431	; 0x1af
 800dc74:	4b16      	ldr	r3, [pc, #88]	; (800dcd0 <_dtoa_r+0x2f8>)
 800dc76:	e6c3      	b.n	800da00 <_dtoa_r+0x28>
 800dc78:	2301      	movs	r3, #1
 800dc7a:	e7e1      	b.n	800dc40 <_dtoa_r+0x268>
 800dc7c:	2401      	movs	r4, #1
 800dc7e:	2300      	movs	r3, #0
 800dc80:	940b      	str	r4, [sp, #44]	; 0x2c
 800dc82:	9322      	str	r3, [sp, #136]	; 0x88
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295
 800dc88:	2200      	movs	r2, #0
 800dc8a:	9306      	str	r3, [sp, #24]
 800dc8c:	9308      	str	r3, [sp, #32]
 800dc8e:	2312      	movs	r3, #18
 800dc90:	e7d1      	b.n	800dc36 <_dtoa_r+0x25e>
 800dc92:	bf00      	nop
 800dc94:	f3af 8000 	nop.w
 800dc98:	636f4361 	.word	0x636f4361
 800dc9c:	3fd287a7 	.word	0x3fd287a7
 800dca0:	8b60c8b3 	.word	0x8b60c8b3
 800dca4:	3fc68a28 	.word	0x3fc68a28
 800dca8:	509f79fb 	.word	0x509f79fb
 800dcac:	3fd34413 	.word	0x3fd34413
 800dcb0:	0800fab3 	.word	0x0800fab3
 800dcb4:	0800faca 	.word	0x0800faca
 800dcb8:	7ff00000 	.word	0x7ff00000
 800dcbc:	0800faaf 	.word	0x0800faaf
 800dcc0:	0800faa6 	.word	0x0800faa6
 800dcc4:	0800fa83 	.word	0x0800fa83
 800dcc8:	3ff80000 	.word	0x3ff80000
 800dccc:	0800fbb8 	.word	0x0800fbb8
 800dcd0:	0800fb22 	.word	0x0800fb22
 800dcd4:	2301      	movs	r3, #1
 800dcd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcd8:	e7d4      	b.n	800dc84 <_dtoa_r+0x2ac>
 800dcda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800dcdc:	9306      	str	r3, [sp, #24]
 800dcde:	9308      	str	r3, [sp, #32]
 800dce0:	e7b7      	b.n	800dc52 <_dtoa_r+0x27a>
 800dce2:	3101      	adds	r1, #1
 800dce4:	0052      	lsls	r2, r2, #1
 800dce6:	e7b7      	b.n	800dc58 <_dtoa_r+0x280>
 800dce8:	69eb      	ldr	r3, [r5, #28]
 800dcea:	9a03      	ldr	r2, [sp, #12]
 800dcec:	601a      	str	r2, [r3, #0]
 800dcee:	9b08      	ldr	r3, [sp, #32]
 800dcf0:	2b0e      	cmp	r3, #14
 800dcf2:	f200 80a8 	bhi.w	800de46 <_dtoa_r+0x46e>
 800dcf6:	2c00      	cmp	r4, #0
 800dcf8:	f000 80a5 	beq.w	800de46 <_dtoa_r+0x46e>
 800dcfc:	f1bb 0f00 	cmp.w	fp, #0
 800dd00:	dd34      	ble.n	800dd6c <_dtoa_r+0x394>
 800dd02:	4b9a      	ldr	r3, [pc, #616]	; (800df6c <_dtoa_r+0x594>)
 800dd04:	f00b 020f 	and.w	r2, fp, #15
 800dd08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd0c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800dd10:	e9d3 3400 	ldrd	r3, r4, [r3]
 800dd14:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800dd18:	ea4f 142b 	mov.w	r4, fp, asr #4
 800dd1c:	d016      	beq.n	800dd4c <_dtoa_r+0x374>
 800dd1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd22:	4b93      	ldr	r3, [pc, #588]	; (800df70 <_dtoa_r+0x598>)
 800dd24:	2703      	movs	r7, #3
 800dd26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dd2a:	f7f2 fcff 	bl	800072c <__aeabi_ddiv>
 800dd2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd32:	f004 040f 	and.w	r4, r4, #15
 800dd36:	4e8e      	ldr	r6, [pc, #568]	; (800df70 <_dtoa_r+0x598>)
 800dd38:	b954      	cbnz	r4, 800dd50 <_dtoa_r+0x378>
 800dd3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dd3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dd42:	f7f2 fcf3 	bl	800072c <__aeabi_ddiv>
 800dd46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd4a:	e029      	b.n	800dda0 <_dtoa_r+0x3c8>
 800dd4c:	2702      	movs	r7, #2
 800dd4e:	e7f2      	b.n	800dd36 <_dtoa_r+0x35e>
 800dd50:	07e1      	lsls	r1, r4, #31
 800dd52:	d508      	bpl.n	800dd66 <_dtoa_r+0x38e>
 800dd54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dd58:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dd5c:	f7f2 fbbc 	bl	80004d8 <__aeabi_dmul>
 800dd60:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800dd64:	3701      	adds	r7, #1
 800dd66:	1064      	asrs	r4, r4, #1
 800dd68:	3608      	adds	r6, #8
 800dd6a:	e7e5      	b.n	800dd38 <_dtoa_r+0x360>
 800dd6c:	f000 80a5 	beq.w	800deba <_dtoa_r+0x4e2>
 800dd70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd74:	f1cb 0400 	rsb	r4, fp, #0
 800dd78:	4b7c      	ldr	r3, [pc, #496]	; (800df6c <_dtoa_r+0x594>)
 800dd7a:	f004 020f 	and.w	r2, r4, #15
 800dd7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd86:	f7f2 fba7 	bl	80004d8 <__aeabi_dmul>
 800dd8a:	2702      	movs	r7, #2
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd92:	4e77      	ldr	r6, [pc, #476]	; (800df70 <_dtoa_r+0x598>)
 800dd94:	1124      	asrs	r4, r4, #4
 800dd96:	2c00      	cmp	r4, #0
 800dd98:	f040 8084 	bne.w	800dea4 <_dtoa_r+0x4cc>
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d1d2      	bne.n	800dd46 <_dtoa_r+0x36e>
 800dda0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800dda4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800dda8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	f000 8087 	beq.w	800debe <_dtoa_r+0x4e6>
 800ddb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4b6f      	ldr	r3, [pc, #444]	; (800df74 <_dtoa_r+0x59c>)
 800ddb8:	f7f2 fe00 	bl	80009bc <__aeabi_dcmplt>
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	d07e      	beq.n	800debe <_dtoa_r+0x4e6>
 800ddc0:	9b08      	ldr	r3, [sp, #32]
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d07b      	beq.n	800debe <_dtoa_r+0x4e6>
 800ddc6:	9b06      	ldr	r3, [sp, #24]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	dd38      	ble.n	800de3e <_dtoa_r+0x466>
 800ddcc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ddd0:	2200      	movs	r2, #0
 800ddd2:	4b69      	ldr	r3, [pc, #420]	; (800df78 <_dtoa_r+0x5a0>)
 800ddd4:	f7f2 fb80 	bl	80004d8 <__aeabi_dmul>
 800ddd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dddc:	9c06      	ldr	r4, [sp, #24]
 800ddde:	f10b 38ff 	add.w	r8, fp, #4294967295
 800dde2:	3701      	adds	r7, #1
 800dde4:	4638      	mov	r0, r7
 800dde6:	f7f2 fb0d 	bl	8000404 <__aeabi_i2d>
 800ddea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddee:	f7f2 fb73 	bl	80004d8 <__aeabi_dmul>
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	4b61      	ldr	r3, [pc, #388]	; (800df7c <_dtoa_r+0x5a4>)
 800ddf6:	f7f2 f9b9 	bl	800016c <__adddf3>
 800ddfa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ddfe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800de02:	9611      	str	r6, [sp, #68]	; 0x44
 800de04:	2c00      	cmp	r4, #0
 800de06:	d15d      	bne.n	800dec4 <_dtoa_r+0x4ec>
 800de08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de0c:	2200      	movs	r2, #0
 800de0e:	4b5c      	ldr	r3, [pc, #368]	; (800df80 <_dtoa_r+0x5a8>)
 800de10:	f7f2 f9aa 	bl	8000168 <__aeabi_dsub>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800de1c:	4633      	mov	r3, r6
 800de1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de20:	f7f2 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 800de24:	2800      	cmp	r0, #0
 800de26:	f040 8295 	bne.w	800e354 <_dtoa_r+0x97c>
 800de2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800de30:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800de34:	f7f2 fdc2 	bl	80009bc <__aeabi_dcmplt>
 800de38:	2800      	cmp	r0, #0
 800de3a:	f040 8289 	bne.w	800e350 <_dtoa_r+0x978>
 800de3e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800de42:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800de46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f2c0 8151 	blt.w	800e0f0 <_dtoa_r+0x718>
 800de4e:	f1bb 0f0e 	cmp.w	fp, #14
 800de52:	f300 814d 	bgt.w	800e0f0 <_dtoa_r+0x718>
 800de56:	4b45      	ldr	r3, [pc, #276]	; (800df6c <_dtoa_r+0x594>)
 800de58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800de5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800de60:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800de64:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800de66:	2b00      	cmp	r3, #0
 800de68:	f280 80da 	bge.w	800e020 <_dtoa_r+0x648>
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	f300 80d6 	bgt.w	800e020 <_dtoa_r+0x648>
 800de74:	f040 826b 	bne.w	800e34e <_dtoa_r+0x976>
 800de78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de7c:	2200      	movs	r2, #0
 800de7e:	4b40      	ldr	r3, [pc, #256]	; (800df80 <_dtoa_r+0x5a8>)
 800de80:	f7f2 fb2a 	bl	80004d8 <__aeabi_dmul>
 800de84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de88:	f7f2 fdac 	bl	80009e4 <__aeabi_dcmpge>
 800de8c:	9c08      	ldr	r4, [sp, #32]
 800de8e:	4626      	mov	r6, r4
 800de90:	2800      	cmp	r0, #0
 800de92:	f040 8241 	bne.w	800e318 <_dtoa_r+0x940>
 800de96:	2331      	movs	r3, #49	; 0x31
 800de98:	9f03      	ldr	r7, [sp, #12]
 800de9a:	f10b 0b01 	add.w	fp, fp, #1
 800de9e:	f807 3b01 	strb.w	r3, [r7], #1
 800dea2:	e23d      	b.n	800e320 <_dtoa_r+0x948>
 800dea4:	07e2      	lsls	r2, r4, #31
 800dea6:	d505      	bpl.n	800deb4 <_dtoa_r+0x4dc>
 800dea8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800deac:	f7f2 fb14 	bl	80004d8 <__aeabi_dmul>
 800deb0:	2301      	movs	r3, #1
 800deb2:	3701      	adds	r7, #1
 800deb4:	1064      	asrs	r4, r4, #1
 800deb6:	3608      	adds	r6, #8
 800deb8:	e76d      	b.n	800dd96 <_dtoa_r+0x3be>
 800deba:	2702      	movs	r7, #2
 800debc:	e770      	b.n	800dda0 <_dtoa_r+0x3c8>
 800debe:	46d8      	mov	r8, fp
 800dec0:	9c08      	ldr	r4, [sp, #32]
 800dec2:	e78f      	b.n	800dde4 <_dtoa_r+0x40c>
 800dec4:	9903      	ldr	r1, [sp, #12]
 800dec6:	4b29      	ldr	r3, [pc, #164]	; (800df6c <_dtoa_r+0x594>)
 800dec8:	4421      	add	r1, r4
 800deca:	9112      	str	r1, [sp, #72]	; 0x48
 800decc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dece:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ded2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ded6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800deda:	2900      	cmp	r1, #0
 800dedc:	d054      	beq.n	800df88 <_dtoa_r+0x5b0>
 800dede:	2000      	movs	r0, #0
 800dee0:	4928      	ldr	r1, [pc, #160]	; (800df84 <_dtoa_r+0x5ac>)
 800dee2:	f7f2 fc23 	bl	800072c <__aeabi_ddiv>
 800dee6:	463b      	mov	r3, r7
 800dee8:	4632      	mov	r2, r6
 800deea:	f7f2 f93d 	bl	8000168 <__aeabi_dsub>
 800deee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800def2:	9f03      	ldr	r7, [sp, #12]
 800def4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800def8:	f7f2 fd9e 	bl	8000a38 <__aeabi_d2iz>
 800defc:	4604      	mov	r4, r0
 800defe:	f7f2 fa81 	bl	8000404 <__aeabi_i2d>
 800df02:	4602      	mov	r2, r0
 800df04:	460b      	mov	r3, r1
 800df06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df0a:	f7f2 f92d 	bl	8000168 <__aeabi_dsub>
 800df0e:	4602      	mov	r2, r0
 800df10:	460b      	mov	r3, r1
 800df12:	3430      	adds	r4, #48	; 0x30
 800df14:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800df18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df1c:	f807 4b01 	strb.w	r4, [r7], #1
 800df20:	f7f2 fd4c 	bl	80009bc <__aeabi_dcmplt>
 800df24:	2800      	cmp	r0, #0
 800df26:	d173      	bne.n	800e010 <_dtoa_r+0x638>
 800df28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df2c:	2000      	movs	r0, #0
 800df2e:	4911      	ldr	r1, [pc, #68]	; (800df74 <_dtoa_r+0x59c>)
 800df30:	f7f2 f91a 	bl	8000168 <__aeabi_dsub>
 800df34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df38:	f7f2 fd40 	bl	80009bc <__aeabi_dcmplt>
 800df3c:	2800      	cmp	r0, #0
 800df3e:	f040 80b6 	bne.w	800e0ae <_dtoa_r+0x6d6>
 800df42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df44:	429f      	cmp	r7, r3
 800df46:	f43f af7a 	beq.w	800de3e <_dtoa_r+0x466>
 800df4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800df4e:	2200      	movs	r2, #0
 800df50:	4b09      	ldr	r3, [pc, #36]	; (800df78 <_dtoa_r+0x5a0>)
 800df52:	f7f2 fac1 	bl	80004d8 <__aeabi_dmul>
 800df56:	2200      	movs	r2, #0
 800df58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800df5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df60:	4b05      	ldr	r3, [pc, #20]	; (800df78 <_dtoa_r+0x5a0>)
 800df62:	f7f2 fab9 	bl	80004d8 <__aeabi_dmul>
 800df66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df6a:	e7c3      	b.n	800def4 <_dtoa_r+0x51c>
 800df6c:	0800fbb8 	.word	0x0800fbb8
 800df70:	0800fb90 	.word	0x0800fb90
 800df74:	3ff00000 	.word	0x3ff00000
 800df78:	40240000 	.word	0x40240000
 800df7c:	401c0000 	.word	0x401c0000
 800df80:	40140000 	.word	0x40140000
 800df84:	3fe00000 	.word	0x3fe00000
 800df88:	4630      	mov	r0, r6
 800df8a:	4639      	mov	r1, r7
 800df8c:	f7f2 faa4 	bl	80004d8 <__aeabi_dmul>
 800df90:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800df92:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800df96:	9c03      	ldr	r4, [sp, #12]
 800df98:	9314      	str	r3, [sp, #80]	; 0x50
 800df9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df9e:	f7f2 fd4b 	bl	8000a38 <__aeabi_d2iz>
 800dfa2:	9015      	str	r0, [sp, #84]	; 0x54
 800dfa4:	f7f2 fa2e 	bl	8000404 <__aeabi_i2d>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	460b      	mov	r3, r1
 800dfac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dfb0:	f7f2 f8da 	bl	8000168 <__aeabi_dsub>
 800dfb4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	3330      	adds	r3, #48	; 0x30
 800dfba:	f804 3b01 	strb.w	r3, [r4], #1
 800dfbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dfc0:	460f      	mov	r7, r1
 800dfc2:	429c      	cmp	r4, r3
 800dfc4:	f04f 0200 	mov.w	r2, #0
 800dfc8:	d124      	bne.n	800e014 <_dtoa_r+0x63c>
 800dfca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800dfce:	4baf      	ldr	r3, [pc, #700]	; (800e28c <_dtoa_r+0x8b4>)
 800dfd0:	f7f2 f8cc 	bl	800016c <__adddf3>
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	460b      	mov	r3, r1
 800dfd8:	4630      	mov	r0, r6
 800dfda:	4639      	mov	r1, r7
 800dfdc:	f7f2 fd0c 	bl	80009f8 <__aeabi_dcmpgt>
 800dfe0:	2800      	cmp	r0, #0
 800dfe2:	d163      	bne.n	800e0ac <_dtoa_r+0x6d4>
 800dfe4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dfe8:	2000      	movs	r0, #0
 800dfea:	49a8      	ldr	r1, [pc, #672]	; (800e28c <_dtoa_r+0x8b4>)
 800dfec:	f7f2 f8bc 	bl	8000168 <__aeabi_dsub>
 800dff0:	4602      	mov	r2, r0
 800dff2:	460b      	mov	r3, r1
 800dff4:	4630      	mov	r0, r6
 800dff6:	4639      	mov	r1, r7
 800dff8:	f7f2 fce0 	bl	80009bc <__aeabi_dcmplt>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	f43f af1e 	beq.w	800de3e <_dtoa_r+0x466>
 800e002:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800e004:	1e7b      	subs	r3, r7, #1
 800e006:	9314      	str	r3, [sp, #80]	; 0x50
 800e008:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800e00c:	2b30      	cmp	r3, #48	; 0x30
 800e00e:	d0f8      	beq.n	800e002 <_dtoa_r+0x62a>
 800e010:	46c3      	mov	fp, r8
 800e012:	e03b      	b.n	800e08c <_dtoa_r+0x6b4>
 800e014:	4b9e      	ldr	r3, [pc, #632]	; (800e290 <_dtoa_r+0x8b8>)
 800e016:	f7f2 fa5f 	bl	80004d8 <__aeabi_dmul>
 800e01a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e01e:	e7bc      	b.n	800df9a <_dtoa_r+0x5c2>
 800e020:	9f03      	ldr	r7, [sp, #12]
 800e022:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800e026:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e02a:	4640      	mov	r0, r8
 800e02c:	4649      	mov	r1, r9
 800e02e:	f7f2 fb7d 	bl	800072c <__aeabi_ddiv>
 800e032:	f7f2 fd01 	bl	8000a38 <__aeabi_d2iz>
 800e036:	4604      	mov	r4, r0
 800e038:	f7f2 f9e4 	bl	8000404 <__aeabi_i2d>
 800e03c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e040:	f7f2 fa4a 	bl	80004d8 <__aeabi_dmul>
 800e044:	4602      	mov	r2, r0
 800e046:	460b      	mov	r3, r1
 800e048:	4640      	mov	r0, r8
 800e04a:	4649      	mov	r1, r9
 800e04c:	f7f2 f88c 	bl	8000168 <__aeabi_dsub>
 800e050:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800e054:	f807 6b01 	strb.w	r6, [r7], #1
 800e058:	9e03      	ldr	r6, [sp, #12]
 800e05a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800e05e:	1bbe      	subs	r6, r7, r6
 800e060:	45b4      	cmp	ip, r6
 800e062:	4602      	mov	r2, r0
 800e064:	460b      	mov	r3, r1
 800e066:	d136      	bne.n	800e0d6 <_dtoa_r+0x6fe>
 800e068:	f7f2 f880 	bl	800016c <__adddf3>
 800e06c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e070:	4680      	mov	r8, r0
 800e072:	4689      	mov	r9, r1
 800e074:	f7f2 fcc0 	bl	80009f8 <__aeabi_dcmpgt>
 800e078:	bb58      	cbnz	r0, 800e0d2 <_dtoa_r+0x6fa>
 800e07a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e07e:	4640      	mov	r0, r8
 800e080:	4649      	mov	r1, r9
 800e082:	f7f2 fc91 	bl	80009a8 <__aeabi_dcmpeq>
 800e086:	b108      	cbz	r0, 800e08c <_dtoa_r+0x6b4>
 800e088:	07e3      	lsls	r3, r4, #31
 800e08a:	d422      	bmi.n	800e0d2 <_dtoa_r+0x6fa>
 800e08c:	4651      	mov	r1, sl
 800e08e:	4628      	mov	r0, r5
 800e090:	f000 fbc2 	bl	800e818 <_Bfree>
 800e094:	2300      	movs	r3, #0
 800e096:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e098:	703b      	strb	r3, [r7, #0]
 800e09a:	f10b 0301 	add.w	r3, fp, #1
 800e09e:	6013      	str	r3, [r2, #0]
 800e0a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	f43f ace6 	beq.w	800da74 <_dtoa_r+0x9c>
 800e0a8:	601f      	str	r7, [r3, #0]
 800e0aa:	e4e3      	b.n	800da74 <_dtoa_r+0x9c>
 800e0ac:	4627      	mov	r7, r4
 800e0ae:	463b      	mov	r3, r7
 800e0b0:	461f      	mov	r7, r3
 800e0b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e0b6:	2a39      	cmp	r2, #57	; 0x39
 800e0b8:	d107      	bne.n	800e0ca <_dtoa_r+0x6f2>
 800e0ba:	9a03      	ldr	r2, [sp, #12]
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d1f7      	bne.n	800e0b0 <_dtoa_r+0x6d8>
 800e0c0:	2230      	movs	r2, #48	; 0x30
 800e0c2:	9903      	ldr	r1, [sp, #12]
 800e0c4:	f108 0801 	add.w	r8, r8, #1
 800e0c8:	700a      	strb	r2, [r1, #0]
 800e0ca:	781a      	ldrb	r2, [r3, #0]
 800e0cc:	3201      	adds	r2, #1
 800e0ce:	701a      	strb	r2, [r3, #0]
 800e0d0:	e79e      	b.n	800e010 <_dtoa_r+0x638>
 800e0d2:	46d8      	mov	r8, fp
 800e0d4:	e7eb      	b.n	800e0ae <_dtoa_r+0x6d6>
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	4b6d      	ldr	r3, [pc, #436]	; (800e290 <_dtoa_r+0x8b8>)
 800e0da:	f7f2 f9fd 	bl	80004d8 <__aeabi_dmul>
 800e0de:	2200      	movs	r2, #0
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	4680      	mov	r8, r0
 800e0e4:	4689      	mov	r9, r1
 800e0e6:	f7f2 fc5f 	bl	80009a8 <__aeabi_dcmpeq>
 800e0ea:	2800      	cmp	r0, #0
 800e0ec:	d09b      	beq.n	800e026 <_dtoa_r+0x64e>
 800e0ee:	e7cd      	b.n	800e08c <_dtoa_r+0x6b4>
 800e0f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0f2:	2a00      	cmp	r2, #0
 800e0f4:	f000 80c4 	beq.w	800e280 <_dtoa_r+0x8a8>
 800e0f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e0fa:	2a01      	cmp	r2, #1
 800e0fc:	f300 80a8 	bgt.w	800e250 <_dtoa_r+0x878>
 800e100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e102:	2a00      	cmp	r2, #0
 800e104:	f000 80a0 	beq.w	800e248 <_dtoa_r+0x870>
 800e108:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e10c:	464f      	mov	r7, r9
 800e10e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e110:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e112:	2101      	movs	r1, #1
 800e114:	441a      	add	r2, r3
 800e116:	4628      	mov	r0, r5
 800e118:	4499      	add	r9, r3
 800e11a:	9209      	str	r2, [sp, #36]	; 0x24
 800e11c:	f000 fc32 	bl	800e984 <__i2b>
 800e120:	4606      	mov	r6, r0
 800e122:	b15f      	cbz	r7, 800e13c <_dtoa_r+0x764>
 800e124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e126:	2b00      	cmp	r3, #0
 800e128:	dd08      	ble.n	800e13c <_dtoa_r+0x764>
 800e12a:	42bb      	cmp	r3, r7
 800e12c:	bfa8      	it	ge
 800e12e:	463b      	movge	r3, r7
 800e130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e132:	eba9 0903 	sub.w	r9, r9, r3
 800e136:	1aff      	subs	r7, r7, r3
 800e138:	1ad3      	subs	r3, r2, r3
 800e13a:	9309      	str	r3, [sp, #36]	; 0x24
 800e13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e13e:	b1f3      	cbz	r3, 800e17e <_dtoa_r+0x7a6>
 800e140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e142:	2b00      	cmp	r3, #0
 800e144:	f000 80a0 	beq.w	800e288 <_dtoa_r+0x8b0>
 800e148:	2c00      	cmp	r4, #0
 800e14a:	dd10      	ble.n	800e16e <_dtoa_r+0x796>
 800e14c:	4631      	mov	r1, r6
 800e14e:	4622      	mov	r2, r4
 800e150:	4628      	mov	r0, r5
 800e152:	f000 fcd5 	bl	800eb00 <__pow5mult>
 800e156:	4652      	mov	r2, sl
 800e158:	4601      	mov	r1, r0
 800e15a:	4606      	mov	r6, r0
 800e15c:	4628      	mov	r0, r5
 800e15e:	f000 fc27 	bl	800e9b0 <__multiply>
 800e162:	4680      	mov	r8, r0
 800e164:	4651      	mov	r1, sl
 800e166:	4628      	mov	r0, r5
 800e168:	f000 fb56 	bl	800e818 <_Bfree>
 800e16c:	46c2      	mov	sl, r8
 800e16e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e170:	1b1a      	subs	r2, r3, r4
 800e172:	d004      	beq.n	800e17e <_dtoa_r+0x7a6>
 800e174:	4651      	mov	r1, sl
 800e176:	4628      	mov	r0, r5
 800e178:	f000 fcc2 	bl	800eb00 <__pow5mult>
 800e17c:	4682      	mov	sl, r0
 800e17e:	2101      	movs	r1, #1
 800e180:	4628      	mov	r0, r5
 800e182:	f000 fbff 	bl	800e984 <__i2b>
 800e186:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e188:	4604      	mov	r4, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	f340 8082 	ble.w	800e294 <_dtoa_r+0x8bc>
 800e190:	461a      	mov	r2, r3
 800e192:	4601      	mov	r1, r0
 800e194:	4628      	mov	r0, r5
 800e196:	f000 fcb3 	bl	800eb00 <__pow5mult>
 800e19a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e19c:	4604      	mov	r4, r0
 800e19e:	2b01      	cmp	r3, #1
 800e1a0:	dd7b      	ble.n	800e29a <_dtoa_r+0x8c2>
 800e1a2:	f04f 0800 	mov.w	r8, #0
 800e1a6:	6923      	ldr	r3, [r4, #16]
 800e1a8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e1ac:	6918      	ldr	r0, [r3, #16]
 800e1ae:	f000 fb9b 	bl	800e8e8 <__hi0bits>
 800e1b2:	f1c0 0020 	rsb	r0, r0, #32
 800e1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1b8:	4418      	add	r0, r3
 800e1ba:	f010 001f 	ands.w	r0, r0, #31
 800e1be:	f000 8092 	beq.w	800e2e6 <_dtoa_r+0x90e>
 800e1c2:	f1c0 0320 	rsb	r3, r0, #32
 800e1c6:	2b04      	cmp	r3, #4
 800e1c8:	f340 8085 	ble.w	800e2d6 <_dtoa_r+0x8fe>
 800e1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ce:	f1c0 001c 	rsb	r0, r0, #28
 800e1d2:	4403      	add	r3, r0
 800e1d4:	4481      	add	r9, r0
 800e1d6:	4407      	add	r7, r0
 800e1d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1da:	f1b9 0f00 	cmp.w	r9, #0
 800e1de:	dd05      	ble.n	800e1ec <_dtoa_r+0x814>
 800e1e0:	4651      	mov	r1, sl
 800e1e2:	464a      	mov	r2, r9
 800e1e4:	4628      	mov	r0, r5
 800e1e6:	f000 fce5 	bl	800ebb4 <__lshift>
 800e1ea:	4682      	mov	sl, r0
 800e1ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	dd05      	ble.n	800e1fe <_dtoa_r+0x826>
 800e1f2:	4621      	mov	r1, r4
 800e1f4:	461a      	mov	r2, r3
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 fcdc 	bl	800ebb4 <__lshift>
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d072      	beq.n	800e2ea <_dtoa_r+0x912>
 800e204:	4621      	mov	r1, r4
 800e206:	4650      	mov	r0, sl
 800e208:	f000 fd40 	bl	800ec8c <__mcmp>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	da6c      	bge.n	800e2ea <_dtoa_r+0x912>
 800e210:	2300      	movs	r3, #0
 800e212:	4651      	mov	r1, sl
 800e214:	220a      	movs	r2, #10
 800e216:	4628      	mov	r0, r5
 800e218:	f000 fb20 	bl	800e85c <__multadd>
 800e21c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e21e:	4682      	mov	sl, r0
 800e220:	f10b 3bff 	add.w	fp, fp, #4294967295
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 81ac 	beq.w	800e582 <_dtoa_r+0xbaa>
 800e22a:	2300      	movs	r3, #0
 800e22c:	4631      	mov	r1, r6
 800e22e:	220a      	movs	r2, #10
 800e230:	4628      	mov	r0, r5
 800e232:	f000 fb13 	bl	800e85c <__multadd>
 800e236:	9b06      	ldr	r3, [sp, #24]
 800e238:	4606      	mov	r6, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f300 8093 	bgt.w	800e366 <_dtoa_r+0x98e>
 800e240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e242:	2b02      	cmp	r3, #2
 800e244:	dc59      	bgt.n	800e2fa <_dtoa_r+0x922>
 800e246:	e08e      	b.n	800e366 <_dtoa_r+0x98e>
 800e248:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e24a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e24e:	e75d      	b.n	800e10c <_dtoa_r+0x734>
 800e250:	9b08      	ldr	r3, [sp, #32]
 800e252:	1e5c      	subs	r4, r3, #1
 800e254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e256:	42a3      	cmp	r3, r4
 800e258:	bfbf      	itttt	lt
 800e25a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e25c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800e25e:	1ae3      	sublt	r3, r4, r3
 800e260:	18d2      	addlt	r2, r2, r3
 800e262:	bfa8      	it	ge
 800e264:	1b1c      	subge	r4, r3, r4
 800e266:	9b08      	ldr	r3, [sp, #32]
 800e268:	bfbe      	ittt	lt
 800e26a:	940a      	strlt	r4, [sp, #40]	; 0x28
 800e26c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800e26e:	2400      	movlt	r4, #0
 800e270:	2b00      	cmp	r3, #0
 800e272:	bfb5      	itete	lt
 800e274:	eba9 0703 	sublt.w	r7, r9, r3
 800e278:	464f      	movge	r7, r9
 800e27a:	2300      	movlt	r3, #0
 800e27c:	9b08      	ldrge	r3, [sp, #32]
 800e27e:	e747      	b.n	800e110 <_dtoa_r+0x738>
 800e280:	464f      	mov	r7, r9
 800e282:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e284:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800e286:	e74c      	b.n	800e122 <_dtoa_r+0x74a>
 800e288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e28a:	e773      	b.n	800e174 <_dtoa_r+0x79c>
 800e28c:	3fe00000 	.word	0x3fe00000
 800e290:	40240000 	.word	0x40240000
 800e294:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e296:	2b01      	cmp	r3, #1
 800e298:	dc18      	bgt.n	800e2cc <_dtoa_r+0x8f4>
 800e29a:	9b04      	ldr	r3, [sp, #16]
 800e29c:	b9b3      	cbnz	r3, 800e2cc <_dtoa_r+0x8f4>
 800e29e:	9b05      	ldr	r3, [sp, #20]
 800e2a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2a4:	b993      	cbnz	r3, 800e2cc <_dtoa_r+0x8f4>
 800e2a6:	9b05      	ldr	r3, [sp, #20]
 800e2a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2ac:	0d1b      	lsrs	r3, r3, #20
 800e2ae:	051b      	lsls	r3, r3, #20
 800e2b0:	b17b      	cbz	r3, 800e2d2 <_dtoa_r+0x8fa>
 800e2b2:	f04f 0801 	mov.w	r8, #1
 800e2b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2b8:	f109 0901 	add.w	r9, r9, #1
 800e2bc:	3301      	adds	r3, #1
 800e2be:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	f47f af6f 	bne.w	800e1a6 <_dtoa_r+0x7ce>
 800e2c8:	2001      	movs	r0, #1
 800e2ca:	e774      	b.n	800e1b6 <_dtoa_r+0x7de>
 800e2cc:	f04f 0800 	mov.w	r8, #0
 800e2d0:	e7f6      	b.n	800e2c0 <_dtoa_r+0x8e8>
 800e2d2:	4698      	mov	r8, r3
 800e2d4:	e7f4      	b.n	800e2c0 <_dtoa_r+0x8e8>
 800e2d6:	d080      	beq.n	800e1da <_dtoa_r+0x802>
 800e2d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2da:	331c      	adds	r3, #28
 800e2dc:	441a      	add	r2, r3
 800e2de:	4499      	add	r9, r3
 800e2e0:	441f      	add	r7, r3
 800e2e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e2e4:	e779      	b.n	800e1da <_dtoa_r+0x802>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	e7f6      	b.n	800e2d8 <_dtoa_r+0x900>
 800e2ea:	9b08      	ldr	r3, [sp, #32]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dc34      	bgt.n	800e35a <_dtoa_r+0x982>
 800e2f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e2f2:	2b02      	cmp	r3, #2
 800e2f4:	dd31      	ble.n	800e35a <_dtoa_r+0x982>
 800e2f6:	9b08      	ldr	r3, [sp, #32]
 800e2f8:	9306      	str	r3, [sp, #24]
 800e2fa:	9b06      	ldr	r3, [sp, #24]
 800e2fc:	b963      	cbnz	r3, 800e318 <_dtoa_r+0x940>
 800e2fe:	4621      	mov	r1, r4
 800e300:	2205      	movs	r2, #5
 800e302:	4628      	mov	r0, r5
 800e304:	f000 faaa 	bl	800e85c <__multadd>
 800e308:	4601      	mov	r1, r0
 800e30a:	4604      	mov	r4, r0
 800e30c:	4650      	mov	r0, sl
 800e30e:	f000 fcbd 	bl	800ec8c <__mcmp>
 800e312:	2800      	cmp	r0, #0
 800e314:	f73f adbf 	bgt.w	800de96 <_dtoa_r+0x4be>
 800e318:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e31a:	9f03      	ldr	r7, [sp, #12]
 800e31c:	ea6f 0b03 	mvn.w	fp, r3
 800e320:	f04f 0800 	mov.w	r8, #0
 800e324:	4621      	mov	r1, r4
 800e326:	4628      	mov	r0, r5
 800e328:	f000 fa76 	bl	800e818 <_Bfree>
 800e32c:	2e00      	cmp	r6, #0
 800e32e:	f43f aead 	beq.w	800e08c <_dtoa_r+0x6b4>
 800e332:	f1b8 0f00 	cmp.w	r8, #0
 800e336:	d005      	beq.n	800e344 <_dtoa_r+0x96c>
 800e338:	45b0      	cmp	r8, r6
 800e33a:	d003      	beq.n	800e344 <_dtoa_r+0x96c>
 800e33c:	4641      	mov	r1, r8
 800e33e:	4628      	mov	r0, r5
 800e340:	f000 fa6a 	bl	800e818 <_Bfree>
 800e344:	4631      	mov	r1, r6
 800e346:	4628      	mov	r0, r5
 800e348:	f000 fa66 	bl	800e818 <_Bfree>
 800e34c:	e69e      	b.n	800e08c <_dtoa_r+0x6b4>
 800e34e:	2400      	movs	r4, #0
 800e350:	4626      	mov	r6, r4
 800e352:	e7e1      	b.n	800e318 <_dtoa_r+0x940>
 800e354:	46c3      	mov	fp, r8
 800e356:	4626      	mov	r6, r4
 800e358:	e59d      	b.n	800de96 <_dtoa_r+0x4be>
 800e35a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	f000 80c8 	beq.w	800e4f2 <_dtoa_r+0xb1a>
 800e362:	9b08      	ldr	r3, [sp, #32]
 800e364:	9306      	str	r3, [sp, #24]
 800e366:	2f00      	cmp	r7, #0
 800e368:	dd05      	ble.n	800e376 <_dtoa_r+0x99e>
 800e36a:	4631      	mov	r1, r6
 800e36c:	463a      	mov	r2, r7
 800e36e:	4628      	mov	r0, r5
 800e370:	f000 fc20 	bl	800ebb4 <__lshift>
 800e374:	4606      	mov	r6, r0
 800e376:	f1b8 0f00 	cmp.w	r8, #0
 800e37a:	d05b      	beq.n	800e434 <_dtoa_r+0xa5c>
 800e37c:	4628      	mov	r0, r5
 800e37e:	6871      	ldr	r1, [r6, #4]
 800e380:	f000 fa0a 	bl	800e798 <_Balloc>
 800e384:	4607      	mov	r7, r0
 800e386:	b928      	cbnz	r0, 800e394 <_dtoa_r+0x9bc>
 800e388:	4602      	mov	r2, r0
 800e38a:	f240 21ef 	movw	r1, #751	; 0x2ef
 800e38e:	4b81      	ldr	r3, [pc, #516]	; (800e594 <_dtoa_r+0xbbc>)
 800e390:	f7ff bb36 	b.w	800da00 <_dtoa_r+0x28>
 800e394:	6932      	ldr	r2, [r6, #16]
 800e396:	f106 010c 	add.w	r1, r6, #12
 800e39a:	3202      	adds	r2, #2
 800e39c:	0092      	lsls	r2, r2, #2
 800e39e:	300c      	adds	r0, #12
 800e3a0:	f000 ff9e 	bl	800f2e0 <memcpy>
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	4639      	mov	r1, r7
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	f000 fc03 	bl	800ebb4 <__lshift>
 800e3ae:	46b0      	mov	r8, r6
 800e3b0:	4606      	mov	r6, r0
 800e3b2:	9b03      	ldr	r3, [sp, #12]
 800e3b4:	9a03      	ldr	r2, [sp, #12]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	9308      	str	r3, [sp, #32]
 800e3ba:	9b06      	ldr	r3, [sp, #24]
 800e3bc:	4413      	add	r3, r2
 800e3be:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3c0:	9b04      	ldr	r3, [sp, #16]
 800e3c2:	f003 0301 	and.w	r3, r3, #1
 800e3c6:	930a      	str	r3, [sp, #40]	; 0x28
 800e3c8:	9b08      	ldr	r3, [sp, #32]
 800e3ca:	4621      	mov	r1, r4
 800e3cc:	3b01      	subs	r3, #1
 800e3ce:	4650      	mov	r0, sl
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	f7ff fa76 	bl	800d8c2 <quorem>
 800e3d6:	4641      	mov	r1, r8
 800e3d8:	9006      	str	r0, [sp, #24]
 800e3da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e3de:	4650      	mov	r0, sl
 800e3e0:	f000 fc54 	bl	800ec8c <__mcmp>
 800e3e4:	4632      	mov	r2, r6
 800e3e6:	9009      	str	r0, [sp, #36]	; 0x24
 800e3e8:	4621      	mov	r1, r4
 800e3ea:	4628      	mov	r0, r5
 800e3ec:	f000 fc6a 	bl	800ecc4 <__mdiff>
 800e3f0:	68c2      	ldr	r2, [r0, #12]
 800e3f2:	4607      	mov	r7, r0
 800e3f4:	bb02      	cbnz	r2, 800e438 <_dtoa_r+0xa60>
 800e3f6:	4601      	mov	r1, r0
 800e3f8:	4650      	mov	r0, sl
 800e3fa:	f000 fc47 	bl	800ec8c <__mcmp>
 800e3fe:	4602      	mov	r2, r0
 800e400:	4639      	mov	r1, r7
 800e402:	4628      	mov	r0, r5
 800e404:	920c      	str	r2, [sp, #48]	; 0x30
 800e406:	f000 fa07 	bl	800e818 <_Bfree>
 800e40a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e40c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e40e:	9f08      	ldr	r7, [sp, #32]
 800e410:	ea43 0102 	orr.w	r1, r3, r2
 800e414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e416:	4319      	orrs	r1, r3
 800e418:	d110      	bne.n	800e43c <_dtoa_r+0xa64>
 800e41a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e41e:	d029      	beq.n	800e474 <_dtoa_r+0xa9c>
 800e420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e422:	2b00      	cmp	r3, #0
 800e424:	dd02      	ble.n	800e42c <_dtoa_r+0xa54>
 800e426:	9b06      	ldr	r3, [sp, #24]
 800e428:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800e42c:	9b04      	ldr	r3, [sp, #16]
 800e42e:	f883 9000 	strb.w	r9, [r3]
 800e432:	e777      	b.n	800e324 <_dtoa_r+0x94c>
 800e434:	4630      	mov	r0, r6
 800e436:	e7ba      	b.n	800e3ae <_dtoa_r+0x9d6>
 800e438:	2201      	movs	r2, #1
 800e43a:	e7e1      	b.n	800e400 <_dtoa_r+0xa28>
 800e43c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e43e:	2b00      	cmp	r3, #0
 800e440:	db04      	blt.n	800e44c <_dtoa_r+0xa74>
 800e442:	9922      	ldr	r1, [sp, #136]	; 0x88
 800e444:	430b      	orrs	r3, r1
 800e446:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e448:	430b      	orrs	r3, r1
 800e44a:	d120      	bne.n	800e48e <_dtoa_r+0xab6>
 800e44c:	2a00      	cmp	r2, #0
 800e44e:	dded      	ble.n	800e42c <_dtoa_r+0xa54>
 800e450:	4651      	mov	r1, sl
 800e452:	2201      	movs	r2, #1
 800e454:	4628      	mov	r0, r5
 800e456:	f000 fbad 	bl	800ebb4 <__lshift>
 800e45a:	4621      	mov	r1, r4
 800e45c:	4682      	mov	sl, r0
 800e45e:	f000 fc15 	bl	800ec8c <__mcmp>
 800e462:	2800      	cmp	r0, #0
 800e464:	dc03      	bgt.n	800e46e <_dtoa_r+0xa96>
 800e466:	d1e1      	bne.n	800e42c <_dtoa_r+0xa54>
 800e468:	f019 0f01 	tst.w	r9, #1
 800e46c:	d0de      	beq.n	800e42c <_dtoa_r+0xa54>
 800e46e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e472:	d1d8      	bne.n	800e426 <_dtoa_r+0xa4e>
 800e474:	2339      	movs	r3, #57	; 0x39
 800e476:	9a04      	ldr	r2, [sp, #16]
 800e478:	7013      	strb	r3, [r2, #0]
 800e47a:	463b      	mov	r3, r7
 800e47c:	461f      	mov	r7, r3
 800e47e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800e482:	3b01      	subs	r3, #1
 800e484:	2a39      	cmp	r2, #57	; 0x39
 800e486:	d06b      	beq.n	800e560 <_dtoa_r+0xb88>
 800e488:	3201      	adds	r2, #1
 800e48a:	701a      	strb	r2, [r3, #0]
 800e48c:	e74a      	b.n	800e324 <_dtoa_r+0x94c>
 800e48e:	2a00      	cmp	r2, #0
 800e490:	dd07      	ble.n	800e4a2 <_dtoa_r+0xaca>
 800e492:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800e496:	d0ed      	beq.n	800e474 <_dtoa_r+0xa9c>
 800e498:	9a04      	ldr	r2, [sp, #16]
 800e49a:	f109 0301 	add.w	r3, r9, #1
 800e49e:	7013      	strb	r3, [r2, #0]
 800e4a0:	e740      	b.n	800e324 <_dtoa_r+0x94c>
 800e4a2:	9b08      	ldr	r3, [sp, #32]
 800e4a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e4a6:	f803 9c01 	strb.w	r9, [r3, #-1]
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d042      	beq.n	800e534 <_dtoa_r+0xb5c>
 800e4ae:	4651      	mov	r1, sl
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	220a      	movs	r2, #10
 800e4b4:	4628      	mov	r0, r5
 800e4b6:	f000 f9d1 	bl	800e85c <__multadd>
 800e4ba:	45b0      	cmp	r8, r6
 800e4bc:	4682      	mov	sl, r0
 800e4be:	f04f 0300 	mov.w	r3, #0
 800e4c2:	f04f 020a 	mov.w	r2, #10
 800e4c6:	4641      	mov	r1, r8
 800e4c8:	4628      	mov	r0, r5
 800e4ca:	d107      	bne.n	800e4dc <_dtoa_r+0xb04>
 800e4cc:	f000 f9c6 	bl	800e85c <__multadd>
 800e4d0:	4680      	mov	r8, r0
 800e4d2:	4606      	mov	r6, r0
 800e4d4:	9b08      	ldr	r3, [sp, #32]
 800e4d6:	3301      	adds	r3, #1
 800e4d8:	9308      	str	r3, [sp, #32]
 800e4da:	e775      	b.n	800e3c8 <_dtoa_r+0x9f0>
 800e4dc:	f000 f9be 	bl	800e85c <__multadd>
 800e4e0:	4631      	mov	r1, r6
 800e4e2:	4680      	mov	r8, r0
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	220a      	movs	r2, #10
 800e4e8:	4628      	mov	r0, r5
 800e4ea:	f000 f9b7 	bl	800e85c <__multadd>
 800e4ee:	4606      	mov	r6, r0
 800e4f0:	e7f0      	b.n	800e4d4 <_dtoa_r+0xafc>
 800e4f2:	9b08      	ldr	r3, [sp, #32]
 800e4f4:	9306      	str	r3, [sp, #24]
 800e4f6:	9f03      	ldr	r7, [sp, #12]
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	f7ff f9e1 	bl	800d8c2 <quorem>
 800e500:	9b03      	ldr	r3, [sp, #12]
 800e502:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800e506:	f807 9b01 	strb.w	r9, [r7], #1
 800e50a:	1afa      	subs	r2, r7, r3
 800e50c:	9b06      	ldr	r3, [sp, #24]
 800e50e:	4293      	cmp	r3, r2
 800e510:	dd07      	ble.n	800e522 <_dtoa_r+0xb4a>
 800e512:	4651      	mov	r1, sl
 800e514:	2300      	movs	r3, #0
 800e516:	220a      	movs	r2, #10
 800e518:	4628      	mov	r0, r5
 800e51a:	f000 f99f 	bl	800e85c <__multadd>
 800e51e:	4682      	mov	sl, r0
 800e520:	e7ea      	b.n	800e4f8 <_dtoa_r+0xb20>
 800e522:	9b06      	ldr	r3, [sp, #24]
 800e524:	f04f 0800 	mov.w	r8, #0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	bfcc      	ite	gt
 800e52c:	461f      	movgt	r7, r3
 800e52e:	2701      	movle	r7, #1
 800e530:	9b03      	ldr	r3, [sp, #12]
 800e532:	441f      	add	r7, r3
 800e534:	4651      	mov	r1, sl
 800e536:	2201      	movs	r2, #1
 800e538:	4628      	mov	r0, r5
 800e53a:	f000 fb3b 	bl	800ebb4 <__lshift>
 800e53e:	4621      	mov	r1, r4
 800e540:	4682      	mov	sl, r0
 800e542:	f000 fba3 	bl	800ec8c <__mcmp>
 800e546:	2800      	cmp	r0, #0
 800e548:	dc97      	bgt.n	800e47a <_dtoa_r+0xaa2>
 800e54a:	d102      	bne.n	800e552 <_dtoa_r+0xb7a>
 800e54c:	f019 0f01 	tst.w	r9, #1
 800e550:	d193      	bne.n	800e47a <_dtoa_r+0xaa2>
 800e552:	463b      	mov	r3, r7
 800e554:	461f      	mov	r7, r3
 800e556:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e55a:	2a30      	cmp	r2, #48	; 0x30
 800e55c:	d0fa      	beq.n	800e554 <_dtoa_r+0xb7c>
 800e55e:	e6e1      	b.n	800e324 <_dtoa_r+0x94c>
 800e560:	9a03      	ldr	r2, [sp, #12]
 800e562:	429a      	cmp	r2, r3
 800e564:	d18a      	bne.n	800e47c <_dtoa_r+0xaa4>
 800e566:	2331      	movs	r3, #49	; 0x31
 800e568:	f10b 0b01 	add.w	fp, fp, #1
 800e56c:	e797      	b.n	800e49e <_dtoa_r+0xac6>
 800e56e:	4b0a      	ldr	r3, [pc, #40]	; (800e598 <_dtoa_r+0xbc0>)
 800e570:	f7ff ba9f 	b.w	800dab2 <_dtoa_r+0xda>
 800e574:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e576:	2b00      	cmp	r3, #0
 800e578:	f47f aa77 	bne.w	800da6a <_dtoa_r+0x92>
 800e57c:	4b07      	ldr	r3, [pc, #28]	; (800e59c <_dtoa_r+0xbc4>)
 800e57e:	f7ff ba98 	b.w	800dab2 <_dtoa_r+0xda>
 800e582:	9b06      	ldr	r3, [sp, #24]
 800e584:	2b00      	cmp	r3, #0
 800e586:	dcb6      	bgt.n	800e4f6 <_dtoa_r+0xb1e>
 800e588:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e58a:	2b02      	cmp	r3, #2
 800e58c:	f73f aeb5 	bgt.w	800e2fa <_dtoa_r+0x922>
 800e590:	e7b1      	b.n	800e4f6 <_dtoa_r+0xb1e>
 800e592:	bf00      	nop
 800e594:	0800fb22 	.word	0x0800fb22
 800e598:	0800fa82 	.word	0x0800fa82
 800e59c:	0800faa6 	.word	0x0800faa6

0800e5a0 <_free_r>:
 800e5a0:	b538      	push	{r3, r4, r5, lr}
 800e5a2:	4605      	mov	r5, r0
 800e5a4:	2900      	cmp	r1, #0
 800e5a6:	d040      	beq.n	800e62a <_free_r+0x8a>
 800e5a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ac:	1f0c      	subs	r4, r1, #4
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	bfb8      	it	lt
 800e5b2:	18e4      	addlt	r4, r4, r3
 800e5b4:	f000 f8e4 	bl	800e780 <__malloc_lock>
 800e5b8:	4a1c      	ldr	r2, [pc, #112]	; (800e62c <_free_r+0x8c>)
 800e5ba:	6813      	ldr	r3, [r2, #0]
 800e5bc:	b933      	cbnz	r3, 800e5cc <_free_r+0x2c>
 800e5be:	6063      	str	r3, [r4, #4]
 800e5c0:	6014      	str	r4, [r2, #0]
 800e5c2:	4628      	mov	r0, r5
 800e5c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5c8:	f000 b8e0 	b.w	800e78c <__malloc_unlock>
 800e5cc:	42a3      	cmp	r3, r4
 800e5ce:	d908      	bls.n	800e5e2 <_free_r+0x42>
 800e5d0:	6820      	ldr	r0, [r4, #0]
 800e5d2:	1821      	adds	r1, r4, r0
 800e5d4:	428b      	cmp	r3, r1
 800e5d6:	bf01      	itttt	eq
 800e5d8:	6819      	ldreq	r1, [r3, #0]
 800e5da:	685b      	ldreq	r3, [r3, #4]
 800e5dc:	1809      	addeq	r1, r1, r0
 800e5de:	6021      	streq	r1, [r4, #0]
 800e5e0:	e7ed      	b.n	800e5be <_free_r+0x1e>
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	685b      	ldr	r3, [r3, #4]
 800e5e6:	b10b      	cbz	r3, 800e5ec <_free_r+0x4c>
 800e5e8:	42a3      	cmp	r3, r4
 800e5ea:	d9fa      	bls.n	800e5e2 <_free_r+0x42>
 800e5ec:	6811      	ldr	r1, [r2, #0]
 800e5ee:	1850      	adds	r0, r2, r1
 800e5f0:	42a0      	cmp	r0, r4
 800e5f2:	d10b      	bne.n	800e60c <_free_r+0x6c>
 800e5f4:	6820      	ldr	r0, [r4, #0]
 800e5f6:	4401      	add	r1, r0
 800e5f8:	1850      	adds	r0, r2, r1
 800e5fa:	4283      	cmp	r3, r0
 800e5fc:	6011      	str	r1, [r2, #0]
 800e5fe:	d1e0      	bne.n	800e5c2 <_free_r+0x22>
 800e600:	6818      	ldr	r0, [r3, #0]
 800e602:	685b      	ldr	r3, [r3, #4]
 800e604:	4408      	add	r0, r1
 800e606:	6010      	str	r0, [r2, #0]
 800e608:	6053      	str	r3, [r2, #4]
 800e60a:	e7da      	b.n	800e5c2 <_free_r+0x22>
 800e60c:	d902      	bls.n	800e614 <_free_r+0x74>
 800e60e:	230c      	movs	r3, #12
 800e610:	602b      	str	r3, [r5, #0]
 800e612:	e7d6      	b.n	800e5c2 <_free_r+0x22>
 800e614:	6820      	ldr	r0, [r4, #0]
 800e616:	1821      	adds	r1, r4, r0
 800e618:	428b      	cmp	r3, r1
 800e61a:	bf01      	itttt	eq
 800e61c:	6819      	ldreq	r1, [r3, #0]
 800e61e:	685b      	ldreq	r3, [r3, #4]
 800e620:	1809      	addeq	r1, r1, r0
 800e622:	6021      	streq	r1, [r4, #0]
 800e624:	6063      	str	r3, [r4, #4]
 800e626:	6054      	str	r4, [r2, #4]
 800e628:	e7cb      	b.n	800e5c2 <_free_r+0x22>
 800e62a:	bd38      	pop	{r3, r4, r5, pc}
 800e62c:	200008c8 	.word	0x200008c8

0800e630 <malloc>:
 800e630:	4b02      	ldr	r3, [pc, #8]	; (800e63c <malloc+0xc>)
 800e632:	4601      	mov	r1, r0
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	f000 b823 	b.w	800e680 <_malloc_r>
 800e63a:	bf00      	nop
 800e63c:	20000078 	.word	0x20000078

0800e640 <sbrk_aligned>:
 800e640:	b570      	push	{r4, r5, r6, lr}
 800e642:	4e0e      	ldr	r6, [pc, #56]	; (800e67c <sbrk_aligned+0x3c>)
 800e644:	460c      	mov	r4, r1
 800e646:	6831      	ldr	r1, [r6, #0]
 800e648:	4605      	mov	r5, r0
 800e64a:	b911      	cbnz	r1, 800e652 <sbrk_aligned+0x12>
 800e64c:	f000 fe38 	bl	800f2c0 <_sbrk_r>
 800e650:	6030      	str	r0, [r6, #0]
 800e652:	4621      	mov	r1, r4
 800e654:	4628      	mov	r0, r5
 800e656:	f000 fe33 	bl	800f2c0 <_sbrk_r>
 800e65a:	1c43      	adds	r3, r0, #1
 800e65c:	d00a      	beq.n	800e674 <sbrk_aligned+0x34>
 800e65e:	1cc4      	adds	r4, r0, #3
 800e660:	f024 0403 	bic.w	r4, r4, #3
 800e664:	42a0      	cmp	r0, r4
 800e666:	d007      	beq.n	800e678 <sbrk_aligned+0x38>
 800e668:	1a21      	subs	r1, r4, r0
 800e66a:	4628      	mov	r0, r5
 800e66c:	f000 fe28 	bl	800f2c0 <_sbrk_r>
 800e670:	3001      	adds	r0, #1
 800e672:	d101      	bne.n	800e678 <sbrk_aligned+0x38>
 800e674:	f04f 34ff 	mov.w	r4, #4294967295
 800e678:	4620      	mov	r0, r4
 800e67a:	bd70      	pop	{r4, r5, r6, pc}
 800e67c:	200008cc 	.word	0x200008cc

0800e680 <_malloc_r>:
 800e680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e684:	1ccd      	adds	r5, r1, #3
 800e686:	f025 0503 	bic.w	r5, r5, #3
 800e68a:	3508      	adds	r5, #8
 800e68c:	2d0c      	cmp	r5, #12
 800e68e:	bf38      	it	cc
 800e690:	250c      	movcc	r5, #12
 800e692:	2d00      	cmp	r5, #0
 800e694:	4607      	mov	r7, r0
 800e696:	db01      	blt.n	800e69c <_malloc_r+0x1c>
 800e698:	42a9      	cmp	r1, r5
 800e69a:	d905      	bls.n	800e6a8 <_malloc_r+0x28>
 800e69c:	230c      	movs	r3, #12
 800e69e:	2600      	movs	r6, #0
 800e6a0:	603b      	str	r3, [r7, #0]
 800e6a2:	4630      	mov	r0, r6
 800e6a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e77c <_malloc_r+0xfc>
 800e6ac:	f000 f868 	bl	800e780 <__malloc_lock>
 800e6b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e6b4:	461c      	mov	r4, r3
 800e6b6:	bb5c      	cbnz	r4, 800e710 <_malloc_r+0x90>
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4638      	mov	r0, r7
 800e6bc:	f7ff ffc0 	bl	800e640 <sbrk_aligned>
 800e6c0:	1c43      	adds	r3, r0, #1
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	d155      	bne.n	800e772 <_malloc_r+0xf2>
 800e6c6:	f8d8 4000 	ldr.w	r4, [r8]
 800e6ca:	4626      	mov	r6, r4
 800e6cc:	2e00      	cmp	r6, #0
 800e6ce:	d145      	bne.n	800e75c <_malloc_r+0xdc>
 800e6d0:	2c00      	cmp	r4, #0
 800e6d2:	d048      	beq.n	800e766 <_malloc_r+0xe6>
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	4631      	mov	r1, r6
 800e6d8:	4638      	mov	r0, r7
 800e6da:	eb04 0903 	add.w	r9, r4, r3
 800e6de:	f000 fdef 	bl	800f2c0 <_sbrk_r>
 800e6e2:	4581      	cmp	r9, r0
 800e6e4:	d13f      	bne.n	800e766 <_malloc_r+0xe6>
 800e6e6:	6821      	ldr	r1, [r4, #0]
 800e6e8:	4638      	mov	r0, r7
 800e6ea:	1a6d      	subs	r5, r5, r1
 800e6ec:	4629      	mov	r1, r5
 800e6ee:	f7ff ffa7 	bl	800e640 <sbrk_aligned>
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	d037      	beq.n	800e766 <_malloc_r+0xe6>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	442b      	add	r3, r5
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	f8d8 3000 	ldr.w	r3, [r8]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d038      	beq.n	800e776 <_malloc_r+0xf6>
 800e704:	685a      	ldr	r2, [r3, #4]
 800e706:	42a2      	cmp	r2, r4
 800e708:	d12b      	bne.n	800e762 <_malloc_r+0xe2>
 800e70a:	2200      	movs	r2, #0
 800e70c:	605a      	str	r2, [r3, #4]
 800e70e:	e00f      	b.n	800e730 <_malloc_r+0xb0>
 800e710:	6822      	ldr	r2, [r4, #0]
 800e712:	1b52      	subs	r2, r2, r5
 800e714:	d41f      	bmi.n	800e756 <_malloc_r+0xd6>
 800e716:	2a0b      	cmp	r2, #11
 800e718:	d917      	bls.n	800e74a <_malloc_r+0xca>
 800e71a:	1961      	adds	r1, r4, r5
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	6025      	str	r5, [r4, #0]
 800e720:	bf18      	it	ne
 800e722:	6059      	strne	r1, [r3, #4]
 800e724:	6863      	ldr	r3, [r4, #4]
 800e726:	bf08      	it	eq
 800e728:	f8c8 1000 	streq.w	r1, [r8]
 800e72c:	5162      	str	r2, [r4, r5]
 800e72e:	604b      	str	r3, [r1, #4]
 800e730:	4638      	mov	r0, r7
 800e732:	f104 060b 	add.w	r6, r4, #11
 800e736:	f000 f829 	bl	800e78c <__malloc_unlock>
 800e73a:	f026 0607 	bic.w	r6, r6, #7
 800e73e:	1d23      	adds	r3, r4, #4
 800e740:	1af2      	subs	r2, r6, r3
 800e742:	d0ae      	beq.n	800e6a2 <_malloc_r+0x22>
 800e744:	1b9b      	subs	r3, r3, r6
 800e746:	50a3      	str	r3, [r4, r2]
 800e748:	e7ab      	b.n	800e6a2 <_malloc_r+0x22>
 800e74a:	42a3      	cmp	r3, r4
 800e74c:	6862      	ldr	r2, [r4, #4]
 800e74e:	d1dd      	bne.n	800e70c <_malloc_r+0x8c>
 800e750:	f8c8 2000 	str.w	r2, [r8]
 800e754:	e7ec      	b.n	800e730 <_malloc_r+0xb0>
 800e756:	4623      	mov	r3, r4
 800e758:	6864      	ldr	r4, [r4, #4]
 800e75a:	e7ac      	b.n	800e6b6 <_malloc_r+0x36>
 800e75c:	4634      	mov	r4, r6
 800e75e:	6876      	ldr	r6, [r6, #4]
 800e760:	e7b4      	b.n	800e6cc <_malloc_r+0x4c>
 800e762:	4613      	mov	r3, r2
 800e764:	e7cc      	b.n	800e700 <_malloc_r+0x80>
 800e766:	230c      	movs	r3, #12
 800e768:	4638      	mov	r0, r7
 800e76a:	603b      	str	r3, [r7, #0]
 800e76c:	f000 f80e 	bl	800e78c <__malloc_unlock>
 800e770:	e797      	b.n	800e6a2 <_malloc_r+0x22>
 800e772:	6025      	str	r5, [r4, #0]
 800e774:	e7dc      	b.n	800e730 <_malloc_r+0xb0>
 800e776:	605b      	str	r3, [r3, #4]
 800e778:	deff      	udf	#255	; 0xff
 800e77a:	bf00      	nop
 800e77c:	200008c8 	.word	0x200008c8

0800e780 <__malloc_lock>:
 800e780:	4801      	ldr	r0, [pc, #4]	; (800e788 <__malloc_lock+0x8>)
 800e782:	f7ff b88e 	b.w	800d8a2 <__retarget_lock_acquire_recursive>
 800e786:	bf00      	nop
 800e788:	200008c4 	.word	0x200008c4

0800e78c <__malloc_unlock>:
 800e78c:	4801      	ldr	r0, [pc, #4]	; (800e794 <__malloc_unlock+0x8>)
 800e78e:	f7ff b889 	b.w	800d8a4 <__retarget_lock_release_recursive>
 800e792:	bf00      	nop
 800e794:	200008c4 	.word	0x200008c4

0800e798 <_Balloc>:
 800e798:	b570      	push	{r4, r5, r6, lr}
 800e79a:	69c6      	ldr	r6, [r0, #28]
 800e79c:	4604      	mov	r4, r0
 800e79e:	460d      	mov	r5, r1
 800e7a0:	b976      	cbnz	r6, 800e7c0 <_Balloc+0x28>
 800e7a2:	2010      	movs	r0, #16
 800e7a4:	f7ff ff44 	bl	800e630 <malloc>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	61e0      	str	r0, [r4, #28]
 800e7ac:	b920      	cbnz	r0, 800e7b8 <_Balloc+0x20>
 800e7ae:	216b      	movs	r1, #107	; 0x6b
 800e7b0:	4b17      	ldr	r3, [pc, #92]	; (800e810 <_Balloc+0x78>)
 800e7b2:	4818      	ldr	r0, [pc, #96]	; (800e814 <_Balloc+0x7c>)
 800e7b4:	f000 fda2 	bl	800f2fc <__assert_func>
 800e7b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e7bc:	6006      	str	r6, [r0, #0]
 800e7be:	60c6      	str	r6, [r0, #12]
 800e7c0:	69e6      	ldr	r6, [r4, #28]
 800e7c2:	68f3      	ldr	r3, [r6, #12]
 800e7c4:	b183      	cbz	r3, 800e7e8 <_Balloc+0x50>
 800e7c6:	69e3      	ldr	r3, [r4, #28]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e7ce:	b9b8      	cbnz	r0, 800e800 <_Balloc+0x68>
 800e7d0:	2101      	movs	r1, #1
 800e7d2:	fa01 f605 	lsl.w	r6, r1, r5
 800e7d6:	1d72      	adds	r2, r6, #5
 800e7d8:	4620      	mov	r0, r4
 800e7da:	0092      	lsls	r2, r2, #2
 800e7dc:	f000 fdac 	bl	800f338 <_calloc_r>
 800e7e0:	b160      	cbz	r0, 800e7fc <_Balloc+0x64>
 800e7e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e7e6:	e00e      	b.n	800e806 <_Balloc+0x6e>
 800e7e8:	2221      	movs	r2, #33	; 0x21
 800e7ea:	2104      	movs	r1, #4
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	f000 fda3 	bl	800f338 <_calloc_r>
 800e7f2:	69e3      	ldr	r3, [r4, #28]
 800e7f4:	60f0      	str	r0, [r6, #12]
 800e7f6:	68db      	ldr	r3, [r3, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1e4      	bne.n	800e7c6 <_Balloc+0x2e>
 800e7fc:	2000      	movs	r0, #0
 800e7fe:	bd70      	pop	{r4, r5, r6, pc}
 800e800:	6802      	ldr	r2, [r0, #0]
 800e802:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e806:	2300      	movs	r3, #0
 800e808:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e80c:	e7f7      	b.n	800e7fe <_Balloc+0x66>
 800e80e:	bf00      	nop
 800e810:	0800fab3 	.word	0x0800fab3
 800e814:	0800fb33 	.word	0x0800fb33

0800e818 <_Bfree>:
 800e818:	b570      	push	{r4, r5, r6, lr}
 800e81a:	69c6      	ldr	r6, [r0, #28]
 800e81c:	4605      	mov	r5, r0
 800e81e:	460c      	mov	r4, r1
 800e820:	b976      	cbnz	r6, 800e840 <_Bfree+0x28>
 800e822:	2010      	movs	r0, #16
 800e824:	f7ff ff04 	bl	800e630 <malloc>
 800e828:	4602      	mov	r2, r0
 800e82a:	61e8      	str	r0, [r5, #28]
 800e82c:	b920      	cbnz	r0, 800e838 <_Bfree+0x20>
 800e82e:	218f      	movs	r1, #143	; 0x8f
 800e830:	4b08      	ldr	r3, [pc, #32]	; (800e854 <_Bfree+0x3c>)
 800e832:	4809      	ldr	r0, [pc, #36]	; (800e858 <_Bfree+0x40>)
 800e834:	f000 fd62 	bl	800f2fc <__assert_func>
 800e838:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e83c:	6006      	str	r6, [r0, #0]
 800e83e:	60c6      	str	r6, [r0, #12]
 800e840:	b13c      	cbz	r4, 800e852 <_Bfree+0x3a>
 800e842:	69eb      	ldr	r3, [r5, #28]
 800e844:	6862      	ldr	r2, [r4, #4]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e84c:	6021      	str	r1, [r4, #0]
 800e84e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e852:	bd70      	pop	{r4, r5, r6, pc}
 800e854:	0800fab3 	.word	0x0800fab3
 800e858:	0800fb33 	.word	0x0800fb33

0800e85c <__multadd>:
 800e85c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e860:	4607      	mov	r7, r0
 800e862:	460c      	mov	r4, r1
 800e864:	461e      	mov	r6, r3
 800e866:	2000      	movs	r0, #0
 800e868:	690d      	ldr	r5, [r1, #16]
 800e86a:	f101 0c14 	add.w	ip, r1, #20
 800e86e:	f8dc 3000 	ldr.w	r3, [ip]
 800e872:	3001      	adds	r0, #1
 800e874:	b299      	uxth	r1, r3
 800e876:	fb02 6101 	mla	r1, r2, r1, r6
 800e87a:	0c1e      	lsrs	r6, r3, #16
 800e87c:	0c0b      	lsrs	r3, r1, #16
 800e87e:	fb02 3306 	mla	r3, r2, r6, r3
 800e882:	b289      	uxth	r1, r1
 800e884:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e888:	4285      	cmp	r5, r0
 800e88a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e88e:	f84c 1b04 	str.w	r1, [ip], #4
 800e892:	dcec      	bgt.n	800e86e <__multadd+0x12>
 800e894:	b30e      	cbz	r6, 800e8da <__multadd+0x7e>
 800e896:	68a3      	ldr	r3, [r4, #8]
 800e898:	42ab      	cmp	r3, r5
 800e89a:	dc19      	bgt.n	800e8d0 <__multadd+0x74>
 800e89c:	6861      	ldr	r1, [r4, #4]
 800e89e:	4638      	mov	r0, r7
 800e8a0:	3101      	adds	r1, #1
 800e8a2:	f7ff ff79 	bl	800e798 <_Balloc>
 800e8a6:	4680      	mov	r8, r0
 800e8a8:	b928      	cbnz	r0, 800e8b6 <__multadd+0x5a>
 800e8aa:	4602      	mov	r2, r0
 800e8ac:	21ba      	movs	r1, #186	; 0xba
 800e8ae:	4b0c      	ldr	r3, [pc, #48]	; (800e8e0 <__multadd+0x84>)
 800e8b0:	480c      	ldr	r0, [pc, #48]	; (800e8e4 <__multadd+0x88>)
 800e8b2:	f000 fd23 	bl	800f2fc <__assert_func>
 800e8b6:	6922      	ldr	r2, [r4, #16]
 800e8b8:	f104 010c 	add.w	r1, r4, #12
 800e8bc:	3202      	adds	r2, #2
 800e8be:	0092      	lsls	r2, r2, #2
 800e8c0:	300c      	adds	r0, #12
 800e8c2:	f000 fd0d 	bl	800f2e0 <memcpy>
 800e8c6:	4621      	mov	r1, r4
 800e8c8:	4638      	mov	r0, r7
 800e8ca:	f7ff ffa5 	bl	800e818 <_Bfree>
 800e8ce:	4644      	mov	r4, r8
 800e8d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e8d4:	3501      	adds	r5, #1
 800e8d6:	615e      	str	r6, [r3, #20]
 800e8d8:	6125      	str	r5, [r4, #16]
 800e8da:	4620      	mov	r0, r4
 800e8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e0:	0800fb22 	.word	0x0800fb22
 800e8e4:	0800fb33 	.word	0x0800fb33

0800e8e8 <__hi0bits>:
 800e8e8:	0c02      	lsrs	r2, r0, #16
 800e8ea:	0412      	lsls	r2, r2, #16
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	b9ca      	cbnz	r2, 800e924 <__hi0bits+0x3c>
 800e8f0:	0403      	lsls	r3, r0, #16
 800e8f2:	2010      	movs	r0, #16
 800e8f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e8f8:	bf04      	itt	eq
 800e8fa:	021b      	lsleq	r3, r3, #8
 800e8fc:	3008      	addeq	r0, #8
 800e8fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e902:	bf04      	itt	eq
 800e904:	011b      	lsleq	r3, r3, #4
 800e906:	3004      	addeq	r0, #4
 800e908:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e90c:	bf04      	itt	eq
 800e90e:	009b      	lsleq	r3, r3, #2
 800e910:	3002      	addeq	r0, #2
 800e912:	2b00      	cmp	r3, #0
 800e914:	db05      	blt.n	800e922 <__hi0bits+0x3a>
 800e916:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800e91a:	f100 0001 	add.w	r0, r0, #1
 800e91e:	bf08      	it	eq
 800e920:	2020      	moveq	r0, #32
 800e922:	4770      	bx	lr
 800e924:	2000      	movs	r0, #0
 800e926:	e7e5      	b.n	800e8f4 <__hi0bits+0xc>

0800e928 <__lo0bits>:
 800e928:	6803      	ldr	r3, [r0, #0]
 800e92a:	4602      	mov	r2, r0
 800e92c:	f013 0007 	ands.w	r0, r3, #7
 800e930:	d00b      	beq.n	800e94a <__lo0bits+0x22>
 800e932:	07d9      	lsls	r1, r3, #31
 800e934:	d421      	bmi.n	800e97a <__lo0bits+0x52>
 800e936:	0798      	lsls	r0, r3, #30
 800e938:	bf49      	itett	mi
 800e93a:	085b      	lsrmi	r3, r3, #1
 800e93c:	089b      	lsrpl	r3, r3, #2
 800e93e:	2001      	movmi	r0, #1
 800e940:	6013      	strmi	r3, [r2, #0]
 800e942:	bf5c      	itt	pl
 800e944:	2002      	movpl	r0, #2
 800e946:	6013      	strpl	r3, [r2, #0]
 800e948:	4770      	bx	lr
 800e94a:	b299      	uxth	r1, r3
 800e94c:	b909      	cbnz	r1, 800e952 <__lo0bits+0x2a>
 800e94e:	2010      	movs	r0, #16
 800e950:	0c1b      	lsrs	r3, r3, #16
 800e952:	b2d9      	uxtb	r1, r3
 800e954:	b909      	cbnz	r1, 800e95a <__lo0bits+0x32>
 800e956:	3008      	adds	r0, #8
 800e958:	0a1b      	lsrs	r3, r3, #8
 800e95a:	0719      	lsls	r1, r3, #28
 800e95c:	bf04      	itt	eq
 800e95e:	091b      	lsreq	r3, r3, #4
 800e960:	3004      	addeq	r0, #4
 800e962:	0799      	lsls	r1, r3, #30
 800e964:	bf04      	itt	eq
 800e966:	089b      	lsreq	r3, r3, #2
 800e968:	3002      	addeq	r0, #2
 800e96a:	07d9      	lsls	r1, r3, #31
 800e96c:	d403      	bmi.n	800e976 <__lo0bits+0x4e>
 800e96e:	085b      	lsrs	r3, r3, #1
 800e970:	f100 0001 	add.w	r0, r0, #1
 800e974:	d003      	beq.n	800e97e <__lo0bits+0x56>
 800e976:	6013      	str	r3, [r2, #0]
 800e978:	4770      	bx	lr
 800e97a:	2000      	movs	r0, #0
 800e97c:	4770      	bx	lr
 800e97e:	2020      	movs	r0, #32
 800e980:	4770      	bx	lr
	...

0800e984 <__i2b>:
 800e984:	b510      	push	{r4, lr}
 800e986:	460c      	mov	r4, r1
 800e988:	2101      	movs	r1, #1
 800e98a:	f7ff ff05 	bl	800e798 <_Balloc>
 800e98e:	4602      	mov	r2, r0
 800e990:	b928      	cbnz	r0, 800e99e <__i2b+0x1a>
 800e992:	f240 1145 	movw	r1, #325	; 0x145
 800e996:	4b04      	ldr	r3, [pc, #16]	; (800e9a8 <__i2b+0x24>)
 800e998:	4804      	ldr	r0, [pc, #16]	; (800e9ac <__i2b+0x28>)
 800e99a:	f000 fcaf 	bl	800f2fc <__assert_func>
 800e99e:	2301      	movs	r3, #1
 800e9a0:	6144      	str	r4, [r0, #20]
 800e9a2:	6103      	str	r3, [r0, #16]
 800e9a4:	bd10      	pop	{r4, pc}
 800e9a6:	bf00      	nop
 800e9a8:	0800fb22 	.word	0x0800fb22
 800e9ac:	0800fb33 	.word	0x0800fb33

0800e9b0 <__multiply>:
 800e9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9b4:	4691      	mov	r9, r2
 800e9b6:	690a      	ldr	r2, [r1, #16]
 800e9b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e9bc:	460c      	mov	r4, r1
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	bfbe      	ittt	lt
 800e9c2:	460b      	movlt	r3, r1
 800e9c4:	464c      	movlt	r4, r9
 800e9c6:	4699      	movlt	r9, r3
 800e9c8:	6927      	ldr	r7, [r4, #16]
 800e9ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e9ce:	68a3      	ldr	r3, [r4, #8]
 800e9d0:	6861      	ldr	r1, [r4, #4]
 800e9d2:	eb07 060a 	add.w	r6, r7, sl
 800e9d6:	42b3      	cmp	r3, r6
 800e9d8:	b085      	sub	sp, #20
 800e9da:	bfb8      	it	lt
 800e9dc:	3101      	addlt	r1, #1
 800e9de:	f7ff fedb 	bl	800e798 <_Balloc>
 800e9e2:	b930      	cbnz	r0, 800e9f2 <__multiply+0x42>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800e9ea:	4b43      	ldr	r3, [pc, #268]	; (800eaf8 <__multiply+0x148>)
 800e9ec:	4843      	ldr	r0, [pc, #268]	; (800eafc <__multiply+0x14c>)
 800e9ee:	f000 fc85 	bl	800f2fc <__assert_func>
 800e9f2:	f100 0514 	add.w	r5, r0, #20
 800e9f6:	462b      	mov	r3, r5
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e9fe:	4543      	cmp	r3, r8
 800ea00:	d321      	bcc.n	800ea46 <__multiply+0x96>
 800ea02:	f104 0314 	add.w	r3, r4, #20
 800ea06:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ea0a:	f109 0314 	add.w	r3, r9, #20
 800ea0e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ea12:	9202      	str	r2, [sp, #8]
 800ea14:	1b3a      	subs	r2, r7, r4
 800ea16:	3a15      	subs	r2, #21
 800ea18:	f022 0203 	bic.w	r2, r2, #3
 800ea1c:	3204      	adds	r2, #4
 800ea1e:	f104 0115 	add.w	r1, r4, #21
 800ea22:	428f      	cmp	r7, r1
 800ea24:	bf38      	it	cc
 800ea26:	2204      	movcc	r2, #4
 800ea28:	9201      	str	r2, [sp, #4]
 800ea2a:	9a02      	ldr	r2, [sp, #8]
 800ea2c:	9303      	str	r3, [sp, #12]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d80c      	bhi.n	800ea4c <__multiply+0x9c>
 800ea32:	2e00      	cmp	r6, #0
 800ea34:	dd03      	ble.n	800ea3e <__multiply+0x8e>
 800ea36:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d05a      	beq.n	800eaf4 <__multiply+0x144>
 800ea3e:	6106      	str	r6, [r0, #16]
 800ea40:	b005      	add	sp, #20
 800ea42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea46:	f843 2b04 	str.w	r2, [r3], #4
 800ea4a:	e7d8      	b.n	800e9fe <__multiply+0x4e>
 800ea4c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ea50:	f1ba 0f00 	cmp.w	sl, #0
 800ea54:	d023      	beq.n	800ea9e <__multiply+0xee>
 800ea56:	46a9      	mov	r9, r5
 800ea58:	f04f 0c00 	mov.w	ip, #0
 800ea5c:	f104 0e14 	add.w	lr, r4, #20
 800ea60:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ea64:	f8d9 1000 	ldr.w	r1, [r9]
 800ea68:	fa1f fb82 	uxth.w	fp, r2
 800ea6c:	b289      	uxth	r1, r1
 800ea6e:	fb0a 110b 	mla	r1, sl, fp, r1
 800ea72:	4461      	add	r1, ip
 800ea74:	f8d9 c000 	ldr.w	ip, [r9]
 800ea78:	0c12      	lsrs	r2, r2, #16
 800ea7a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ea7e:	fb0a c202 	mla	r2, sl, r2, ip
 800ea82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ea86:	b289      	uxth	r1, r1
 800ea88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ea8c:	4577      	cmp	r7, lr
 800ea8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ea92:	f849 1b04 	str.w	r1, [r9], #4
 800ea96:	d8e3      	bhi.n	800ea60 <__multiply+0xb0>
 800ea98:	9a01      	ldr	r2, [sp, #4]
 800ea9a:	f845 c002 	str.w	ip, [r5, r2]
 800ea9e:	9a03      	ldr	r2, [sp, #12]
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800eaa6:	f1b9 0f00 	cmp.w	r9, #0
 800eaaa:	d021      	beq.n	800eaf0 <__multiply+0x140>
 800eaac:	46ae      	mov	lr, r5
 800eaae:	f04f 0a00 	mov.w	sl, #0
 800eab2:	6829      	ldr	r1, [r5, #0]
 800eab4:	f104 0c14 	add.w	ip, r4, #20
 800eab8:	f8bc b000 	ldrh.w	fp, [ip]
 800eabc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800eac0:	b289      	uxth	r1, r1
 800eac2:	fb09 220b 	mla	r2, r9, fp, r2
 800eac6:	4452      	add	r2, sl
 800eac8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800eacc:	f84e 1b04 	str.w	r1, [lr], #4
 800ead0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ead4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ead8:	f8be 1000 	ldrh.w	r1, [lr]
 800eadc:	4567      	cmp	r7, ip
 800eade:	fb09 110a 	mla	r1, r9, sl, r1
 800eae2:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800eae6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eaea:	d8e5      	bhi.n	800eab8 <__multiply+0x108>
 800eaec:	9a01      	ldr	r2, [sp, #4]
 800eaee:	50a9      	str	r1, [r5, r2]
 800eaf0:	3504      	adds	r5, #4
 800eaf2:	e79a      	b.n	800ea2a <__multiply+0x7a>
 800eaf4:	3e01      	subs	r6, #1
 800eaf6:	e79c      	b.n	800ea32 <__multiply+0x82>
 800eaf8:	0800fb22 	.word	0x0800fb22
 800eafc:	0800fb33 	.word	0x0800fb33

0800eb00 <__pow5mult>:
 800eb00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb04:	4615      	mov	r5, r2
 800eb06:	f012 0203 	ands.w	r2, r2, #3
 800eb0a:	4606      	mov	r6, r0
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	d007      	beq.n	800eb20 <__pow5mult+0x20>
 800eb10:	4c25      	ldr	r4, [pc, #148]	; (800eba8 <__pow5mult+0xa8>)
 800eb12:	3a01      	subs	r2, #1
 800eb14:	2300      	movs	r3, #0
 800eb16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eb1a:	f7ff fe9f 	bl	800e85c <__multadd>
 800eb1e:	4607      	mov	r7, r0
 800eb20:	10ad      	asrs	r5, r5, #2
 800eb22:	d03d      	beq.n	800eba0 <__pow5mult+0xa0>
 800eb24:	69f4      	ldr	r4, [r6, #28]
 800eb26:	b97c      	cbnz	r4, 800eb48 <__pow5mult+0x48>
 800eb28:	2010      	movs	r0, #16
 800eb2a:	f7ff fd81 	bl	800e630 <malloc>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	61f0      	str	r0, [r6, #28]
 800eb32:	b928      	cbnz	r0, 800eb40 <__pow5mult+0x40>
 800eb34:	f240 11b3 	movw	r1, #435	; 0x1b3
 800eb38:	4b1c      	ldr	r3, [pc, #112]	; (800ebac <__pow5mult+0xac>)
 800eb3a:	481d      	ldr	r0, [pc, #116]	; (800ebb0 <__pow5mult+0xb0>)
 800eb3c:	f000 fbde 	bl	800f2fc <__assert_func>
 800eb40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eb44:	6004      	str	r4, [r0, #0]
 800eb46:	60c4      	str	r4, [r0, #12]
 800eb48:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800eb4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eb50:	b94c      	cbnz	r4, 800eb66 <__pow5mult+0x66>
 800eb52:	f240 2171 	movw	r1, #625	; 0x271
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ff14 	bl	800e984 <__i2b>
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	4604      	mov	r4, r0
 800eb60:	f8c8 0008 	str.w	r0, [r8, #8]
 800eb64:	6003      	str	r3, [r0, #0]
 800eb66:	f04f 0900 	mov.w	r9, #0
 800eb6a:	07eb      	lsls	r3, r5, #31
 800eb6c:	d50a      	bpl.n	800eb84 <__pow5mult+0x84>
 800eb6e:	4639      	mov	r1, r7
 800eb70:	4622      	mov	r2, r4
 800eb72:	4630      	mov	r0, r6
 800eb74:	f7ff ff1c 	bl	800e9b0 <__multiply>
 800eb78:	4680      	mov	r8, r0
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	4630      	mov	r0, r6
 800eb7e:	f7ff fe4b 	bl	800e818 <_Bfree>
 800eb82:	4647      	mov	r7, r8
 800eb84:	106d      	asrs	r5, r5, #1
 800eb86:	d00b      	beq.n	800eba0 <__pow5mult+0xa0>
 800eb88:	6820      	ldr	r0, [r4, #0]
 800eb8a:	b938      	cbnz	r0, 800eb9c <__pow5mult+0x9c>
 800eb8c:	4622      	mov	r2, r4
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4630      	mov	r0, r6
 800eb92:	f7ff ff0d 	bl	800e9b0 <__multiply>
 800eb96:	6020      	str	r0, [r4, #0]
 800eb98:	f8c0 9000 	str.w	r9, [r0]
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	e7e4      	b.n	800eb6a <__pow5mult+0x6a>
 800eba0:	4638      	mov	r0, r7
 800eba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eba6:	bf00      	nop
 800eba8:	0800fc80 	.word	0x0800fc80
 800ebac:	0800fab3 	.word	0x0800fab3
 800ebb0:	0800fb33 	.word	0x0800fb33

0800ebb4 <__lshift>:
 800ebb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ebb8:	460c      	mov	r4, r1
 800ebba:	4607      	mov	r7, r0
 800ebbc:	4691      	mov	r9, r2
 800ebbe:	6923      	ldr	r3, [r4, #16]
 800ebc0:	6849      	ldr	r1, [r1, #4]
 800ebc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ebc6:	68a3      	ldr	r3, [r4, #8]
 800ebc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ebcc:	f108 0601 	add.w	r6, r8, #1
 800ebd0:	42b3      	cmp	r3, r6
 800ebd2:	db0b      	blt.n	800ebec <__lshift+0x38>
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	f7ff fddf 	bl	800e798 <_Balloc>
 800ebda:	4605      	mov	r5, r0
 800ebdc:	b948      	cbnz	r0, 800ebf2 <__lshift+0x3e>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ebe4:	4b27      	ldr	r3, [pc, #156]	; (800ec84 <__lshift+0xd0>)
 800ebe6:	4828      	ldr	r0, [pc, #160]	; (800ec88 <__lshift+0xd4>)
 800ebe8:	f000 fb88 	bl	800f2fc <__assert_func>
 800ebec:	3101      	adds	r1, #1
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	e7ee      	b.n	800ebd0 <__lshift+0x1c>
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f100 0114 	add.w	r1, r0, #20
 800ebf8:	f100 0210 	add.w	r2, r0, #16
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	4553      	cmp	r3, sl
 800ec00:	db33      	blt.n	800ec6a <__lshift+0xb6>
 800ec02:	6920      	ldr	r0, [r4, #16]
 800ec04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ec08:	f104 0314 	add.w	r3, r4, #20
 800ec0c:	f019 091f 	ands.w	r9, r9, #31
 800ec10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ec14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ec18:	d02b      	beq.n	800ec72 <__lshift+0xbe>
 800ec1a:	468a      	mov	sl, r1
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	f1c9 0e20 	rsb	lr, r9, #32
 800ec22:	6818      	ldr	r0, [r3, #0]
 800ec24:	fa00 f009 	lsl.w	r0, r0, r9
 800ec28:	4310      	orrs	r0, r2
 800ec2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ec2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec32:	459c      	cmp	ip, r3
 800ec34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ec38:	d8f3      	bhi.n	800ec22 <__lshift+0x6e>
 800ec3a:	ebac 0304 	sub.w	r3, ip, r4
 800ec3e:	3b15      	subs	r3, #21
 800ec40:	f023 0303 	bic.w	r3, r3, #3
 800ec44:	3304      	adds	r3, #4
 800ec46:	f104 0015 	add.w	r0, r4, #21
 800ec4a:	4584      	cmp	ip, r0
 800ec4c:	bf38      	it	cc
 800ec4e:	2304      	movcc	r3, #4
 800ec50:	50ca      	str	r2, [r1, r3]
 800ec52:	b10a      	cbz	r2, 800ec58 <__lshift+0xa4>
 800ec54:	f108 0602 	add.w	r6, r8, #2
 800ec58:	3e01      	subs	r6, #1
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	4621      	mov	r1, r4
 800ec5e:	612e      	str	r6, [r5, #16]
 800ec60:	f7ff fdda 	bl	800e818 <_Bfree>
 800ec64:	4628      	mov	r0, r5
 800ec66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ec6e:	3301      	adds	r3, #1
 800ec70:	e7c5      	b.n	800ebfe <__lshift+0x4a>
 800ec72:	3904      	subs	r1, #4
 800ec74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec78:	459c      	cmp	ip, r3
 800ec7a:	f841 2f04 	str.w	r2, [r1, #4]!
 800ec7e:	d8f9      	bhi.n	800ec74 <__lshift+0xc0>
 800ec80:	e7ea      	b.n	800ec58 <__lshift+0xa4>
 800ec82:	bf00      	nop
 800ec84:	0800fb22 	.word	0x0800fb22
 800ec88:	0800fb33 	.word	0x0800fb33

0800ec8c <__mcmp>:
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	690a      	ldr	r2, [r1, #16]
 800ec90:	6900      	ldr	r0, [r0, #16]
 800ec92:	b530      	push	{r4, r5, lr}
 800ec94:	1a80      	subs	r0, r0, r2
 800ec96:	d10d      	bne.n	800ecb4 <__mcmp+0x28>
 800ec98:	3314      	adds	r3, #20
 800ec9a:	3114      	adds	r1, #20
 800ec9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ecac:	4295      	cmp	r5, r2
 800ecae:	d002      	beq.n	800ecb6 <__mcmp+0x2a>
 800ecb0:	d304      	bcc.n	800ecbc <__mcmp+0x30>
 800ecb2:	2001      	movs	r0, #1
 800ecb4:	bd30      	pop	{r4, r5, pc}
 800ecb6:	42a3      	cmp	r3, r4
 800ecb8:	d3f4      	bcc.n	800eca4 <__mcmp+0x18>
 800ecba:	e7fb      	b.n	800ecb4 <__mcmp+0x28>
 800ecbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc0:	e7f8      	b.n	800ecb4 <__mcmp+0x28>
	...

0800ecc4 <__mdiff>:
 800ecc4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	460d      	mov	r5, r1
 800ecca:	4607      	mov	r7, r0
 800eccc:	4611      	mov	r1, r2
 800ecce:	4628      	mov	r0, r5
 800ecd0:	4614      	mov	r4, r2
 800ecd2:	f7ff ffdb 	bl	800ec8c <__mcmp>
 800ecd6:	1e06      	subs	r6, r0, #0
 800ecd8:	d111      	bne.n	800ecfe <__mdiff+0x3a>
 800ecda:	4631      	mov	r1, r6
 800ecdc:	4638      	mov	r0, r7
 800ecde:	f7ff fd5b 	bl	800e798 <_Balloc>
 800ece2:	4602      	mov	r2, r0
 800ece4:	b928      	cbnz	r0, 800ecf2 <__mdiff+0x2e>
 800ece6:	f240 2137 	movw	r1, #567	; 0x237
 800ecea:	4b3a      	ldr	r3, [pc, #232]	; (800edd4 <__mdiff+0x110>)
 800ecec:	483a      	ldr	r0, [pc, #232]	; (800edd8 <__mdiff+0x114>)
 800ecee:	f000 fb05 	bl	800f2fc <__assert_func>
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ecf8:	4610      	mov	r0, r2
 800ecfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecfe:	bfa4      	itt	ge
 800ed00:	4623      	movge	r3, r4
 800ed02:	462c      	movge	r4, r5
 800ed04:	4638      	mov	r0, r7
 800ed06:	6861      	ldr	r1, [r4, #4]
 800ed08:	bfa6      	itte	ge
 800ed0a:	461d      	movge	r5, r3
 800ed0c:	2600      	movge	r6, #0
 800ed0e:	2601      	movlt	r6, #1
 800ed10:	f7ff fd42 	bl	800e798 <_Balloc>
 800ed14:	4602      	mov	r2, r0
 800ed16:	b918      	cbnz	r0, 800ed20 <__mdiff+0x5c>
 800ed18:	f240 2145 	movw	r1, #581	; 0x245
 800ed1c:	4b2d      	ldr	r3, [pc, #180]	; (800edd4 <__mdiff+0x110>)
 800ed1e:	e7e5      	b.n	800ecec <__mdiff+0x28>
 800ed20:	f102 0814 	add.w	r8, r2, #20
 800ed24:	46c2      	mov	sl, r8
 800ed26:	f04f 0c00 	mov.w	ip, #0
 800ed2a:	6927      	ldr	r7, [r4, #16]
 800ed2c:	60c6      	str	r6, [r0, #12]
 800ed2e:	692e      	ldr	r6, [r5, #16]
 800ed30:	f104 0014 	add.w	r0, r4, #20
 800ed34:	f105 0914 	add.w	r9, r5, #20
 800ed38:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ed3c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ed40:	3410      	adds	r4, #16
 800ed42:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ed46:	f859 3b04 	ldr.w	r3, [r9], #4
 800ed4a:	fa1f f18b 	uxth.w	r1, fp
 800ed4e:	4461      	add	r1, ip
 800ed50:	fa1f fc83 	uxth.w	ip, r3
 800ed54:	0c1b      	lsrs	r3, r3, #16
 800ed56:	eba1 010c 	sub.w	r1, r1, ip
 800ed5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ed5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ed62:	b289      	uxth	r1, r1
 800ed64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ed68:	454e      	cmp	r6, r9
 800ed6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800ed6e:	f84a 1b04 	str.w	r1, [sl], #4
 800ed72:	d8e6      	bhi.n	800ed42 <__mdiff+0x7e>
 800ed74:	1b73      	subs	r3, r6, r5
 800ed76:	3b15      	subs	r3, #21
 800ed78:	f023 0303 	bic.w	r3, r3, #3
 800ed7c:	3515      	adds	r5, #21
 800ed7e:	3304      	adds	r3, #4
 800ed80:	42ae      	cmp	r6, r5
 800ed82:	bf38      	it	cc
 800ed84:	2304      	movcc	r3, #4
 800ed86:	4418      	add	r0, r3
 800ed88:	4443      	add	r3, r8
 800ed8a:	461e      	mov	r6, r3
 800ed8c:	4605      	mov	r5, r0
 800ed8e:	4575      	cmp	r5, lr
 800ed90:	d30e      	bcc.n	800edb0 <__mdiff+0xec>
 800ed92:	f10e 0103 	add.w	r1, lr, #3
 800ed96:	1a09      	subs	r1, r1, r0
 800ed98:	f021 0103 	bic.w	r1, r1, #3
 800ed9c:	3803      	subs	r0, #3
 800ed9e:	4586      	cmp	lr, r0
 800eda0:	bf38      	it	cc
 800eda2:	2100      	movcc	r1, #0
 800eda4:	440b      	add	r3, r1
 800eda6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800edaa:	b189      	cbz	r1, 800edd0 <__mdiff+0x10c>
 800edac:	6117      	str	r7, [r2, #16]
 800edae:	e7a3      	b.n	800ecf8 <__mdiff+0x34>
 800edb0:	f855 8b04 	ldr.w	r8, [r5], #4
 800edb4:	fa1f f188 	uxth.w	r1, r8
 800edb8:	4461      	add	r1, ip
 800edba:	140c      	asrs	r4, r1, #16
 800edbc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800edc0:	b289      	uxth	r1, r1
 800edc2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800edc6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800edca:	f846 1b04 	str.w	r1, [r6], #4
 800edce:	e7de      	b.n	800ed8e <__mdiff+0xca>
 800edd0:	3f01      	subs	r7, #1
 800edd2:	e7e8      	b.n	800eda6 <__mdiff+0xe2>
 800edd4:	0800fb22 	.word	0x0800fb22
 800edd8:	0800fb33 	.word	0x0800fb33

0800eddc <__d2b>:
 800eddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edde:	2101      	movs	r1, #1
 800ede0:	4617      	mov	r7, r2
 800ede2:	461c      	mov	r4, r3
 800ede4:	9e08      	ldr	r6, [sp, #32]
 800ede6:	f7ff fcd7 	bl	800e798 <_Balloc>
 800edea:	4605      	mov	r5, r0
 800edec:	b930      	cbnz	r0, 800edfc <__d2b+0x20>
 800edee:	4602      	mov	r2, r0
 800edf0:	f240 310f 	movw	r1, #783	; 0x30f
 800edf4:	4b22      	ldr	r3, [pc, #136]	; (800ee80 <__d2b+0xa4>)
 800edf6:	4823      	ldr	r0, [pc, #140]	; (800ee84 <__d2b+0xa8>)
 800edf8:	f000 fa80 	bl	800f2fc <__assert_func>
 800edfc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ee00:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ee04:	bb24      	cbnz	r4, 800ee50 <__d2b+0x74>
 800ee06:	2f00      	cmp	r7, #0
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	d026      	beq.n	800ee5a <__d2b+0x7e>
 800ee0c:	4668      	mov	r0, sp
 800ee0e:	9700      	str	r7, [sp, #0]
 800ee10:	f7ff fd8a 	bl	800e928 <__lo0bits>
 800ee14:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ee18:	b1e8      	cbz	r0, 800ee56 <__d2b+0x7a>
 800ee1a:	f1c0 0320 	rsb	r3, r0, #32
 800ee1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ee22:	430b      	orrs	r3, r1
 800ee24:	40c2      	lsrs	r2, r0
 800ee26:	616b      	str	r3, [r5, #20]
 800ee28:	9201      	str	r2, [sp, #4]
 800ee2a:	9b01      	ldr	r3, [sp, #4]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	bf14      	ite	ne
 800ee30:	2102      	movne	r1, #2
 800ee32:	2101      	moveq	r1, #1
 800ee34:	61ab      	str	r3, [r5, #24]
 800ee36:	6129      	str	r1, [r5, #16]
 800ee38:	b1bc      	cbz	r4, 800ee6a <__d2b+0x8e>
 800ee3a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ee3e:	4404      	add	r4, r0
 800ee40:	6034      	str	r4, [r6, #0]
 800ee42:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ee46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee48:	6018      	str	r0, [r3, #0]
 800ee4a:	4628      	mov	r0, r5
 800ee4c:	b003      	add	sp, #12
 800ee4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee54:	e7d7      	b.n	800ee06 <__d2b+0x2a>
 800ee56:	6169      	str	r1, [r5, #20]
 800ee58:	e7e7      	b.n	800ee2a <__d2b+0x4e>
 800ee5a:	a801      	add	r0, sp, #4
 800ee5c:	f7ff fd64 	bl	800e928 <__lo0bits>
 800ee60:	9b01      	ldr	r3, [sp, #4]
 800ee62:	2101      	movs	r1, #1
 800ee64:	616b      	str	r3, [r5, #20]
 800ee66:	3020      	adds	r0, #32
 800ee68:	e7e5      	b.n	800ee36 <__d2b+0x5a>
 800ee6a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ee6e:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800ee72:	6030      	str	r0, [r6, #0]
 800ee74:	6918      	ldr	r0, [r3, #16]
 800ee76:	f7ff fd37 	bl	800e8e8 <__hi0bits>
 800ee7a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ee7e:	e7e2      	b.n	800ee46 <__d2b+0x6a>
 800ee80:	0800fb22 	.word	0x0800fb22
 800ee84:	0800fb33 	.word	0x0800fb33

0800ee88 <__ssputs_r>:
 800ee88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee8c:	461f      	mov	r7, r3
 800ee8e:	688e      	ldr	r6, [r1, #8]
 800ee90:	4682      	mov	sl, r0
 800ee92:	42be      	cmp	r6, r7
 800ee94:	460c      	mov	r4, r1
 800ee96:	4690      	mov	r8, r2
 800ee98:	680b      	ldr	r3, [r1, #0]
 800ee9a:	d82c      	bhi.n	800eef6 <__ssputs_r+0x6e>
 800ee9c:	898a      	ldrh	r2, [r1, #12]
 800ee9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800eea2:	d026      	beq.n	800eef2 <__ssputs_r+0x6a>
 800eea4:	6965      	ldr	r5, [r4, #20]
 800eea6:	6909      	ldr	r1, [r1, #16]
 800eea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800eeac:	eba3 0901 	sub.w	r9, r3, r1
 800eeb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800eeb4:	1c7b      	adds	r3, r7, #1
 800eeb6:	444b      	add	r3, r9
 800eeb8:	106d      	asrs	r5, r5, #1
 800eeba:	429d      	cmp	r5, r3
 800eebc:	bf38      	it	cc
 800eebe:	461d      	movcc	r5, r3
 800eec0:	0553      	lsls	r3, r2, #21
 800eec2:	d527      	bpl.n	800ef14 <__ssputs_r+0x8c>
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7ff fbdb 	bl	800e680 <_malloc_r>
 800eeca:	4606      	mov	r6, r0
 800eecc:	b360      	cbz	r0, 800ef28 <__ssputs_r+0xa0>
 800eece:	464a      	mov	r2, r9
 800eed0:	6921      	ldr	r1, [r4, #16]
 800eed2:	f000 fa05 	bl	800f2e0 <memcpy>
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eee0:	81a3      	strh	r3, [r4, #12]
 800eee2:	6126      	str	r6, [r4, #16]
 800eee4:	444e      	add	r6, r9
 800eee6:	6026      	str	r6, [r4, #0]
 800eee8:	463e      	mov	r6, r7
 800eeea:	6165      	str	r5, [r4, #20]
 800eeec:	eba5 0509 	sub.w	r5, r5, r9
 800eef0:	60a5      	str	r5, [r4, #8]
 800eef2:	42be      	cmp	r6, r7
 800eef4:	d900      	bls.n	800eef8 <__ssputs_r+0x70>
 800eef6:	463e      	mov	r6, r7
 800eef8:	4632      	mov	r2, r6
 800eefa:	4641      	mov	r1, r8
 800eefc:	6820      	ldr	r0, [r4, #0]
 800eefe:	f000 f9c5 	bl	800f28c <memmove>
 800ef02:	2000      	movs	r0, #0
 800ef04:	68a3      	ldr	r3, [r4, #8]
 800ef06:	1b9b      	subs	r3, r3, r6
 800ef08:	60a3      	str	r3, [r4, #8]
 800ef0a:	6823      	ldr	r3, [r4, #0]
 800ef0c:	4433      	add	r3, r6
 800ef0e:	6023      	str	r3, [r4, #0]
 800ef10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef14:	462a      	mov	r2, r5
 800ef16:	f000 fa35 	bl	800f384 <_realloc_r>
 800ef1a:	4606      	mov	r6, r0
 800ef1c:	2800      	cmp	r0, #0
 800ef1e:	d1e0      	bne.n	800eee2 <__ssputs_r+0x5a>
 800ef20:	4650      	mov	r0, sl
 800ef22:	6921      	ldr	r1, [r4, #16]
 800ef24:	f7ff fb3c 	bl	800e5a0 <_free_r>
 800ef28:	230c      	movs	r3, #12
 800ef2a:	f8ca 3000 	str.w	r3, [sl]
 800ef2e:	89a3      	ldrh	r3, [r4, #12]
 800ef30:	f04f 30ff 	mov.w	r0, #4294967295
 800ef34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	e7e9      	b.n	800ef10 <__ssputs_r+0x88>

0800ef3c <_svfiprintf_r>:
 800ef3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef40:	4698      	mov	r8, r3
 800ef42:	898b      	ldrh	r3, [r1, #12]
 800ef44:	4607      	mov	r7, r0
 800ef46:	061b      	lsls	r3, r3, #24
 800ef48:	460d      	mov	r5, r1
 800ef4a:	4614      	mov	r4, r2
 800ef4c:	b09d      	sub	sp, #116	; 0x74
 800ef4e:	d50e      	bpl.n	800ef6e <_svfiprintf_r+0x32>
 800ef50:	690b      	ldr	r3, [r1, #16]
 800ef52:	b963      	cbnz	r3, 800ef6e <_svfiprintf_r+0x32>
 800ef54:	2140      	movs	r1, #64	; 0x40
 800ef56:	f7ff fb93 	bl	800e680 <_malloc_r>
 800ef5a:	6028      	str	r0, [r5, #0]
 800ef5c:	6128      	str	r0, [r5, #16]
 800ef5e:	b920      	cbnz	r0, 800ef6a <_svfiprintf_r+0x2e>
 800ef60:	230c      	movs	r3, #12
 800ef62:	603b      	str	r3, [r7, #0]
 800ef64:	f04f 30ff 	mov.w	r0, #4294967295
 800ef68:	e0d0      	b.n	800f10c <_svfiprintf_r+0x1d0>
 800ef6a:	2340      	movs	r3, #64	; 0x40
 800ef6c:	616b      	str	r3, [r5, #20]
 800ef6e:	2300      	movs	r3, #0
 800ef70:	9309      	str	r3, [sp, #36]	; 0x24
 800ef72:	2320      	movs	r3, #32
 800ef74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ef78:	2330      	movs	r3, #48	; 0x30
 800ef7a:	f04f 0901 	mov.w	r9, #1
 800ef7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ef82:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800f124 <_svfiprintf_r+0x1e8>
 800ef86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ef8a:	4623      	mov	r3, r4
 800ef8c:	469a      	mov	sl, r3
 800ef8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ef92:	b10a      	cbz	r2, 800ef98 <_svfiprintf_r+0x5c>
 800ef94:	2a25      	cmp	r2, #37	; 0x25
 800ef96:	d1f9      	bne.n	800ef8c <_svfiprintf_r+0x50>
 800ef98:	ebba 0b04 	subs.w	fp, sl, r4
 800ef9c:	d00b      	beq.n	800efb6 <_svfiprintf_r+0x7a>
 800ef9e:	465b      	mov	r3, fp
 800efa0:	4622      	mov	r2, r4
 800efa2:	4629      	mov	r1, r5
 800efa4:	4638      	mov	r0, r7
 800efa6:	f7ff ff6f 	bl	800ee88 <__ssputs_r>
 800efaa:	3001      	adds	r0, #1
 800efac:	f000 80a9 	beq.w	800f102 <_svfiprintf_r+0x1c6>
 800efb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800efb2:	445a      	add	r2, fp
 800efb4:	9209      	str	r2, [sp, #36]	; 0x24
 800efb6:	f89a 3000 	ldrb.w	r3, [sl]
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 80a1 	beq.w	800f102 <_svfiprintf_r+0x1c6>
 800efc0:	2300      	movs	r3, #0
 800efc2:	f04f 32ff 	mov.w	r2, #4294967295
 800efc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800efca:	f10a 0a01 	add.w	sl, sl, #1
 800efce:	9304      	str	r3, [sp, #16]
 800efd0:	9307      	str	r3, [sp, #28]
 800efd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800efd6:	931a      	str	r3, [sp, #104]	; 0x68
 800efd8:	4654      	mov	r4, sl
 800efda:	2205      	movs	r2, #5
 800efdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efe0:	4850      	ldr	r0, [pc, #320]	; (800f124 <_svfiprintf_r+0x1e8>)
 800efe2:	f7fe fc60 	bl	800d8a6 <memchr>
 800efe6:	9a04      	ldr	r2, [sp, #16]
 800efe8:	b9d8      	cbnz	r0, 800f022 <_svfiprintf_r+0xe6>
 800efea:	06d0      	lsls	r0, r2, #27
 800efec:	bf44      	itt	mi
 800efee:	2320      	movmi	r3, #32
 800eff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eff4:	0711      	lsls	r1, r2, #28
 800eff6:	bf44      	itt	mi
 800eff8:	232b      	movmi	r3, #43	; 0x2b
 800effa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800effe:	f89a 3000 	ldrb.w	r3, [sl]
 800f002:	2b2a      	cmp	r3, #42	; 0x2a
 800f004:	d015      	beq.n	800f032 <_svfiprintf_r+0xf6>
 800f006:	4654      	mov	r4, sl
 800f008:	2000      	movs	r0, #0
 800f00a:	f04f 0c0a 	mov.w	ip, #10
 800f00e:	9a07      	ldr	r2, [sp, #28]
 800f010:	4621      	mov	r1, r4
 800f012:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f016:	3b30      	subs	r3, #48	; 0x30
 800f018:	2b09      	cmp	r3, #9
 800f01a:	d94d      	bls.n	800f0b8 <_svfiprintf_r+0x17c>
 800f01c:	b1b0      	cbz	r0, 800f04c <_svfiprintf_r+0x110>
 800f01e:	9207      	str	r2, [sp, #28]
 800f020:	e014      	b.n	800f04c <_svfiprintf_r+0x110>
 800f022:	eba0 0308 	sub.w	r3, r0, r8
 800f026:	fa09 f303 	lsl.w	r3, r9, r3
 800f02a:	4313      	orrs	r3, r2
 800f02c:	46a2      	mov	sl, r4
 800f02e:	9304      	str	r3, [sp, #16]
 800f030:	e7d2      	b.n	800efd8 <_svfiprintf_r+0x9c>
 800f032:	9b03      	ldr	r3, [sp, #12]
 800f034:	1d19      	adds	r1, r3, #4
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	9103      	str	r1, [sp, #12]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	bfbb      	ittet	lt
 800f03e:	425b      	neglt	r3, r3
 800f040:	f042 0202 	orrlt.w	r2, r2, #2
 800f044:	9307      	strge	r3, [sp, #28]
 800f046:	9307      	strlt	r3, [sp, #28]
 800f048:	bfb8      	it	lt
 800f04a:	9204      	strlt	r2, [sp, #16]
 800f04c:	7823      	ldrb	r3, [r4, #0]
 800f04e:	2b2e      	cmp	r3, #46	; 0x2e
 800f050:	d10c      	bne.n	800f06c <_svfiprintf_r+0x130>
 800f052:	7863      	ldrb	r3, [r4, #1]
 800f054:	2b2a      	cmp	r3, #42	; 0x2a
 800f056:	d134      	bne.n	800f0c2 <_svfiprintf_r+0x186>
 800f058:	9b03      	ldr	r3, [sp, #12]
 800f05a:	3402      	adds	r4, #2
 800f05c:	1d1a      	adds	r2, r3, #4
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	9203      	str	r2, [sp, #12]
 800f062:	2b00      	cmp	r3, #0
 800f064:	bfb8      	it	lt
 800f066:	f04f 33ff 	movlt.w	r3, #4294967295
 800f06a:	9305      	str	r3, [sp, #20]
 800f06c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800f128 <_svfiprintf_r+0x1ec>
 800f070:	2203      	movs	r2, #3
 800f072:	4650      	mov	r0, sl
 800f074:	7821      	ldrb	r1, [r4, #0]
 800f076:	f7fe fc16 	bl	800d8a6 <memchr>
 800f07a:	b138      	cbz	r0, 800f08c <_svfiprintf_r+0x150>
 800f07c:	2240      	movs	r2, #64	; 0x40
 800f07e:	9b04      	ldr	r3, [sp, #16]
 800f080:	eba0 000a 	sub.w	r0, r0, sl
 800f084:	4082      	lsls	r2, r0
 800f086:	4313      	orrs	r3, r2
 800f088:	3401      	adds	r4, #1
 800f08a:	9304      	str	r3, [sp, #16]
 800f08c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f090:	2206      	movs	r2, #6
 800f092:	4826      	ldr	r0, [pc, #152]	; (800f12c <_svfiprintf_r+0x1f0>)
 800f094:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f098:	f7fe fc05 	bl	800d8a6 <memchr>
 800f09c:	2800      	cmp	r0, #0
 800f09e:	d038      	beq.n	800f112 <_svfiprintf_r+0x1d6>
 800f0a0:	4b23      	ldr	r3, [pc, #140]	; (800f130 <_svfiprintf_r+0x1f4>)
 800f0a2:	bb1b      	cbnz	r3, 800f0ec <_svfiprintf_r+0x1b0>
 800f0a4:	9b03      	ldr	r3, [sp, #12]
 800f0a6:	3307      	adds	r3, #7
 800f0a8:	f023 0307 	bic.w	r3, r3, #7
 800f0ac:	3308      	adds	r3, #8
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0b2:	4433      	add	r3, r6
 800f0b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f0b6:	e768      	b.n	800ef8a <_svfiprintf_r+0x4e>
 800f0b8:	460c      	mov	r4, r1
 800f0ba:	2001      	movs	r0, #1
 800f0bc:	fb0c 3202 	mla	r2, ip, r2, r3
 800f0c0:	e7a6      	b.n	800f010 <_svfiprintf_r+0xd4>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	f04f 0c0a 	mov.w	ip, #10
 800f0c8:	4619      	mov	r1, r3
 800f0ca:	3401      	adds	r4, #1
 800f0cc:	9305      	str	r3, [sp, #20]
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f0d4:	3a30      	subs	r2, #48	; 0x30
 800f0d6:	2a09      	cmp	r2, #9
 800f0d8:	d903      	bls.n	800f0e2 <_svfiprintf_r+0x1a6>
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d0c6      	beq.n	800f06c <_svfiprintf_r+0x130>
 800f0de:	9105      	str	r1, [sp, #20]
 800f0e0:	e7c4      	b.n	800f06c <_svfiprintf_r+0x130>
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	fb0c 2101 	mla	r1, ip, r1, r2
 800f0ea:	e7f0      	b.n	800f0ce <_svfiprintf_r+0x192>
 800f0ec:	ab03      	add	r3, sp, #12
 800f0ee:	9300      	str	r3, [sp, #0]
 800f0f0:	462a      	mov	r2, r5
 800f0f2:	4638      	mov	r0, r7
 800f0f4:	4b0f      	ldr	r3, [pc, #60]	; (800f134 <_svfiprintf_r+0x1f8>)
 800f0f6:	a904      	add	r1, sp, #16
 800f0f8:	f7fd fe6e 	bl	800cdd8 <_printf_float>
 800f0fc:	1c42      	adds	r2, r0, #1
 800f0fe:	4606      	mov	r6, r0
 800f100:	d1d6      	bne.n	800f0b0 <_svfiprintf_r+0x174>
 800f102:	89ab      	ldrh	r3, [r5, #12]
 800f104:	065b      	lsls	r3, r3, #25
 800f106:	f53f af2d 	bmi.w	800ef64 <_svfiprintf_r+0x28>
 800f10a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f10c:	b01d      	add	sp, #116	; 0x74
 800f10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f112:	ab03      	add	r3, sp, #12
 800f114:	9300      	str	r3, [sp, #0]
 800f116:	462a      	mov	r2, r5
 800f118:	4638      	mov	r0, r7
 800f11a:	4b06      	ldr	r3, [pc, #24]	; (800f134 <_svfiprintf_r+0x1f8>)
 800f11c:	a904      	add	r1, sp, #16
 800f11e:	f7fe f8fb 	bl	800d318 <_printf_i>
 800f122:	e7eb      	b.n	800f0fc <_svfiprintf_r+0x1c0>
 800f124:	0800fc8c 	.word	0x0800fc8c
 800f128:	0800fc92 	.word	0x0800fc92
 800f12c:	0800fc96 	.word	0x0800fc96
 800f130:	0800cdd9 	.word	0x0800cdd9
 800f134:	0800ee89 	.word	0x0800ee89

0800f138 <__sflush_r>:
 800f138:	898a      	ldrh	r2, [r1, #12]
 800f13a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f13c:	4605      	mov	r5, r0
 800f13e:	0710      	lsls	r0, r2, #28
 800f140:	460c      	mov	r4, r1
 800f142:	d457      	bmi.n	800f1f4 <__sflush_r+0xbc>
 800f144:	684b      	ldr	r3, [r1, #4]
 800f146:	2b00      	cmp	r3, #0
 800f148:	dc04      	bgt.n	800f154 <__sflush_r+0x1c>
 800f14a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	dc01      	bgt.n	800f154 <__sflush_r+0x1c>
 800f150:	2000      	movs	r0, #0
 800f152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f154:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f156:	2e00      	cmp	r6, #0
 800f158:	d0fa      	beq.n	800f150 <__sflush_r+0x18>
 800f15a:	2300      	movs	r3, #0
 800f15c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f160:	682f      	ldr	r7, [r5, #0]
 800f162:	6a21      	ldr	r1, [r4, #32]
 800f164:	602b      	str	r3, [r5, #0]
 800f166:	d032      	beq.n	800f1ce <__sflush_r+0x96>
 800f168:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f16a:	89a3      	ldrh	r3, [r4, #12]
 800f16c:	075a      	lsls	r2, r3, #29
 800f16e:	d505      	bpl.n	800f17c <__sflush_r+0x44>
 800f170:	6863      	ldr	r3, [r4, #4]
 800f172:	1ac0      	subs	r0, r0, r3
 800f174:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f176:	b10b      	cbz	r3, 800f17c <__sflush_r+0x44>
 800f178:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f17a:	1ac0      	subs	r0, r0, r3
 800f17c:	2300      	movs	r3, #0
 800f17e:	4602      	mov	r2, r0
 800f180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f182:	4628      	mov	r0, r5
 800f184:	6a21      	ldr	r1, [r4, #32]
 800f186:	47b0      	blx	r6
 800f188:	1c43      	adds	r3, r0, #1
 800f18a:	89a3      	ldrh	r3, [r4, #12]
 800f18c:	d106      	bne.n	800f19c <__sflush_r+0x64>
 800f18e:	6829      	ldr	r1, [r5, #0]
 800f190:	291d      	cmp	r1, #29
 800f192:	d82b      	bhi.n	800f1ec <__sflush_r+0xb4>
 800f194:	4a28      	ldr	r2, [pc, #160]	; (800f238 <__sflush_r+0x100>)
 800f196:	410a      	asrs	r2, r1
 800f198:	07d6      	lsls	r6, r2, #31
 800f19a:	d427      	bmi.n	800f1ec <__sflush_r+0xb4>
 800f19c:	2200      	movs	r2, #0
 800f19e:	6062      	str	r2, [r4, #4]
 800f1a0:	6922      	ldr	r2, [r4, #16]
 800f1a2:	04d9      	lsls	r1, r3, #19
 800f1a4:	6022      	str	r2, [r4, #0]
 800f1a6:	d504      	bpl.n	800f1b2 <__sflush_r+0x7a>
 800f1a8:	1c42      	adds	r2, r0, #1
 800f1aa:	d101      	bne.n	800f1b0 <__sflush_r+0x78>
 800f1ac:	682b      	ldr	r3, [r5, #0]
 800f1ae:	b903      	cbnz	r3, 800f1b2 <__sflush_r+0x7a>
 800f1b0:	6560      	str	r0, [r4, #84]	; 0x54
 800f1b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1b4:	602f      	str	r7, [r5, #0]
 800f1b6:	2900      	cmp	r1, #0
 800f1b8:	d0ca      	beq.n	800f150 <__sflush_r+0x18>
 800f1ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1be:	4299      	cmp	r1, r3
 800f1c0:	d002      	beq.n	800f1c8 <__sflush_r+0x90>
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f7ff f9ec 	bl	800e5a0 <_free_r>
 800f1c8:	2000      	movs	r0, #0
 800f1ca:	6360      	str	r0, [r4, #52]	; 0x34
 800f1cc:	e7c1      	b.n	800f152 <__sflush_r+0x1a>
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b0      	blx	r6
 800f1d4:	1c41      	adds	r1, r0, #1
 800f1d6:	d1c8      	bne.n	800f16a <__sflush_r+0x32>
 800f1d8:	682b      	ldr	r3, [r5, #0]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d0c5      	beq.n	800f16a <__sflush_r+0x32>
 800f1de:	2b1d      	cmp	r3, #29
 800f1e0:	d001      	beq.n	800f1e6 <__sflush_r+0xae>
 800f1e2:	2b16      	cmp	r3, #22
 800f1e4:	d101      	bne.n	800f1ea <__sflush_r+0xb2>
 800f1e6:	602f      	str	r7, [r5, #0]
 800f1e8:	e7b2      	b.n	800f150 <__sflush_r+0x18>
 800f1ea:	89a3      	ldrh	r3, [r4, #12]
 800f1ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1f0:	81a3      	strh	r3, [r4, #12]
 800f1f2:	e7ae      	b.n	800f152 <__sflush_r+0x1a>
 800f1f4:	690f      	ldr	r7, [r1, #16]
 800f1f6:	2f00      	cmp	r7, #0
 800f1f8:	d0aa      	beq.n	800f150 <__sflush_r+0x18>
 800f1fa:	0793      	lsls	r3, r2, #30
 800f1fc:	bf18      	it	ne
 800f1fe:	2300      	movne	r3, #0
 800f200:	680e      	ldr	r6, [r1, #0]
 800f202:	bf08      	it	eq
 800f204:	694b      	ldreq	r3, [r1, #20]
 800f206:	1bf6      	subs	r6, r6, r7
 800f208:	600f      	str	r7, [r1, #0]
 800f20a:	608b      	str	r3, [r1, #8]
 800f20c:	2e00      	cmp	r6, #0
 800f20e:	dd9f      	ble.n	800f150 <__sflush_r+0x18>
 800f210:	4633      	mov	r3, r6
 800f212:	463a      	mov	r2, r7
 800f214:	4628      	mov	r0, r5
 800f216:	6a21      	ldr	r1, [r4, #32]
 800f218:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800f21c:	47e0      	blx	ip
 800f21e:	2800      	cmp	r0, #0
 800f220:	dc06      	bgt.n	800f230 <__sflush_r+0xf8>
 800f222:	89a3      	ldrh	r3, [r4, #12]
 800f224:	f04f 30ff 	mov.w	r0, #4294967295
 800f228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f22c:	81a3      	strh	r3, [r4, #12]
 800f22e:	e790      	b.n	800f152 <__sflush_r+0x1a>
 800f230:	4407      	add	r7, r0
 800f232:	1a36      	subs	r6, r6, r0
 800f234:	e7ea      	b.n	800f20c <__sflush_r+0xd4>
 800f236:	bf00      	nop
 800f238:	dfbffffe 	.word	0xdfbffffe

0800f23c <_fflush_r>:
 800f23c:	b538      	push	{r3, r4, r5, lr}
 800f23e:	690b      	ldr	r3, [r1, #16]
 800f240:	4605      	mov	r5, r0
 800f242:	460c      	mov	r4, r1
 800f244:	b913      	cbnz	r3, 800f24c <_fflush_r+0x10>
 800f246:	2500      	movs	r5, #0
 800f248:	4628      	mov	r0, r5
 800f24a:	bd38      	pop	{r3, r4, r5, pc}
 800f24c:	b118      	cbz	r0, 800f256 <_fflush_r+0x1a>
 800f24e:	6a03      	ldr	r3, [r0, #32]
 800f250:	b90b      	cbnz	r3, 800f256 <_fflush_r+0x1a>
 800f252:	f7fe fa0f 	bl	800d674 <__sinit>
 800f256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d0f3      	beq.n	800f246 <_fflush_r+0xa>
 800f25e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f260:	07d0      	lsls	r0, r2, #31
 800f262:	d404      	bmi.n	800f26e <_fflush_r+0x32>
 800f264:	0599      	lsls	r1, r3, #22
 800f266:	d402      	bmi.n	800f26e <_fflush_r+0x32>
 800f268:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f26a:	f7fe fb1a 	bl	800d8a2 <__retarget_lock_acquire_recursive>
 800f26e:	4628      	mov	r0, r5
 800f270:	4621      	mov	r1, r4
 800f272:	f7ff ff61 	bl	800f138 <__sflush_r>
 800f276:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f278:	4605      	mov	r5, r0
 800f27a:	07da      	lsls	r2, r3, #31
 800f27c:	d4e4      	bmi.n	800f248 <_fflush_r+0xc>
 800f27e:	89a3      	ldrh	r3, [r4, #12]
 800f280:	059b      	lsls	r3, r3, #22
 800f282:	d4e1      	bmi.n	800f248 <_fflush_r+0xc>
 800f284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f286:	f7fe fb0d 	bl	800d8a4 <__retarget_lock_release_recursive>
 800f28a:	e7dd      	b.n	800f248 <_fflush_r+0xc>

0800f28c <memmove>:
 800f28c:	4288      	cmp	r0, r1
 800f28e:	b510      	push	{r4, lr}
 800f290:	eb01 0402 	add.w	r4, r1, r2
 800f294:	d902      	bls.n	800f29c <memmove+0x10>
 800f296:	4284      	cmp	r4, r0
 800f298:	4623      	mov	r3, r4
 800f29a:	d807      	bhi.n	800f2ac <memmove+0x20>
 800f29c:	1e43      	subs	r3, r0, #1
 800f29e:	42a1      	cmp	r1, r4
 800f2a0:	d008      	beq.n	800f2b4 <memmove+0x28>
 800f2a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2aa:	e7f8      	b.n	800f29e <memmove+0x12>
 800f2ac:	4601      	mov	r1, r0
 800f2ae:	4402      	add	r2, r0
 800f2b0:	428a      	cmp	r2, r1
 800f2b2:	d100      	bne.n	800f2b6 <memmove+0x2a>
 800f2b4:	bd10      	pop	{r4, pc}
 800f2b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2be:	e7f7      	b.n	800f2b0 <memmove+0x24>

0800f2c0 <_sbrk_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	4d05      	ldr	r5, [pc, #20]	; (800f2dc <_sbrk_r+0x1c>)
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	602b      	str	r3, [r5, #0]
 800f2cc:	f7f2 ff12 	bl	80020f4 <_sbrk>
 800f2d0:	1c43      	adds	r3, r0, #1
 800f2d2:	d102      	bne.n	800f2da <_sbrk_r+0x1a>
 800f2d4:	682b      	ldr	r3, [r5, #0]
 800f2d6:	b103      	cbz	r3, 800f2da <_sbrk_r+0x1a>
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	bd38      	pop	{r3, r4, r5, pc}
 800f2dc:	200008c0 	.word	0x200008c0

0800f2e0 <memcpy>:
 800f2e0:	440a      	add	r2, r1
 800f2e2:	4291      	cmp	r1, r2
 800f2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800f2e8:	d100      	bne.n	800f2ec <memcpy+0xc>
 800f2ea:	4770      	bx	lr
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2f2:	4291      	cmp	r1, r2
 800f2f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f2f8:	d1f9      	bne.n	800f2ee <memcpy+0xe>
 800f2fa:	bd10      	pop	{r4, pc}

0800f2fc <__assert_func>:
 800f2fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f2fe:	4614      	mov	r4, r2
 800f300:	461a      	mov	r2, r3
 800f302:	4b09      	ldr	r3, [pc, #36]	; (800f328 <__assert_func+0x2c>)
 800f304:	4605      	mov	r5, r0
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68d8      	ldr	r0, [r3, #12]
 800f30a:	b14c      	cbz	r4, 800f320 <__assert_func+0x24>
 800f30c:	4b07      	ldr	r3, [pc, #28]	; (800f32c <__assert_func+0x30>)
 800f30e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f312:	9100      	str	r1, [sp, #0]
 800f314:	462b      	mov	r3, r5
 800f316:	4906      	ldr	r1, [pc, #24]	; (800f330 <__assert_func+0x34>)
 800f318:	f000 f870 	bl	800f3fc <fiprintf>
 800f31c:	f000 f880 	bl	800f420 <abort>
 800f320:	4b04      	ldr	r3, [pc, #16]	; (800f334 <__assert_func+0x38>)
 800f322:	461c      	mov	r4, r3
 800f324:	e7f3      	b.n	800f30e <__assert_func+0x12>
 800f326:	bf00      	nop
 800f328:	20000078 	.word	0x20000078
 800f32c:	0800fca7 	.word	0x0800fca7
 800f330:	0800fcb4 	.word	0x0800fcb4
 800f334:	0800fce2 	.word	0x0800fce2

0800f338 <_calloc_r>:
 800f338:	b570      	push	{r4, r5, r6, lr}
 800f33a:	fba1 5402 	umull	r5, r4, r1, r2
 800f33e:	b934      	cbnz	r4, 800f34e <_calloc_r+0x16>
 800f340:	4629      	mov	r1, r5
 800f342:	f7ff f99d 	bl	800e680 <_malloc_r>
 800f346:	4606      	mov	r6, r0
 800f348:	b928      	cbnz	r0, 800f356 <_calloc_r+0x1e>
 800f34a:	4630      	mov	r0, r6
 800f34c:	bd70      	pop	{r4, r5, r6, pc}
 800f34e:	220c      	movs	r2, #12
 800f350:	2600      	movs	r6, #0
 800f352:	6002      	str	r2, [r0, #0]
 800f354:	e7f9      	b.n	800f34a <_calloc_r+0x12>
 800f356:	462a      	mov	r2, r5
 800f358:	4621      	mov	r1, r4
 800f35a:	f7fe fa24 	bl	800d7a6 <memset>
 800f35e:	e7f4      	b.n	800f34a <_calloc_r+0x12>

0800f360 <__ascii_mbtowc>:
 800f360:	b082      	sub	sp, #8
 800f362:	b901      	cbnz	r1, 800f366 <__ascii_mbtowc+0x6>
 800f364:	a901      	add	r1, sp, #4
 800f366:	b142      	cbz	r2, 800f37a <__ascii_mbtowc+0x1a>
 800f368:	b14b      	cbz	r3, 800f37e <__ascii_mbtowc+0x1e>
 800f36a:	7813      	ldrb	r3, [r2, #0]
 800f36c:	600b      	str	r3, [r1, #0]
 800f36e:	7812      	ldrb	r2, [r2, #0]
 800f370:	1e10      	subs	r0, r2, #0
 800f372:	bf18      	it	ne
 800f374:	2001      	movne	r0, #1
 800f376:	b002      	add	sp, #8
 800f378:	4770      	bx	lr
 800f37a:	4610      	mov	r0, r2
 800f37c:	e7fb      	b.n	800f376 <__ascii_mbtowc+0x16>
 800f37e:	f06f 0001 	mvn.w	r0, #1
 800f382:	e7f8      	b.n	800f376 <__ascii_mbtowc+0x16>

0800f384 <_realloc_r>:
 800f384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f388:	4680      	mov	r8, r0
 800f38a:	4614      	mov	r4, r2
 800f38c:	460e      	mov	r6, r1
 800f38e:	b921      	cbnz	r1, 800f39a <_realloc_r+0x16>
 800f390:	4611      	mov	r1, r2
 800f392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f396:	f7ff b973 	b.w	800e680 <_malloc_r>
 800f39a:	b92a      	cbnz	r2, 800f3a8 <_realloc_r+0x24>
 800f39c:	f7ff f900 	bl	800e5a0 <_free_r>
 800f3a0:	4625      	mov	r5, r4
 800f3a2:	4628      	mov	r0, r5
 800f3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3a8:	f000 f841 	bl	800f42e <_malloc_usable_size_r>
 800f3ac:	4284      	cmp	r4, r0
 800f3ae:	4607      	mov	r7, r0
 800f3b0:	d802      	bhi.n	800f3b8 <_realloc_r+0x34>
 800f3b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f3b6:	d812      	bhi.n	800f3de <_realloc_r+0x5a>
 800f3b8:	4621      	mov	r1, r4
 800f3ba:	4640      	mov	r0, r8
 800f3bc:	f7ff f960 	bl	800e680 <_malloc_r>
 800f3c0:	4605      	mov	r5, r0
 800f3c2:	2800      	cmp	r0, #0
 800f3c4:	d0ed      	beq.n	800f3a2 <_realloc_r+0x1e>
 800f3c6:	42bc      	cmp	r4, r7
 800f3c8:	4622      	mov	r2, r4
 800f3ca:	4631      	mov	r1, r6
 800f3cc:	bf28      	it	cs
 800f3ce:	463a      	movcs	r2, r7
 800f3d0:	f7ff ff86 	bl	800f2e0 <memcpy>
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	f7ff f8e2 	bl	800e5a0 <_free_r>
 800f3dc:	e7e1      	b.n	800f3a2 <_realloc_r+0x1e>
 800f3de:	4635      	mov	r5, r6
 800f3e0:	e7df      	b.n	800f3a2 <_realloc_r+0x1e>

0800f3e2 <__ascii_wctomb>:
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	b141      	cbz	r1, 800f3fa <__ascii_wctomb+0x18>
 800f3e8:	2aff      	cmp	r2, #255	; 0xff
 800f3ea:	d904      	bls.n	800f3f6 <__ascii_wctomb+0x14>
 800f3ec:	228a      	movs	r2, #138	; 0x8a
 800f3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	4770      	bx	lr
 800f3f6:	2001      	movs	r0, #1
 800f3f8:	700a      	strb	r2, [r1, #0]
 800f3fa:	4770      	bx	lr

0800f3fc <fiprintf>:
 800f3fc:	b40e      	push	{r1, r2, r3}
 800f3fe:	b503      	push	{r0, r1, lr}
 800f400:	4601      	mov	r1, r0
 800f402:	ab03      	add	r3, sp, #12
 800f404:	4805      	ldr	r0, [pc, #20]	; (800f41c <fiprintf+0x20>)
 800f406:	f853 2b04 	ldr.w	r2, [r3], #4
 800f40a:	6800      	ldr	r0, [r0, #0]
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	f000 f83d 	bl	800f48c <_vfiprintf_r>
 800f412:	b002      	add	sp, #8
 800f414:	f85d eb04 	ldr.w	lr, [sp], #4
 800f418:	b003      	add	sp, #12
 800f41a:	4770      	bx	lr
 800f41c:	20000078 	.word	0x20000078

0800f420 <abort>:
 800f420:	2006      	movs	r0, #6
 800f422:	b508      	push	{r3, lr}
 800f424:	f000 fa0a 	bl	800f83c <raise>
 800f428:	2001      	movs	r0, #1
 800f42a:	f7f2 fdf0 	bl	800200e <_exit>

0800f42e <_malloc_usable_size_r>:
 800f42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f432:	1f18      	subs	r0, r3, #4
 800f434:	2b00      	cmp	r3, #0
 800f436:	bfbc      	itt	lt
 800f438:	580b      	ldrlt	r3, [r1, r0]
 800f43a:	18c0      	addlt	r0, r0, r3
 800f43c:	4770      	bx	lr

0800f43e <__sfputc_r>:
 800f43e:	6893      	ldr	r3, [r2, #8]
 800f440:	b410      	push	{r4}
 800f442:	3b01      	subs	r3, #1
 800f444:	2b00      	cmp	r3, #0
 800f446:	6093      	str	r3, [r2, #8]
 800f448:	da07      	bge.n	800f45a <__sfputc_r+0x1c>
 800f44a:	6994      	ldr	r4, [r2, #24]
 800f44c:	42a3      	cmp	r3, r4
 800f44e:	db01      	blt.n	800f454 <__sfputc_r+0x16>
 800f450:	290a      	cmp	r1, #10
 800f452:	d102      	bne.n	800f45a <__sfputc_r+0x1c>
 800f454:	bc10      	pop	{r4}
 800f456:	f000 b933 	b.w	800f6c0 <__swbuf_r>
 800f45a:	6813      	ldr	r3, [r2, #0]
 800f45c:	1c58      	adds	r0, r3, #1
 800f45e:	6010      	str	r0, [r2, #0]
 800f460:	7019      	strb	r1, [r3, #0]
 800f462:	4608      	mov	r0, r1
 800f464:	bc10      	pop	{r4}
 800f466:	4770      	bx	lr

0800f468 <__sfputs_r>:
 800f468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f46a:	4606      	mov	r6, r0
 800f46c:	460f      	mov	r7, r1
 800f46e:	4614      	mov	r4, r2
 800f470:	18d5      	adds	r5, r2, r3
 800f472:	42ac      	cmp	r4, r5
 800f474:	d101      	bne.n	800f47a <__sfputs_r+0x12>
 800f476:	2000      	movs	r0, #0
 800f478:	e007      	b.n	800f48a <__sfputs_r+0x22>
 800f47a:	463a      	mov	r2, r7
 800f47c:	4630      	mov	r0, r6
 800f47e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f482:	f7ff ffdc 	bl	800f43e <__sfputc_r>
 800f486:	1c43      	adds	r3, r0, #1
 800f488:	d1f3      	bne.n	800f472 <__sfputs_r+0xa>
 800f48a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f48c <_vfiprintf_r>:
 800f48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f490:	460d      	mov	r5, r1
 800f492:	4614      	mov	r4, r2
 800f494:	4698      	mov	r8, r3
 800f496:	4606      	mov	r6, r0
 800f498:	b09d      	sub	sp, #116	; 0x74
 800f49a:	b118      	cbz	r0, 800f4a4 <_vfiprintf_r+0x18>
 800f49c:	6a03      	ldr	r3, [r0, #32]
 800f49e:	b90b      	cbnz	r3, 800f4a4 <_vfiprintf_r+0x18>
 800f4a0:	f7fe f8e8 	bl	800d674 <__sinit>
 800f4a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4a6:	07d9      	lsls	r1, r3, #31
 800f4a8:	d405      	bmi.n	800f4b6 <_vfiprintf_r+0x2a>
 800f4aa:	89ab      	ldrh	r3, [r5, #12]
 800f4ac:	059a      	lsls	r2, r3, #22
 800f4ae:	d402      	bmi.n	800f4b6 <_vfiprintf_r+0x2a>
 800f4b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4b2:	f7fe f9f6 	bl	800d8a2 <__retarget_lock_acquire_recursive>
 800f4b6:	89ab      	ldrh	r3, [r5, #12]
 800f4b8:	071b      	lsls	r3, r3, #28
 800f4ba:	d501      	bpl.n	800f4c0 <_vfiprintf_r+0x34>
 800f4bc:	692b      	ldr	r3, [r5, #16]
 800f4be:	b99b      	cbnz	r3, 800f4e8 <_vfiprintf_r+0x5c>
 800f4c0:	4629      	mov	r1, r5
 800f4c2:	4630      	mov	r0, r6
 800f4c4:	f000 f93a 	bl	800f73c <__swsetup_r>
 800f4c8:	b170      	cbz	r0, 800f4e8 <_vfiprintf_r+0x5c>
 800f4ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f4cc:	07dc      	lsls	r4, r3, #31
 800f4ce:	d504      	bpl.n	800f4da <_vfiprintf_r+0x4e>
 800f4d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d4:	b01d      	add	sp, #116	; 0x74
 800f4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4da:	89ab      	ldrh	r3, [r5, #12]
 800f4dc:	0598      	lsls	r0, r3, #22
 800f4de:	d4f7      	bmi.n	800f4d0 <_vfiprintf_r+0x44>
 800f4e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f4e2:	f7fe f9df 	bl	800d8a4 <__retarget_lock_release_recursive>
 800f4e6:	e7f3      	b.n	800f4d0 <_vfiprintf_r+0x44>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800f4ec:	2320      	movs	r3, #32
 800f4ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4f2:	2330      	movs	r3, #48	; 0x30
 800f4f4:	f04f 0901 	mov.w	r9, #1
 800f4f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800f6ac <_vfiprintf_r+0x220>
 800f500:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f504:	4623      	mov	r3, r4
 800f506:	469a      	mov	sl, r3
 800f508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f50c:	b10a      	cbz	r2, 800f512 <_vfiprintf_r+0x86>
 800f50e:	2a25      	cmp	r2, #37	; 0x25
 800f510:	d1f9      	bne.n	800f506 <_vfiprintf_r+0x7a>
 800f512:	ebba 0b04 	subs.w	fp, sl, r4
 800f516:	d00b      	beq.n	800f530 <_vfiprintf_r+0xa4>
 800f518:	465b      	mov	r3, fp
 800f51a:	4622      	mov	r2, r4
 800f51c:	4629      	mov	r1, r5
 800f51e:	4630      	mov	r0, r6
 800f520:	f7ff ffa2 	bl	800f468 <__sfputs_r>
 800f524:	3001      	adds	r0, #1
 800f526:	f000 80a9 	beq.w	800f67c <_vfiprintf_r+0x1f0>
 800f52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f52c:	445a      	add	r2, fp
 800f52e:	9209      	str	r2, [sp, #36]	; 0x24
 800f530:	f89a 3000 	ldrb.w	r3, [sl]
 800f534:	2b00      	cmp	r3, #0
 800f536:	f000 80a1 	beq.w	800f67c <_vfiprintf_r+0x1f0>
 800f53a:	2300      	movs	r3, #0
 800f53c:	f04f 32ff 	mov.w	r2, #4294967295
 800f540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f544:	f10a 0a01 	add.w	sl, sl, #1
 800f548:	9304      	str	r3, [sp, #16]
 800f54a:	9307      	str	r3, [sp, #28]
 800f54c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f550:	931a      	str	r3, [sp, #104]	; 0x68
 800f552:	4654      	mov	r4, sl
 800f554:	2205      	movs	r2, #5
 800f556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f55a:	4854      	ldr	r0, [pc, #336]	; (800f6ac <_vfiprintf_r+0x220>)
 800f55c:	f7fe f9a3 	bl	800d8a6 <memchr>
 800f560:	9a04      	ldr	r2, [sp, #16]
 800f562:	b9d8      	cbnz	r0, 800f59c <_vfiprintf_r+0x110>
 800f564:	06d1      	lsls	r1, r2, #27
 800f566:	bf44      	itt	mi
 800f568:	2320      	movmi	r3, #32
 800f56a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f56e:	0713      	lsls	r3, r2, #28
 800f570:	bf44      	itt	mi
 800f572:	232b      	movmi	r3, #43	; 0x2b
 800f574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f578:	f89a 3000 	ldrb.w	r3, [sl]
 800f57c:	2b2a      	cmp	r3, #42	; 0x2a
 800f57e:	d015      	beq.n	800f5ac <_vfiprintf_r+0x120>
 800f580:	4654      	mov	r4, sl
 800f582:	2000      	movs	r0, #0
 800f584:	f04f 0c0a 	mov.w	ip, #10
 800f588:	9a07      	ldr	r2, [sp, #28]
 800f58a:	4621      	mov	r1, r4
 800f58c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f590:	3b30      	subs	r3, #48	; 0x30
 800f592:	2b09      	cmp	r3, #9
 800f594:	d94d      	bls.n	800f632 <_vfiprintf_r+0x1a6>
 800f596:	b1b0      	cbz	r0, 800f5c6 <_vfiprintf_r+0x13a>
 800f598:	9207      	str	r2, [sp, #28]
 800f59a:	e014      	b.n	800f5c6 <_vfiprintf_r+0x13a>
 800f59c:	eba0 0308 	sub.w	r3, r0, r8
 800f5a0:	fa09 f303 	lsl.w	r3, r9, r3
 800f5a4:	4313      	orrs	r3, r2
 800f5a6:	46a2      	mov	sl, r4
 800f5a8:	9304      	str	r3, [sp, #16]
 800f5aa:	e7d2      	b.n	800f552 <_vfiprintf_r+0xc6>
 800f5ac:	9b03      	ldr	r3, [sp, #12]
 800f5ae:	1d19      	adds	r1, r3, #4
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	9103      	str	r1, [sp, #12]
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	bfbb      	ittet	lt
 800f5b8:	425b      	neglt	r3, r3
 800f5ba:	f042 0202 	orrlt.w	r2, r2, #2
 800f5be:	9307      	strge	r3, [sp, #28]
 800f5c0:	9307      	strlt	r3, [sp, #28]
 800f5c2:	bfb8      	it	lt
 800f5c4:	9204      	strlt	r2, [sp, #16]
 800f5c6:	7823      	ldrb	r3, [r4, #0]
 800f5c8:	2b2e      	cmp	r3, #46	; 0x2e
 800f5ca:	d10c      	bne.n	800f5e6 <_vfiprintf_r+0x15a>
 800f5cc:	7863      	ldrb	r3, [r4, #1]
 800f5ce:	2b2a      	cmp	r3, #42	; 0x2a
 800f5d0:	d134      	bne.n	800f63c <_vfiprintf_r+0x1b0>
 800f5d2:	9b03      	ldr	r3, [sp, #12]
 800f5d4:	3402      	adds	r4, #2
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	9203      	str	r2, [sp, #12]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	bfb8      	it	lt
 800f5e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5e4:	9305      	str	r3, [sp, #20]
 800f5e6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f6b0 <_vfiprintf_r+0x224>
 800f5ea:	2203      	movs	r2, #3
 800f5ec:	4650      	mov	r0, sl
 800f5ee:	7821      	ldrb	r1, [r4, #0]
 800f5f0:	f7fe f959 	bl	800d8a6 <memchr>
 800f5f4:	b138      	cbz	r0, 800f606 <_vfiprintf_r+0x17a>
 800f5f6:	2240      	movs	r2, #64	; 0x40
 800f5f8:	9b04      	ldr	r3, [sp, #16]
 800f5fa:	eba0 000a 	sub.w	r0, r0, sl
 800f5fe:	4082      	lsls	r2, r0
 800f600:	4313      	orrs	r3, r2
 800f602:	3401      	adds	r4, #1
 800f604:	9304      	str	r3, [sp, #16]
 800f606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f60a:	2206      	movs	r2, #6
 800f60c:	4829      	ldr	r0, [pc, #164]	; (800f6b4 <_vfiprintf_r+0x228>)
 800f60e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f612:	f7fe f948 	bl	800d8a6 <memchr>
 800f616:	2800      	cmp	r0, #0
 800f618:	d03f      	beq.n	800f69a <_vfiprintf_r+0x20e>
 800f61a:	4b27      	ldr	r3, [pc, #156]	; (800f6b8 <_vfiprintf_r+0x22c>)
 800f61c:	bb1b      	cbnz	r3, 800f666 <_vfiprintf_r+0x1da>
 800f61e:	9b03      	ldr	r3, [sp, #12]
 800f620:	3307      	adds	r3, #7
 800f622:	f023 0307 	bic.w	r3, r3, #7
 800f626:	3308      	adds	r3, #8
 800f628:	9303      	str	r3, [sp, #12]
 800f62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f62c:	443b      	add	r3, r7
 800f62e:	9309      	str	r3, [sp, #36]	; 0x24
 800f630:	e768      	b.n	800f504 <_vfiprintf_r+0x78>
 800f632:	460c      	mov	r4, r1
 800f634:	2001      	movs	r0, #1
 800f636:	fb0c 3202 	mla	r2, ip, r2, r3
 800f63a:	e7a6      	b.n	800f58a <_vfiprintf_r+0xfe>
 800f63c:	2300      	movs	r3, #0
 800f63e:	f04f 0c0a 	mov.w	ip, #10
 800f642:	4619      	mov	r1, r3
 800f644:	3401      	adds	r4, #1
 800f646:	9305      	str	r3, [sp, #20]
 800f648:	4620      	mov	r0, r4
 800f64a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f64e:	3a30      	subs	r2, #48	; 0x30
 800f650:	2a09      	cmp	r2, #9
 800f652:	d903      	bls.n	800f65c <_vfiprintf_r+0x1d0>
 800f654:	2b00      	cmp	r3, #0
 800f656:	d0c6      	beq.n	800f5e6 <_vfiprintf_r+0x15a>
 800f658:	9105      	str	r1, [sp, #20]
 800f65a:	e7c4      	b.n	800f5e6 <_vfiprintf_r+0x15a>
 800f65c:	4604      	mov	r4, r0
 800f65e:	2301      	movs	r3, #1
 800f660:	fb0c 2101 	mla	r1, ip, r1, r2
 800f664:	e7f0      	b.n	800f648 <_vfiprintf_r+0x1bc>
 800f666:	ab03      	add	r3, sp, #12
 800f668:	9300      	str	r3, [sp, #0]
 800f66a:	462a      	mov	r2, r5
 800f66c:	4630      	mov	r0, r6
 800f66e:	4b13      	ldr	r3, [pc, #76]	; (800f6bc <_vfiprintf_r+0x230>)
 800f670:	a904      	add	r1, sp, #16
 800f672:	f7fd fbb1 	bl	800cdd8 <_printf_float>
 800f676:	4607      	mov	r7, r0
 800f678:	1c78      	adds	r0, r7, #1
 800f67a:	d1d6      	bne.n	800f62a <_vfiprintf_r+0x19e>
 800f67c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f67e:	07d9      	lsls	r1, r3, #31
 800f680:	d405      	bmi.n	800f68e <_vfiprintf_r+0x202>
 800f682:	89ab      	ldrh	r3, [r5, #12]
 800f684:	059a      	lsls	r2, r3, #22
 800f686:	d402      	bmi.n	800f68e <_vfiprintf_r+0x202>
 800f688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f68a:	f7fe f90b 	bl	800d8a4 <__retarget_lock_release_recursive>
 800f68e:	89ab      	ldrh	r3, [r5, #12]
 800f690:	065b      	lsls	r3, r3, #25
 800f692:	f53f af1d 	bmi.w	800f4d0 <_vfiprintf_r+0x44>
 800f696:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f698:	e71c      	b.n	800f4d4 <_vfiprintf_r+0x48>
 800f69a:	ab03      	add	r3, sp, #12
 800f69c:	9300      	str	r3, [sp, #0]
 800f69e:	462a      	mov	r2, r5
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	4b06      	ldr	r3, [pc, #24]	; (800f6bc <_vfiprintf_r+0x230>)
 800f6a4:	a904      	add	r1, sp, #16
 800f6a6:	f7fd fe37 	bl	800d318 <_printf_i>
 800f6aa:	e7e4      	b.n	800f676 <_vfiprintf_r+0x1ea>
 800f6ac:	0800fc8c 	.word	0x0800fc8c
 800f6b0:	0800fc92 	.word	0x0800fc92
 800f6b4:	0800fc96 	.word	0x0800fc96
 800f6b8:	0800cdd9 	.word	0x0800cdd9
 800f6bc:	0800f469 	.word	0x0800f469

0800f6c0 <__swbuf_r>:
 800f6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6c2:	460e      	mov	r6, r1
 800f6c4:	4614      	mov	r4, r2
 800f6c6:	4605      	mov	r5, r0
 800f6c8:	b118      	cbz	r0, 800f6d2 <__swbuf_r+0x12>
 800f6ca:	6a03      	ldr	r3, [r0, #32]
 800f6cc:	b90b      	cbnz	r3, 800f6d2 <__swbuf_r+0x12>
 800f6ce:	f7fd ffd1 	bl	800d674 <__sinit>
 800f6d2:	69a3      	ldr	r3, [r4, #24]
 800f6d4:	60a3      	str	r3, [r4, #8]
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	071a      	lsls	r2, r3, #28
 800f6da:	d525      	bpl.n	800f728 <__swbuf_r+0x68>
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	b31b      	cbz	r3, 800f728 <__swbuf_r+0x68>
 800f6e0:	6823      	ldr	r3, [r4, #0]
 800f6e2:	6922      	ldr	r2, [r4, #16]
 800f6e4:	b2f6      	uxtb	r6, r6
 800f6e6:	1a98      	subs	r0, r3, r2
 800f6e8:	6963      	ldr	r3, [r4, #20]
 800f6ea:	4637      	mov	r7, r6
 800f6ec:	4283      	cmp	r3, r0
 800f6ee:	dc04      	bgt.n	800f6fa <__swbuf_r+0x3a>
 800f6f0:	4621      	mov	r1, r4
 800f6f2:	4628      	mov	r0, r5
 800f6f4:	f7ff fda2 	bl	800f23c <_fflush_r>
 800f6f8:	b9e0      	cbnz	r0, 800f734 <__swbuf_r+0x74>
 800f6fa:	68a3      	ldr	r3, [r4, #8]
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	60a3      	str	r3, [r4, #8]
 800f700:	6823      	ldr	r3, [r4, #0]
 800f702:	1c5a      	adds	r2, r3, #1
 800f704:	6022      	str	r2, [r4, #0]
 800f706:	701e      	strb	r6, [r3, #0]
 800f708:	6962      	ldr	r2, [r4, #20]
 800f70a:	1c43      	adds	r3, r0, #1
 800f70c:	429a      	cmp	r2, r3
 800f70e:	d004      	beq.n	800f71a <__swbuf_r+0x5a>
 800f710:	89a3      	ldrh	r3, [r4, #12]
 800f712:	07db      	lsls	r3, r3, #31
 800f714:	d506      	bpl.n	800f724 <__swbuf_r+0x64>
 800f716:	2e0a      	cmp	r6, #10
 800f718:	d104      	bne.n	800f724 <__swbuf_r+0x64>
 800f71a:	4621      	mov	r1, r4
 800f71c:	4628      	mov	r0, r5
 800f71e:	f7ff fd8d 	bl	800f23c <_fflush_r>
 800f722:	b938      	cbnz	r0, 800f734 <__swbuf_r+0x74>
 800f724:	4638      	mov	r0, r7
 800f726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f728:	4621      	mov	r1, r4
 800f72a:	4628      	mov	r0, r5
 800f72c:	f000 f806 	bl	800f73c <__swsetup_r>
 800f730:	2800      	cmp	r0, #0
 800f732:	d0d5      	beq.n	800f6e0 <__swbuf_r+0x20>
 800f734:	f04f 37ff 	mov.w	r7, #4294967295
 800f738:	e7f4      	b.n	800f724 <__swbuf_r+0x64>
	...

0800f73c <__swsetup_r>:
 800f73c:	b538      	push	{r3, r4, r5, lr}
 800f73e:	4b2a      	ldr	r3, [pc, #168]	; (800f7e8 <__swsetup_r+0xac>)
 800f740:	4605      	mov	r5, r0
 800f742:	6818      	ldr	r0, [r3, #0]
 800f744:	460c      	mov	r4, r1
 800f746:	b118      	cbz	r0, 800f750 <__swsetup_r+0x14>
 800f748:	6a03      	ldr	r3, [r0, #32]
 800f74a:	b90b      	cbnz	r3, 800f750 <__swsetup_r+0x14>
 800f74c:	f7fd ff92 	bl	800d674 <__sinit>
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f756:	0718      	lsls	r0, r3, #28
 800f758:	d422      	bmi.n	800f7a0 <__swsetup_r+0x64>
 800f75a:	06d9      	lsls	r1, r3, #27
 800f75c:	d407      	bmi.n	800f76e <__swsetup_r+0x32>
 800f75e:	2309      	movs	r3, #9
 800f760:	602b      	str	r3, [r5, #0]
 800f762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f766:	f04f 30ff 	mov.w	r0, #4294967295
 800f76a:	81a3      	strh	r3, [r4, #12]
 800f76c:	e034      	b.n	800f7d8 <__swsetup_r+0x9c>
 800f76e:	0758      	lsls	r0, r3, #29
 800f770:	d512      	bpl.n	800f798 <__swsetup_r+0x5c>
 800f772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f774:	b141      	cbz	r1, 800f788 <__swsetup_r+0x4c>
 800f776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f77a:	4299      	cmp	r1, r3
 800f77c:	d002      	beq.n	800f784 <__swsetup_r+0x48>
 800f77e:	4628      	mov	r0, r5
 800f780:	f7fe ff0e 	bl	800e5a0 <_free_r>
 800f784:	2300      	movs	r3, #0
 800f786:	6363      	str	r3, [r4, #52]	; 0x34
 800f788:	89a3      	ldrh	r3, [r4, #12]
 800f78a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f78e:	81a3      	strh	r3, [r4, #12]
 800f790:	2300      	movs	r3, #0
 800f792:	6063      	str	r3, [r4, #4]
 800f794:	6923      	ldr	r3, [r4, #16]
 800f796:	6023      	str	r3, [r4, #0]
 800f798:	89a3      	ldrh	r3, [r4, #12]
 800f79a:	f043 0308 	orr.w	r3, r3, #8
 800f79e:	81a3      	strh	r3, [r4, #12]
 800f7a0:	6923      	ldr	r3, [r4, #16]
 800f7a2:	b94b      	cbnz	r3, 800f7b8 <__swsetup_r+0x7c>
 800f7a4:	89a3      	ldrh	r3, [r4, #12]
 800f7a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f7aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7ae:	d003      	beq.n	800f7b8 <__swsetup_r+0x7c>
 800f7b0:	4621      	mov	r1, r4
 800f7b2:	4628      	mov	r0, r5
 800f7b4:	f000 f883 	bl	800f8be <__smakebuf_r>
 800f7b8:	89a0      	ldrh	r0, [r4, #12]
 800f7ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7be:	f010 0301 	ands.w	r3, r0, #1
 800f7c2:	d00a      	beq.n	800f7da <__swsetup_r+0x9e>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	60a3      	str	r3, [r4, #8]
 800f7c8:	6963      	ldr	r3, [r4, #20]
 800f7ca:	425b      	negs	r3, r3
 800f7cc:	61a3      	str	r3, [r4, #24]
 800f7ce:	6923      	ldr	r3, [r4, #16]
 800f7d0:	b943      	cbnz	r3, 800f7e4 <__swsetup_r+0xa8>
 800f7d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f7d6:	d1c4      	bne.n	800f762 <__swsetup_r+0x26>
 800f7d8:	bd38      	pop	{r3, r4, r5, pc}
 800f7da:	0781      	lsls	r1, r0, #30
 800f7dc:	bf58      	it	pl
 800f7de:	6963      	ldrpl	r3, [r4, #20]
 800f7e0:	60a3      	str	r3, [r4, #8]
 800f7e2:	e7f4      	b.n	800f7ce <__swsetup_r+0x92>
 800f7e4:	2000      	movs	r0, #0
 800f7e6:	e7f7      	b.n	800f7d8 <__swsetup_r+0x9c>
 800f7e8:	20000078 	.word	0x20000078

0800f7ec <_raise_r>:
 800f7ec:	291f      	cmp	r1, #31
 800f7ee:	b538      	push	{r3, r4, r5, lr}
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	d904      	bls.n	800f800 <_raise_r+0x14>
 800f7f6:	2316      	movs	r3, #22
 800f7f8:	6003      	str	r3, [r0, #0]
 800f7fa:	f04f 30ff 	mov.w	r0, #4294967295
 800f7fe:	bd38      	pop	{r3, r4, r5, pc}
 800f800:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800f802:	b112      	cbz	r2, 800f80a <_raise_r+0x1e>
 800f804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f808:	b94b      	cbnz	r3, 800f81e <_raise_r+0x32>
 800f80a:	4620      	mov	r0, r4
 800f80c:	f000 f830 	bl	800f870 <_getpid_r>
 800f810:	462a      	mov	r2, r5
 800f812:	4601      	mov	r1, r0
 800f814:	4620      	mov	r0, r4
 800f816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f81a:	f000 b817 	b.w	800f84c <_kill_r>
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d00a      	beq.n	800f838 <_raise_r+0x4c>
 800f822:	1c59      	adds	r1, r3, #1
 800f824:	d103      	bne.n	800f82e <_raise_r+0x42>
 800f826:	2316      	movs	r3, #22
 800f828:	6003      	str	r3, [r0, #0]
 800f82a:	2001      	movs	r0, #1
 800f82c:	e7e7      	b.n	800f7fe <_raise_r+0x12>
 800f82e:	2400      	movs	r4, #0
 800f830:	4628      	mov	r0, r5
 800f832:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f836:	4798      	blx	r3
 800f838:	2000      	movs	r0, #0
 800f83a:	e7e0      	b.n	800f7fe <_raise_r+0x12>

0800f83c <raise>:
 800f83c:	4b02      	ldr	r3, [pc, #8]	; (800f848 <raise+0xc>)
 800f83e:	4601      	mov	r1, r0
 800f840:	6818      	ldr	r0, [r3, #0]
 800f842:	f7ff bfd3 	b.w	800f7ec <_raise_r>
 800f846:	bf00      	nop
 800f848:	20000078 	.word	0x20000078

0800f84c <_kill_r>:
 800f84c:	b538      	push	{r3, r4, r5, lr}
 800f84e:	2300      	movs	r3, #0
 800f850:	4d06      	ldr	r5, [pc, #24]	; (800f86c <_kill_r+0x20>)
 800f852:	4604      	mov	r4, r0
 800f854:	4608      	mov	r0, r1
 800f856:	4611      	mov	r1, r2
 800f858:	602b      	str	r3, [r5, #0]
 800f85a:	f7f2 fbc8 	bl	8001fee <_kill>
 800f85e:	1c43      	adds	r3, r0, #1
 800f860:	d102      	bne.n	800f868 <_kill_r+0x1c>
 800f862:	682b      	ldr	r3, [r5, #0]
 800f864:	b103      	cbz	r3, 800f868 <_kill_r+0x1c>
 800f866:	6023      	str	r3, [r4, #0]
 800f868:	bd38      	pop	{r3, r4, r5, pc}
 800f86a:	bf00      	nop
 800f86c:	200008c0 	.word	0x200008c0

0800f870 <_getpid_r>:
 800f870:	f7f2 bbb6 	b.w	8001fe0 <_getpid>

0800f874 <__swhatbuf_r>:
 800f874:	b570      	push	{r4, r5, r6, lr}
 800f876:	460c      	mov	r4, r1
 800f878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f87c:	4615      	mov	r5, r2
 800f87e:	2900      	cmp	r1, #0
 800f880:	461e      	mov	r6, r3
 800f882:	b096      	sub	sp, #88	; 0x58
 800f884:	da0c      	bge.n	800f8a0 <__swhatbuf_r+0x2c>
 800f886:	89a3      	ldrh	r3, [r4, #12]
 800f888:	2100      	movs	r1, #0
 800f88a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f88e:	bf0c      	ite	eq
 800f890:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f894:	2340      	movne	r3, #64	; 0x40
 800f896:	2000      	movs	r0, #0
 800f898:	6031      	str	r1, [r6, #0]
 800f89a:	602b      	str	r3, [r5, #0]
 800f89c:	b016      	add	sp, #88	; 0x58
 800f89e:	bd70      	pop	{r4, r5, r6, pc}
 800f8a0:	466a      	mov	r2, sp
 800f8a2:	f000 f849 	bl	800f938 <_fstat_r>
 800f8a6:	2800      	cmp	r0, #0
 800f8a8:	dbed      	blt.n	800f886 <__swhatbuf_r+0x12>
 800f8aa:	9901      	ldr	r1, [sp, #4]
 800f8ac:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f8b0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f8b4:	4259      	negs	r1, r3
 800f8b6:	4159      	adcs	r1, r3
 800f8b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f8bc:	e7eb      	b.n	800f896 <__swhatbuf_r+0x22>

0800f8be <__smakebuf_r>:
 800f8be:	898b      	ldrh	r3, [r1, #12]
 800f8c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f8c2:	079d      	lsls	r5, r3, #30
 800f8c4:	4606      	mov	r6, r0
 800f8c6:	460c      	mov	r4, r1
 800f8c8:	d507      	bpl.n	800f8da <__smakebuf_r+0x1c>
 800f8ca:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f8ce:	6023      	str	r3, [r4, #0]
 800f8d0:	6123      	str	r3, [r4, #16]
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	6163      	str	r3, [r4, #20]
 800f8d6:	b002      	add	sp, #8
 800f8d8:	bd70      	pop	{r4, r5, r6, pc}
 800f8da:	466a      	mov	r2, sp
 800f8dc:	ab01      	add	r3, sp, #4
 800f8de:	f7ff ffc9 	bl	800f874 <__swhatbuf_r>
 800f8e2:	9900      	ldr	r1, [sp, #0]
 800f8e4:	4605      	mov	r5, r0
 800f8e6:	4630      	mov	r0, r6
 800f8e8:	f7fe feca 	bl	800e680 <_malloc_r>
 800f8ec:	b948      	cbnz	r0, 800f902 <__smakebuf_r+0x44>
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	059a      	lsls	r2, r3, #22
 800f8f4:	d4ef      	bmi.n	800f8d6 <__smakebuf_r+0x18>
 800f8f6:	f023 0303 	bic.w	r3, r3, #3
 800f8fa:	f043 0302 	orr.w	r3, r3, #2
 800f8fe:	81a3      	strh	r3, [r4, #12]
 800f900:	e7e3      	b.n	800f8ca <__smakebuf_r+0xc>
 800f902:	89a3      	ldrh	r3, [r4, #12]
 800f904:	6020      	str	r0, [r4, #0]
 800f906:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f90a:	81a3      	strh	r3, [r4, #12]
 800f90c:	9b00      	ldr	r3, [sp, #0]
 800f90e:	6120      	str	r0, [r4, #16]
 800f910:	6163      	str	r3, [r4, #20]
 800f912:	9b01      	ldr	r3, [sp, #4]
 800f914:	b15b      	cbz	r3, 800f92e <__smakebuf_r+0x70>
 800f916:	4630      	mov	r0, r6
 800f918:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f91c:	f000 f81e 	bl	800f95c <_isatty_r>
 800f920:	b128      	cbz	r0, 800f92e <__smakebuf_r+0x70>
 800f922:	89a3      	ldrh	r3, [r4, #12]
 800f924:	f023 0303 	bic.w	r3, r3, #3
 800f928:	f043 0301 	orr.w	r3, r3, #1
 800f92c:	81a3      	strh	r3, [r4, #12]
 800f92e:	89a3      	ldrh	r3, [r4, #12]
 800f930:	431d      	orrs	r5, r3
 800f932:	81a5      	strh	r5, [r4, #12]
 800f934:	e7cf      	b.n	800f8d6 <__smakebuf_r+0x18>
	...

0800f938 <_fstat_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	2300      	movs	r3, #0
 800f93c:	4d06      	ldr	r5, [pc, #24]	; (800f958 <_fstat_r+0x20>)
 800f93e:	4604      	mov	r4, r0
 800f940:	4608      	mov	r0, r1
 800f942:	4611      	mov	r1, r2
 800f944:	602b      	str	r3, [r5, #0]
 800f946:	f7f2 fbb0 	bl	80020aa <_fstat>
 800f94a:	1c43      	adds	r3, r0, #1
 800f94c:	d102      	bne.n	800f954 <_fstat_r+0x1c>
 800f94e:	682b      	ldr	r3, [r5, #0]
 800f950:	b103      	cbz	r3, 800f954 <_fstat_r+0x1c>
 800f952:	6023      	str	r3, [r4, #0]
 800f954:	bd38      	pop	{r3, r4, r5, pc}
 800f956:	bf00      	nop
 800f958:	200008c0 	.word	0x200008c0

0800f95c <_isatty_r>:
 800f95c:	b538      	push	{r3, r4, r5, lr}
 800f95e:	2300      	movs	r3, #0
 800f960:	4d05      	ldr	r5, [pc, #20]	; (800f978 <_isatty_r+0x1c>)
 800f962:	4604      	mov	r4, r0
 800f964:	4608      	mov	r0, r1
 800f966:	602b      	str	r3, [r5, #0]
 800f968:	f7f2 fbae 	bl	80020c8 <_isatty>
 800f96c:	1c43      	adds	r3, r0, #1
 800f96e:	d102      	bne.n	800f976 <_isatty_r+0x1a>
 800f970:	682b      	ldr	r3, [r5, #0]
 800f972:	b103      	cbz	r3, 800f976 <_isatty_r+0x1a>
 800f974:	6023      	str	r3, [r4, #0]
 800f976:	bd38      	pop	{r3, r4, r5, pc}
 800f978:	200008c0 	.word	0x200008c0

0800f97c <_init>:
 800f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97e:	bf00      	nop
 800f980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f982:	bc08      	pop	{r3}
 800f984:	469e      	mov	lr, r3
 800f986:	4770      	bx	lr

0800f988 <_fini>:
 800f988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f98a:	bf00      	nop
 800f98c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f98e:	bc08      	pop	{r3}
 800f990:	469e      	mov	lr, r3
 800f992:	4770      	bx	lr
