
acc_rpm_stm32f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  0800c7c4  0800c7c4  0001c7c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c95c  0800c95c  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800c95c  0800c95c  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c95c  0800c95c  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c960  0800c960  0001c960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800c964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015e0  200001cc  0800cb30  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ac  0800cb30  000217ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201f5  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001db24  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004559  00000000  00000000  0003dd5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be8  00000000  00000000  000422b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  00043ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d13e  00000000  00000000  0004543d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022127  00000000  00000000  0006257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e0d5  00000000  00000000  000846a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b40  00000000  00000000  00122778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0012a2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001cc 	.word	0x200001cc
 8000128:	00000000 	.word	0x00000000
 800012c:	0800c7ac 	.word	0x0800c7ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001d0 	.word	0x200001d0
 8000148:	0800c7ac 	.word	0x0800c7ac

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 8000164:	4a04      	ldr	r2, [pc, #16]	; (8000178 <DS1307_Init+0x1c>)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 800016a:	2000      	movs	r0, #0
 800016c:	f000 f806 	bl	800017c <DS1307_SetClockHalt>
}
 8000170:	bf00      	nop
 8000172:	3708      	adds	r7, #8
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	200001e8 	.word	0x200001e8

0800017c <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 800017c:	b580      	push	{r7, lr}
 800017e:	b084      	sub	sp, #16
 8000180:	af00      	add	r7, sp, #0
 8000182:	4603      	mov	r3, r0
 8000184:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 8000186:	79fb      	ldrb	r3, [r7, #7]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d001      	beq.n	8000190 <DS1307_SetClockHalt+0x14>
 800018c:	2380      	movs	r3, #128	; 0x80
 800018e:	e000      	b.n	8000192 <DS1307_SetClockHalt+0x16>
 8000190:	2300      	movs	r3, #0
 8000192:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 8000194:	2000      	movs	r0, #0
 8000196:	f000 f831 	bl	80001fc <DS1307_GetRegByte>
 800019a:	4603      	mov	r3, r0
 800019c:	b25b      	sxtb	r3, r3
 800019e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001a2:	b25a      	sxtb	r2, r3
 80001a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80001a8:	4313      	orrs	r3, r2
 80001aa:	b25b      	sxtb	r3, r3
 80001ac:	b2db      	uxtb	r3, r3
 80001ae:	4619      	mov	r1, r3
 80001b0:	2000      	movs	r0, #0
 80001b2:	f000 f805 	bl	80001c0 <DS1307_SetRegByte>
}
 80001b6:	bf00      	nop
 80001b8:	3710      	adds	r7, #16
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
	...

080001c0 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b086      	sub	sp, #24
 80001c4:	af02      	add	r7, sp, #8
 80001c6:	4603      	mov	r3, r0
 80001c8:	460a      	mov	r2, r1
 80001ca:	71fb      	strb	r3, [r7, #7]
 80001cc:	4613      	mov	r3, r2
 80001ce:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 80001d0:	79fb      	ldrb	r3, [r7, #7]
 80001d2:	733b      	strb	r3, [r7, #12]
 80001d4:	79bb      	ldrb	r3, [r7, #6]
 80001d6:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <DS1307_SetRegByte+0x38>)
 80001da:	6818      	ldr	r0, [r3, #0]
 80001dc:	f107 020c 	add.w	r2, r7, #12
 80001e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	2302      	movs	r3, #2
 80001e8:	21d0      	movs	r1, #208	; 0xd0
 80001ea:	f002 fa13 	bl	8002614 <HAL_I2C_Master_Transmit>
}
 80001ee:	bf00      	nop
 80001f0:	3710      	adds	r7, #16
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	200001e8 	.word	0x200001e8

080001fc <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b086      	sub	sp, #24
 8000200:	af02      	add	r7, sp, #8
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <DS1307_GetRegByte+0x40>)
 8000208:	6818      	ldr	r0, [r3, #0]
 800020a:	1dfa      	adds	r2, r7, #7
 800020c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	2301      	movs	r3, #1
 8000214:	21d0      	movs	r1, #208	; 0xd0
 8000216:	f002 f9fd 	bl	8002614 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800021a:	4b08      	ldr	r3, [pc, #32]	; (800023c <DS1307_GetRegByte+0x40>)
 800021c:	6818      	ldr	r0, [r3, #0]
 800021e:	f107 020f 	add.w	r2, r7, #15
 8000222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000226:	9300      	str	r3, [sp, #0]
 8000228:	2301      	movs	r3, #1
 800022a:	21d0      	movs	r1, #208	; 0xd0
 800022c:	f002 faf0 	bl	8002810 <HAL_I2C_Master_Receive>
	return val;
 8000230:	7bfb      	ldrb	r3, [r7, #15]
}
 8000232:	4618      	mov	r0, r3
 8000234:	3710      	adds	r7, #16
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	200001e8 	.word	0x200001e8

08000240 <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffd9 	bl	80001fc <DS1307_GetRegByte>
 800024a:	4603      	mov	r3, r0
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f86c 	bl	800032a <DS1307_DecodeBCD>
 8000252:	4603      	mov	r3, r0
}
 8000254:	4618      	mov	r0, r3
 8000256:	bd80      	pop	{r7, pc}

08000258 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 800025c:	2005      	movs	r0, #5
 800025e:	f7ff ffcd 	bl	80001fc <DS1307_GetRegByte>
 8000262:	4603      	mov	r3, r0
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f860 	bl	800032a <DS1307_DecodeBCD>
 800026a:	4603      	mov	r3, r0
}
 800026c:	4618      	mov	r0, r3
 800026e:	bd80      	pop	{r7, pc}

08000270 <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 8000276:	2010      	movs	r0, #16
 8000278:	f7ff ffc0 	bl	80001fc <DS1307_GetRegByte>
 800027c:	4603      	mov	r3, r0
 800027e:	b29b      	uxth	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	0092      	lsls	r2, r2, #2
 8000284:	4413      	add	r3, r2
 8000286:	461a      	mov	r2, r3
 8000288:	0091      	lsls	r1, r2, #2
 800028a:	461a      	mov	r2, r3
 800028c:	460b      	mov	r3, r1
 800028e:	4413      	add	r3, r2
 8000290:	009b      	lsls	r3, r3, #2
 8000292:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 8000294:	2006      	movs	r0, #6
 8000296:	f7ff ffb1 	bl	80001fc <DS1307_GetRegByte>
 800029a:	4603      	mov	r3, r0
 800029c:	4618      	mov	r0, r3
 800029e:	f000 f844 	bl	800032a <DS1307_DecodeBCD>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	88fb      	ldrh	r3, [r7, #6]
 80002a8:	4413      	add	r3, r2
 80002aa:	b29b      	uxth	r3, r3
}
 80002ac:	4618      	mov	r0, r3
 80002ae:	3708      	adds	r7, #8
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 80002b8:	2002      	movs	r0, #2
 80002ba:	f7ff ff9f 	bl	80001fc <DS1307_GetRegByte>
 80002be:	4603      	mov	r3, r0
 80002c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f000 f82f 	bl	800032a <DS1307_DecodeBCD>
 80002cc:	4603      	mov	r3, r0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	bd80      	pop	{r7, pc}

080002d2 <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 80002d6:	2001      	movs	r0, #1
 80002d8:	f7ff ff90 	bl	80001fc <DS1307_GetRegByte>
 80002dc:	4603      	mov	r3, r0
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f823 	bl	800032a <DS1307_DecodeBCD>
 80002e4:	4603      	mov	r3, r0
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	bd80      	pop	{r7, pc}

080002ea <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 80002ea:	b580      	push	{r7, lr}
 80002ec:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 80002ee:	2000      	movs	r0, #0
 80002f0:	f7ff ff84 	bl	80001fc <DS1307_GetRegByte>
 80002f4:	4603      	mov	r3, r0
 80002f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	4618      	mov	r0, r3
 80002fe:	f000 f814 	bl	800032a <DS1307_DecodeBCD>
 8000302:	4603      	mov	r3, r0
}
 8000304:	4618      	mov	r0, r3
 8000306:	bd80      	pop	{r7, pc}

08000308 <DS1307_GetTimeZoneHour>:
/**
 * @brief Gets the stored UTC hour offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC hour offset, -12 to 12.
 */
int8_t DS1307_GetTimeZoneHour(void) {
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_HR);
 800030c:	2008      	movs	r0, #8
 800030e:	f7ff ff75 	bl	80001fc <DS1307_GetRegByte>
 8000312:	4603      	mov	r3, r0
 8000314:	b25b      	sxtb	r3, r3
}
 8000316:	4618      	mov	r0, r3
 8000318:	bd80      	pop	{r7, pc}

0800031a <DS1307_GetTimeZoneMin>:
/**
 * @brief Gets the stored UTC minute offset.
 * @note  UTC offset is not updated automatically.
 * @return UTC time zone, 0 to 59.
 */
uint8_t DS1307_GetTimeZoneMin(void) {
 800031a:	b580      	push	{r7, lr}
 800031c:	af00      	add	r7, sp, #0
	return DS1307_GetRegByte(DS1307_REG_UTC_MIN);
 800031e:	2009      	movs	r0, #9
 8000320:	f7ff ff6c 	bl	80001fc <DS1307_GetRegByte>
 8000324:	4603      	mov	r3, r0
}
 8000326:	4618      	mov	r0, r3
 8000328:	bd80      	pop	{r7, pc}

0800032a <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 800032a:	b480      	push	{r7}
 800032c:	b083      	sub	sp, #12
 800032e:	af00      	add	r7, sp, #0
 8000330:	4603      	mov	r3, r0
 8000332:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8000334:	79fb      	ldrb	r3, [r7, #7]
 8000336:	091b      	lsrs	r3, r3, #4
 8000338:	b2db      	uxtb	r3, r3
 800033a:	461a      	mov	r2, r3
 800033c:	0092      	lsls	r2, r2, #2
 800033e:	4413      	add	r3, r2
 8000340:	005b      	lsls	r3, r3, #1
 8000342:	b2da      	uxtb	r2, r3
 8000344:	79fb      	ldrb	r3, [r7, #7]
 8000346:	f003 030f 	and.w	r3, r3, #15
 800034a:	b2db      	uxtb	r3, r3
 800034c:	4413      	add	r3, r2
 800034e:	b2db      	uxtb	r3, r3
}
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <read_Config>:

		HAL_Delay(5);  // Write cycle delay (5ms)
	}
}

void read_Config() {
 800035c:	b580      	push	{r7, lr}
 800035e:	b086      	sub	sp, #24
 8000360:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR, CONFIG_ADDR, 2, &Config,
 8000362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000366:	9302      	str	r3, [sp, #8]
 8000368:	2311      	movs	r3, #17
 800036a:	9301      	str	r3, [sp, #4]
 800036c:	4b13      	ldr	r3, [pc, #76]	; (80003bc <read_Config+0x60>)
 800036e:	9300      	str	r3, [sp, #0]
 8000370:	2302      	movs	r3, #2
 8000372:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000376:	21a0      	movs	r1, #160	; 0xa0
 8000378:	4811      	ldr	r0, [pc, #68]	; (80003c0 <read_Config+0x64>)
 800037a:	f002 fcb5 	bl	8002ce8 <HAL_I2C_Mem_Read>
			sizeof(Config), 1000);
	uint8_t *x;
	x = &Config;
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <read_Config+0x60>)
 8000380:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(Config); i++) {
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]
 8000386:	e011      	b.n	80003ac <read_Config+0x50>
		sprintf(MSG, "Read %d = %d \r\n", i, *(x + i));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	683a      	ldr	r2, [r7, #0]
 800038c:	4413      	add	r3, r2
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	687a      	ldr	r2, [r7, #4]
 8000392:	490c      	ldr	r1, [pc, #48]	; (80003c4 <read_Config+0x68>)
 8000394:	480c      	ldr	r0, [pc, #48]	; (80003c8 <read_Config+0x6c>)
 8000396:	f00b fd57 	bl	800be48 <siprintf>
		HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);
 800039a:	2364      	movs	r3, #100	; 0x64
 800039c:	2264      	movs	r2, #100	; 0x64
 800039e:	490a      	ldr	r1, [pc, #40]	; (80003c8 <read_Config+0x6c>)
 80003a0:	480a      	ldr	r0, [pc, #40]	; (80003cc <read_Config+0x70>)
 80003a2:	f007 f830 	bl	8007406 <HAL_UART_Transmit>
	for (int i = 0; i < sizeof(Config); i++) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	3301      	adds	r3, #1
 80003aa:	607b      	str	r3, [r7, #4]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b10      	cmp	r3, #16
 80003b0:	d9ea      	bls.n	8000388 <read_Config+0x2c>
	}
}
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	20000424 	.word	0x20000424
 80003c0:	20000244 	.word	0x20000244
 80003c4:	0800c7c4 	.word	0x0800c7c4
 80003c8:	20000438 	.word	0x20000438
 80003cc:	20000394 	.word	0x20000394

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80003d2:	b0ab      	sub	sp, #172	; 0xac
 80003d4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 ff57 	bl	8001288 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f893 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 fb87 	bl	8000af0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80003e2:	f000 f8f1 	bl	80005c8 <MX_ADC1_Init>
  MX_CAN_Init();
 80003e6:	f000 f92d 	bl	8000644 <MX_CAN_Init>
  MX_I2C1_Init();
 80003ea:	f000 f95f 	bl	80006ac <MX_I2C1_Init>
  MX_RTC_Init();
 80003ee:	f000 f98b 	bl	8000708 <MX_RTC_Init>
  MX_SPI1_Init();
 80003f2:	f000 f9d3 	bl	800079c <MX_SPI1_Init>
  MX_TIM1_Init();
 80003f6:	f000 fa07 	bl	8000808 <MX_TIM1_Init>
  MX_TIM2_Init();
 80003fa:	f000 faa5 	bl	8000948 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80003fe:	f000 fb23 	bl	8000a48 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000402:	f000 fb4b 	bl	8000a9c <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000406:	f00b f8a9 	bl	800b55c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
//	write_Config();
	const char *DAYS_OF_WEEK[7] = { "Sunday", "Monday", "Tuesday", "Wednesday",
 800040a:	4b39      	ldr	r3, [pc, #228]	; (80004f0 <main+0x120>)
 800040c:	f107 0468 	add.w	r4, r7, #104	; 0x68
 8000410:	461d      	mov	r5, r3
 8000412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000416:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800041a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			"Thursday", "Friday", "Saturday" };
	/* Start DS1307 timing. Pass user I2C handle pointer to function. */
	DS1307_Init(&hi2c1);
 800041e:	4835      	ldr	r0, [pc, #212]	; (80004f4 <main+0x124>)
 8000420:	f7ff fe9c 	bl	800015c <DS1307_Init>
//	DS1307_SetMonth(10);
//	DS1307_SetYear(2024);
//	DS1307_SetHour(12);
//	DS1307_SetMinute(45);
//	DS1307_SetSecond(00);
	read_Config();
 8000424:	f7ff ff9a 	bl	800035c <read_Config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t date = DS1307_GetDate();
 8000428:	f7ff ff0a 	bl	8000240 <DS1307_GetDate>
 800042c:	4603      	mov	r3, r0
 800042e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
		uint8_t month = DS1307_GetMonth();
 8000432:	f7ff ff11 	bl	8000258 <DS1307_GetMonth>
 8000436:	4603      	mov	r3, r0
 8000438:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
		uint16_t year = DS1307_GetYear();
 800043c:	f7ff ff18 	bl	8000270 <DS1307_GetYear>
 8000440:	4603      	mov	r3, r0
 8000442:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
		uint8_t hour = DS1307_GetHour();
 8000446:	f7ff ff35 	bl	80002b4 <DS1307_GetHour>
 800044a:	4603      	mov	r3, r0
 800044c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
		uint8_t minute = DS1307_GetMinute();
 8000450:	f7ff ff3f 	bl	80002d2 <DS1307_GetMinute>
 8000454:	4603      	mov	r3, r0
 8000456:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
		uint8_t second = DS1307_GetSecond();
 800045a:	f7ff ff46 	bl	80002ea <DS1307_GetSecond>
 800045e:	4603      	mov	r3, r0
 8000460:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
		int8_t zone_hr = DS1307_GetTimeZoneHour();
 8000464:	f7ff ff50 	bl	8000308 <DS1307_GetTimeZoneHour>
 8000468:	4603      	mov	r3, r0
 800046a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
		uint8_t zone_min = DS1307_GetTimeZoneMin();
 800046e:	f7ff ff54 	bl	800031a <DS1307_GetTimeZoneMin>
 8000472:	4603      	mov	r3, r0
 8000474:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		char buffer[100] = { 0 };
 8000478:	2300      	movs	r3, #0
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	2260      	movs	r2, #96	; 0x60
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f00b fcff 	bl	800be88 <memset>
		sprintf(buffer,
 800048a:	f997 c088 	ldrsb.w	ip, [r7, #136]	; 0x88
 800048e:	f897 e087 	ldrb.w	lr, [r7, #135]	; 0x87
 8000492:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8000496:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800049a:	f897 108f 	ldrb.w	r1, [r7, #143]	; 0x8f
 800049e:	f897 008b 	ldrb.w	r0, [r7, #139]	; 0x8b
 80004a2:	f897 408a 	ldrb.w	r4, [r7, #138]	; 0x8a
 80004a6:	f897 5089 	ldrb.w	r5, [r7, #137]	; 0x89
 80004aa:	1d3e      	adds	r6, r7, #4
 80004ac:	9505      	str	r5, [sp, #20]
 80004ae:	9404      	str	r4, [sp, #16]
 80004b0:	9003      	str	r0, [sp, #12]
 80004b2:	9102      	str	r1, [sp, #8]
 80004b4:	9201      	str	r2, [sp, #4]
 80004b6:	9300      	str	r3, [sp, #0]
 80004b8:	4673      	mov	r3, lr
 80004ba:	4662      	mov	r2, ip
 80004bc:	490e      	ldr	r1, [pc, #56]	; (80004f8 <main+0x128>)
 80004be:	4630      	mov	r0, r6
 80004c0:	f00b fcc2 	bl	800be48 <siprintf>
				"TIMEZONE:+%02d:%02d , %04d-%02d-%02d , %02d:%02d:%02d%  \n",
				zone_hr, zone_min, year, month, date, hour, minute, second);
		/* May show warning below. Ignore and proceed. */
		HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	4618      	mov	r0, r3
 80004c8:	f7ff fe40 	bl	800014c <strlen>
 80004cc:	4603      	mov	r3, r0
 80004ce:	b29a      	uxth	r2, r3
 80004d0:	1d39      	adds	r1, r7, #4
 80004d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <main+0x12c>)
 80004d8:	f006 ff95 	bl	8007406 <HAL_UART_Transmit>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e0:	4807      	ldr	r0, [pc, #28]	; (8000500 <main+0x130>)
 80004e2:	f001 ff39 	bl	8002358 <HAL_GPIO_TogglePin>
		HAL_Delay(500);
 80004e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004ea:	f000 ff2f 	bl	800134c <HAL_Delay>
	while (1) {
 80004ee:	e79b      	b.n	8000428 <main+0x58>
 80004f0:	0800c884 	.word	0x0800c884
 80004f4:	20000244 	.word	0x20000244
 80004f8:	0800c804 	.word	0x0800c804
 80004fc:	20000394 	.word	0x20000394
 8000500:	40011000 	.word	0x40011000

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b094      	sub	sp, #80	; 0x50
 8000508:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800050e:	2228      	movs	r2, #40	; 0x28
 8000510:	2100      	movs	r1, #0
 8000512:	4618      	mov	r0, r3
 8000514:	f00b fcb8 	bl	800be88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
 8000526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000534:	2309      	movs	r3, #9
 8000536:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000538:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800053c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800053e:	2300      	movs	r3, #0
 8000540:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000552:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800055e:	4618      	mov	r0, r3
 8000560:	f005 f810 	bl	8005584 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800056a:	f000 fb51 	bl	8000c10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	f107 0314 	add.w	r3, r7, #20
 8000588:	2102      	movs	r1, #2
 800058a:	4618      	mov	r0, r3
 800058c:	f005 fa7c 	bl	8005a88 <HAL_RCC_ClockConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000596:	f000 fb3b 	bl	8000c10 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC
 800059a:	2313      	movs	r3, #19
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800059e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005a2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80005a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80005a8:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f005 fbf7 	bl	8005da4 <HAL_RCCEx_PeriphCLKConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80005bc:	f000 fb28 	bl	8000c10 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3750      	adds	r7, #80	; 0x50
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <MX_ADC1_Init+0x74>)
 80005da:	4a19      	ldr	r2, [pc, #100]	; (8000640 <MX_ADC1_Init+0x78>)
 80005dc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005de:	4b17      	ldr	r3, [pc, #92]	; (800063c <MX_ADC1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <MX_ADC1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <MX_ADC1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005f0:	4b12      	ldr	r3, [pc, #72]	; (800063c <MX_ADC1_Init+0x74>)
 80005f2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b10      	ldr	r3, [pc, #64]	; (800063c <MX_ADC1_Init+0x74>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80005fe:	4b0f      	ldr	r3, [pc, #60]	; (800063c <MX_ADC1_Init+0x74>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000604:	480d      	ldr	r0, [pc, #52]	; (800063c <MX_ADC1_Init+0x74>)
 8000606:	f000 fec5 	bl	8001394 <HAL_ADC_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000610:	f000 fafe 	bl	8000c10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000618:	2301      	movs	r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	1d3b      	adds	r3, r7, #4
 8000622:	4619      	mov	r1, r3
 8000624:	4805      	ldr	r0, [pc, #20]	; (800063c <MX_ADC1_Init+0x74>)
 8000626:	f000 ff8d 	bl	8001544 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000630:	f000 faee 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200001ec 	.word	0x200001ec
 8000640:	40012400 	.word	0x40012400

08000644 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000648:	4b16      	ldr	r3, [pc, #88]	; (80006a4 <MX_CAN_Init+0x60>)
 800064a:	4a17      	ldr	r2, [pc, #92]	; (80006a8 <MX_CAN_Init+0x64>)
 800064c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800064e:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_CAN_Init+0x60>)
 8000650:	2210      	movs	r2, #16
 8000652:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000654:	4b13      	ldr	r3, [pc, #76]	; (80006a4 <MX_CAN_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800065a:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_CAN_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000660:	4b10      	ldr	r3, [pc, #64]	; (80006a4 <MX_CAN_Init+0x60>)
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_CAN_Init+0x60>)
 8000668:	2200      	movs	r2, #0
 800066a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800066c:	4b0d      	ldr	r3, [pc, #52]	; (80006a4 <MX_CAN_Init+0x60>)
 800066e:	2200      	movs	r2, #0
 8000670:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000672:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_CAN_Init+0x60>)
 8000674:	2200      	movs	r2, #0
 8000676:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_CAN_Init+0x60>)
 800067a:	2200      	movs	r2, #0
 800067c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_CAN_Init+0x60>)
 8000680:	2200      	movs	r2, #0
 8000682:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_CAN_Init+0x60>)
 8000686:	2200      	movs	r2, #0
 8000688:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_CAN_Init+0x60>)
 800068c:	2200      	movs	r2, #0
 800068e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_CAN_Init+0x60>)
 8000692:	f001 f890 	bl	80017b6 <HAL_CAN_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800069c:	f000 fab8 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000021c 	.word	0x2000021c
 80006a8:	40006400 	.word	0x40006400

080006ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b2:	4a13      	ldr	r2, [pc, #76]	; (8000700 <MX_I2C1_Init+0x54>)
 80006b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_I2C1_Init+0x50>)
 80006b8:	4a12      	ldr	r2, [pc, #72]	; (8000704 <MX_I2C1_Init+0x58>)
 80006ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d0:	4b0a      	ldr	r3, [pc, #40]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_I2C1_Init+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006e2:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006e8:	4804      	ldr	r0, [pc, #16]	; (80006fc <MX_I2C1_Init+0x50>)
 80006ea:	f001 fe4f 	bl	800238c <HAL_I2C_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006f4:	f000 fa8c 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000244 	.word	0x20000244
 8000700:	40005400 	.word	0x40005400
 8000704:	000186a0 	.word	0x000186a0

08000708 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800070e:	1d3b      	adds	r3, r7, #4
 8000710:	2100      	movs	r1, #0
 8000712:	460a      	mov	r2, r1
 8000714:	801a      	strh	r2, [r3, #0]
 8000716:	460a      	mov	r2, r1
 8000718:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800071a:	2300      	movs	r3, #0
 800071c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <MX_RTC_Init+0x8c>)
 8000720:	4a1d      	ldr	r2, [pc, #116]	; (8000798 <MX_RTC_Init+0x90>)
 8000722:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_RTC_Init+0x8c>)
 8000726:	f04f 32ff 	mov.w	r2, #4294967295
 800072a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <MX_RTC_Init+0x8c>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_RTC_Init+0x8c>)
 8000734:	f005 fca2 	bl	800607c <HAL_RTC_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800073e:	f000 fa67 	bl	8000c10 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000742:	2300      	movs	r3, #0
 8000744:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000746:	2300      	movs	r3, #0
 8000748:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800074a:	2300      	movs	r3, #0
 800074c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2201      	movs	r2, #1
 8000752:	4619      	mov	r1, r3
 8000754:	480f      	ldr	r0, [pc, #60]	; (8000794 <MX_RTC_Init+0x8c>)
 8000756:	f005 fd1d 	bl	8006194 <HAL_RTC_SetTime>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000760:	f000 fa56 	bl	8000c10 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000764:	2301      	movs	r3, #1
 8000766:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000768:	2301      	movs	r3, #1
 800076a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x1;
 800076c:	2301      	movs	r3, #1
 800076e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x0;
 8000770:	2300      	movs	r3, #0
 8000772:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000774:	463b      	mov	r3, r7
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	4806      	ldr	r0, [pc, #24]	; (8000794 <MX_RTC_Init+0x8c>)
 800077c:	f005 fda2 	bl	80062c4 <HAL_RTC_SetDate>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000786:	f000 fa43 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000298 	.word	0x20000298
 8000798:	40002800 	.word	0x40002800

0800079c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <MX_SPI1_Init+0x68>)
 80007a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_SPI1_Init+0x64>)
 80007a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MX_SPI1_Init+0x64>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <MX_SPI1_Init+0x64>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	; (8000800 <MX_SPI1_Init+0x64>)
 80007c8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	; (8000800 <MX_SPI1_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <MX_SPI1_Init+0x64>)
 80007dc:	2200      	movs	r2, #0
 80007de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <MX_SPI1_Init+0x64>)
 80007e8:	220a      	movs	r2, #10
 80007ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_SPI1_Init+0x64>)
 80007ee:	f005 ffc9 	bl	8006784 <HAL_SPI_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f8:	f000 fa0a 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	200002ac 	.word	0x200002ac
 8000804:	40013000 	.word	0x40013000

08000808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800080e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800081c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]
 8000836:	615a      	str	r2, [r3, #20]
 8000838:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2220      	movs	r2, #32
 800083e:	2100      	movs	r1, #0
 8000840:	4618      	mov	r0, r3
 8000842:	f00b fb21 	bl	800be88 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_TIM1_Init+0x138>)
 8000848:	4a3e      	ldr	r2, [pc, #248]	; (8000944 <MX_TIM1_Init+0x13c>)
 800084a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800084c:	4b3c      	ldr	r3, [pc, #240]	; (8000940 <MX_TIM1_Init+0x138>)
 800084e:	2200      	movs	r2, #0
 8000850:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_TIM1_Init+0x138>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000858:	4b39      	ldr	r3, [pc, #228]	; (8000940 <MX_TIM1_Init+0x138>)
 800085a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800085e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000860:	4b37      	ldr	r3, [pc, #220]	; (8000940 <MX_TIM1_Init+0x138>)
 8000862:	2200      	movs	r2, #0
 8000864:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000866:	4b36      	ldr	r3, [pc, #216]	; (8000940 <MX_TIM1_Init+0x138>)
 8000868:	2200      	movs	r2, #0
 800086a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086c:	4b34      	ldr	r3, [pc, #208]	; (8000940 <MX_TIM1_Init+0x138>)
 800086e:	2200      	movs	r2, #0
 8000870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000872:	4833      	ldr	r0, [pc, #204]	; (8000940 <MX_TIM1_Init+0x138>)
 8000874:	f006 f80a 	bl	800688c <HAL_TIM_Base_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800087e:	f000 f9c7 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000888:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800088c:	4619      	mov	r1, r3
 800088e:	482c      	ldr	r0, [pc, #176]	; (8000940 <MX_TIM1_Init+0x138>)
 8000890:	f006 f966 	bl	8006b60 <HAL_TIM_ConfigClockSource>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800089a:	f000 f9b9 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089e:	4828      	ldr	r0, [pc, #160]	; (8000940 <MX_TIM1_Init+0x138>)
 80008a0:	f006 f843 	bl	800692a <HAL_TIM_PWM_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80008aa:	f000 f9b1 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80008ba:	4619      	mov	r1, r3
 80008bc:	4820      	ldr	r0, [pc, #128]	; (8000940 <MX_TIM1_Init+0x138>)
 80008be:	f006 fca3 	bl	8007208 <HAL_TIMEx_MasterConfigSynchronization>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008c8:	f000 f9a2 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008cc:	2360      	movs	r3, #96	; 0x60
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d4:	2300      	movs	r3, #0
 80008d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e0:	2300      	movs	r3, #0
 80008e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ec:	2200      	movs	r2, #0
 80008ee:	4619      	mov	r1, r3
 80008f0:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_TIM1_Init+0x138>)
 80008f2:	f006 f873 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80008fc:	f000 f988 	bl	8000c10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	; (8000940 <MX_TIM1_Init+0x138>)
 8000924:	f006 fcce 	bl	80072c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800092e:	f000 f96f 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000932:	4803      	ldr	r0, [pc, #12]	; (8000940 <MX_TIM1_Init+0x138>)
 8000934:	f000 fb24 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3758      	adds	r7, #88	; 0x58
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000304 	.word	0x20000304
 8000944:	40012c00 	.word	0x40012c00

08000948 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	; 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000978:	4b32      	ldr	r3, [pc, #200]	; (8000a44 <MX_TIM2_Init+0xfc>)
 800097a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800097e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000980:	4b30      	ldr	r3, [pc, #192]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000986:	4b2f      	ldr	r3, [pc, #188]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800098c:	4b2d      	ldr	r3, [pc, #180]	; (8000a44 <MX_TIM2_Init+0xfc>)
 800098e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000992:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000994:	4b2b      	ldr	r3, [pc, #172]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <MX_TIM2_Init+0xfc>)
 800099c:	2200      	movs	r2, #0
 800099e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009a0:	4828      	ldr	r0, [pc, #160]	; (8000a44 <MX_TIM2_Init+0xfc>)
 80009a2:	f005 ff73 	bl	800688c <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80009ac:	f000 f930 	bl	8000c10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ba:	4619      	mov	r1, r3
 80009bc:	4821      	ldr	r0, [pc, #132]	; (8000a44 <MX_TIM2_Init+0xfc>)
 80009be:	f006 f8cf 	bl	8006b60 <HAL_TIM_ConfigClockSource>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80009c8:	f000 f922 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009cc:	481d      	ldr	r0, [pc, #116]	; (8000a44 <MX_TIM2_Init+0xfc>)
 80009ce:	f005 ffac 	bl	800692a <HAL_TIM_PWM_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d8:	f000 f91a 	bl	8000c10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009e4:	f107 0320 	add.w	r3, r7, #32
 80009e8:	4619      	mov	r1, r3
 80009ea:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_TIM2_Init+0xfc>)
 80009ec:	f006 fc0c 	bl	8007208 <HAL_TIMEx_MasterConfigSynchronization>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80009f6:	f000 f90b 	bl	8000c10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009fa:	2360      	movs	r3, #96	; 0x60
 80009fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a02:	2300      	movs	r3, #0
 8000a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	2208      	movs	r2, #8
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000a12:	f005 ffe3 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000a1c:	f000 f8f8 	bl	8000c10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a20:	1d3b      	adds	r3, r7, #4
 8000a22:	220c      	movs	r2, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000a28:	f005 ffd8 	bl	80069dc <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000a32:	f000 f8ed 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <MX_TIM2_Init+0xfc>)
 8000a38:	f000 faa2 	bl	8000f80 <HAL_TIM_MspPostInit>

}
 8000a3c:	bf00      	nop
 8000a3e:	3738      	adds	r7, #56	; 0x38
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000034c 	.word	0x2000034c

08000a48 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a4e:	4a12      	ldr	r2, [pc, #72]	; (8000a98 <MX_USART1_UART_Init+0x50>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <MX_USART1_UART_Init+0x4c>)
 8000a80:	f006 fc71 	bl	8007366 <HAL_UART_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a8a:	f000 f8c1 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000394 	.word	0x20000394
 8000a98:	40013800 	.word	0x40013800

08000a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	220c      	movs	r2, #12
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f006 fc47 	bl	8007366 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f000 f897 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200003dc 	.word	0x200003dc
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b088      	sub	sp, #32
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0310 	add.w	r3, r7, #16
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b04:	4b3e      	ldr	r3, [pc, #248]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	4a3d      	ldr	r2, [pc, #244]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6193      	str	r3, [r2, #24]
 8000b10:	4b3b      	ldr	r3, [pc, #236]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1c:	4b38      	ldr	r3, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	4a37      	ldr	r2, [pc, #220]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b22:	f043 0320 	orr.w	r3, r3, #32
 8000b26:	6193      	str	r3, [r2, #24]
 8000b28:	4b35      	ldr	r3, [pc, #212]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	f003 0320 	and.w	r3, r3, #32
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b34:	4b32      	ldr	r3, [pc, #200]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	4a31      	ldr	r2, [pc, #196]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b3a:	f043 0304 	orr.w	r3, r3, #4
 8000b3e:	6193      	str	r3, [r2, #24]
 8000b40:	4b2f      	ldr	r3, [pc, #188]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a2b      	ldr	r2, [pc, #172]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b52:	f043 0308 	orr.w	r3, r3, #8
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b29      	ldr	r3, [pc, #164]	; (8000c00 <MX_GPIO_Init+0x110>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0308 	and.w	r3, r3, #8
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIGNAL_LAMP_Pin_GPIO_Port, SIGNAL_LAMP_Pin_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	4826      	ldr	r0, [pc, #152]	; (8000c04 <MX_GPIO_Init+0x114>)
 8000b6c:	f001 fbdc 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TM_CLK_Pin|TM_DIO_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	210f      	movs	r1, #15
 8000b74:	4824      	ldr	r0, [pc, #144]	; (8000c08 <MX_GPIO_Init+0x118>)
 8000b76:	f001 fbd7 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b80:	4822      	ldr	r0, [pc, #136]	; (8000c0c <MX_GPIO_Init+0x11c>)
 8000b82:	f001 fbd1 	bl	8002328 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIGNAL_LAMP_Pin_Pin */
  GPIO_InitStruct.Pin = SIGNAL_LAMP_Pin_Pin;
 8000b86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b94:	2302      	movs	r3, #2
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SIGNAL_LAMP_Pin_GPIO_Port, &GPIO_InitStruct);
 8000b98:	f107 0310 	add.w	r3, r7, #16
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4819      	ldr	r0, [pc, #100]	; (8000c04 <MX_GPIO_Init+0x114>)
 8000ba0:	f001 fa3e 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pins : TM_CLK_Pin TM_DIO_Pin PB2 PB3 */
  GPIO_InitStruct.Pin = TM_CLK_Pin|TM_DIO_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb4:	f107 0310 	add.w	r3, r7, #16
 8000bb8:	4619      	mov	r1, r3
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_GPIO_Init+0x118>)
 8000bbc:	f001 fa30 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           Bt_UP_Pin Bt_DOWN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000bc0:	f24f 0330 	movw	r3, #61488	; 0xf030
 8000bc4:	613b      	str	r3, [r7, #16]
                          |Bt_UP_Pin|Bt_DOWN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bce:	f107 0310 	add.w	r3, r7, #16
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_GPIO_Init+0x118>)
 8000bd6:	f001 fa23 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4806      	ldr	r0, [pc, #24]	; (8000c0c <MX_GPIO_Init+0x11c>)
 8000bf4:	f001 fa14 	bl	8002020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40021000 	.word	0x40021000
 8000c04:	40011000 	.word	0x40011000
 8000c08:	40010c00 	.word	0x40010c00
 8000c0c:	40010800 	.word	0x40010800

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c22:	4b15      	ldr	r3, [pc, #84]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6193      	str	r3, [r2, #24]
 8000c2e:	4b12      	ldr	r3, [pc, #72]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c3c:	69db      	ldr	r3, [r3, #28]
 8000c3e:	4a0e      	ldr	r2, [pc, #56]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c44:	61d3      	str	r3, [r2, #28]
 8000c46:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <HAL_MspInit+0x5c>)
 8000c48:	69db      	ldr	r3, [r3, #28]
 8000c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x60>)
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	4a04      	ldr	r2, [pc, #16]	; (8000c7c <HAL_MspInit+0x60>)
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	3714      	adds	r7, #20
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	40021000 	.word	0x40021000
 8000c7c:	40010000 	.word	0x40010000

08000c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a14      	ldr	r2, [pc, #80]	; (8000cec <HAL_ADC_MspInit+0x6c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d121      	bne.n	8000ce4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a12      	ldr	r2, [pc, #72]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000ca6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <HAL_ADC_MspInit+0x70>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4805      	ldr	r0, [pc, #20]	; (8000cf4 <HAL_ADC_MspInit+0x74>)
 8000ce0:	f001 f99e 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ce4:	bf00      	nop
 8000ce6:	3720      	adds	r7, #32
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40012400 	.word	0x40012400
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	40010800 	.word	0x40010800

08000cf8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a29      	ldr	r2, [pc, #164]	; (8000db8 <HAL_CAN_MspInit+0xc0>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d14b      	bne.n	8000db0 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d1a:	69db      	ldr	r3, [r3, #28]
 8000d1c:	4a27      	ldr	r2, [pc, #156]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d22:	61d3      	str	r3, [r2, #28]
 8000d24:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d26:	69db      	ldr	r3, [r3, #28]
 8000d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d36:	f043 0308 	orr.w	r3, r3, #8
 8000d3a:	6193      	str	r3, [r2, #24]
 8000d3c:	4b1f      	ldr	r3, [pc, #124]	; (8000dbc <HAL_CAN_MspInit+0xc4>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	f003 0308 	and.w	r3, r3, #8
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4818      	ldr	r0, [pc, #96]	; (8000dc0 <HAL_CAN_MspInit+0xc8>)
 8000d5e:	f001 f95f 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	4619      	mov	r1, r3
 8000d76:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <HAL_CAN_MspInit+0xc8>)
 8000d78:	f001 f952 	bl	8002020 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_CAN_MspInit+0xcc>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
 8000d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d84:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
 8000d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <HAL_CAN_MspInit+0xcc>)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000da0:	2200      	movs	r2, #0
 8000da2:	2100      	movs	r1, #0
 8000da4:	2014      	movs	r0, #20
 8000da6:	f001 f904 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000daa:	2014      	movs	r0, #20
 8000dac:	f001 f91d 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	; 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40006400 	.word	0x40006400
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010c00 	.word	0x40010c00
 8000dc4:	40010000 	.word	0x40010000

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b088      	sub	sp, #32
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <HAL_I2C_MspInit+0x70>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d123      	bne.n	8000e30 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	4a13      	ldr	r2, [pc, #76]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000dee:	f043 0308 	orr.w	r3, r3, #8
 8000df2:	6193      	str	r3, [r2, #24]
 8000df4:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e00:	23c0      	movs	r3, #192	; 0xc0
 8000e02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e04:	2312      	movs	r3, #18
 8000e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	4619      	mov	r1, r3
 8000e12:	480b      	ldr	r0, [pc, #44]	; (8000e40 <HAL_I2C_MspInit+0x78>)
 8000e14:	f001 f904 	bl	8002020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1a:	69db      	ldr	r3, [r3, #28]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e22:	61d3      	str	r3, [r2, #28]
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <HAL_I2C_MspInit+0x74>)
 8000e26:	69db      	ldr	r3, [r3, #28]
 8000e28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e2c:	60bb      	str	r3, [r7, #8]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e30:	bf00      	nop
 8000e32:	3720      	adds	r7, #32
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40005400 	.word	0x40005400
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40010c00 	.word	0x40010c00

08000e44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <HAL_RTC_MspInit+0x3c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d110      	bne.n	8000e78 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000e56:	f004 fb89 	bl	800556c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <HAL_RTC_MspInit+0x40>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	4a09      	ldr	r2, [pc, #36]	; (8000e84 <HAL_RTC_MspInit+0x40>)
 8000e60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e64:	61d3      	str	r3, [r2, #28]
 8000e66:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <HAL_RTC_MspInit+0x40>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_RTC_MspInit+0x44>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40002800 	.word	0x40002800
 8000e84:	40021000 	.word	0x40021000
 8000e88:	4242043c 	.word	0x4242043c

08000e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_SPI_MspInit+0x88>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d12f      	bne.n	8000f0c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000eb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_SPI_MspInit+0x8c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 8000edc:	23b0      	movs	r3, #176	; 0xb0
 8000ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_SPI_MspInit+0x90>)
 8000ef0:	f001 f896 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ef4:	2340      	movs	r3, #64	; 0x40
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_SPI_MspInit+0x90>)
 8000f08:	f001 f88a 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40013000 	.word	0x40013000
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800

08000f20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a12      	ldr	r2, [pc, #72]	; (8000f78 <HAL_TIM_Base_MspInit+0x58>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d10c      	bne.n	8000f4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4a11      	ldr	r2, [pc, #68]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f38:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f3c:	6193      	str	r3, [r2, #24]
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f40:	699b      	ldr	r3, [r3, #24]
 8000f42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f4a:	e010      	b.n	8000f6e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f54:	d10b      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	4a08      	ldr	r2, [pc, #32]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	61d3      	str	r3, [r2, #28]
 8000f62:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_TIM_Base_MspInit+0x5c>)
 8000f64:	69db      	ldr	r3, [r3, #28]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	40012c00 	.word	0x40012c00
 8000f7c:	40021000 	.word	0x40021000

08000f80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a28      	ldr	r2, [pc, #160]	; (800103c <HAL_TIM_MspPostInit+0xbc>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d119      	bne.n	8000fd4 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa0:	4b27      	ldr	r3, [pc, #156]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a26      	ldr	r2, [pc, #152]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fa6:	f043 0304 	orr.w	r3, r3, #4
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b24      	ldr	r3, [pc, #144]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0304 	and.w	r3, r3, #4
 8000fb4:	613b      	str	r3, [r7, #16]
 8000fb6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481d      	ldr	r0, [pc, #116]	; (8001044 <HAL_TIM_MspPostInit+0xc4>)
 8000fce:	f001 f827 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fd2:	e02f      	b.n	8001034 <HAL_TIM_MspPostInit+0xb4>
  else if(htim->Instance==TIM2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fdc:	d12a      	bne.n	8001034 <HAL_TIM_MspPostInit+0xb4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fe0:	699b      	ldr	r3, [r3, #24]
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6193      	str	r3, [r2, #24]
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <HAL_TIM_MspPostInit+0xc0>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ffa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2302      	movs	r3, #2
 8001002:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	480f      	ldr	r0, [pc, #60]	; (8001048 <HAL_TIM_MspPostInit+0xc8>)
 800100c:	f001 f808 	bl	8002020 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
 800102e:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_TIM_MspPostInit+0xcc>)
 8001030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001032:	6053      	str	r3, [r2, #4]
}
 8001034:	bf00      	nop
 8001036:	3728      	adds	r7, #40	; 0x28
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40010800 	.word	0x40010800
 8001048:	40010c00 	.word	0x40010c00
 800104c:	40010000 	.word	0x40010000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 0318 	add.w	r3, r7, #24
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a37      	ldr	r2, [pc, #220]	; (8001148 <HAL_UART_MspInit+0xf8>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d132      	bne.n	80010d6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <HAL_UART_MspInit+0xfc>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	4a35      	ldr	r2, [pc, #212]	; (800114c <HAL_UART_MspInit+0xfc>)
 8001076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800107a:	6193      	str	r3, [r2, #24]
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <HAL_UART_MspInit+0xfc>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <HAL_UART_MspInit+0xfc>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	4a2f      	ldr	r2, [pc, #188]	; (800114c <HAL_UART_MspInit+0xfc>)
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	6193      	str	r3, [r2, #24]
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_UART_MspInit+0xfc>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010aa:	2303      	movs	r3, #3
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0318 	add.w	r3, r7, #24
 80010b2:	4619      	mov	r1, r3
 80010b4:	4826      	ldr	r0, [pc, #152]	; (8001150 <HAL_UART_MspInit+0x100>)
 80010b6:	f000 ffb3 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	4619      	mov	r1, r3
 80010ce:	4820      	ldr	r0, [pc, #128]	; (8001150 <HAL_UART_MspInit+0x100>)
 80010d0:	f000 ffa6 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80010d4:	e034      	b.n	8001140 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <HAL_UART_MspInit+0x104>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d12f      	bne.n	8001140 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <HAL_UART_MspInit+0xfc>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_UART_MspInit+0xfc>)
 80010e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ea:	61d3      	str	r3, [r2, #28]
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_UART_MspInit+0xfc>)
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_UART_MspInit+0xfc>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	4a13      	ldr	r2, [pc, #76]	; (800114c <HAL_UART_MspInit+0xfc>)
 80010fe:	f043 0304 	orr.w	r3, r3, #4
 8001102:	6193      	str	r3, [r2, #24]
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <HAL_UART_MspInit+0xfc>)
 8001106:	699b      	ldr	r3, [r3, #24]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001110:	2304      	movs	r3, #4
 8001112:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	4619      	mov	r1, r3
 8001122:	480b      	ldr	r0, [pc, #44]	; (8001150 <HAL_UART_MspInit+0x100>)
 8001124:	f000 ff7c 	bl	8002020 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001128:	2308      	movs	r3, #8
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4619      	mov	r1, r3
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <HAL_UART_MspInit+0x100>)
 800113c:	f000 ff70 	bl	8002020 <HAL_GPIO_Init>
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40013800 	.word	0x40013800
 800114c:	40021000 	.word	0x40021000
 8001150:	40010800 	.word	0x40010800
 8001154:	40004400 	.word	0x40004400

08001158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800115c:	e7fe      	b.n	800115c <NMI_Handler+0x4>

0800115e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <HardFault_Handler+0x4>

08001164 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <MemManage_Handler+0x4>

0800116a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800116e:	e7fe      	b.n	800116e <BusFault_Handler+0x4>

08001170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001174:	e7fe      	b.n	8001174 <UsageFault_Handler+0x4>

08001176 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001176:	b480      	push	{r7}
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr

08001182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119e:	f000 f8b9 	bl	8001314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80011ae:	f000 fbfd 	bl	80019ac <HAL_CAN_IRQHandler>
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011b2:	4803      	ldr	r0, [pc, #12]	; (80011c0 <USB_LP_CAN1_RX0_IRQHandler+0x18>)
 80011b4:	f002 fd95 	bl	8003ce2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	2000021c 	.word	0x2000021c
 80011c0:	2000116c 	.word	0x2000116c

080011c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011cc:	4a14      	ldr	r2, [pc, #80]	; (8001220 <_sbrk+0x5c>)
 80011ce:	4b15      	ldr	r3, [pc, #84]	; (8001224 <_sbrk+0x60>)
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011d8:	4b13      	ldr	r3, [pc, #76]	; (8001228 <_sbrk+0x64>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d102      	bne.n	80011e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <_sbrk+0x64>)
 80011e2:	4a12      	ldr	r2, [pc, #72]	; (800122c <_sbrk+0x68>)
 80011e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011e6:	4b10      	ldr	r3, [pc, #64]	; (8001228 <_sbrk+0x64>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4413      	add	r3, r2
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d207      	bcs.n	8001204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011f4:	f00a fe50 	bl	800be98 <__errno>
 80011f8:	4603      	mov	r3, r0
 80011fa:	220c      	movs	r2, #12
 80011fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	e009      	b.n	8001218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001204:	4b08      	ldr	r3, [pc, #32]	; (8001228 <_sbrk+0x64>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800120a:	4b07      	ldr	r3, [pc, #28]	; (8001228 <_sbrk+0x64>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4413      	add	r3, r2
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <_sbrk+0x64>)
 8001214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001216:	68fb      	ldr	r3, [r7, #12]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20005000 	.word	0x20005000
 8001224:	00000400 	.word	0x00000400
 8001228:	2000049c 	.word	0x2000049c
 800122c:	200017b0 	.word	0x200017b0

08001230 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800123c:	f7ff fff8 	bl	8001230 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001240:	480b      	ldr	r0, [pc, #44]	; (8001270 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001242:	490c      	ldr	r1, [pc, #48]	; (8001274 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001244:	4a0c      	ldr	r2, [pc, #48]	; (8001278 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001258:	4c09      	ldr	r4, [pc, #36]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001266:	f00a fe1d 	bl	800bea4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800126a:	f7ff f8b1 	bl	80003d0 <main>
  bx lr
 800126e:	4770      	bx	lr
  ldr r0, =_sdata
 8001270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001274:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001278:	0800c964 	.word	0x0800c964
  ldr r2, =_sbss
 800127c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001280:	200017ac 	.word	0x200017ac

08001284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001284:	e7fe      	b.n	8001284 <ADC1_2_IRQHandler>
	...

08001288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <HAL_Init+0x28>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a07      	ldr	r2, [pc, #28]	; (80012b0 <HAL_Init+0x28>)
 8001292:	f043 0310 	orr.w	r3, r3, #16
 8001296:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 fe7f 	bl	8001f9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129e:	200f      	movs	r0, #15
 80012a0:	f000 f808 	bl	80012b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a4:	f7ff fcba 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40022000 	.word	0x40022000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x54>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_InitTick+0x58>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	4619      	mov	r1, r3
 80012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 fe97 	bl	8002006 <HAL_SYSTICK_Config>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e00e      	b.n	8001300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2b0f      	cmp	r3, #15
 80012e6:	d80a      	bhi.n	80012fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e8:	2200      	movs	r2, #0
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	f04f 30ff 	mov.w	r0, #4294967295
 80012f0:	f000 fe5f 	bl	8001fb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f4:	4a06      	ldr	r2, [pc, #24]	; (8001310 <HAL_InitTick+0x5c>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
 80012fc:	e000      	b.n	8001300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000000 	.word	0x20000000
 800130c:	20000008 	.word	0x20000008
 8001310:	20000004 	.word	0x20000004

08001314 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <HAL_IncTick+0x1c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	461a      	mov	r2, r3
 800131e:	4b05      	ldr	r3, [pc, #20]	; (8001334 <HAL_IncTick+0x20>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4413      	add	r3, r2
 8001324:	4a03      	ldr	r2, [pc, #12]	; (8001334 <HAL_IncTick+0x20>)
 8001326:	6013      	str	r3, [r2, #0]
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	20000008 	.word	0x20000008
 8001334:	200004a0 	.word	0x200004a0

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200004a0 	.word	0x200004a0

0800134c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001354:	f7ff fff0 	bl	8001338 <HAL_GetTick>
 8001358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001364:	d005      	beq.n	8001372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_Delay+0x44>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4413      	add	r3, r2
 8001370:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001372:	bf00      	nop
 8001374:	f7ff ffe0 	bl	8001338 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8f7      	bhi.n	8001374 <HAL_Delay+0x28>
  {
  }
}
 8001384:	bf00      	nop
 8001386:	bf00      	nop
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e0be      	b.n	8001534 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fc54 	bl	8000c80 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f9ab 	bl	8001734 <ADC_ConversionStop_Disable>
 80013de:	4603      	mov	r3, r0
 80013e0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e6:	f003 0310 	and.w	r3, r3, #16
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f040 8099 	bne.w	8001522 <HAL_ADC_Init+0x18e>
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	f040 8095 	bne.w	8001522 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001400:	f023 0302 	bic.w	r3, r3, #2
 8001404:	f043 0202 	orr.w	r2, r3, #2
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001414:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800141c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800141e:	68ba      	ldr	r2, [r7, #8]
 8001420:	4313      	orrs	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142c:	d003      	beq.n	8001436 <HAL_ADC_Init+0xa2>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d102      	bne.n	800143c <HAL_ADC_Init+0xa8>
 8001436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800143a:	e000      	b.n	800143e <HAL_ADC_Init+0xaa>
 800143c:	2300      	movs	r3, #0
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	7d1b      	ldrb	r3, [r3, #20]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d119      	bne.n	8001480 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7b1b      	ldrb	r3, [r3, #12]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d109      	bne.n	8001468 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	3b01      	subs	r3, #1
 800145a:	035a      	lsls	r2, r3, #13
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4313      	orrs	r3, r2
 8001460:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	e00b      	b.n	8001480 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146c:	f043 0220 	orr.w	r2, r3, #32
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001478:	f043 0201 	orr.w	r2, r3, #1
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <HAL_ADC_Init+0x1a8>)
 800149c:	4013      	ands	r3, r2
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	6812      	ldr	r2, [r2, #0]
 80014a2:	68b9      	ldr	r1, [r7, #8]
 80014a4:	430b      	orrs	r3, r1
 80014a6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014b0:	d003      	beq.n	80014ba <HAL_ADC_Init+0x126>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	3b01      	subs	r3, #1
 80014c0:	051b      	lsls	r3, r3, #20
 80014c2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ca:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	4b18      	ldr	r3, [pc, #96]	; (8001540 <HAL_ADC_Init+0x1ac>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d10b      	bne.n	8001500 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	f023 0303 	bic.w	r3, r3, #3
 80014f6:	f043 0201 	orr.w	r2, r3, #1
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014fe:	e018      	b.n	8001532 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f023 0312 	bic.w	r3, r3, #18
 8001508:	f043 0210 	orr.w	r2, r3, #16
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001514:	f043 0201 	orr.w	r2, r3, #1
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001520:	e007      	b.n	8001532 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f043 0210 	orr.w	r2, r3, #16
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001532:	7dfb      	ldrb	r3, [r7, #23]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	ffe1f7fd 	.word	0xffe1f7fd
 8001540:	ff1f0efe 	.word	0xff1f0efe

08001544 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155c:	2b01      	cmp	r3, #1
 800155e:	d101      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x20>
 8001560:	2302      	movs	r3, #2
 8001562:	e0dc      	b.n	800171e <HAL_ADC_ConfigChannel+0x1da>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2b06      	cmp	r3, #6
 8001572:	d81c      	bhi.n	80015ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b05      	subs	r3, #5
 8001586:	221f      	movs	r2, #31
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	4019      	ands	r1, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	3b05      	subs	r3, #5
 80015a0:	fa00 f203 	lsl.w	r2, r0, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	430a      	orrs	r2, r1
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
 80015ac:	e03c      	b.n	8001628 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b0c      	cmp	r3, #12
 80015b4:	d81c      	bhi.n	80015f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	3b23      	subs	r3, #35	; 0x23
 80015c8:	221f      	movs	r2, #31
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	4019      	ands	r1, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b23      	subs	r3, #35	; 0x23
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	631a      	str	r2, [r3, #48]	; 0x30
 80015ee:	e01b      	b.n	8001628 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	3b41      	subs	r3, #65	; 0x41
 8001602:	221f      	movs	r2, #31
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	4019      	ands	r1, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	6818      	ldr	r0, [r3, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685a      	ldr	r2, [r3, #4]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	3b41      	subs	r3, #65	; 0x41
 800161c:	fa00 f203 	lsl.w	r2, r0, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	430a      	orrs	r2, r1
 8001626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2b09      	cmp	r3, #9
 800162e:	d91c      	bls.n	800166a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68d9      	ldr	r1, [r3, #12]
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	3b1e      	subs	r3, #30
 8001642:	2207      	movs	r2, #7
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	4019      	ands	r1, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	6898      	ldr	r0, [r3, #8]
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	3b1e      	subs	r3, #30
 800165c:	fa00 f203 	lsl.w	r2, r0, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	430a      	orrs	r2, r1
 8001666:	60da      	str	r2, [r3, #12]
 8001668:	e019      	b.n	800169e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	6919      	ldr	r1, [r3, #16]
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4613      	mov	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	4413      	add	r3, r2
 800167a:	2207      	movs	r2, #7
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	4019      	ands	r1, r3
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	6898      	ldr	r0, [r3, #8]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	4613      	mov	r3, r2
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	4413      	add	r3, r2
 8001692:	fa00 f203 	lsl.w	r2, r0, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	430a      	orrs	r2, r1
 800169c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2b10      	cmp	r3, #16
 80016a4:	d003      	beq.n	80016ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80016aa:	2b11      	cmp	r3, #17
 80016ac:	d132      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <HAL_ADC_ConfigChannel+0x1e4>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d125      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d126      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80016d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2b10      	cmp	r3, #16
 80016dc:	d11a      	bne.n	8001714 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_ADC_ConfigChannel+0x1e8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <HAL_ADC_ConfigChannel+0x1ec>)
 80016e4:	fba2 2303 	umull	r2, r3, r2, r3
 80016e8:	0c9a      	lsrs	r2, r3, #18
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016f4:	e002      	b.n	80016fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3b01      	subs	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f9      	bne.n	80016f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001702:	e007      	b.n	8001714 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr
 8001728:	40012400 	.word	0x40012400
 800172c:	20000000 	.word	0x20000000
 8001730:	431bde83 	.word	0x431bde83

08001734 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b01      	cmp	r3, #1
 800174c:	d12e      	bne.n	80017ac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0201 	bic.w	r2, r2, #1
 800175c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800175e:	f7ff fdeb 	bl	8001338 <HAL_GetTick>
 8001762:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001764:	e01b      	b.n	800179e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001766:	f7ff fde7 	bl	8001338 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d914      	bls.n	800179e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b01      	cmp	r3, #1
 8001780:	d10d      	bne.n	800179e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001786:	f043 0210 	orr.w	r2, r3, #16
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	f043 0201 	orr.w	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e007      	b.n	80017ae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d0dc      	beq.n	8001766 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b084      	sub	sp, #16
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d101      	bne.n	80017c8 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0ed      	b.n	80019a4 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d102      	bne.n	80017da <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff fa8f 	bl	8000cf8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017ea:	f7ff fda5 	bl	8001338 <HAL_GetTick>
 80017ee:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80017f0:	e012      	b.n	8001818 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017f2:	f7ff fda1 	bl	8001338 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b0a      	cmp	r3, #10
 80017fe:	d90b      	bls.n	8001818 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2205      	movs	r2, #5
 8001810:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0c5      	b.n	80019a4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0301 	and.w	r3, r3, #1
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0e5      	beq.n	80017f2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0202 	bic.w	r2, r2, #2
 8001834:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001836:	f7ff fd7f 	bl	8001338 <HAL_GetTick>
 800183a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800183c:	e012      	b.n	8001864 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800183e:	f7ff fd7b 	bl	8001338 <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b0a      	cmp	r3, #10
 800184a:	d90b      	bls.n	8001864 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001850:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2205      	movs	r2, #5
 800185c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e09f      	b.n	80019a4 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1e5      	bne.n	800183e <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	7e1b      	ldrb	r3, [r3, #24]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d108      	bne.n	800188c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e007      	b.n	800189c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800189a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7e5b      	ldrb	r3, [r3, #25]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d108      	bne.n	80018b6 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e007      	b.n	80018c6 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	7e9b      	ldrb	r3, [r3, #26]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d108      	bne.n	80018e0 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f042 0220 	orr.w	r2, r2, #32
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e007      	b.n	80018f0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0220 	bic.w	r2, r2, #32
 80018ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	7edb      	ldrb	r3, [r3, #27]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d108      	bne.n	800190a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0210 	bic.w	r2, r2, #16
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e007      	b.n	800191a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f042 0210 	orr.w	r2, r2, #16
 8001918:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7f1b      	ldrb	r3, [r3, #28]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d108      	bne.n	8001934 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0208 	orr.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	e007      	b.n	8001944 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f022 0208 	bic.w	r2, r2, #8
 8001942:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f5b      	ldrb	r3, [r3, #29]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 0204 	orr.w	r2, r2, #4
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	e007      	b.n	800196e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0204 	bic.w	r2, r2, #4
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	ea42 0103 	orr.w	r1, r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	1e5a      	subs	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	691b      	ldr	r3, [r3, #16]
 80019de:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d07c      	beq.n	8001aec <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d023      	beq.n	8001a44 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2201      	movs	r2, #1
 8001a02:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f983 	bl	8001d1a <HAL_CAN_TxMailbox0CompleteCallback>
 8001a14:	e016      	b.n	8001a44 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d004      	beq.n	8001a2a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a22:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a26:	627b      	str	r3, [r7, #36]	; 0x24
 8001a28:	e00c      	b.n	8001a44 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	f003 0308 	and.w	r3, r3, #8
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e002      	b.n	8001a44 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f986 	bl	8001d50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d024      	beq.n	8001a98 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a56:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 f962 	bl	8001d2c <HAL_CAN_TxMailbox1CompleteCallback>
 8001a68:	e016      	b.n	8001a98 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d004      	beq.n	8001a7e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	e00c      	b.n	8001a98 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a90:	e002      	b.n	8001a98 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f965 	bl	8001d62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d024      	beq.n	8001aec <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aaa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f000 f941 	bl	8001d3e <HAL_CAN_TxMailbox2CompleteCallback>
 8001abc:	e016      	b.n	8001aec <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d004      	beq.n	8001ad2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad0:	e00c      	b.n	8001aec <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d004      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	e002      	b.n	8001aec <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 f944 	bl	8001d74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001aec:	6a3b      	ldr	r3, [r7, #32]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00c      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d007      	beq.n	8001b10 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2210      	movs	r2, #16
 8001b0e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d00b      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d006      	beq.n	8001b32 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2208      	movs	r2, #8
 8001b2a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f000 f933 	bl	8001d98 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d009      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d002      	beq.n	8001b50 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f91b 	bl	8001d86 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d00c      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2210      	movs	r2, #16
 8001b72:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b74:	6a3b      	ldr	r3, [r7, #32]
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00b      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	f003 0308 	and.w	r3, r3, #8
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d006      	beq.n	8001b96 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f913 	bl	8001dbc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b96:	6a3b      	ldr	r3, [r7, #32]
 8001b98:	f003 0310 	and.w	r3, r3, #16
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d002      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f8fb 	bl	8001daa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001bb4:	6a3b      	ldr	r3, [r7, #32]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d006      	beq.n	8001bd6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2210      	movs	r2, #16
 8001bce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 f8fc 	bl	8001dce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bd6:	6a3b      	ldr	r3, [r7, #32]
 8001bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2208      	movs	r2, #8
 8001bf0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f8f4 	bl	8001de0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d07b      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	f003 0304 	and.w	r3, r3, #4
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d072      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c0c:	6a3b      	ldr	r3, [r7, #32]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d008      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c28:	6a3b      	ldr	r3, [r7, #32]
 8001c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d008      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d003      	beq.n	8001c44 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3e:	f043 0302 	orr.w	r3, r3, #2
 8001c42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c44:	6a3b      	ldr	r3, [r7, #32]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d008      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	f043 0304 	orr.w	r3, r3, #4
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d043      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d03e      	beq.n	8001cf2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c7a:	2b60      	cmp	r3, #96	; 0x60
 8001c7c:	d02b      	beq.n	8001cd6 <HAL_CAN_IRQHandler+0x32a>
 8001c7e:	2b60      	cmp	r3, #96	; 0x60
 8001c80:	d82e      	bhi.n	8001ce0 <HAL_CAN_IRQHandler+0x334>
 8001c82:	2b50      	cmp	r3, #80	; 0x50
 8001c84:	d022      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x320>
 8001c86:	2b50      	cmp	r3, #80	; 0x50
 8001c88:	d82a      	bhi.n	8001ce0 <HAL_CAN_IRQHandler+0x334>
 8001c8a:	2b40      	cmp	r3, #64	; 0x40
 8001c8c:	d019      	beq.n	8001cc2 <HAL_CAN_IRQHandler+0x316>
 8001c8e:	2b40      	cmp	r3, #64	; 0x40
 8001c90:	d826      	bhi.n	8001ce0 <HAL_CAN_IRQHandler+0x334>
 8001c92:	2b30      	cmp	r3, #48	; 0x30
 8001c94:	d010      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x30c>
 8001c96:	2b30      	cmp	r3, #48	; 0x30
 8001c98:	d822      	bhi.n	8001ce0 <HAL_CAN_IRQHandler+0x334>
 8001c9a:	2b10      	cmp	r3, #16
 8001c9c:	d002      	beq.n	8001ca4 <HAL_CAN_IRQHandler+0x2f8>
 8001c9e:	2b20      	cmp	r3, #32
 8001ca0:	d005      	beq.n	8001cae <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ca2:	e01d      	b.n	8001ce0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	f043 0308 	orr.w	r3, r3, #8
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cac:	e019      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cb6:	e014      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	f043 0320 	orr.w	r3, r3, #32
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cc0:	e00f      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cca:	e00a      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cd4:	e005      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001cde:	e000      	b.n	8001ce2 <HAL_CAN_IRQHandler+0x336>
            break;
 8001ce0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cf0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 f870 	bl	8001df2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001d12:	bf00      	nop
 8001d14:	3728      	adds	r7, #40	; 0x28
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b083      	sub	sp, #12
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr

08001d74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr

08001daa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bc80      	pop	{r7}
 8001dcc:	4770      	bx	lr

08001dce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr

08001de0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr

08001df2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001df2:	b480      	push	{r7}
 8001df4:	b083      	sub	sp, #12
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4906      	ldr	r1, [pc, #24]	; (8001e9c <__NVIC_EnableIRQ+0x34>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	e000e100 	.word	0xe000e100

08001ea0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	6039      	str	r1, [r7, #0]
 8001eaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	db0a      	blt.n	8001eca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	b2da      	uxtb	r2, r3
 8001eb8:	490c      	ldr	r1, [pc, #48]	; (8001eec <__NVIC_SetPriority+0x4c>)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	0112      	lsls	r2, r2, #4
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	440b      	add	r3, r1
 8001ec4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec8:	e00a      	b.n	8001ee0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	b2da      	uxtb	r2, r3
 8001ece:	4908      	ldr	r1, [pc, #32]	; (8001ef0 <__NVIC_SetPriority+0x50>)
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	3b04      	subs	r3, #4
 8001ed8:	0112      	lsls	r2, r2, #4
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	440b      	add	r3, r1
 8001ede:	761a      	strb	r2, [r3, #24]
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	e000e100 	.word	0xe000e100
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f1c3 0307 	rsb	r3, r3, #7
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	bf28      	it	cs
 8001f12:	2304      	movcs	r3, #4
 8001f14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3304      	adds	r3, #4
 8001f1a:	2b06      	cmp	r3, #6
 8001f1c:	d902      	bls.n	8001f24 <NVIC_EncodePriority+0x30>
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3b03      	subs	r3, #3
 8001f22:	e000      	b.n	8001f26 <NVIC_EncodePriority+0x32>
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f28:	f04f 32ff 	mov.w	r2, #4294967295
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43da      	mvns	r2, r3
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	401a      	ands	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	fa01 f303 	lsl.w	r3, r1, r3
 8001f46:	43d9      	mvns	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f4c:	4313      	orrs	r3, r2
         );
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3724      	adds	r7, #36	; 0x24
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f68:	d301      	bcc.n	8001f6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e00f      	b.n	8001f8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6e:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <SysTick_Config+0x40>)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3b01      	subs	r3, #1
 8001f74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f76:	210f      	movs	r1, #15
 8001f78:	f04f 30ff 	mov.w	r0, #4294967295
 8001f7c:	f7ff ff90 	bl	8001ea0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x40>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x40>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ff2d 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b086      	sub	sp, #24
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60b9      	str	r1, [r7, #8]
 8001fbc:	607a      	str	r2, [r7, #4]
 8001fbe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc4:	f7ff ff42 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fc8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	68b9      	ldr	r1, [r7, #8]
 8001fce:	6978      	ldr	r0, [r7, #20]
 8001fd0:	f7ff ff90 	bl	8001ef4 <NVIC_EncodePriority>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff5f 	bl	8001ea0 <__NVIC_SetPriority>
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ff4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff ff35 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8001ffe:	bf00      	nop
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b082      	sub	sp, #8
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff ffa2 	bl	8001f58 <SysTick_Config>
 8002014:	4603      	mov	r3, r0
}
 8002016:	4618      	mov	r0, r3
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
	...

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b08b      	sub	sp, #44	; 0x2c
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002032:	e169      	b.n	8002308 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002034:	2201      	movs	r2, #1
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	fa02 f303 	lsl.w	r3, r2, r3
 800203c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	429a      	cmp	r2, r3
 800204e:	f040 8158 	bne.w	8002302 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4a9a      	ldr	r2, [pc, #616]	; (80022c0 <HAL_GPIO_Init+0x2a0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d05e      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 800205c:	4a98      	ldr	r2, [pc, #608]	; (80022c0 <HAL_GPIO_Init+0x2a0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d875      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002062:	4a98      	ldr	r2, [pc, #608]	; (80022c4 <HAL_GPIO_Init+0x2a4>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d058      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002068:	4a96      	ldr	r2, [pc, #600]	; (80022c4 <HAL_GPIO_Init+0x2a4>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d86f      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800206e:	4a96      	ldr	r2, [pc, #600]	; (80022c8 <HAL_GPIO_Init+0x2a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d052      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002074:	4a94      	ldr	r2, [pc, #592]	; (80022c8 <HAL_GPIO_Init+0x2a8>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d869      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800207a:	4a94      	ldr	r2, [pc, #592]	; (80022cc <HAL_GPIO_Init+0x2ac>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d04c      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 8002080:	4a92      	ldr	r2, [pc, #584]	; (80022cc <HAL_GPIO_Init+0x2ac>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d863      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002086:	4a92      	ldr	r2, [pc, #584]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d046      	beq.n	800211a <HAL_GPIO_Init+0xfa>
 800208c:	4a90      	ldr	r2, [pc, #576]	; (80022d0 <HAL_GPIO_Init+0x2b0>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d85d      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 8002092:	2b12      	cmp	r3, #18
 8002094:	d82a      	bhi.n	80020ec <HAL_GPIO_Init+0xcc>
 8002096:	2b12      	cmp	r3, #18
 8002098:	d859      	bhi.n	800214e <HAL_GPIO_Init+0x12e>
 800209a:	a201      	add	r2, pc, #4	; (adr r2, 80020a0 <HAL_GPIO_Init+0x80>)
 800209c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a0:	0800211b 	.word	0x0800211b
 80020a4:	080020f5 	.word	0x080020f5
 80020a8:	08002107 	.word	0x08002107
 80020ac:	08002149 	.word	0x08002149
 80020b0:	0800214f 	.word	0x0800214f
 80020b4:	0800214f 	.word	0x0800214f
 80020b8:	0800214f 	.word	0x0800214f
 80020bc:	0800214f 	.word	0x0800214f
 80020c0:	0800214f 	.word	0x0800214f
 80020c4:	0800214f 	.word	0x0800214f
 80020c8:	0800214f 	.word	0x0800214f
 80020cc:	0800214f 	.word	0x0800214f
 80020d0:	0800214f 	.word	0x0800214f
 80020d4:	0800214f 	.word	0x0800214f
 80020d8:	0800214f 	.word	0x0800214f
 80020dc:	0800214f 	.word	0x0800214f
 80020e0:	0800214f 	.word	0x0800214f
 80020e4:	080020fd 	.word	0x080020fd
 80020e8:	08002111 	.word	0x08002111
 80020ec:	4a79      	ldr	r2, [pc, #484]	; (80022d4 <HAL_GPIO_Init+0x2b4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d013      	beq.n	800211a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020f2:	e02c      	b.n	800214e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	623b      	str	r3, [r7, #32]
          break;
 80020fa:	e029      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	3304      	adds	r3, #4
 8002102:	623b      	str	r3, [r7, #32]
          break;
 8002104:	e024      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	3308      	adds	r3, #8
 800210c:	623b      	str	r3, [r7, #32]
          break;
 800210e:	e01f      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	330c      	adds	r3, #12
 8002116:	623b      	str	r3, [r7, #32]
          break;
 8002118:	e01a      	b.n	8002150 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d102      	bne.n	8002128 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002122:	2304      	movs	r3, #4
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e013      	b.n	8002150 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b01      	cmp	r3, #1
 800212e:	d105      	bne.n	800213c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002130:	2308      	movs	r3, #8
 8002132:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	611a      	str	r2, [r3, #16]
          break;
 800213a:	e009      	b.n	8002150 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800213c:	2308      	movs	r3, #8
 800213e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	615a      	str	r2, [r3, #20]
          break;
 8002146:	e003      	b.n	8002150 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002148:	2300      	movs	r3, #0
 800214a:	623b      	str	r3, [r7, #32]
          break;
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x130>
          break;
 800214e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2bff      	cmp	r3, #255	; 0xff
 8002154:	d801      	bhi.n	800215a <HAL_GPIO_Init+0x13a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	e001      	b.n	800215e <HAL_GPIO_Init+0x13e>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	3304      	adds	r3, #4
 800215e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2bff      	cmp	r3, #255	; 0xff
 8002164:	d802      	bhi.n	800216c <HAL_GPIO_Init+0x14c>
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x152>
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3b08      	subs	r3, #8
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	210f      	movs	r1, #15
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	6a39      	ldr	r1, [r7, #32]
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	fa01 f303 	lsl.w	r3, r1, r3
 800218c:	431a      	orrs	r2, r3
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 80b1 	beq.w	8002302 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021a0:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	4a4c      	ldr	r2, [pc, #304]	; (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6193      	str	r3, [r2, #24]
 80021ac:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_GPIO_Init+0x2b8>)
 80021ae:	699b      	ldr	r3, [r3, #24]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021b8:	4a48      	ldr	r2, [pc, #288]	; (80022dc <HAL_GPIO_Init+0x2bc>)
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	220f      	movs	r2, #15
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a40      	ldr	r2, [pc, #256]	; (80022e0 <HAL_GPIO_Init+0x2c0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d013      	beq.n	800220c <HAL_GPIO_Init+0x1ec>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a3f      	ldr	r2, [pc, #252]	; (80022e4 <HAL_GPIO_Init+0x2c4>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d00d      	beq.n	8002208 <HAL_GPIO_Init+0x1e8>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a3e      	ldr	r2, [pc, #248]	; (80022e8 <HAL_GPIO_Init+0x2c8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d007      	beq.n	8002204 <HAL_GPIO_Init+0x1e4>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3d      	ldr	r2, [pc, #244]	; (80022ec <HAL_GPIO_Init+0x2cc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_GPIO_Init+0x1e0>
 80021fc:	2303      	movs	r3, #3
 80021fe:	e006      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002200:	2304      	movs	r3, #4
 8002202:	e004      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002204:	2302      	movs	r3, #2
 8002206:	e002      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 8002208:	2301      	movs	r3, #1
 800220a:	e000      	b.n	800220e <HAL_GPIO_Init+0x1ee>
 800220c:	2300      	movs	r3, #0
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	f002 0203 	and.w	r2, r2, #3
 8002214:	0092      	lsls	r2, r2, #2
 8002216:	4093      	lsls	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800221e:	492f      	ldr	r1, [pc, #188]	; (80022dc <HAL_GPIO_Init+0x2bc>)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	089b      	lsrs	r3, r3, #2
 8002224:	3302      	adds	r3, #2
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d006      	beq.n	8002246 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002238:	4b2d      	ldr	r3, [pc, #180]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800223a:	689a      	ldr	r2, [r3, #8]
 800223c:	492c      	ldr	r1, [pc, #176]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]
 8002244:	e006      	b.n	8002254 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002246:	4b2a      	ldr	r3, [pc, #168]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	43db      	mvns	r3, r3
 800224e:	4928      	ldr	r1, [pc, #160]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002250:	4013      	ands	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d006      	beq.n	800226e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002260:	4b23      	ldr	r3, [pc, #140]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4922      	ldr	r1, [pc, #136]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4313      	orrs	r3, r2
 800226a:	60cb      	str	r3, [r1, #12]
 800226c:	e006      	b.n	800227c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	43db      	mvns	r3, r3
 8002276:	491e      	ldr	r1, [pc, #120]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002278:	4013      	ands	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d006      	beq.n	8002296 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	4918      	ldr	r1, [pc, #96]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	e006      	b.n	80022a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	69bb      	ldr	r3, [r7, #24]
 800229c:	43db      	mvns	r3, r3
 800229e:	4914      	ldr	r1, [pc, #80]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d021      	beq.n	80022f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	490e      	ldr	r1, [pc, #56]	; (80022f0 <HAL_GPIO_Init+0x2d0>)
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
 80022bc:	e021      	b.n	8002302 <HAL_GPIO_Init+0x2e2>
 80022be:	bf00      	nop
 80022c0:	10320000 	.word	0x10320000
 80022c4:	10310000 	.word	0x10310000
 80022c8:	10220000 	.word	0x10220000
 80022cc:	10210000 	.word	0x10210000
 80022d0:	10120000 	.word	0x10120000
 80022d4:	10110000 	.word	0x10110000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40010800 	.word	0x40010800
 80022e4:	40010c00 	.word	0x40010c00
 80022e8:	40011000 	.word	0x40011000
 80022ec:	40011400 	.word	0x40011400
 80022f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_GPIO_Init+0x304>)
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	43db      	mvns	r3, r3
 80022fc:	4909      	ldr	r1, [pc, #36]	; (8002324 <HAL_GPIO_Init+0x304>)
 80022fe:	4013      	ands	r3, r2
 8002300:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	3301      	adds	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	fa22 f303 	lsr.w	r3, r2, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	f47f ae8e 	bne.w	8002034 <HAL_GPIO_Init+0x14>
  }
}
 8002318:	bf00      	nop
 800231a:	bf00      	nop
 800231c:	372c      	adds	r7, #44	; 0x2c
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	40010400 	.word	0x40010400

08002328 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	807b      	strh	r3, [r7, #2]
 8002334:	4613      	mov	r3, r2
 8002336:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002338:	787b      	ldrb	r3, [r7, #1]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d003      	beq.n	8002346 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233e:	887a      	ldrh	r2, [r7, #2]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002344:	e003      	b.n	800234e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002346:	887b      	ldrh	r3, [r7, #2]
 8002348:	041a      	lsls	r2, r3, #16
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	611a      	str	r2, [r3, #16]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800236a:	887a      	ldrh	r2, [r7, #2]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4013      	ands	r3, r2
 8002370:	041a      	lsls	r2, r3, #16
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43d9      	mvns	r1, r3
 8002376:	887b      	ldrh	r3, [r7, #2]
 8002378:	400b      	ands	r3, r1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	611a      	str	r2, [r3, #16]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	bc80      	pop	{r7}
 8002388:	4770      	bx	lr
	...

0800238c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e12b      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d106      	bne.n	80023b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7fe fd08 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f0:	f003 fc92 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 80023f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4a81      	ldr	r2, [pc, #516]	; (8002600 <HAL_I2C_Init+0x274>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d807      	bhi.n	8002410 <HAL_I2C_Init+0x84>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4a80      	ldr	r2, [pc, #512]	; (8002604 <HAL_I2C_Init+0x278>)
 8002404:	4293      	cmp	r3, r2
 8002406:	bf94      	ite	ls
 8002408:	2301      	movls	r3, #1
 800240a:	2300      	movhi	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	e006      	b.n	800241e <HAL_I2C_Init+0x92>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	4a7d      	ldr	r2, [pc, #500]	; (8002608 <HAL_I2C_Init+0x27c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	bf94      	ite	ls
 8002418:	2301      	movls	r3, #1
 800241a:	2300      	movhi	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e0e7      	b.n	80025f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4a78      	ldr	r2, [pc, #480]	; (800260c <HAL_I2C_Init+0x280>)
 800242a:	fba2 2303 	umull	r2, r3, r2, r3
 800242e:	0c9b      	lsrs	r3, r3, #18
 8002430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	430a      	orrs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	4a6a      	ldr	r2, [pc, #424]	; (8002600 <HAL_I2C_Init+0x274>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d802      	bhi.n	8002460 <HAL_I2C_Init+0xd4>
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	3301      	adds	r3, #1
 800245e:	e009      	b.n	8002474 <HAL_I2C_Init+0xe8>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002466:	fb02 f303 	mul.w	r3, r2, r3
 800246a:	4a69      	ldr	r2, [pc, #420]	; (8002610 <HAL_I2C_Init+0x284>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	099b      	lsrs	r3, r3, #6
 8002472:	3301      	adds	r3, #1
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	430b      	orrs	r3, r1
 800247a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002486:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	495c      	ldr	r1, [pc, #368]	; (8002600 <HAL_I2C_Init+0x274>)
 8002490:	428b      	cmp	r3, r1
 8002492:	d819      	bhi.n	80024c8 <HAL_I2C_Init+0x13c>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	1e59      	subs	r1, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fbb1 f3f3 	udiv	r3, r1, r3
 80024a2:	1c59      	adds	r1, r3, #1
 80024a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024a8:	400b      	ands	r3, r1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d00a      	beq.n	80024c4 <HAL_I2C_Init+0x138>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	1e59      	subs	r1, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c2:	e051      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c4:	2304      	movs	r3, #4
 80024c6:	e04f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <HAL_I2C_Init+0x168>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	440b      	add	r3, r1
 80024de:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	bf0c      	ite	eq
 80024ec:	2301      	moveq	r3, #1
 80024ee:	2300      	movne	r3, #0
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e012      	b.n	800251a <HAL_I2C_Init+0x18e>
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	1e58      	subs	r0, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6859      	ldr	r1, [r3, #4]
 80024fc:	460b      	mov	r3, r1
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	0099      	lsls	r1, r3, #2
 8002504:	440b      	add	r3, r1
 8002506:	fbb0 f3f3 	udiv	r3, r0, r3
 800250a:	3301      	adds	r3, #1
 800250c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002510:	2b00      	cmp	r3, #0
 8002512:	bf0c      	ite	eq
 8002514:	2301      	moveq	r3, #1
 8002516:	2300      	movne	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <HAL_I2C_Init+0x196>
 800251e:	2301      	movs	r3, #1
 8002520:	e022      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <HAL_I2C_Init+0x1bc>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1e58      	subs	r0, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	440b      	add	r3, r1
 8002538:	fbb0 f3f3 	udiv	r3, r0, r3
 800253c:	3301      	adds	r3, #1
 800253e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002546:	e00f      	b.n	8002568 <HAL_I2C_Init+0x1dc>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	1e58      	subs	r0, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6859      	ldr	r1, [r3, #4]
 8002550:	460b      	mov	r3, r1
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	0099      	lsls	r1, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	fbb0 f3f3 	udiv	r3, r0, r3
 800255e:	3301      	adds	r3, #1
 8002560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002568:	6879      	ldr	r1, [r7, #4]
 800256a:	6809      	ldr	r1, [r1, #0]
 800256c:	4313      	orrs	r3, r2
 800256e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a1b      	ldr	r3, [r3, #32]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	430a      	orrs	r2, r1
 800258a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6911      	ldr	r1, [r2, #16]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	68d2      	ldr	r2, [r2, #12]
 80025a2:	4311      	orrs	r1, r2
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695a      	ldr	r2, [r3, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f042 0201 	orr.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2220      	movs	r2, #32
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2200      	movs	r2, #0
 80025ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	000186a0 	.word	0x000186a0
 8002604:	001e847f 	.word	0x001e847f
 8002608:	003d08ff 	.word	0x003d08ff
 800260c:	431bde83 	.word	0x431bde83
 8002610:	10624dd3 	.word	0x10624dd3

08002614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b088      	sub	sp, #32
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607a      	str	r2, [r7, #4]
 800261e:	461a      	mov	r2, r3
 8002620:	460b      	mov	r3, r1
 8002622:	817b      	strh	r3, [r7, #10]
 8002624:	4613      	mov	r3, r2
 8002626:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002628:	f7fe fe86 	bl	8001338 <HAL_GetTick>
 800262c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b20      	cmp	r3, #32
 8002638:	f040 80e0 	bne.w	80027fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	2319      	movs	r3, #25
 8002642:	2201      	movs	r2, #1
 8002644:	4970      	ldr	r1, [pc, #448]	; (8002808 <HAL_I2C_Master_Transmit+0x1f4>)
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fffa 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002652:	2302      	movs	r3, #2
 8002654:	e0d3      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2C_Master_Transmit+0x50>
 8002660:	2302      	movs	r3, #2
 8002662:	e0cc      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b01      	cmp	r3, #1
 8002678:	d007      	beq.n	800268a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f042 0201 	orr.w	r2, r2, #1
 8002688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002698:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2221      	movs	r2, #33	; 0x21
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2210      	movs	r2, #16
 80026a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29a      	uxth	r2, r3
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4a50      	ldr	r2, [pc, #320]	; (800280c <HAL_I2C_Master_Transmit+0x1f8>)
 80026ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026cc:	8979      	ldrh	r1, [r7, #10]
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fd7c 	bl	80031d0 <I2C_MasterRequestWrite>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e08d      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026f8:	e066      	b.n	80027c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f001 f8b8 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00d      	beq.n	8002726 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	2b04      	cmp	r3, #4
 8002710:	d107      	bne.n	8002722 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002720:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e06b      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002740:	b29b      	uxth	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b04      	cmp	r3, #4
 8002762:	d11b      	bne.n	800279c <HAL_I2C_Master_Transmit+0x188>
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d017      	beq.n	800279c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	3b01      	subs	r3, #1
 800278a:	b29a      	uxth	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002794:	3b01      	subs	r3, #1
 8002796:	b29a      	uxth	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279c:	697a      	ldr	r2, [r7, #20]
 800279e:	6a39      	ldr	r1, [r7, #32]
 80027a0:	68f8      	ldr	r0, [r7, #12]
 80027a2:	f001 f8af 	bl	8003904 <I2C_WaitOnBTFFlagUntilTimeout>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d107      	bne.n	80027c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e01a      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d194      	bne.n	80026fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2220      	movs	r2, #32
 80027e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	e000      	b.n	80027fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027fc:	2302      	movs	r3, #2
  }
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	00100002 	.word	0x00100002
 800280c:	ffff0000 	.word	0xffff0000

08002810 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	; 0x30
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	607a      	str	r2, [r7, #4]
 800281a:	461a      	mov	r2, r3
 800281c:	460b      	mov	r3, r1
 800281e:	817b      	strh	r3, [r7, #10]
 8002820:	4613      	mov	r3, r2
 8002822:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002828:	f7fe fd86 	bl	8001338 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002834:	b2db      	uxtb	r3, r3
 8002836:	2b20      	cmp	r3, #32
 8002838:	f040 824b 	bne.w	8002cd2 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	2319      	movs	r3, #25
 8002842:	2201      	movs	r2, #1
 8002844:	497f      	ldr	r1, [pc, #508]	; (8002a44 <HAL_I2C_Master_Receive+0x234>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fefa 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002852:	2302      	movs	r3, #2
 8002854:	e23e      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800285c:	2b01      	cmp	r3, #1
 800285e:	d101      	bne.n	8002864 <HAL_I2C_Master_Receive+0x54>
 8002860:	2302      	movs	r3, #2
 8002862:	e237      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d007      	beq.n	800288a <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2222      	movs	r2, #34	; 0x22
 800289e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2210      	movs	r2, #16
 80028a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2200      	movs	r2, #0
 80028ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	893a      	ldrh	r2, [r7, #8]
 80028ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4a5f      	ldr	r2, [pc, #380]	; (8002a48 <HAL_I2C_Master_Receive+0x238>)
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028cc:	8979      	ldrh	r1, [r7, #10]
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fcfe 	bl	80032d4 <I2C_MasterRequestRead>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e1f8      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d113      	bne.n	8002912 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	61fb      	str	r3, [r7, #28]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	61fb      	str	r3, [r7, #28]
 80028fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e1cc      	b.n	8002cac <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11e      	bne.n	8002958 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002928:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800292a:	b672      	cpsid	i
}
 800292c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	61bb      	str	r3, [r7, #24]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002952:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002954:	b662      	cpsie	i
}
 8002956:	e035      	b.n	80029c4 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295c:	2b02      	cmp	r3, #2
 800295e:	d11e      	bne.n	800299e <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800296e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002970:	b672      	cpsid	i
}
 8002972:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	617b      	str	r3, [r7, #20]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	617b      	str	r3, [r7, #20]
 8002988:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002998:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800299a:	b662      	cpsie	i
}
 800299c:	e012      	b.n	80029c4 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	613b      	str	r3, [r7, #16]
 80029c2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029c4:	e172      	b.n	8002cac <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	f200 811f 	bhi.w	8002c0e <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d123      	bne.n	8002a20 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f000 ffd9 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e173      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a1e:	e145      	b.n	8002cac <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d152      	bne.n	8002ace <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4906      	ldr	r1, [pc, #24]	; (8002a4c <HAL_I2C_Master_Receive+0x23c>)
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 fe04 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d008      	beq.n	8002a50 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e148      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
 8002a42:	bf00      	nop
 8002a44:	00100002 	.word	0x00100002
 8002a48:	ffff0000 	.word	0xffff0000
 8002a4c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	1c5a      	adds	r2, r3, #1
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a80:	3b01      	subs	r3, #1
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a96:	b662      	cpsie	i
}
 8002a98:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002acc:	e0ee      	b.n	8002cac <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4981      	ldr	r1, [pc, #516]	; (8002cdc <HAL_I2C_Master_Receive+0x4cc>)
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fdb1 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0f5      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002af6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002af8:	b672      	cpsid	i
}
 8002afa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	1c5a      	adds	r2, r3, #1
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b2e:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_I2C_Master_Receive+0x4d0>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	4a6b      	ldr	r2, [pc, #428]	; (8002ce4 <HAL_I2C_Master_Receive+0x4d4>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0a1a      	lsrs	r2, r3, #8
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00da      	lsls	r2, r3, #3
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d118      	bne.n	8002b86 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2220      	movs	r2, #32
 8002b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f043 0220 	orr.w	r2, r3, #32
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b76:	b662      	cpsie	i
}
 8002b78:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0a6      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b04      	cmp	r3, #4
 8002b92:	d1d9      	bne.n	8002b48 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bd6:	b662      	cpsie	i
}
 8002bd8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	b2d2      	uxtb	r2, r2
 8002be6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b29a      	uxth	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c0c:	e04e      	b.n	8002cac <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 febe 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e058      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	b2d2      	uxtb	r2, r2
 8002c2e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d124      	bne.n	8002cac <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d107      	bne.n	8002c7a <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c78:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	b2d2      	uxtb	r2, r2
 8002c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c96:	3b01      	subs	r3, #1
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f47f ae88 	bne.w	80029c6 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3728      	adds	r7, #40	; 0x28
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	00010004 	.word	0x00010004
 8002ce0:	20000000 	.word	0x20000000
 8002ce4:	14f8b589 	.word	0x14f8b589

08002ce8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	817b      	strh	r3, [r7, #10]
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	813b      	strh	r3, [r7, #8]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d06:	f7fe fb17 	bl	8001338 <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	f040 8250 	bne.w	80031ba <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2319      	movs	r3, #25
 8002d20:	2201      	movs	r2, #1
 8002d22:	4982      	ldr	r1, [pc, #520]	; (8002f2c <HAL_I2C_Mem_Read+0x244>)
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 fc8b 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
 8002d32:	e243      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_I2C_Mem_Read+0x5a>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	e23c      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d007      	beq.n	8002d68 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2222      	movs	r2, #34	; 0x22
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2240      	movs	r2, #64	; 0x40
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d9e:	b29a      	uxth	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4a62      	ldr	r2, [pc, #392]	; (8002f30 <HAL_I2C_Mem_Read+0x248>)
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002daa:	88f8      	ldrh	r0, [r7, #6]
 8002dac:	893a      	ldrh	r2, [r7, #8]
 8002dae:	8979      	ldrh	r1, [r7, #10]
 8002db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4603      	mov	r3, r0
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 fb58 	bl	8003470 <I2C_RequestMemoryRead>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e1f8      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d113      	bne.n	8002dfa <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	61fb      	str	r3, [r7, #28]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	61fb      	str	r3, [r7, #28]
 8002de6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	e1cc      	b.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d11e      	bne.n	8002e40 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e12:	b672      	cpsid	i
}
 8002e14:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	61bb      	str	r3, [r7, #24]
 8002e2a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e3a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3c:	b662      	cpsie	i
}
 8002e3e:	e035      	b.n	8002eac <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d11e      	bne.n	8002e86 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e56:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002e58:	b672      	cpsid	i
}
 8002e5a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	617b      	str	r3, [r7, #20]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	617b      	str	r3, [r7, #20]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e82:	b662      	cpsie	i
}
 8002e84:	e012      	b.n	8002eac <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e94:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002eac:	e172      	b.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	f200 811f 	bhi.w	80030f6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d123      	bne.n	8002f08 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ec2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 fd65 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e173      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	691a      	ldr	r2, [r3, #16]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	1c5a      	adds	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f06:	e145      	b.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d152      	bne.n	8002fb6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	2200      	movs	r2, #0
 8002f18:	4906      	ldr	r1, [pc, #24]	; (8002f34 <HAL_I2C_Mem_Read+0x24c>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fb90 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d008      	beq.n	8002f38 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e148      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
 8002f2a:	bf00      	nop
 8002f2c:	00100002 	.word	0x00100002
 8002f30:	ffff0000 	.word	0xffff0000
 8002f34:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002f38:	b672      	cpsid	i
}
 8002f3a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	691a      	ldr	r2, [r3, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	b2d2      	uxtb	r2, r2
 8002f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002f7e:	b662      	cpsie	i
}
 8002f80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691a      	ldr	r2, [r3, #16]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fb4:	e0ee      	b.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	9300      	str	r3, [sp, #0]
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	4981      	ldr	r1, [pc, #516]	; (80031c4 <HAL_I2C_Mem_Read+0x4dc>)
 8002fc0:	68f8      	ldr	r0, [r7, #12]
 8002fc2:	f000 fb3d 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0f5      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fde:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe0:	b672      	cpsid	i
}
 8002fe2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691a      	ldr	r2, [r3, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003016:	4b6c      	ldr	r3, [pc, #432]	; (80031c8 <HAL_I2C_Mem_Read+0x4e0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	08db      	lsrs	r3, r3, #3
 800301c:	4a6b      	ldr	r2, [pc, #428]	; (80031cc <HAL_I2C_Mem_Read+0x4e4>)
 800301e:	fba2 2303 	umull	r2, r3, r2, r3
 8003022:	0a1a      	lsrs	r2, r3, #8
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	00da      	lsls	r2, r3, #3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	3b01      	subs	r3, #1
 8003034:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003036:	6a3b      	ldr	r3, [r7, #32]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d118      	bne.n	800306e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f043 0220 	orr.w	r2, r3, #32
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800305e:	b662      	cpsie	i
}
 8003060:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e0a6      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b04      	cmp	r3, #4
 800307a:	d1d9      	bne.n	8003030 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800308a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	1c5a      	adds	r2, r3, #1
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	3b01      	subs	r3, #1
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	3b01      	subs	r3, #1
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80030be:	b662      	cpsie	i
}
 80030c0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d4:	1c5a      	adds	r2, r3, #1
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030f4:	e04e      	b.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 fc4a 	bl	8003994 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e058      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	b2d2      	uxtb	r2, r2
 8003116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	3b01      	subs	r3, #1
 8003136:	b29a      	uxth	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	f003 0304 	and.w	r3, r3, #4
 8003146:	2b04      	cmp	r3, #4
 8003148:	d124      	bne.n	8003194 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	2b03      	cmp	r3, #3
 8003150:	d107      	bne.n	8003162 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003160:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	691a      	ldr	r2, [r3, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003198:	2b00      	cmp	r3, #0
 800319a:	f47f ae88 	bne.w	8002eae <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b6:	2300      	movs	r3, #0
 80031b8:	e000      	b.n	80031bc <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80031ba:	2302      	movs	r3, #2
  }
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3728      	adds	r7, #40	; 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	00010004 	.word	0x00010004
 80031c8:	20000000 	.word	0x20000000
 80031cc:	14f8b589 	.word	0x14f8b589

080031d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d006      	beq.n	80031fa <I2C_MasterRequestWrite+0x2a>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d003      	beq.n	80031fa <I2C_MasterRequestWrite+0x2a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d108      	bne.n	800320c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e00b      	b.n	8003224 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2b12      	cmp	r3, #18
 8003212:	d107      	bne.n	8003224 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fa05 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d103      	bne.n	8003254 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e035      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	e01b      	b.n	80032ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003274:	897b      	ldrh	r3, [r7, #10]
 8003276:	11db      	asrs	r3, r3, #7
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0306 	and.w	r3, r3, #6
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f063 030f 	orn	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <I2C_MasterRequestWrite+0xfc>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa4e 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e010      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4907      	ldr	r1, [pc, #28]	; (80032d0 <I2C_MasterRequestWrite+0x100>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fa3e 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	00010008 	.word	0x00010008
 80032d0:	00010002 	.word	0x00010002

080032d4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af02      	add	r7, sp, #8
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	607a      	str	r2, [r7, #4]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	460b      	mov	r3, r1
 80032e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032f8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d006      	beq.n	800330e <I2C_MasterRequestRead+0x3a>
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d003      	beq.n	800330e <I2C_MasterRequestRead+0x3a>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800330c:	d108      	bne.n	8003320 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	e00b      	b.n	8003338 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003324:	2b11      	cmp	r3, #17
 8003326:	d107      	bne.n	8003338 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f97b 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00d      	beq.n	800336c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800335e:	d103      	bne.n	8003368 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e079      	b.n	8003460 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003374:	d108      	bne.n	8003388 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003376:	897b      	ldrh	r3, [r7, #10]
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	b2da      	uxtb	r2, r3
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	611a      	str	r2, [r3, #16]
 8003386:	e05f      	b.n	8003448 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003388:	897b      	ldrh	r3, [r7, #10]
 800338a:	11db      	asrs	r3, r3, #7
 800338c:	b2db      	uxtb	r3, r3
 800338e:	f003 0306 	and.w	r3, r3, #6
 8003392:	b2db      	uxtb	r3, r3
 8003394:	f063 030f 	orn	r3, r3, #15
 8003398:	b2da      	uxtb	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	4930      	ldr	r1, [pc, #192]	; (8003468 <I2C_MasterRequestRead+0x194>)
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 f9c4 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e054      	b.n	8003460 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80033b6:	897b      	ldrh	r3, [r7, #10]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	4929      	ldr	r1, [pc, #164]	; (800346c <I2C_MasterRequestRead+0x198>)
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f9b4 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e044      	b.n	8003460 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	613b      	str	r3, [r7, #16]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	613b      	str	r3, [r7, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f000 f919 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 800340e:	4603      	mov	r3, r0
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00d      	beq.n	8003430 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003422:	d103      	bne.n	800342c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f44f 7200 	mov.w	r2, #512	; 0x200
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e017      	b.n	8003460 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003430:	897b      	ldrh	r3, [r7, #10]
 8003432:	11db      	asrs	r3, r3, #7
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f003 0306 	and.w	r3, r3, #6
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f063 030e 	orn	r3, r3, #14
 8003440:	b2da      	uxtb	r2, r3
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4907      	ldr	r1, [pc, #28]	; (800346c <I2C_MasterRequestRead+0x198>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f000 f970 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	00010008 	.word	0x00010008
 800346c:	00010002 	.word	0x00010002

08003470 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	4608      	mov	r0, r1
 800347a:	4611      	mov	r1, r2
 800347c:	461a      	mov	r2, r3
 800347e:	4603      	mov	r3, r0
 8003480:	817b      	strh	r3, [r7, #10]
 8003482:	460b      	mov	r3, r1
 8003484:	813b      	strh	r3, [r7, #8]
 8003486:	4613      	mov	r3, r2
 8003488:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003498:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 f8c2 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00d      	beq.n	80034de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034d0:	d103      	bne.n	80034da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e0aa      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80034ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	4952      	ldr	r1, [pc, #328]	; (800363c <I2C_RequestMemoryRead+0x1cc>)
 80034f4:	68f8      	ldr	r0, [r7, #12]
 80034f6:	f000 f91d 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e097      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800351a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800351c:	6a39      	ldr	r1, [r7, #32]
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f9a8 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00d      	beq.n	8003546 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	2b04      	cmp	r3, #4
 8003530:	d107      	bne.n	8003542 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e076      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003546:	88fb      	ldrh	r3, [r7, #6]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800354c:	893b      	ldrh	r3, [r7, #8]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	611a      	str	r2, [r3, #16]
 8003556:	e021      	b.n	800359c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003558:	893b      	ldrh	r3, [r7, #8]
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	b29b      	uxth	r3, r3
 800355e:	b2da      	uxtb	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003568:	6a39      	ldr	r1, [r7, #32]
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 f982 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00d      	beq.n	8003592 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	2b04      	cmp	r3, #4
 800357c:	d107      	bne.n	800358e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800358c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e050      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003592:	893b      	ldrh	r3, [r7, #8]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800359c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 f967 	bl	8003874 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00d      	beq.n	80035c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d107      	bne.n	80035c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e035      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	2200      	movs	r2, #0
 80035e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f000 f82b 	bl	8003640 <I2C_WaitOnFlagUntilTimeout>
 80035ea:	4603      	mov	r3, r0
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00d      	beq.n	800360c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035fe:	d103      	bne.n	8003608 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e013      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800360c:	897b      	ldrh	r3, [r7, #10]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	6a3a      	ldr	r2, [r7, #32]
 8003620:	4906      	ldr	r1, [pc, #24]	; (800363c <I2C_RequestMemoryRead+0x1cc>)
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f886 	bl	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d001      	beq.n	8003632 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e000      	b.n	8003634 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	4618      	mov	r0, r3
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	00010002 	.word	0x00010002

08003640 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	4613      	mov	r3, r2
 800364e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003650:	e048      	b.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003658:	d044      	beq.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fd fe6d 	bl	8001338 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnFlagUntilTimeout+0x30>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d139      	bne.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	0c1b      	lsrs	r3, r3, #16
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b01      	cmp	r3, #1
 8003678:	d10d      	bne.n	8003696 <I2C_WaitOnFlagUntilTimeout+0x56>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	43da      	mvns	r2, r3
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	e00c      	b.n	80036b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	43da      	mvns	r2, r3
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	4013      	ands	r3, r2
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	bf0c      	ite	eq
 80036a8:	2301      	moveq	r3, #1
 80036aa:	2300      	movne	r3, #0
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	461a      	mov	r2, r3
 80036b0:	79fb      	ldrb	r3, [r7, #7]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d116      	bne.n	80036e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0220 	orr.w	r2, r3, #32
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e023      	b.n	800372c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	0c1b      	lsrs	r3, r3, #16
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10d      	bne.n	800370a <I2C_WaitOnFlagUntilTimeout+0xca>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf0c      	ite	eq
 8003700:	2301      	moveq	r3, #1
 8003702:	2300      	movne	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
 8003708:	e00c      	b.n	8003724 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	43da      	mvns	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	4013      	ands	r3, r2
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf0c      	ite	eq
 800371c:	2301      	moveq	r3, #1
 800371e:	2300      	movne	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	461a      	mov	r2, r3
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	d093      	beq.n	8003652 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
 8003740:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003742:	e071      	b.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d123      	bne.n	800379c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003762:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800376c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0204 	orr.w	r2, r3, #4
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e067      	b.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a2:	d041      	beq.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fd fdc8 	bl	8001338 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d136      	bne.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0c1b      	lsrs	r3, r3, #16
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d10c      	bne.n	80037de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	695b      	ldr	r3, [r3, #20]
 80037ca:	43da      	mvns	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4013      	ands	r3, r2
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	bf14      	ite	ne
 80037d6:	2301      	movne	r3, #1
 80037d8:	2300      	moveq	r3, #0
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	e00b      	b.n	80037f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf14      	ite	ne
 80037f0:	2301      	movne	r3, #1
 80037f2:	2300      	moveq	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d016      	beq.n	8003828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e021      	b.n	800386c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	0c1b      	lsrs	r3, r3, #16
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10c      	bne.n	800384c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695b      	ldr	r3, [r3, #20]
 8003838:	43da      	mvns	r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4013      	ands	r3, r2
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf14      	ite	ne
 8003844:	2301      	movne	r3, #1
 8003846:	2300      	moveq	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	e00b      	b.n	8003864 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	43da      	mvns	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	4013      	ands	r3, r2
 8003858:	b29b      	uxth	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b00      	cmp	r3, #0
 8003866:	f47f af6d 	bne.w	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003880:	e034      	b.n	80038ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f8e3 	bl	8003a4e <I2C_IsAcknowledgeFailed>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e034      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003898:	d028      	beq.n	80038ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389a:	f7fd fd4d 	bl	8001338 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d302      	bcc.n	80038b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d11d      	bne.n	80038ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ba:	2b80      	cmp	r3, #128	; 0x80
 80038bc:	d016      	beq.n	80038ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	f043 0220 	orr.w	r2, r3, #32
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e007      	b.n	80038fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038f6:	2b80      	cmp	r3, #128	; 0x80
 80038f8:	d1c3      	bne.n	8003882 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3710      	adds	r7, #16
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003910:	e034      	b.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f89b 	bl	8003a4e <I2C_IsAcknowledgeFailed>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d001      	beq.n	8003922 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e034      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003928:	d028      	beq.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392a:	f7fd fd05 	bl	8001338 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	429a      	cmp	r2, r3
 8003938:	d302      	bcc.n	8003940 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d11d      	bne.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d016      	beq.n	800397c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2220      	movs	r2, #32
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003968:	f043 0220 	orr.w	r2, r3, #32
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e007      	b.n	800398c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f003 0304 	and.w	r3, r3, #4
 8003986:	2b04      	cmp	r3, #4
 8003988:	d1c3      	bne.n	8003912 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039a0:	e049      	b.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	f003 0310 	and.w	r3, r3, #16
 80039ac:	2b10      	cmp	r3, #16
 80039ae:	d119      	bne.n	80039e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f06f 0210 	mvn.w	r2, #16
 80039b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e030      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e4:	f7fd fca8 	bl	8001338 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d302      	bcc.n	80039fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11d      	bne.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d016      	beq.n	8003a36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2220      	movs	r2, #32
 8003a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a22:	f043 0220 	orr.w	r2, r3, #32
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e007      	b.n	8003a46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	695b      	ldr	r3, [r3, #20]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d1ae      	bne.n	80039a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a64:	d11b      	bne.n	8003a9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	f043 0204 	orr.w	r2, r3, #4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e000      	b.n	8003aa0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr

08003aaa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	e0e8      	b.n	8003c8e <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f007 ff0f 	bl	800b8f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2203      	movs	r2, #3
 8003ada:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 fe84 	bl	80077f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6818      	ldr	r0, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	3304      	adds	r3, #4
 8003af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003af8:	f003 fe5a 	bl	80077b0 <USB_CoreInit>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d005      	beq.n	8003b0e <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e0bf      	b.n	8003c8e <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2100      	movs	r1, #0
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 fe88 	bl	800782a <USB_SetCurrentMode>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b0      	b.n	8003c8e <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]
 8003b30:	e03e      	b.n	8003bb0 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	00db      	lsls	r3, r3, #3
 8003b3e:	440b      	add	r3, r1
 8003b40:	3311      	adds	r3, #17
 8003b42:	2201      	movs	r2, #1
 8003b44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b46:	7bfa      	ldrb	r2, [r7, #15]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	00db      	lsls	r3, r3, #3
 8003b52:	440b      	add	r3, r1
 8003b54:	3310      	adds	r3, #16
 8003b56:	7bfa      	ldrb	r2, [r7, #15]
 8003b58:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b5a:	7bfa      	ldrb	r2, [r7, #15]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	4413      	add	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	440b      	add	r3, r1
 8003b68:	3313      	adds	r3, #19
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003b6e:	7bfa      	ldrb	r2, [r7, #15]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3320      	adds	r3, #32
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003b82:	7bfa      	ldrb	r2, [r7, #15]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3324      	adds	r3, #36	; 0x24
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	00db      	lsls	r3, r3, #3
 8003ba4:	440b      	add	r3, r1
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	3301      	adds	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	791b      	ldrb	r3, [r3, #4]
 8003bb4:	7bfa      	ldrb	r2, [r7, #15]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3bb      	bcc.n	8003b32 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e044      	b.n	8003c4a <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bc0:	7bfa      	ldrb	r2, [r7, #15]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	440b      	add	r3, r1
 8003bce:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4413      	add	r3, r2
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	f203 1353 	addw	r3, r3, #339	; 0x153
 8003bfe:	2200      	movs	r2, #0
 8003c00:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c02:	7bfa      	ldrb	r2, [r7, #15]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c18:	7bfa      	ldrb	r2, [r7, #15]
 8003c1a:	6879      	ldr	r1, [r7, #4]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	440b      	add	r3, r1
 8003c26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c2e:	7bfa      	ldrb	r2, [r7, #15]
 8003c30:	6879      	ldr	r1, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	440b      	add	r3, r1
 8003c3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c40:	2200      	movs	r2, #0
 8003c42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
 8003c46:	3301      	adds	r3, #1
 8003c48:	73fb      	strb	r3, [r7, #15]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	791b      	ldrb	r3, [r3, #4]
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d3b5      	bcc.n	8003bc0 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6818      	ldr	r0, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c5e:	f003 fdf0 	bl	8007842 <USB_DevInit>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e00c      	b.n	8003c8e <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f006 f86f 	bl	8009d6a <USB_DevDisconnect>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d101      	bne.n	8003cac <HAL_PCD_Start+0x16>
 8003ca8:	2302      	movs	r3, #2
 8003caa:	e016      	b.n	8003cda <HAL_PCD_Start+0x44>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f003 fd86 	bl	80077ca <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f008 f88a 	bl	800bdda <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f006 f843 	bl	8009d56 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b088      	sub	sp, #32
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f006 f845 	bl	8009d7e <USB_ReadInterrupts>
 8003cf4:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fb1a 	bl	800433a <PCD_EP_ISR_Handler>

    return;
 8003d06:	e119      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d013      	beq.n	8003d3a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	b292      	uxth	r2, r2
 8003d26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f007 fe5d 	bl	800b9ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8003d30:	2100      	movs	r1, #0
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f000 f905 	bl	8003f42 <HAL_PCD_SetAddress>

    return;
 8003d38:	e100      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d56:	b292      	uxth	r2, r2
 8003d58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d5c:	e0ee      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00c      	beq.n	8003d82 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7a:	b292      	uxth	r2, r2
 8003d7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003d80:	e0dc      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d027      	beq.n	8003ddc <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0208 	bic.w	r2, r2, #8
 8003db6:	b292      	uxth	r2, r2
 8003db8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f007 fe4d 	bl	800ba5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd4:	b292      	uxth	r2, r2
 8003dd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003dda:	e0af      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 8083 	beq.w	8003eee <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e010      	b.n	8003e10 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	441a      	add	r2, r3
 8003dfa:	7ffb      	ldrb	r3, [r7, #31]
 8003dfc:	8812      	ldrh	r2, [r2, #0]
 8003dfe:	b292      	uxth	r2, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	3320      	adds	r3, #32
 8003e04:	443b      	add	r3, r7
 8003e06:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8003e0a:	7ffb      	ldrb	r3, [r7, #31]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	77fb      	strb	r3, [r7, #31]
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	2b07      	cmp	r3, #7
 8003e14:	d9eb      	bls.n	8003dee <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f042 0201 	orr.w	r2, r2, #1
 8003e28:	b292      	uxth	r2, r2
 8003e2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0201 	bic.w	r2, r2, #1
 8003e40:	b292      	uxth	r2, r2
 8003e42:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8003e46:	bf00      	nop
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0f6      	beq.n	8003e48 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e6c:	b292      	uxth	r2, r2
 8003e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003e72:	2300      	movs	r3, #0
 8003e74:	77fb      	strb	r3, [r7, #31]
 8003e76:	e00f      	b.n	8003e98 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003e78:	7ffb      	ldrb	r3, [r7, #31]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	7ffa      	ldrb	r2, [r7, #31]
 8003e82:	0092      	lsls	r2, r2, #2
 8003e84:	440a      	add	r2, r1
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	3320      	adds	r3, #32
 8003e8a:	443b      	add	r3, r7
 8003e8c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003e90:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003e92:	7ffb      	ldrb	r3, [r7, #31]
 8003e94:	3301      	adds	r3, #1
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	7ffb      	ldrb	r3, [r7, #31]
 8003e9a:	2b07      	cmp	r3, #7
 8003e9c:	d9ec      	bls.n	8003e78 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f042 0208 	orr.w	r2, r2, #8
 8003eb0:	b292      	uxth	r2, r2
 8003eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ec8:	b292      	uxth	r2, r2
 8003eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f042 0204 	orr.w	r2, r2, #4
 8003ee0:	b292      	uxth	r2, r2
 8003ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f007 fd9e 	bl	800ba28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003eec:	e026      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00f      	beq.n	8003f18 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003f0a:	b292      	uxth	r2, r2
 8003f0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f007 fd5c 	bl	800b9ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003f16:	e011      	b.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f34:	b292      	uxth	r2, r2
 8003f36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003f3a:	bf00      	nop
  }
}
 8003f3c:	3720      	adds	r7, #32
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b082      	sub	sp, #8
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d101      	bne.n	8003f5c <HAL_PCD_SetAddress+0x1a>
 8003f58:	2302      	movs	r3, #2
 8003f5a:	e012      	b.n	8003f82 <HAL_PCD_SetAddress+0x40>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	78fa      	ldrb	r2, [r7, #3]
 8003f68:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f005 fedc 	bl	8009d30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	4608      	mov	r0, r1
 8003f94:	4611      	mov	r1, r2
 8003f96:	461a      	mov	r2, r3
 8003f98:	4603      	mov	r3, r0
 8003f9a:	70fb      	strb	r3, [r7, #3]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	803b      	strh	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	da0e      	bge.n	8003fce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb0:	78fb      	ldrb	r3, [r7, #3]
 8003fb2:	f003 0207 	and.w	r2, r3, #7
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	3310      	adds	r3, #16
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00e      	b.n	8003fec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 0207 	and.w	r2, r3, #7
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	4413      	add	r3, r2
 8003fda:	00db      	lsls	r3, r3, #3
 8003fdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fec:	78fb      	ldrb	r3, [r7, #3]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ff8:	883a      	ldrh	r2, [r7, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	78ba      	ldrb	r2, [r7, #2]
 8004002:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004004:	78bb      	ldrb	r3, [r7, #2]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d102      	bne.n	8004010 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_PCD_EP_Open+0x94>
 800401a:	2302      	movs	r3, #2
 800401c:	e00e      	b.n	800403c <HAL_PCD_EP_Open+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	4618      	mov	r0, r3
 800402e:	f003 fc25 	bl	800787c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800403a:	7afb      	ldrb	r3, [r7, #11]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}

08004044 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004050:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004054:	2b00      	cmp	r3, #0
 8004056:	da0e      	bge.n	8004076 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	f003 0207 	and.w	r2, r3, #7
 800405e:	4613      	mov	r3, r2
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	4413      	add	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	3310      	adds	r3, #16
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	2201      	movs	r2, #1
 8004072:	705a      	strb	r2, [r3, #1]
 8004074:	e00e      	b.n	8004094 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004076:	78fb      	ldrb	r3, [r7, #3]
 8004078:	f003 0207 	and.w	r2, r3, #7
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	4413      	add	r3, r2
 800408c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004094:	78fb      	ldrb	r3, [r7, #3]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d101      	bne.n	80040ae <HAL_PCD_EP_Close+0x6a>
 80040aa:	2302      	movs	r3, #2
 80040ac:	e00e      	b.n	80040cc <HAL_PCD_EP_Close+0x88>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68f9      	ldr	r1, [r7, #12]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 ff9d 	bl	8007ffc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b086      	sub	sp, #24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607a      	str	r2, [r7, #4]
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	460b      	mov	r3, r1
 80040e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040e4:	7afb      	ldrb	r3, [r7, #11]
 80040e6:	f003 0207 	and.w	r2, r3, #7
 80040ea:	4613      	mov	r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	4413      	add	r3, r2
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4413      	add	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2200      	movs	r2, #0
 8004112:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	b2da      	uxtb	r2, r3
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	6979      	ldr	r1, [r7, #20]
 8004126:	4618      	mov	r0, r3
 8004128:	f004 f954 	bl	80083d4 <USB_EPStartXfer>

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3718      	adds	r7, #24
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	460b      	mov	r3, r1
 8004140:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004142:	78fb      	ldrb	r3, [r7, #3]
 8004144:	f003 0207 	and.w	r2, r3, #7
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	440b      	add	r3, r1
 8004154:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004158:	681b      	ldr	r3, [r3, #0]
}
 800415a:	4618      	mov	r0, r3
 800415c:	370c      	adds	r7, #12
 800415e:	46bd      	mov	sp, r7
 8004160:	bc80      	pop	{r7}
 8004162:	4770      	bx	lr

08004164 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	607a      	str	r2, [r7, #4]
 800416e:	603b      	str	r3, [r7, #0]
 8004170:	460b      	mov	r3, r1
 8004172:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004174:	7afb      	ldrb	r3, [r7, #11]
 8004176:	f003 0207 	and.w	r2, r3, #7
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	3310      	adds	r3, #16
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4413      	add	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2200      	movs	r2, #0
 80041a8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	2201      	movs	r2, #1
 80041ae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	f003 0307 	and.w	r3, r3, #7
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6979      	ldr	r1, [r7, #20]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f004 f906 	bl	80083d4 <USB_EPStartXfer>

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	460b      	mov	r3, r1
 80041dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041de:	78fb      	ldrb	r3, [r7, #3]
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	7912      	ldrb	r2, [r2, #4]
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d901      	bls.n	80041f0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e04c      	b.n	800428a <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	da0e      	bge.n	8004216 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041f8:	78fb      	ldrb	r3, [r7, #3]
 80041fa:	f003 0207 	and.w	r2, r3, #7
 80041fe:	4613      	mov	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	00db      	lsls	r3, r3, #3
 8004206:	3310      	adds	r3, #16
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	4413      	add	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	705a      	strb	r2, [r3, #1]
 8004214:	e00c      	b.n	8004230 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004216:	78fa      	ldrb	r2, [r7, #3]
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_PCD_EP_SetStall+0x7e>
 800424c:	2302      	movs	r3, #2
 800424e:	e01c      	b.n	800428a <HAL_PCD_EP_SetStall+0xb8>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68f9      	ldr	r1, [r7, #12]
 800425e:	4618      	mov	r0, r3
 8004260:	f005 fc69 	bl	8009b36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f005 fd8e 	bl	8009d9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b084      	sub	sp, #16
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	460b      	mov	r3, r1
 800429c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	7912      	ldrb	r2, [r2, #4]
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d901      	bls.n	80042b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e040      	b.n	8004332 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da0e      	bge.n	80042d6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	f003 0207 	and.w	r2, r3, #7
 80042be:	4613      	mov	r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	3310      	adds	r3, #16
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	705a      	strb	r2, [r3, #1]
 80042d4:	e00e      	b.n	80042f4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 0207 	and.w	r2, r3, #7
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	4413      	add	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042fa:	78fb      	ldrb	r3, [r7, #3]
 80042fc:	f003 0307 	and.w	r3, r3, #7
 8004300:	b2da      	uxtb	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_PCD_EP_ClrStall+0x82>
 8004310:	2302      	movs	r3, #2
 8004312:	e00e      	b.n	8004332 <HAL_PCD_EP_ClrStall+0xa0>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68f9      	ldr	r1, [r7, #12]
 8004322:	4618      	mov	r0, r3
 8004324:	f005 fc57 	bl	8009bd6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b096      	sub	sp, #88	; 0x58
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004342:	e3bc      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
  {
    wIstr = hpcd->Instance->ISTR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800434c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004350:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004354:	b2db      	uxtb	r3, r3
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800435e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004362:	2b00      	cmp	r3, #0
 8004364:	f040 8176 	bne.w	8004654 <PCD_EP_ISR_Handler+0x31a>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004368:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d14f      	bne.n	8004414 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	81fb      	strh	r3, [r7, #14]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	89fb      	ldrh	r3, [r7, #14]
 800438c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004390:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004394:	b29b      	uxth	r3, r3
 8004396:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	3310      	adds	r3, #16
 800439c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	4413      	add	r3, r2
 80043b2:	3302      	adds	r3, #2
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	6812      	ldr	r2, [r2, #0]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043c0:	881b      	ldrh	r3, [r3, #0]
 80043c2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80043c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80043ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043cc:	695a      	ldr	r2, [r3, #20]
 80043ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	441a      	add	r2, r3
 80043d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043d6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80043d8:	2100      	movs	r1, #0
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f007 fadd 	bl	800b99a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	7b5b      	ldrb	r3, [r3, #13]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 8369 	beq.w	8004abe <PCD_EP_ISR_Handler+0x784>
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f040 8364 	bne.w	8004abe <PCD_EP_ISR_Handler+0x784>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	7b5b      	ldrb	r3, [r3, #13]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004400:	b2da      	uxtb	r2, r3
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	b292      	uxth	r2, r2
 8004408:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	735a      	strb	r2, [r3, #13]
 8004412:	e354      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800441a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	881b      	ldrh	r3, [r3, #0]
 8004422:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004426:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800442a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442e:	2b00      	cmp	r3, #0
 8004430:	d034      	beq.n	800449c <PCD_EP_ISR_Handler+0x162>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800443a:	b29b      	uxth	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	00db      	lsls	r3, r3, #3
 8004444:	4413      	add	r3, r2
 8004446:	3306      	adds	r3, #6
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004454:	881b      	ldrh	r3, [r3, #0]
 8004456:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800445a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800445c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800446c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800446e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004470:	b29b      	uxth	r3, r3
 8004472:	f005 fce3 	bl	8009e3c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	881b      	ldrh	r3, [r3, #0]
 800447c:	b29a      	uxth	r2, r3
 800447e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004482:	4013      	ands	r3, r2
 8004484:	823b      	strh	r3, [r7, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	8a3a      	ldrh	r2, [r7, #16]
 800448c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004490:	b292      	uxth	r2, r2
 8004492:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f007 fa53 	bl	800b940 <HAL_PCD_SetupStageCallback>
 800449a:	e310      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800449c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f280 830c 	bge.w	8004abe <PCD_EP_ISR_Handler+0x784>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	881b      	ldrh	r3, [r3, #0]
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	f640 738f 	movw	r3, #3983	; 0xf8f
 80044b2:	4013      	ands	r3, r2
 80044b4:	83fb      	strh	r3, [r7, #30]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	8bfa      	ldrh	r2, [r7, #30]
 80044bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80044c0:	b292      	uxth	r2, r2
 80044c2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	4413      	add	r3, r2
 80044d8:	3306      	adds	r3, #6
 80044da:	005b      	lsls	r3, r3, #1
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6812      	ldr	r2, [r2, #0]
 80044e0:	4413      	add	r3, r2
 80044e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80044ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ee:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80044f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d019      	beq.n	800452c <PCD_EP_ISR_Handler+0x1f2>
 80044f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <PCD_EP_ISR_Handler+0x1f2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6818      	ldr	r0, [r3, #0]
 8004504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004506:	6959      	ldr	r1, [r3, #20]
 8004508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800450c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800450e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004510:	b29b      	uxth	r3, r3
 8004512:	f005 fc93 	bl	8009e3c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	441a      	add	r2, r3
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004524:	2100      	movs	r1, #0
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f007 fa1c 	bl	800b964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004536:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800453a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800453e:	2b00      	cmp	r3, #0
 8004540:	f040 82bd 	bne.w	8004abe <PCD_EP_ISR_Handler+0x784>
 8004544:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004548:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800454c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004550:	f000 82b5 	beq.w	8004abe <PCD_EP_ISR_Handler+0x784>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004562:	b29b      	uxth	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	4413      	add	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004572:	617b      	str	r3, [r7, #20]
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	881b      	ldrh	r3, [r3, #0]
 8004578:	b29b      	uxth	r3, r3
 800457a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800457e:	b29a      	uxth	r2, r3
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	801a      	strh	r2, [r3, #0]
 8004584:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b3e      	cmp	r3, #62	; 0x3e
 800458a:	d91d      	bls.n	80045c8 <PCD_EP_ISR_Handler+0x28e>
 800458c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	647b      	str	r3, [r7, #68]	; 0x44
 8004594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	f003 031f 	and.w	r3, r3, #31
 800459c:	2b00      	cmp	r3, #0
 800459e:	d102      	bne.n	80045a6 <PCD_EP_ISR_Handler+0x26c>
 80045a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045a2:	3b01      	subs	r3, #1
 80045a4:	647b      	str	r3, [r7, #68]	; 0x44
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	881b      	ldrh	r3, [r3, #0]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	029b      	lsls	r3, r3, #10
 80045b2:	b29b      	uxth	r3, r3
 80045b4:	4313      	orrs	r3, r2
 80045b6:	b29b      	uxth	r3, r3
 80045b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	801a      	strh	r2, [r3, #0]
 80045c6:	e026      	b.n	8004616 <PCD_EP_ISR_Handler+0x2dc>
 80045c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10a      	bne.n	80045e6 <PCD_EP_ISR_Handler+0x2ac>
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	881b      	ldrh	r3, [r3, #0]
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045de:	b29a      	uxth	r2, r3
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	801a      	strh	r2, [r3, #0]
 80045e4:	e017      	b.n	8004616 <PCD_EP_ISR_Handler+0x2dc>
 80045e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	085b      	lsrs	r3, r3, #1
 80045ec:	647b      	str	r3, [r7, #68]	; 0x44
 80045ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <PCD_EP_ISR_Handler+0x2c6>
 80045fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045fc:	3301      	adds	r3, #1
 80045fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	881b      	ldrh	r3, [r3, #0]
 8004604:	b29a      	uxth	r2, r3
 8004606:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004608:	b29b      	uxth	r3, r3
 800460a:	029b      	lsls	r3, r3, #10
 800460c:	b29b      	uxth	r3, r3
 800460e:	4313      	orrs	r3, r2
 8004610:	b29a      	uxth	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	881b      	ldrh	r3, [r3, #0]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004626:	827b      	strh	r3, [r7, #18]
 8004628:	8a7b      	ldrh	r3, [r7, #18]
 800462a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800462e:	827b      	strh	r3, [r7, #18]
 8004630:	8a7b      	ldrh	r3, [r7, #18]
 8004632:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004636:	827b      	strh	r3, [r7, #18]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	8a7b      	ldrh	r3, [r7, #18]
 800463e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004642:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800464e:	b29b      	uxth	r3, r3
 8004650:	8013      	strh	r3, [r2, #0]
 8004652:	e234      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	881b      	ldrh	r3, [r3, #0]
 8004664:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004668:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800466c:	2b00      	cmp	r3, #0
 800466e:	f280 80fc 	bge.w	800486a <PCD_EP_ISR_Handler+0x530>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	881b      	ldrh	r3, [r3, #0]
 8004682:	b29a      	uxth	r2, r3
 8004684:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004688:	4013      	ands	r3, r2
 800468a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	461a      	mov	r2, r3
 8004694:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	4413      	add	r3, r2
 800469c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80046a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046a4:	b292      	uxth	r2, r2
 80046a6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80046a8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80046ac:	4613      	mov	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	4413      	add	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4413      	add	r3, r2
 80046bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80046be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046c0:	7b1b      	ldrb	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d125      	bne.n	8004712 <PCD_EP_ISR_Handler+0x3d8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	3306      	adds	r3, #6
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ee:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80046f2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f000 8092 	beq.w	8004820 <PCD_EP_ISR_Handler+0x4e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004702:	6959      	ldr	r1, [r3, #20]
 8004704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004706:	88da      	ldrh	r2, [r3, #6]
 8004708:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800470c:	f005 fb96 	bl	8009e3c <USB_ReadPMA>
 8004710:	e086      	b.n	8004820 <PCD_EP_ISR_Handler+0x4e6>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004714:	78db      	ldrb	r3, [r3, #3]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d10a      	bne.n	8004730 <PCD_EP_ISR_Handler+0x3f6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800471a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800471e:	461a      	mov	r2, r3
 8004720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9d9 	bl	8004ada <HAL_PCD_EP_DB_Receive>
 8004728:	4603      	mov	r3, r0
 800472a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800472e:	e077      	b.n	8004820 <PCD_EP_ISR_Handler+0x4e6>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4413      	add	r3, r2
 800473e:	881b      	ldrh	r3, [r3, #0]
 8004740:	b29b      	uxth	r3, r3
 8004742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800474a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	461a      	mov	r2, r3
 8004754:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800476c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004770:	b29b      	uxth	r3, r3
 8004772:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	b29b      	uxth	r3, r3
 8004786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d024      	beq.n	80047d8 <PCD_EP_ISR_Handler+0x49e>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004796:	b29b      	uxth	r3, r3
 8004798:	461a      	mov	r2, r3
 800479a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	00db      	lsls	r3, r3, #3
 80047a0:	4413      	add	r3, r2
 80047a2:	3302      	adds	r3, #2
 80047a4:	005b      	lsls	r3, r3, #1
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6812      	ldr	r2, [r2, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80047ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d02e      	beq.n	8004820 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6818      	ldr	r0, [r3, #0]
 80047c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047cc:	891a      	ldrh	r2, [r3, #8]
 80047ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80047d2:	f005 fb33 	bl	8009e3c <USB_ReadPMA>
 80047d6:	e023      	b.n	8004820 <PCD_EP_ISR_Handler+0x4e6>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	00db      	lsls	r3, r3, #3
 80047ea:	4413      	add	r3, r2
 80047ec:	3306      	adds	r3, #6
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80047fa:	881b      	ldrh	r3, [r3, #0]
 80047fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004800:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004804:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004808:	2b00      	cmp	r3, #0
 800480a:	d009      	beq.n	8004820 <PCD_EP_ISR_Handler+0x4e6>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6818      	ldr	r0, [r3, #0]
 8004810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004812:	6959      	ldr	r1, [r3, #20]
 8004814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004816:	895a      	ldrh	r2, [r3, #10]
 8004818:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800481c:	f005 fb0e 	bl	8009e3c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004822:	69da      	ldr	r2, [r3, #28]
 8004824:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004828:	441a      	add	r2, r3
 800482a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800482c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800482e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004830:	695a      	ldr	r2, [r3, #20]
 8004832:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004836:	441a      	add	r2, r3
 8004838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800483c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <PCD_EP_ISR_Handler+0x516>
 8004844:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	429a      	cmp	r2, r3
 800484e:	d206      	bcs.n	800485e <PCD_EP_ISR_Handler+0x524>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	4619      	mov	r1, r3
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f007 f884 	bl	800b964 <HAL_PCD_DataOutStageCallback>
 800485c:	e005      	b.n	800486a <PCD_EP_ISR_Handler+0x530>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004864:	4618      	mov	r0, r3
 8004866:	f003 fdb5 	bl	80083d4 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800486a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800486e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8123 	beq.w	8004abe <PCD_EP_ISR_Handler+0x784>
      {
        ep = &hpcd->IN_ep[epindex];
 8004878:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800487c:	4613      	mov	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	00db      	lsls	r3, r3, #3
 8004884:	3310      	adds	r3, #16
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4413      	add	r3, r2
 800488a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4413      	add	r3, r2
 800489a:	881b      	ldrh	r3, [r3, #0]
 800489c:	b29b      	uxth	r3, r3
 800489e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80048a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	461a      	mov	r2, r3
 80048b0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	441a      	add	r2, r3
 80048b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80048bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80048c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ca:	78db      	ldrb	r3, [r3, #3]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	f040 80a2 	bne.w	8004a16 <PCD_EP_ISR_Handler+0x6dc>
        {
          ep->xfer_len = 0U;
 80048d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048d4:	2200      	movs	r2, #0
 80048d6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80048d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048da:	7b1b      	ldrb	r3, [r3, #12]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 8093 	beq.w	8004a08 <PCD_EP_ISR_Handler+0x6ce>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048e2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d046      	beq.n	800497c <PCD_EP_ISR_Handler+0x642>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048f0:	785b      	ldrb	r3, [r3, #1]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d126      	bne.n	8004944 <PCD_EP_ISR_Handler+0x60a>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	627b      	str	r3, [r7, #36]	; 0x24
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004904:	b29b      	uxth	r3, r3
 8004906:	461a      	mov	r2, r3
 8004908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800490a:	4413      	add	r3, r2
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	011a      	lsls	r2, r3, #4
 8004914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004916:	4413      	add	r3, r2
 8004918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004928:	b29a      	uxth	r2, r3
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	801a      	strh	r2, [r3, #0]
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	b29b      	uxth	r3, r3
 8004934:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004938:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800493c:	b29a      	uxth	r2, r3
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	801a      	strh	r2, [r3, #0]
 8004942:	e061      	b.n	8004a08 <PCD_EP_ISR_Handler+0x6ce>
 8004944:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d15d      	bne.n	8004a08 <PCD_EP_ISR_Handler+0x6ce>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800495a:	b29b      	uxth	r3, r3
 800495c:	461a      	mov	r2, r3
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	4413      	add	r3, r2
 8004962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004964:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	011a      	lsls	r2, r3, #4
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	4413      	add	r3, r2
 800496e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	2200      	movs	r2, #0
 8004978:	801a      	strh	r2, [r3, #0]
 800497a:	e045      	b.n	8004a08 <PCD_EP_ISR_Handler+0x6ce>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004982:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004984:	785b      	ldrb	r3, [r3, #1]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d126      	bne.n	80049d8 <PCD_EP_ISR_Handler+0x69e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	637b      	str	r3, [r7, #52]	; 0x34
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004998:	b29b      	uxth	r3, r3
 800499a:	461a      	mov	r2, r3
 800499c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800499e:	4413      	add	r3, r2
 80049a0:	637b      	str	r3, [r7, #52]	; 0x34
 80049a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	011a      	lsls	r2, r3, #4
 80049a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049aa:	4413      	add	r3, r2
 80049ac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049bc:	b29a      	uxth	r2, r3
 80049be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c0:	801a      	strh	r2, [r3, #0]
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	881b      	ldrh	r3, [r3, #0]
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	e017      	b.n	8004a08 <PCD_EP_ISR_Handler+0x6ce>
 80049d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049da:	785b      	ldrb	r3, [r3, #1]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d113      	bne.n	8004a08 <PCD_EP_ISR_Handler+0x6ce>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	4413      	add	r3, r2
 80049f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	011a      	lsls	r2, r3, #4
 80049f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049fa:	4413      	add	r3, r2
 80049fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a04:	2200      	movs	r2, #0
 8004a06:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f006 ffc3 	bl	800b99a <HAL_PCD_DataInStageCallback>
 8004a14:	e053      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004a16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d146      	bne.n	8004ab0 <PCD_EP_ISR_Handler+0x776>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	3302      	adds	r3, #2
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4413      	add	r3, r2
 8004a40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a44:	881b      	ldrh	r3, [r3, #0]
 8004a46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a4a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d907      	bls.n	8004a6a <PCD_EP_ISR_Handler+0x730>
            {
              ep->xfer_len -= TxPctSize;
 8004a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a66:	619a      	str	r2, [r3, #24]
 8004a68:	e002      	b.n	8004a70 <PCD_EP_ISR_Handler+0x736>
            }
            else
            {
              ep->xfer_len = 0U;
 8004a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a72:	699b      	ldr	r3, [r3, #24]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d106      	bne.n	8004a86 <PCD_EP_ISR_Handler+0x74c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f006 ff8b 	bl	800b99a <HAL_PCD_DataInStageCallback>
 8004a84:	e01b      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004a86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a88:	695a      	ldr	r2, [r3, #20]
 8004a8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a8e:	441a      	add	r2, r3
 8004a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a92:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a96:	69da      	ldr	r2, [r3, #28]
 8004a98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004a9c:	441a      	add	r2, r3
 8004a9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aa0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f003 fc93 	bl	80083d4 <USB_EPStartXfer>
 8004aae:	e006      	b.n	8004abe <PCD_EP_ISR_Handler+0x784>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004ab0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f91b 	bl	8004cf4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f6ff ac3a 	blt.w	8004344 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3758      	adds	r7, #88	; 0x58
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b088      	sub	sp, #32
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d07e      	beq.n	8004bf0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	461a      	mov	r2, r3
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	3302      	adds	r3, #2
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b14:	881b      	ldrh	r3, [r3, #0]
 8004b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	699a      	ldr	r2, [r3, #24]
 8004b20:	8b7b      	ldrh	r3, [r7, #26]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d306      	bcc.n	8004b34 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	8b7b      	ldrh	r3, [r7, #26]
 8004b2c:	1ad2      	subs	r2, r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	619a      	str	r2, [r3, #24]
 8004b32:	e002      	b.n	8004b3a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	2200      	movs	r2, #0
 8004b38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d123      	bne.n	8004b8a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	461a      	mov	r2, r3
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	833b      	strh	r3, [r7, #24]
 8004b5e:	8b3b      	ldrh	r3, [r7, #24]
 8004b60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b64:	833b      	strh	r3, [r7, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	441a      	add	r2, r3
 8004b74:	8b3b      	ldrh	r3, [r7, #24]
 8004b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01f      	beq.n	8004bd4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bae:	82fb      	strh	r3, [r7, #22]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	441a      	add	r2, r3
 8004bbe:	8afb      	ldrh	r3, [r7, #22]
 8004bc0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bc4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bcc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004bd4:	8b7b      	ldrh	r3, [r7, #26]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f000 8087 	beq.w	8004cea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6818      	ldr	r0, [r3, #0]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	6959      	ldr	r1, [r3, #20]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	891a      	ldrh	r2, [r3, #8]
 8004be8:	8b7b      	ldrh	r3, [r7, #26]
 8004bea:	f005 f927 	bl	8009e3c <USB_ReadPMA>
 8004bee:	e07c      	b.n	8004cea <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	3306      	adds	r3, #6
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c12:	881b      	ldrh	r3, [r3, #0]
 8004c14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c18:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	8b7b      	ldrh	r3, [r7, #26]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d306      	bcc.n	8004c32 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	699a      	ldr	r2, [r3, #24]
 8004c28:	8b7b      	ldrh	r3, [r7, #26]
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	619a      	str	r2, [r3, #24]
 8004c30:	e002      	b.n	8004c38 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d123      	bne.n	8004c88 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	4413      	add	r3, r2
 8004c4e:	881b      	ldrh	r3, [r3, #0]
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5a:	83fb      	strh	r3, [r7, #30]
 8004c5c:	8bfb      	ldrh	r3, [r7, #30]
 8004c5e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004c62:	83fb      	strh	r3, [r7, #30]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	009b      	lsls	r3, r3, #2
 8004c70:	441a      	add	r2, r3
 8004c72:	8bfb      	ldrh	r3, [r7, #30]
 8004c74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004c88:	88fb      	ldrh	r3, [r7, #6]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11f      	bne.n	8004cd2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	881b      	ldrh	r3, [r3, #0]
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cac:	83bb      	strh	r3, [r7, #28]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	781b      	ldrb	r3, [r3, #0]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	441a      	add	r2, r3
 8004cbc:	8bbb      	ldrh	r3, [r7, #28]
 8004cbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004cd2:	8b7b      	ldrh	r3, [r7, #26]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6818      	ldr	r0, [r3, #0]
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	6959      	ldr	r1, [r3, #20]
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	895a      	ldrh	r2, [r3, #10]
 8004ce4:	8b7b      	ldrh	r3, [r7, #26]
 8004ce6:	f005 f8a9 	bl	8009e3c <USB_ReadPMA>
    }
  }

  return count;
 8004cea:	8b7b      	ldrh	r3, [r7, #26]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b0a4      	sub	sp, #144	; 0x90
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 81dd 	beq.w	80050c8 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	461a      	mov	r2, r3
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	4413      	add	r3, r2
 8004d22:	3302      	adds	r3, #2
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d30:	881b      	ldrh	r3, [r3, #0]
 8004d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d36:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d907      	bls.n	8004d56 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004d4e:	1ad2      	subs	r2, r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	619a      	str	r2, [r3, #24]
 8004d54:	e002      	b.n	8004d5c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 80b9 	bne.w	8004ed8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d126      	bne.n	8004dbc <HAL_PCD_EP_DB_Transmit+0xc8>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d82:	4413      	add	r3, r2
 8004d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	011a      	lsls	r2, r3, #4
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	4413      	add	r3, r2
 8004d90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	881b      	ldrh	r3, [r3, #0]
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	881b      	ldrh	r3, [r3, #0]
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004db0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	801a      	strh	r2, [r3, #0]
 8004dba:	e01a      	b.n	8004df2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	785b      	ldrb	r3, [r3, #1]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d116      	bne.n	8004df2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	4413      	add	r3, r2
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	011a      	lsls	r2, r3, #4
 8004de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de4:	4413      	add	r3, r2
 8004de6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004dea:	633b      	str	r3, [r7, #48]	; 0x30
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	2200      	movs	r2, #0
 8004df0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	785b      	ldrb	r3, [r3, #1]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d126      	bne.n	8004e4e <HAL_PCD_EP_DB_Transmit+0x15a>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	461a      	mov	r2, r3
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	4413      	add	r3, r2
 8004e16:	61fb      	str	r3, [r7, #28]
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	011a      	lsls	r2, r3, #4
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	801a      	strh	r2, [r3, #0]
 8004e38:	69bb      	ldr	r3, [r7, #24]
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004e42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	801a      	strh	r2, [r3, #0]
 8004e4c:	e017      	b.n	8004e7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	785b      	ldrb	r3, [r3, #1]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d113      	bne.n	8004e7e <HAL_PCD_EP_DB_Transmit+0x18a>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	461a      	mov	r2, r3
 8004e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e64:	4413      	add	r3, r2
 8004e66:	627b      	str	r3, [r7, #36]	; 0x24
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	011a      	lsls	r2, r3, #4
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	4413      	add	r3, r2
 8004e72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004e76:	623b      	str	r3, [r7, #32]
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	4619      	mov	r1, r3
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f006 fd88 	bl	800b99a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 82fc 	beq.w	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	881b      	ldrh	r3, [r3, #0]
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb0:	82fb      	strh	r3, [r7, #22]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8afb      	ldrh	r3, [r7, #22]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
 8004ed6:	e2da      	b.n	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004ed8:	88fb      	ldrh	r3, [r7, #6]
 8004eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d021      	beq.n	8004f26 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	881b      	ldrh	r3, [r3, #0]
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	461a      	mov	r2, r3
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	441a      	add	r2, r3
 8004f0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	f040 82ae 	bne.w	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	695a      	ldr	r2, [r3, #20]
 8004f36:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f3a:	441a      	add	r2, r3
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f48:	441a      	add	r2, r3
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	6a1a      	ldr	r2, [r3, #32]
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d30b      	bcc.n	8004f72 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	6a1a      	ldr	r2, [r3, #32]
 8004f66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f6a:	1ad2      	subs	r2, r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	621a      	str	r2, [r3, #32]
 8004f70:	e017      	b.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f8a:	e00a      	b.n	8004fa2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	785b      	ldrb	r3, [r3, #1]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d165      	bne.n	8005076 <HAL_PCD_EP_DB_Transmit+0x382>
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fbe:	4413      	add	r3, r2
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	011a      	lsls	r2, r3, #4
 8004fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fca:	4413      	add	r3, r2
 8004fcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	801a      	strh	r2, [r3, #0]
 8004fe2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe6:	2b3e      	cmp	r3, #62	; 0x3e
 8004fe8:	d91d      	bls.n	8005026 <HAL_PCD_EP_DB_Transmit+0x332>
 8004fea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ff6:	f003 031f 	and.w	r3, r3, #31
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <HAL_PCD_EP_DB_Transmit+0x310>
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005000:	3b01      	subs	r3, #1
 8005002:	64bb      	str	r3, [r7, #72]	; 0x48
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	881b      	ldrh	r3, [r3, #0]
 8005008:	b29a      	uxth	r2, r3
 800500a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800500c:	b29b      	uxth	r3, r3
 800500e:	029b      	lsls	r3, r3, #10
 8005010:	b29b      	uxth	r3, r3
 8005012:	4313      	orrs	r3, r2
 8005014:	b29b      	uxth	r3, r3
 8005016:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800501a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800501e:	b29a      	uxth	r2, r3
 8005020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005022:	801a      	strh	r2, [r3, #0]
 8005024:	e044      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005026:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d10a      	bne.n	8005044 <HAL_PCD_EP_DB_Transmit+0x350>
 800502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	b29b      	uxth	r3, r3
 8005034:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005038:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800503c:	b29a      	uxth	r2, r3
 800503e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005040:	801a      	strh	r2, [r3, #0]
 8005042:	e035      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005048:	085b      	lsrs	r3, r3, #1
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
 800504c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_PCD_EP_DB_Transmit+0x36a>
 8005058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800505a:	3301      	adds	r3, #1
 800505c:	64bb      	str	r3, [r7, #72]	; 0x48
 800505e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29a      	uxth	r2, r3
 8005064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005066:	b29b      	uxth	r3, r3
 8005068:	029b      	lsls	r3, r3, #10
 800506a:	b29b      	uxth	r3, r3
 800506c:	4313      	orrs	r3, r2
 800506e:	b29a      	uxth	r2, r3
 8005070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005072:	801a      	strh	r2, [r3, #0]
 8005074:	e01c      	b.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	785b      	ldrb	r3, [r3, #1]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d118      	bne.n	80050b0 <HAL_PCD_EP_DB_Transmit+0x3bc>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	647b      	str	r3, [r7, #68]	; 0x44
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800508c:	b29b      	uxth	r3, r3
 800508e:	461a      	mov	r2, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	4413      	add	r3, r2
 8005094:	647b      	str	r3, [r7, #68]	; 0x44
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	011a      	lsls	r2, r3, #4
 800509c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800509e:	4413      	add	r3, r2
 80050a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050a4:	643b      	str	r3, [r7, #64]	; 0x40
 80050a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ae:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	6959      	ldr	r1, [r3, #20]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	891a      	ldrh	r2, [r3, #8]
 80050bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f004 fe76 	bl	8009db2 <USB_WritePMA>
 80050c6:	e1e2      	b.n	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	461a      	mov	r2, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	3306      	adds	r3, #6
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	6812      	ldr	r2, [r2, #0]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050f0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d307      	bcc.n	8005110 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	699a      	ldr	r2, [r3, #24]
 8005104:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005108:	1ad2      	subs	r2, r2, r3
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	619a      	str	r2, [r3, #24]
 800510e:	e002      	b.n	8005116 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2200      	movs	r2, #0
 8005114:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	699b      	ldr	r3, [r3, #24]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 80c0 	bne.w	80052a0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	785b      	ldrb	r3, [r3, #1]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d126      	bne.n	8005176 <HAL_PCD_EP_DB_Transmit+0x482>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800513c:	4413      	add	r3, r2
 800513e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	011a      	lsls	r2, r3, #4
 8005146:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005148:	4413      	add	r3, r2
 800514a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800514e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005150:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005152:	881b      	ldrh	r3, [r3, #0]
 8005154:	b29b      	uxth	r3, r3
 8005156:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800515a:	b29a      	uxth	r2, r3
 800515c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800515e:	801a      	strh	r2, [r3, #0]
 8005160:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800516a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800516e:	b29a      	uxth	r2, r3
 8005170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	e01a      	b.n	80051ac <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d116      	bne.n	80051ac <HAL_PCD_EP_DB_Transmit+0x4b8>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	667b      	str	r3, [r7, #100]	; 0x64
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800518c:	b29b      	uxth	r3, r3
 800518e:	461a      	mov	r2, r3
 8005190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005192:	4413      	add	r3, r2
 8005194:	667b      	str	r3, [r7, #100]	; 0x64
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	011a      	lsls	r2, r3, #4
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	4413      	add	r3, r2
 80051a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051a4:	663b      	str	r3, [r7, #96]	; 0x60
 80051a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051a8:	2200      	movs	r2, #0
 80051aa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	677b      	str	r3, [r7, #116]	; 0x74
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	785b      	ldrb	r3, [r3, #1]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d12b      	bne.n	8005212 <HAL_PCD_EP_DB_Transmit+0x51e>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	461a      	mov	r2, r3
 80051cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ce:	4413      	add	r3, r2
 80051d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	011a      	lsls	r2, r3, #4
 80051d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051da:	4413      	add	r3, r2
 80051dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80051e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051e8:	881b      	ldrh	r3, [r3, #0]
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051f6:	801a      	strh	r2, [r3, #0]
 80051f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80051fc:	881b      	ldrh	r3, [r3, #0]
 80051fe:	b29b      	uxth	r3, r3
 8005200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005208:	b29a      	uxth	r2, r3
 800520a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800520e:	801a      	strh	r2, [r3, #0]
 8005210:	e017      	b.n	8005242 <HAL_PCD_EP_DB_Transmit+0x54e>
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	785b      	ldrb	r3, [r3, #1]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d113      	bne.n	8005242 <HAL_PCD_EP_DB_Transmit+0x54e>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005228:	4413      	add	r3, r2
 800522a:	677b      	str	r3, [r7, #116]	; 0x74
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	011a      	lsls	r2, r3, #4
 8005232:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005234:	4413      	add	r3, r2
 8005236:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800523a:	673b      	str	r3, [r7, #112]	; 0x70
 800523c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800523e:	2200      	movs	r2, #0
 8005240:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	4619      	mov	r1, r3
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f006 fba6 	bl	800b99a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005254:	2b00      	cmp	r3, #0
 8005256:	f040 811a 	bne.w	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	4413      	add	r3, r2
 8005268:	881b      	ldrh	r3, [r3, #0]
 800526a:	b29b      	uxth	r3, r3
 800526c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005274:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	461a      	mov	r2, r3
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	441a      	add	r2, r3
 8005286:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800528a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800528e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005296:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800529a:	b29b      	uxth	r3, r3
 800529c:	8013      	strh	r3, [r2, #0]
 800529e:	e0f6      	b.n	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80052a0:	88fb      	ldrh	r3, [r7, #6]
 80052a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d121      	bne.n	80052ee <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	461a      	mov	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	781b      	ldrb	r3, [r3, #0]
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	4413      	add	r3, r2
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	461a      	mov	r2, r3
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	441a      	add	r2, r3
 80052d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80052da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	f040 80ca 	bne.w	800548e <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005302:	441a      	add	r2, r3
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005310:	441a      	add	r2, r3
 8005312:	68bb      	ldr	r3, [r7, #8]
 8005314:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6a1a      	ldr	r2, [r3, #32]
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	429a      	cmp	r2, r3
 8005320:	d30b      	bcc.n	800533a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	6a1a      	ldr	r2, [r3, #32]
 800532e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005332:	1ad2      	subs	r2, r2, r3
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	621a      	str	r2, [r3, #32]
 8005338:	e017      	b.n	800536a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d108      	bne.n	8005354 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8005342:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005352:	e00a      	b.n	800536a <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2200      	movs	r2, #0
 8005360:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d165      	bne.n	8005444 <HAL_PCD_EP_DB_Transmit+0x750>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	461a      	mov	r2, r3
 800538a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800538c:	4413      	add	r3, r2
 800538e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	011a      	lsls	r2, r3, #4
 8005396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005398:	4413      	add	r3, r2
 800539a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800539e:	65bb      	str	r3, [r7, #88]	; 0x58
 80053a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a2:	881b      	ldrh	r3, [r3, #0]
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053aa:	b29a      	uxth	r2, r3
 80053ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053b4:	2b3e      	cmp	r3, #62	; 0x3e
 80053b6:	d91d      	bls.n	80053f4 <HAL_PCD_EP_DB_Transmit+0x700>
 80053b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053bc:	095b      	lsrs	r3, r3, #5
 80053be:	66bb      	str	r3, [r7, #104]	; 0x68
 80053c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053c4:	f003 031f 	and.w	r3, r3, #31
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <HAL_PCD_EP_DB_Transmit+0x6de>
 80053cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053ce:	3b01      	subs	r3, #1
 80053d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80053d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29a      	uxth	r2, r3
 80053d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80053da:	b29b      	uxth	r3, r3
 80053dc:	029b      	lsls	r3, r3, #10
 80053de:	b29b      	uxth	r3, r3
 80053e0:	4313      	orrs	r3, r2
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053f0:	801a      	strh	r2, [r3, #0]
 80053f2:	e041      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x784>
 80053f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <HAL_PCD_EP_DB_Transmit+0x71e>
 80053fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053fe:	881b      	ldrh	r3, [r3, #0]
 8005400:	b29b      	uxth	r3, r3
 8005402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800540a:	b29a      	uxth	r2, r3
 800540c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800540e:	801a      	strh	r2, [r3, #0]
 8005410:	e032      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x784>
 8005412:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005416:	085b      	lsrs	r3, r3, #1
 8005418:	66bb      	str	r3, [r7, #104]	; 0x68
 800541a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_PCD_EP_DB_Transmit+0x738>
 8005426:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005428:	3301      	adds	r3, #1
 800542a:	66bb      	str	r3, [r7, #104]	; 0x68
 800542c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800542e:	881b      	ldrh	r3, [r3, #0]
 8005430:	b29a      	uxth	r2, r3
 8005432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005434:	b29b      	uxth	r3, r3
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	b29b      	uxth	r3, r3
 800543a:	4313      	orrs	r3, r2
 800543c:	b29a      	uxth	r2, r3
 800543e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	e019      	b.n	8005478 <HAL_PCD_EP_DB_Transmit+0x784>
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d115      	bne.n	8005478 <HAL_PCD_EP_DB_Transmit+0x784>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005454:	b29b      	uxth	r3, r3
 8005456:	461a      	mov	r2, r3
 8005458:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800545a:	4413      	add	r3, r2
 800545c:	657b      	str	r3, [r7, #84]	; 0x54
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	011a      	lsls	r2, r3, #4
 8005464:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005466:	4413      	add	r3, r2
 8005468:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800546c:	653b      	str	r3, [r7, #80]	; 0x50
 800546e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005472:	b29a      	uxth	r2, r3
 8005474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005476:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6818      	ldr	r0, [r3, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	6959      	ldr	r1, [r3, #20]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	895a      	ldrh	r2, [r3, #10]
 8005484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005488:	b29b      	uxth	r3, r3
 800548a:	f004 fc92 	bl	8009db2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	461a      	mov	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	4413      	add	r3, r2
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a8:	82bb      	strh	r3, [r7, #20]
 80054aa:	8abb      	ldrh	r3, [r7, #20]
 80054ac:	f083 0310 	eor.w	r3, r3, #16
 80054b0:	82bb      	strh	r3, [r7, #20]
 80054b2:	8abb      	ldrh	r3, [r7, #20]
 80054b4:	f083 0320 	eor.w	r3, r3, #32
 80054b8:	82bb      	strh	r3, [r7, #20]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	441a      	add	r2, r3
 80054c8:	8abb      	ldrh	r3, [r7, #20]
 80054ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80054ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80054d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80054d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054da:	b29b      	uxth	r3, r3
 80054dc:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3790      	adds	r7, #144	; 0x90
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	817b      	strh	r3, [r7, #10]
 80054f6:	4613      	mov	r3, r2
 80054f8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80054fa:	897b      	ldrh	r3, [r7, #10]
 80054fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005500:	b29b      	uxth	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005506:	897b      	ldrh	r3, [r7, #10]
 8005508:	f003 0207 	and.w	r2, r3, #7
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	3310      	adds	r3, #16
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	4413      	add	r3, r2
 800551a:	617b      	str	r3, [r7, #20]
 800551c:	e009      	b.n	8005532 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800551e:	897a      	ldrh	r2, [r7, #10]
 8005520:	4613      	mov	r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005532:	893b      	ldrh	r3, [r7, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d107      	bne.n	8005548 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2200      	movs	r2, #0
 800553c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	b29a      	uxth	r2, r3
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	80da      	strh	r2, [r3, #6]
 8005546:	e00b      	b.n	8005560 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	2201      	movs	r2, #1
 800554c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	b29a      	uxth	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	0c1b      	lsrs	r3, r3, #16
 800555a:	b29a      	uxth	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr

0800556c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005570:	4b03      	ldr	r3, [pc, #12]	; (8005580 <HAL_PWR_EnableBkUpAccess+0x14>)
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
}
 8005576:	bf00      	nop
 8005578:	46bd      	mov	sp, r7
 800557a:	bc80      	pop	{r7}
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	420e0020 	.word	0x420e0020

08005584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e272      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 8087 	beq.w	80056b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80055a4:	4b92      	ldr	r3, [pc, #584]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b04      	cmp	r3, #4
 80055ae:	d00c      	beq.n	80055ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80055b0:	4b8f      	ldr	r3, [pc, #572]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f003 030c 	and.w	r3, r3, #12
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d112      	bne.n	80055e2 <HAL_RCC_OscConfig+0x5e>
 80055bc:	4b8c      	ldr	r3, [pc, #560]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c8:	d10b      	bne.n	80055e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ca:	4b89      	ldr	r3, [pc, #548]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d06c      	beq.n	80056b0 <HAL_RCC_OscConfig+0x12c>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d168      	bne.n	80056b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e24c      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055ea:	d106      	bne.n	80055fa <HAL_RCC_OscConfig+0x76>
 80055ec:	4b80      	ldr	r3, [pc, #512]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a7f      	ldr	r2, [pc, #508]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80055f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e02e      	b.n	8005658 <HAL_RCC_OscConfig+0xd4>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10c      	bne.n	800561c <HAL_RCC_OscConfig+0x98>
 8005602:	4b7b      	ldr	r3, [pc, #492]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a7a      	ldr	r2, [pc, #488]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005608:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b78      	ldr	r3, [pc, #480]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a77      	ldr	r2, [pc, #476]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005614:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005618:	6013      	str	r3, [r2, #0]
 800561a:	e01d      	b.n	8005658 <HAL_RCC_OscConfig+0xd4>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005624:	d10c      	bne.n	8005640 <HAL_RCC_OscConfig+0xbc>
 8005626:	4b72      	ldr	r3, [pc, #456]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a71      	ldr	r2, [pc, #452]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800562c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005630:	6013      	str	r3, [r2, #0]
 8005632:	4b6f      	ldr	r3, [pc, #444]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a6e      	ldr	r2, [pc, #440]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800563c:	6013      	str	r3, [r2, #0]
 800563e:	e00b      	b.n	8005658 <HAL_RCC_OscConfig+0xd4>
 8005640:	4b6b      	ldr	r3, [pc, #428]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a6a      	ldr	r2, [pc, #424]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800564a:	6013      	str	r3, [r2, #0]
 800564c:	4b68      	ldr	r3, [pc, #416]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a67      	ldr	r2, [pc, #412]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005656:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d013      	beq.n	8005688 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005660:	f7fb fe6a 	bl	8001338 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005668:	f7fb fe66 	bl	8001338 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b64      	cmp	r3, #100	; 0x64
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e200      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800567a:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d0f0      	beq.n	8005668 <HAL_RCC_OscConfig+0xe4>
 8005686:	e014      	b.n	80056b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005688:	f7fb fe56 	bl	8001338 <HAL_GetTick>
 800568c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800568e:	e008      	b.n	80056a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005690:	f7fb fe52 	bl	8001338 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	2b64      	cmp	r3, #100	; 0x64
 800569c:	d901      	bls.n	80056a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800569e:	2303      	movs	r3, #3
 80056a0:	e1ec      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80056a2:	4b53      	ldr	r3, [pc, #332]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1f0      	bne.n	8005690 <HAL_RCC_OscConfig+0x10c>
 80056ae:	e000      	b.n	80056b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0302 	and.w	r3, r3, #2
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d063      	beq.n	8005786 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80056be:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00b      	beq.n	80056e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80056ca:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f003 030c 	and.w	r3, r3, #12
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d11c      	bne.n	8005710 <HAL_RCC_OscConfig+0x18c>
 80056d6:	4b46      	ldr	r3, [pc, #280]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d116      	bne.n	8005710 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80056e2:	4b43      	ldr	r3, [pc, #268]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d005      	beq.n	80056fa <HAL_RCC_OscConfig+0x176>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e1c0      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056fa:	4b3d      	ldr	r3, [pc, #244]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4939      	ldr	r1, [pc, #228]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800570e:	e03a      	b.n	8005786 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x270>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571e:	f7fb fe0b 	bl	8001338 <HAL_GetTick>
 8005722:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005724:	e008      	b.n	8005738 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005726:	f7fb fe07 	bl	8001338 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d901      	bls.n	8005738 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e1a1      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005738:	4b2d      	ldr	r3, [pc, #180]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0f0      	beq.n	8005726 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005744:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4927      	ldr	r1, [pc, #156]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 8005754:	4313      	orrs	r3, r2
 8005756:	600b      	str	r3, [r1, #0]
 8005758:	e015      	b.n	8005786 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <HAL_RCC_OscConfig+0x270>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fb fdea 	bl	8001338 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005768:	f7fb fde6 	bl	8001338 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e180      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800577a:	4b1d      	ldr	r3, [pc, #116]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d03a      	beq.n	8005808 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d019      	beq.n	80057ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579a:	4b17      	ldr	r3, [pc, #92]	; (80057f8 <HAL_RCC_OscConfig+0x274>)
 800579c:	2201      	movs	r2, #1
 800579e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057a0:	f7fb fdca 	bl	8001338 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057a8:	f7fb fdc6 	bl	8001338 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e160      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80057ba:	4b0d      	ldr	r3, [pc, #52]	; (80057f0 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80057c6:	2001      	movs	r0, #1
 80057c8:	f000 face 	bl	8005d68 <RCC_Delay>
 80057cc:	e01c      	b.n	8005808 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057ce:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <HAL_RCC_OscConfig+0x274>)
 80057d0:	2200      	movs	r2, #0
 80057d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80057d4:	f7fb fdb0 	bl	8001338 <HAL_GetTick>
 80057d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057da:	e00f      	b.n	80057fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057dc:	f7fb fdac 	bl	8001338 <HAL_GetTick>
 80057e0:	4602      	mov	r2, r0
 80057e2:	693b      	ldr	r3, [r7, #16]
 80057e4:	1ad3      	subs	r3, r2, r3
 80057e6:	2b02      	cmp	r3, #2
 80057e8:	d908      	bls.n	80057fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e146      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	42420000 	.word	0x42420000
 80057f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80057fc:	4b92      	ldr	r3, [pc, #584]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80057fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005800:	f003 0302 	and.w	r3, r3, #2
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e9      	bne.n	80057dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
 8005810:	2b00      	cmp	r3, #0
 8005812:	f000 80a6 	beq.w	8005962 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005816:	2300      	movs	r3, #0
 8005818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800581a:	4b8b      	ldr	r3, [pc, #556]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10d      	bne.n	8005842 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005826:	4b88      	ldr	r3, [pc, #544]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	4a87      	ldr	r2, [pc, #540]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800582c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005830:	61d3      	str	r3, [r2, #28]
 8005832:	4b85      	ldr	r3, [pc, #532]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005834:	69db      	ldr	r3, [r3, #28]
 8005836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800583a:	60bb      	str	r3, [r7, #8]
 800583c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800583e:	2301      	movs	r3, #1
 8005840:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005842:	4b82      	ldr	r3, [pc, #520]	; (8005a4c <HAL_RCC_OscConfig+0x4c8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d118      	bne.n	8005880 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800584e:	4b7f      	ldr	r3, [pc, #508]	; (8005a4c <HAL_RCC_OscConfig+0x4c8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a7e      	ldr	r2, [pc, #504]	; (8005a4c <HAL_RCC_OscConfig+0x4c8>)
 8005854:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005858:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800585a:	f7fb fd6d 	bl	8001338 <HAL_GetTick>
 800585e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005860:	e008      	b.n	8005874 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005862:	f7fb fd69 	bl	8001338 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b64      	cmp	r3, #100	; 0x64
 800586e:	d901      	bls.n	8005874 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e103      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005874:	4b75      	ldr	r3, [pc, #468]	; (8005a4c <HAL_RCC_OscConfig+0x4c8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d106      	bne.n	8005896 <HAL_RCC_OscConfig+0x312>
 8005888:	4b6f      	ldr	r3, [pc, #444]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	4a6e      	ldr	r2, [pc, #440]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800588e:	f043 0301 	orr.w	r3, r3, #1
 8005892:	6213      	str	r3, [r2, #32]
 8005894:	e02d      	b.n	80058f2 <HAL_RCC_OscConfig+0x36e>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10c      	bne.n	80058b8 <HAL_RCC_OscConfig+0x334>
 800589e:	4b6a      	ldr	r3, [pc, #424]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058a0:	6a1b      	ldr	r3, [r3, #32]
 80058a2:	4a69      	ldr	r2, [pc, #420]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	6213      	str	r3, [r2, #32]
 80058aa:	4b67      	ldr	r3, [pc, #412]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	4a66      	ldr	r2, [pc, #408]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	6213      	str	r3, [r2, #32]
 80058b6:	e01c      	b.n	80058f2 <HAL_RCC_OscConfig+0x36e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b05      	cmp	r3, #5
 80058be:	d10c      	bne.n	80058da <HAL_RCC_OscConfig+0x356>
 80058c0:	4b61      	ldr	r3, [pc, #388]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	4a60      	ldr	r2, [pc, #384]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058c6:	f043 0304 	orr.w	r3, r3, #4
 80058ca:	6213      	str	r3, [r2, #32]
 80058cc:	4b5e      	ldr	r3, [pc, #376]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	4a5d      	ldr	r2, [pc, #372]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058d2:	f043 0301 	orr.w	r3, r3, #1
 80058d6:	6213      	str	r3, [r2, #32]
 80058d8:	e00b      	b.n	80058f2 <HAL_RCC_OscConfig+0x36e>
 80058da:	4b5b      	ldr	r3, [pc, #364]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	4a5a      	ldr	r2, [pc, #360]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058e0:	f023 0301 	bic.w	r3, r3, #1
 80058e4:	6213      	str	r3, [r2, #32]
 80058e6:	4b58      	ldr	r3, [pc, #352]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	4a57      	ldr	r2, [pc, #348]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80058ec:	f023 0304 	bic.w	r3, r3, #4
 80058f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d015      	beq.n	8005926 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058fa:	f7fb fd1d 	bl	8001338 <HAL_GetTick>
 80058fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005900:	e00a      	b.n	8005918 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005902:	f7fb fd19 	bl	8001338 <HAL_GetTick>
 8005906:	4602      	mov	r2, r0
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005910:	4293      	cmp	r3, r2
 8005912:	d901      	bls.n	8005918 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005914:	2303      	movs	r3, #3
 8005916:	e0b1      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005918:	4b4b      	ldr	r3, [pc, #300]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0ee      	beq.n	8005902 <HAL_RCC_OscConfig+0x37e>
 8005924:	e014      	b.n	8005950 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005926:	f7fb fd07 	bl	8001338 <HAL_GetTick>
 800592a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800592c:	e00a      	b.n	8005944 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800592e:	f7fb fd03 	bl	8001338 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	f241 3288 	movw	r2, #5000	; 0x1388
 800593c:	4293      	cmp	r3, r2
 800593e:	d901      	bls.n	8005944 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005940:	2303      	movs	r3, #3
 8005942:	e09b      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005944:	4b40      	ldr	r3, [pc, #256]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005946:	6a1b      	ldr	r3, [r3, #32]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1ee      	bne.n	800592e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005950:	7dfb      	ldrb	r3, [r7, #23]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d105      	bne.n	8005962 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005956:	4b3c      	ldr	r3, [pc, #240]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	4a3b      	ldr	r2, [pc, #236]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800595c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005960:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 8087 	beq.w	8005a7a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800596c:	4b36      	ldr	r3, [pc, #216]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	f003 030c 	and.w	r3, r3, #12
 8005974:	2b08      	cmp	r3, #8
 8005976:	d061      	beq.n	8005a3c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d146      	bne.n	8005a0e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005980:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <HAL_RCC_OscConfig+0x4cc>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005986:	f7fb fcd7 	bl	8001338 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598e:	f7fb fcd3 	bl	8001338 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e06d      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80059a0:	4b29      	ldr	r3, [pc, #164]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b4:	d108      	bne.n	80059c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80059b6:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	4921      	ldr	r1, [pc, #132]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c8:	4b1f      	ldr	r3, [pc, #124]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a19      	ldr	r1, [r3, #32]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d8:	430b      	orrs	r3, r1
 80059da:	491b      	ldr	r1, [pc, #108]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <HAL_RCC_OscConfig+0x4cc>)
 80059e2:	2201      	movs	r2, #1
 80059e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e6:	f7fb fca7 	bl	8001338 <HAL_GetTick>
 80059ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ee:	f7fb fca3 	bl	8001338 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e03d      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005a00:	4b11      	ldr	r3, [pc, #68]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d0f0      	beq.n	80059ee <HAL_RCC_OscConfig+0x46a>
 8005a0c:	e035      	b.n	8005a7a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a0e:	4b10      	ldr	r3, [pc, #64]	; (8005a50 <HAL_RCC_OscConfig+0x4cc>)
 8005a10:	2200      	movs	r2, #0
 8005a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a14:	f7fb fc90 	bl	8001338 <HAL_GetTick>
 8005a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fb fc8c 	bl	8001338 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e026      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005a2e:	4b06      	ldr	r3, [pc, #24]	; (8005a48 <HAL_RCC_OscConfig+0x4c4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d1f0      	bne.n	8005a1c <HAL_RCC_OscConfig+0x498>
 8005a3a:	e01e      	b.n	8005a7a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d107      	bne.n	8005a54 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e019      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	40007000 	.word	0x40007000
 8005a50:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005a54:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <HAL_RCC_OscConfig+0x500>)
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d106      	bne.n	8005a76 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d001      	beq.n	8005a7a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3718      	adds	r7, #24
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	40021000 	.word	0x40021000

08005a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b084      	sub	sp, #16
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0d0      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a9c:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0307 	and.w	r3, r3, #7
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d910      	bls.n	8005acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aaa:	4b67      	ldr	r3, [pc, #412]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f023 0207 	bic.w	r2, r3, #7
 8005ab2:	4965      	ldr	r1, [pc, #404]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aba:	4b63      	ldr	r3, [pc, #396]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0307 	and.w	r3, r3, #7
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d001      	beq.n	8005acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e0b8      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0302 	and.w	r3, r3, #2
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d020      	beq.n	8005b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0304 	and.w	r3, r3, #4
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d005      	beq.n	8005af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4a58      	ldr	r2, [pc, #352]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0308 	and.w	r3, r3, #8
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005afc:	4b53      	ldr	r3, [pc, #332]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	4a52      	ldr	r2, [pc, #328]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b08:	4b50      	ldr	r3, [pc, #320]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	494d      	ldr	r1, [pc, #308]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d040      	beq.n	8005ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d107      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b2e:	4b47      	ldr	r3, [pc, #284]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d115      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e07f      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d107      	bne.n	8005b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b46:	4b41      	ldr	r3, [pc, #260]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d109      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e073      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b56:	4b3d      	ldr	r3, [pc, #244]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e06b      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b66:	4b39      	ldr	r3, [pc, #228]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f023 0203 	bic.w	r2, r3, #3
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	4936      	ldr	r1, [pc, #216]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b78:	f7fb fbde 	bl	8001338 <HAL_GetTick>
 8005b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b7e:	e00a      	b.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b80:	f7fb fbda 	bl	8001338 <HAL_GetTick>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e053      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b96:	4b2d      	ldr	r3, [pc, #180]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 020c 	and.w	r2, r3, #12
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d1eb      	bne.n	8005b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b27      	ldr	r3, [pc, #156]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d210      	bcs.n	8005bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b24      	ldr	r3, [pc, #144]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 0207 	bic.w	r2, r3, #7
 8005bbe:	4922      	ldr	r1, [pc, #136]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b20      	ldr	r3, [pc, #128]	; (8005c48 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e032      	b.n	8005c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d008      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be4:	4b19      	ldr	r3, [pc, #100]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4916      	ldr	r1, [pc, #88]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005c02:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	00db      	lsls	r3, r3, #3
 8005c10:	490e      	ldr	r1, [pc, #56]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005c16:	f000 f821 	bl	8005c5c <HAL_RCC_GetSysClockFreq>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	4b0b      	ldr	r3, [pc, #44]	; (8005c4c <HAL_RCC_ClockConfig+0x1c4>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	091b      	lsrs	r3, r3, #4
 8005c22:	f003 030f 	and.w	r3, r3, #15
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <HAL_RCC_ClockConfig+0x1c8>)
 8005c28:	5ccb      	ldrb	r3, [r1, r3]
 8005c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <HAL_RCC_ClockConfig+0x1cc>)
 8005c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005c32:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <HAL_RCC_ClockConfig+0x1d0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fb fb3c 	bl	80012b4 <HAL_InitTick>

  return HAL_OK;
 8005c3c:	2300      	movs	r3, #0
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
 8005c46:	bf00      	nop
 8005c48:	40022000 	.word	0x40022000
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	0800c8e8 	.word	0x0800c8e8
 8005c54:	20000000 	.word	0x20000000
 8005c58:	20000004 	.word	0x20000004

08005c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005c76:	4b1e      	ldr	r3, [pc, #120]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f003 030c 	and.w	r3, r3, #12
 8005c82:	2b04      	cmp	r3, #4
 8005c84:	d002      	beq.n	8005c8c <HAL_RCC_GetSysClockFreq+0x30>
 8005c86:	2b08      	cmp	r3, #8
 8005c88:	d003      	beq.n	8005c92 <HAL_RCC_GetSysClockFreq+0x36>
 8005c8a:	e027      	b.n	8005cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005c8c:	4b19      	ldr	r3, [pc, #100]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005c8e:	613b      	str	r3, [r7, #16]
      break;
 8005c90:	e027      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	0c9b      	lsrs	r3, r3, #18
 8005c96:	f003 030f 	and.w	r3, r3, #15
 8005c9a:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005c9c:	5cd3      	ldrb	r3, [r2, r3]
 8005c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d010      	beq.n	8005ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005caa:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	0c5b      	lsrs	r3, r3, #17
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	4a11      	ldr	r2, [pc, #68]	; (8005cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005cb6:	5cd3      	ldrb	r3, [r2, r3]
 8005cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a0d      	ldr	r2, [pc, #52]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cbe:	fb03 f202 	mul.w	r2, r3, r2
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]
 8005cca:	e004      	b.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0c      	ldr	r2, [pc, #48]	; (8005d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005cd0:	fb02 f303 	mul.w	r3, r2, r3
 8005cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	613b      	str	r3, [r7, #16]
      break;
 8005cda:	e002      	b.n	8005ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005cdc:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8005cde:	613b      	str	r3, [r7, #16]
      break;
 8005ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ce2:	693b      	ldr	r3, [r7, #16]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	007a1200 	.word	0x007a1200
 8005cf8:	0800c900 	.word	0x0800c900
 8005cfc:	0800c910 	.word	0x0800c910
 8005d00:	003d0900 	.word	0x003d0900

08005d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d04:	b480      	push	{r7}
 8005d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d08:	4b02      	ldr	r3, [pc, #8]	; (8005d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bc80      	pop	{r7}
 8005d12:	4770      	bx	lr
 8005d14:	20000000 	.word	0x20000000

08005d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d1c:	f7ff fff2 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b05      	ldr	r3, [pc, #20]	; (8005d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4903      	ldr	r1, [pc, #12]	; (8005d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	40021000 	.word	0x40021000
 8005d3c:	0800c8f8 	.word	0x0800c8f8

08005d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005d44:	f7ff ffde 	bl	8005d04 <HAL_RCC_GetHCLKFreq>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	4b05      	ldr	r3, [pc, #20]	; (8005d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	0adb      	lsrs	r3, r3, #11
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	4903      	ldr	r1, [pc, #12]	; (8005d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d56:	5ccb      	ldrb	r3, [r1, r3]
 8005d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	40021000 	.word	0x40021000
 8005d64:	0800c8f8 	.word	0x0800c8f8

08005d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005d70:	4b0a      	ldr	r3, [pc, #40]	; (8005d9c <RCC_Delay+0x34>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a0a      	ldr	r2, [pc, #40]	; (8005da0 <RCC_Delay+0x38>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	0a5b      	lsrs	r3, r3, #9
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	fb02 f303 	mul.w	r3, r2, r3
 8005d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005d84:	bf00      	nop
  }
  while (Delay --);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1e5a      	subs	r2, r3, #1
 8005d8a:	60fa      	str	r2, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1f9      	bne.n	8005d84 <RCC_Delay+0x1c>
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	20000000 	.word	0x20000000
 8005da0:	10624dd3 	.word	0x10624dd3

08005da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	2300      	movs	r3, #0
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d07d      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dc4:	4b4f      	ldr	r3, [pc, #316]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dc6:	69db      	ldr	r3, [r3, #28]
 8005dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10d      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dd0:	4b4c      	ldr	r3, [pc, #304]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd2:	69db      	ldr	r3, [r3, #28]
 8005dd4:	4a4b      	ldr	r2, [pc, #300]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dda:	61d3      	str	r3, [r2, #28]
 8005ddc:	4b49      	ldr	r3, [pc, #292]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005dde:	69db      	ldr	r3, [r3, #28]
 8005de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de8:	2301      	movs	r3, #1
 8005dea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dec:	4b46      	ldr	r3, [pc, #280]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d118      	bne.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005df8:	4b43      	ldr	r3, [pc, #268]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a42      	ldr	r2, [pc, #264]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e04:	f7fb fa98 	bl	8001338 <HAL_GetTick>
 8005e08:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e0a:	e008      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e0c:	f7fb fa94 	bl	8001338 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b64      	cmp	r3, #100	; 0x64
 8005e18:	d901      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e06d      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e1e:	4b3a      	ldr	r3, [pc, #232]	; (8005f08 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0f0      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e2a:	4b36      	ldr	r3, [pc, #216]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e32:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02e      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d027      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e48:	4b2e      	ldr	r3, [pc, #184]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e50:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e52:	4b2e      	ldr	r3, [pc, #184]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e54:	2201      	movs	r2, #1
 8005e56:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e58:	4b2c      	ldr	r3, [pc, #176]	; (8005f0c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005e5e:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d014      	beq.n	8005e98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e6e:	f7fb fa63 	bl	8001338 <HAL_GetTick>
 8005e72:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e74:	e00a      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e76:	f7fb fa5f 	bl	8001338 <HAL_GetTick>
 8005e7a:	4602      	mov	r2, r0
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e036      	b.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e8c:	4b1d      	ldr	r3, [pc, #116]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0ee      	beq.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e98:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005e9a:	6a1b      	ldr	r3, [r3, #32]
 8005e9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	4917      	ldr	r1, [pc, #92]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005eaa:	7dfb      	ldrb	r3, [r7, #23]
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d105      	bne.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb0:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb2:	69db      	ldr	r3, [r3, #28]
 8005eb4:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d008      	beq.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ec8:	4b0e      	ldr	r3, [pc, #56]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	490b      	ldr	r1, [pc, #44]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0310 	and.w	r3, r3, #16
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ee6:	4b07      	ldr	r3, [pc, #28]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	4904      	ldr	r1, [pc, #16]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	40021000 	.word	0x40021000
 8005f08:	40007000 	.word	0x40007000
 8005f0c:	42420440 	.word	0x42420440

08005f10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b088      	sub	sp, #32
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	617b      	str	r3, [r7, #20]
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	2300      	movs	r3, #0
 8005f22:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b10      	cmp	r3, #16
 8005f30:	d00a      	beq.n	8005f48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b10      	cmp	r3, #16
 8005f36:	f200 808a 	bhi.w	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d045      	beq.n	8005fcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d075      	beq.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005f46:	e082      	b.n	800604e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005f48:	4b46      	ldr	r3, [pc, #280]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005f4e:	4b45      	ldr	r3, [pc, #276]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d07b      	beq.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	0c9b      	lsrs	r3, r3, #18
 8005f5e:	f003 030f 	and.w	r3, r3, #15
 8005f62:	4a41      	ldr	r2, [pc, #260]	; (8006068 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005f64:	5cd3      	ldrb	r3, [r2, r3]
 8005f66:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d015      	beq.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005f72:	4b3c      	ldr	r3, [pc, #240]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	0c5b      	lsrs	r3, r3, #17
 8005f78:	f003 0301 	and.w	r3, r3, #1
 8005f7c:	4a3b      	ldr	r2, [pc, #236]	; (800606c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005f7e:	5cd3      	ldrb	r3, [r2, r3]
 8005f80:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00d      	beq.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005f8c:	4a38      	ldr	r2, [pc, #224]	; (8006070 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
 8005f9a:	61fb      	str	r3, [r7, #28]
 8005f9c:	e004      	b.n	8005fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4a34      	ldr	r2, [pc, #208]	; (8006074 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005fa2:	fb02 f303 	mul.w	r3, r2, r3
 8005fa6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005fa8:	4b2e      	ldr	r3, [pc, #184]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fb4:	d102      	bne.n	8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	61bb      	str	r3, [r7, #24]
      break;
 8005fba:	e04a      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	4a2d      	ldr	r2, [pc, #180]	; (8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	61bb      	str	r3, [r7, #24]
      break;
 8005fca:	e042      	b.n	8006052 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005fcc:	4b25      	ldr	r3, [pc, #148]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fdc:	d108      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e01f      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ffa:	d109      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8006008:	f649 4340 	movw	r3, #40000	; 0x9c40
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e00f      	b.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800601a:	d11c      	bne.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800601c:	4b11      	ldr	r3, [pc, #68]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d016      	beq.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8006028:	f24f 4324 	movw	r3, #62500	; 0xf424
 800602c:	61bb      	str	r3, [r7, #24]
      break;
 800602e:	e012      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006030:	e011      	b.n	8006056 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006032:	f7ff fe85 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 8006036:	4602      	mov	r2, r0
 8006038:	4b0a      	ldr	r3, [pc, #40]	; (8006064 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	0b9b      	lsrs	r3, r3, #14
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	3301      	adds	r3, #1
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fbb2 f3f3 	udiv	r3, r2, r3
 800604a:	61bb      	str	r3, [r7, #24]
      break;
 800604c:	e004      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800604e:	bf00      	nop
 8006050:	e002      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006052:	bf00      	nop
 8006054:	e000      	b.n	8006058 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8006056:	bf00      	nop
    }
  }
  return (frequency);
 8006058:	69bb      	ldr	r3, [r7, #24]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40021000 	.word	0x40021000
 8006068:	0800c914 	.word	0x0800c914
 800606c:	0800c924 	.word	0x0800c924
 8006070:	007a1200 	.word	0x007a1200
 8006074:	003d0900 	.word	0x003d0900
 8006078:	aaaaaaab 	.word	0xaaaaaaab

0800607c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e07a      	b.n	8006188 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	7c5b      	ldrb	r3, [r3, #17]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d105      	bne.n	80060a8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7fa fece 	bl	8000e44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 f9be 	bl	8006430 <HAL_RTC_WaitForSynchro>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2204      	movs	r2, #4
 80060be:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e061      	b.n	8006188 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fa77 	bl	80065b8 <RTC_EnterInitMode>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d004      	beq.n	80060da <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2204      	movs	r2, #4
 80060d4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e056      	b.n	8006188 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0207 	bic.w	r2, r2, #7
 80060e8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80060f2:	4b27      	ldr	r3, [pc, #156]	; (8006190 <HAL_RTC_Init+0x114>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	4a26      	ldr	r2, [pc, #152]	; (8006190 <HAL_RTC_Init+0x114>)
 80060f8:	f023 0301 	bic.w	r3, r3, #1
 80060fc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80060fe:	4b24      	ldr	r3, [pc, #144]	; (8006190 <HAL_RTC_Init+0x114>)
 8006100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006102:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	4921      	ldr	r1, [pc, #132]	; (8006190 <HAL_RTC_Init+0x114>)
 800610c:	4313      	orrs	r3, r2
 800610e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d003      	beq.n	8006122 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e00e      	b.n	8006140 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8006122:	2001      	movs	r0, #1
 8006124:	f7ff fef4 	bl	8005f10 <HAL_RCCEx_GetPeriphCLKFreq>
 8006128:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d104      	bne.n	800613a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2204      	movs	r2, #4
 8006134:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e026      	b.n	8006188 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b01      	subs	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	0c1a      	lsrs	r2, r3, #16
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f002 020f 	and.w	r2, r2, #15
 800614c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	b292      	uxth	r2, r2
 8006156:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 fa55 	bl	8006608 <RTC_ExitInitMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d004      	beq.n	800616e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2204      	movs	r2, #4
 8006168:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e00c      	b.n	8006188 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2201      	movs	r2, #1
 800617e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8006186:	2300      	movs	r3, #0
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40006c00 	.word	0x40006c00

08006194 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006194:	b590      	push	{r4, r7, lr}
 8006196:	b087      	sub	sp, #28
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_RTC_SetTime+0x20>
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e080      	b.n	80062ba <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	7c1b      	ldrb	r3, [r3, #16]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_RTC_SetTime+0x30>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e07a      	b.n	80062ba <HAL_RTC_SetTime+0x126>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2202      	movs	r2, #2
 80061ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d113      	bne.n	80061fe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80061e0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	785b      	ldrb	r3, [r3, #1]
 80061e8:	4619      	mov	r1, r3
 80061ea:	460b      	mov	r3, r1
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	1a5b      	subs	r3, r3, r1
 80061f0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80061f2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80061f8:	4413      	add	r3, r2
 80061fa:	617b      	str	r3, [r7, #20]
 80061fc:	e01e      	b.n	800623c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fa28 	bl	8006658 <RTC_Bcd2ToByte>
 8006208:	4603      	mov	r3, r0
 800620a:	461a      	mov	r2, r3
 800620c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006210:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fa1d 	bl	8006658 <RTC_Bcd2ToByte>
 800621e:	4603      	mov	r3, r0
 8006220:	461a      	mov	r2, r3
 8006222:	4613      	mov	r3, r2
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800622a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	789b      	ldrb	r3, [r3, #2]
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fa11 	bl	8006658 <RTC_Bcd2ToByte>
 8006236:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8006238:	4423      	add	r3, r4
 800623a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800623c:	6979      	ldr	r1, [r7, #20]
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 f953 	bl	80064ea <RTC_WriteTimeCounter>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d007      	beq.n	800625a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2204      	movs	r2, #4
 800624e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e02f      	b.n	80062ba <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0205 	bic.w	r2, r2, #5
 8006268:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 f964 	bl	8006538 <RTC_ReadAlarmCounter>
 8006270:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006278:	d018      	beq.n	80062ac <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	429a      	cmp	r2, r3
 8006280:	d214      	bcs.n	80062ac <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8006288:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800628c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800628e:	6939      	ldr	r1, [r7, #16]
 8006290:	68f8      	ldr	r0, [r7, #12]
 8006292:	f000 f96a 	bl	800656a <RTC_WriteAlarmCounter>
 8006296:	4603      	mov	r3, r0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2204      	movs	r2, #4
 80062a0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2200      	movs	r2, #0
 80062a6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80062a8:	2301      	movs	r3, #1
 80062aa:	e006      	b.n	80062ba <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2201      	movs	r2, #1
 80062b0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
  }
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd90      	pop	{r4, r7, pc}
	...

080062c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80062d0:	2300      	movs	r3, #0
 80062d2:	61fb      	str	r3, [r7, #28]
 80062d4:	2300      	movs	r3, #0
 80062d6:	61bb      	str	r3, [r7, #24]
 80062d8:	2300      	movs	r3, #0
 80062da:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d002      	beq.n	80062e8 <HAL_RTC_SetDate+0x24>
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	e097      	b.n	800641c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	7c1b      	ldrb	r3, [r3, #16]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_RTC_SetDate+0x34>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e091      	b.n	800641c <HAL_RTC_SetDate+0x158>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2201      	movs	r2, #1
 80062fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2202      	movs	r2, #2
 8006302:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10c      	bne.n	8006324 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	78da      	ldrb	r2, [r3, #3]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	785a      	ldrb	r2, [r3, #1]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	789a      	ldrb	r2, [r3, #2]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	739a      	strb	r2, [r3, #14]
 8006322:	e01a      	b.n	800635a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	78db      	ldrb	r3, [r3, #3]
 8006328:	4618      	mov	r0, r3
 800632a:	f000 f995 	bl	8006658 <RTC_Bcd2ToByte>
 800632e:	4603      	mov	r3, r0
 8006330:	461a      	mov	r2, r3
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	785b      	ldrb	r3, [r3, #1]
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f98c 	bl	8006658 <RTC_Bcd2ToByte>
 8006340:	4603      	mov	r3, r0
 8006342:	461a      	mov	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	789b      	ldrb	r3, [r3, #2]
 800634c:	4618      	mov	r0, r3
 800634e:	f000 f983 	bl	8006658 <RTC_Bcd2ToByte>
 8006352:	4603      	mov	r3, r0
 8006354:	461a      	mov	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	7bdb      	ldrb	r3, [r3, #15]
 800635e:	4618      	mov	r0, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	7b59      	ldrb	r1, [r3, #13]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	7b9b      	ldrb	r3, [r3, #14]
 8006368:	461a      	mov	r2, r3
 800636a:	f000 f993 	bl	8006694 <RTC_WeekDayNum>
 800636e:	4603      	mov	r3, r0
 8006370:	461a      	mov	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	7b1a      	ldrb	r2, [r3, #12]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f000 f883 	bl	800648a <RTC_ReadTimeCounter>
 8006384:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8006386:	69fb      	ldr	r3, [r7, #28]
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <HAL_RTC_SetDate+0x160>)
 800638a:	fba2 2303 	umull	r2, r3, r2, r3
 800638e:	0adb      	lsrs	r3, r3, #11
 8006390:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b18      	cmp	r3, #24
 8006396:	d93a      	bls.n	800640e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	4a23      	ldr	r2, [pc, #140]	; (8006428 <HAL_RTC_SetDate+0x164>)
 800639c:	fba2 2303 	umull	r2, r3, r2, r3
 80063a0:	091b      	lsrs	r3, r3, #4
 80063a2:	4a22      	ldr	r2, [pc, #136]	; (800642c <HAL_RTC_SetDate+0x168>)
 80063a4:	fb02 f303 	mul.w	r3, r2, r3
 80063a8:	69fa      	ldr	r2, [r7, #28]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80063ae:	69f9      	ldr	r1, [r7, #28]
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 f89a 	bl	80064ea <RTC_WriteTimeCounter>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2204      	movs	r2, #4
 80063c0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e027      	b.n	800641c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f000 f8b3 	bl	8006538 <RTC_ReadAlarmCounter>
 80063d2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d018      	beq.n	800640e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d214      	bcs.n	800640e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80063ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80063ee:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80063f0:	69b9      	ldr	r1, [r7, #24]
 80063f2:	68f8      	ldr	r0, [r7, #12]
 80063f4:	f000 f8b9 	bl	800656a <RTC_WriteAlarmCounter>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2204      	movs	r2, #4
 8006402:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e006      	b.n	800641c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3720      	adds	r7, #32
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	91a2b3c5 	.word	0x91a2b3c5
 8006428:	aaaaaaab 	.word	0xaaaaaaab
 800642c:	00015180 	.word	0x00015180

08006430 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e01d      	b.n	8006482 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0208 	bic.w	r2, r2, #8
 8006454:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006456:	f7fa ff6f 	bl	8001338 <HAL_GetTick>
 800645a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800645c:	e009      	b.n	8006472 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800645e:	f7fa ff6b 	bl	8001338 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646c:	d901      	bls.n	8006472 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e007      	b.n	8006482 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d0ee      	beq.n	800645e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800648a:	b480      	push	{r7}
 800648c:	b087      	sub	sp, #28
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	827b      	strh	r3, [r7, #18]
 8006496:	2300      	movs	r3, #0
 8006498:	823b      	strh	r3, [r7, #16]
 800649a:	2300      	movs	r3, #0
 800649c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699b      	ldr	r3, [r3, #24]
 80064b8:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80064ba:	8a7a      	ldrh	r2, [r7, #18]
 80064bc:	8a3b      	ldrh	r3, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d008      	beq.n	80064d4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80064c2:	8a3b      	ldrh	r3, [r7, #16]
 80064c4:	041a      	lsls	r2, r3, #16
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69db      	ldr	r3, [r3, #28]
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	e004      	b.n	80064de <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80064d4:	8a7b      	ldrh	r3, [r7, #18]
 80064d6:	041a      	lsls	r2, r3, #16
 80064d8:	89fb      	ldrh	r3, [r7, #14]
 80064da:	4313      	orrs	r3, r2
 80064dc:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80064de:	697b      	ldr	r3, [r7, #20]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	371c      	adds	r7, #28
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b084      	sub	sp, #16
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 f85d 	bl	80065b8 <RTC_EnterInitMode>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	73fb      	strb	r3, [r7, #15]
 8006508:	e011      	b.n	800652e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	0c12      	lsrs	r2, r2, #16
 8006512:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	b292      	uxth	r2, r2
 800651c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f872 	bl	8006608 <RTC_ExitInitMode>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800652e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	81fb      	strh	r3, [r7, #14]
 8006544:	2300      	movs	r3, #0
 8006546:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006556:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8006558:	89fb      	ldrh	r3, [r7, #14]
 800655a:	041a      	lsls	r2, r3, #16
 800655c:	89bb      	ldrh	r3, [r7, #12]
 800655e:	4313      	orrs	r3, r2
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b084      	sub	sp, #16
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006574:	2300      	movs	r3, #0
 8006576:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 f81d 	bl	80065b8 <RTC_EnterInitMode>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d002      	beq.n	800658a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
 8006588:	e011      	b.n	80065ae <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	0c12      	lsrs	r2, r2, #16
 8006592:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	683a      	ldr	r2, [r7, #0]
 800659a:	b292      	uxth	r2, r2
 800659c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f832 	bl	8006608 <RTC_ExitInitMode>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80065c4:	f7fa feb8 	bl	8001338 <HAL_GetTick>
 80065c8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80065ca:	e009      	b.n	80065e0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80065cc:	f7fa feb4 	bl	8001338 <HAL_GetTick>
 80065d0:	4602      	mov	r2, r0
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065da:	d901      	bls.n	80065e0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e00f      	b.n	8006600 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0ee      	beq.n	80065cc <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0210 	orr.w	r2, r2, #16
 80065fc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f022 0210 	bic.w	r2, r2, #16
 8006622:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8006624:	f7fa fe88 	bl	8001338 <HAL_GetTick>
 8006628:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800662a:	e009      	b.n	8006640 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800662c:	f7fa fe84 	bl	8001338 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800663a:	d901      	bls.n	8006640 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e007      	b.n	8006650 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 0320 	and.w	r3, r3, #32
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0ee      	beq.n	800662c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8006666:	79fb      	ldrb	r3, [r7, #7]
 8006668:	091b      	lsrs	r3, r3, #4
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	4613      	mov	r3, r2
 8006670:	009b      	lsls	r3, r3, #2
 8006672:	4413      	add	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006678:	79fb      	ldrb	r3, [r7, #7]
 800667a:	f003 030f 	and.w	r3, r3, #15
 800667e:	b2da      	uxtb	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	b2db      	uxtb	r3, r3
 8006684:	4413      	add	r3, r2
 8006686:	b2db      	uxtb	r3, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr
	...

08006694 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	460b      	mov	r3, r1
 800669e:	70fb      	strb	r3, [r7, #3]
 80066a0:	4613      	mov	r3, r2
 80066a2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80066a4:	2300      	movs	r3, #0
 80066a6:	60bb      	str	r3, [r7, #8]
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80066b2:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80066b4:	78fb      	ldrb	r3, [r7, #3]
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d82d      	bhi.n	8006716 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	4613      	mov	r3, r2
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	4413      	add	r3, r2
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	1a9b      	subs	r3, r3, r2
 80066c6:	4a2c      	ldr	r2, [pc, #176]	; (8006778 <RTC_WeekDayNum+0xe4>)
 80066c8:	fba2 2303 	umull	r2, r3, r2, r3
 80066cc:	085a      	lsrs	r2, r3, #1
 80066ce:	78bb      	ldrb	r3, [r7, #2]
 80066d0:	441a      	add	r2, r3
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	441a      	add	r2, r3
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	3b01      	subs	r3, #1
 80066da:	089b      	lsrs	r3, r3, #2
 80066dc:	441a      	add	r2, r3
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	3b01      	subs	r3, #1
 80066e2:	4926      	ldr	r1, [pc, #152]	; (800677c <RTC_WeekDayNum+0xe8>)
 80066e4:	fba1 1303 	umull	r1, r3, r1, r3
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	1ad2      	subs	r2, r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4922      	ldr	r1, [pc, #136]	; (800677c <RTC_WeekDayNum+0xe8>)
 80066f2:	fba1 1303 	umull	r1, r3, r1, r3
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	4413      	add	r3, r2
 80066fa:	1d1a      	adds	r2, r3, #4
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <RTC_WeekDayNum+0xec>)
 80066fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006702:	1ad1      	subs	r1, r2, r3
 8006704:	0849      	lsrs	r1, r1, #1
 8006706:	440b      	add	r3, r1
 8006708:	0899      	lsrs	r1, r3, #2
 800670a:	460b      	mov	r3, r1
 800670c:	00db      	lsls	r3, r3, #3
 800670e:	1a5b      	subs	r3, r3, r1
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	e029      	b.n	800676a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8006716:	78fa      	ldrb	r2, [r7, #3]
 8006718:	4613      	mov	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	4413      	add	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	1a9b      	subs	r3, r3, r2
 8006722:	4a15      	ldr	r2, [pc, #84]	; (8006778 <RTC_WeekDayNum+0xe4>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	085a      	lsrs	r2, r3, #1
 800672a:	78bb      	ldrb	r3, [r7, #2]
 800672c:	441a      	add	r2, r3
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	441a      	add	r2, r3
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	089b      	lsrs	r3, r3, #2
 8006736:	441a      	add	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4910      	ldr	r1, [pc, #64]	; (800677c <RTC_WeekDayNum+0xe8>)
 800673c:	fba1 1303 	umull	r1, r3, r1, r3
 8006740:	095b      	lsrs	r3, r3, #5
 8006742:	1ad2      	subs	r2, r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	490d      	ldr	r1, [pc, #52]	; (800677c <RTC_WeekDayNum+0xe8>)
 8006748:	fba1 1303 	umull	r1, r3, r1, r3
 800674c:	09db      	lsrs	r3, r3, #7
 800674e:	4413      	add	r3, r2
 8006750:	1c9a      	adds	r2, r3, #2
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <RTC_WeekDayNum+0xec>)
 8006754:	fba3 1302 	umull	r1, r3, r3, r2
 8006758:	1ad1      	subs	r1, r2, r3
 800675a:	0849      	lsrs	r1, r1, #1
 800675c:	440b      	add	r3, r1
 800675e:	0899      	lsrs	r1, r3, #2
 8006760:	460b      	mov	r3, r1
 8006762:	00db      	lsls	r3, r3, #3
 8006764:	1a5b      	subs	r3, r3, r1
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	b2db      	uxtb	r3, r3
}
 800676e:	4618      	mov	r0, r3
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	bc80      	pop	{r7}
 8006776:	4770      	bx	lr
 8006778:	38e38e39 	.word	0x38e38e39
 800677c:	51eb851f 	.word	0x51eb851f
 8006780:	24924925 	.word	0x24924925

08006784 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e076      	b.n	8006884 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d108      	bne.n	80067b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067a6:	d009      	beq.n	80067bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	e005      	b.n	80067bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f7fa fb58 	bl	8000e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	689b      	ldr	r3, [r3, #8]
 8006800:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006804:	431a      	orrs	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800680e:	431a      	orrs	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0302 	and.w	r3, r3, #2
 8006818:	431a      	orrs	r2, r3
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	431a      	orrs	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	699b      	ldr	r3, [r3, #24]
 8006828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800682c:	431a      	orrs	r2, r3
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	69db      	ldr	r3, [r3, #28]
 8006832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	ea42 0103 	orr.w	r1, r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006848:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	0c1a      	lsrs	r2, r3, #16
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f002 0204 	and.w	r2, r2, #4
 8006862:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006872:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2201      	movs	r2, #1
 800687e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e041      	b.n	8006922 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d106      	bne.n	80068b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f7fa fb34 	bl	8000f20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f000 fa10 	bl	8006cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2201      	movs	r2, #1
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2201      	movs	r2, #1
 80068ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2201      	movs	r2, #1
 80068fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2201      	movs	r2, #1
 800690c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2201      	movs	r2, #1
 800691c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b082      	sub	sp, #8
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	e041      	b.n	80069c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006950:	6878      	ldr	r0, [r7, #4]
 8006952:	f000 f839 	bl	80069c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2202      	movs	r2, #2
 800695a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	4619      	mov	r1, r3
 8006968:	4610      	mov	r0, r2
 800696a:	f000 f9c1 	bl	8006cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2201      	movs	r2, #1
 8006972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2201      	movs	r2, #1
 8006982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2201      	movs	r2, #1
 800698a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2201      	movs	r2, #1
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2201      	movs	r2, #1
 80069ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3708      	adds	r7, #8
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bc80      	pop	{r7}
 80069d8:	4770      	bx	lr
	...

080069dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b086      	sub	sp, #24
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d101      	bne.n	80069fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069f6:	2302      	movs	r3, #2
 80069f8:	e0ae      	b.n	8006b58 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2201      	movs	r2, #1
 80069fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b0c      	cmp	r3, #12
 8006a06:	f200 809f 	bhi.w	8006b48 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006a0a:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a10:	08006a45 	.word	0x08006a45
 8006a14:	08006b49 	.word	0x08006b49
 8006a18:	08006b49 	.word	0x08006b49
 8006a1c:	08006b49 	.word	0x08006b49
 8006a20:	08006a85 	.word	0x08006a85
 8006a24:	08006b49 	.word	0x08006b49
 8006a28:	08006b49 	.word	0x08006b49
 8006a2c:	08006b49 	.word	0x08006b49
 8006a30:	08006ac7 	.word	0x08006ac7
 8006a34:	08006b49 	.word	0x08006b49
 8006a38:	08006b49 	.word	0x08006b49
 8006a3c:	08006b49 	.word	0x08006b49
 8006a40:	08006b07 	.word	0x08006b07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	f000 f9be 	bl	8006dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699a      	ldr	r2, [r3, #24]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f042 0208 	orr.w	r2, r2, #8
 8006a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0204 	bic.w	r2, r2, #4
 8006a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6999      	ldr	r1, [r3, #24]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	691a      	ldr	r2, [r3, #16]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	619a      	str	r2, [r3, #24]
      break;
 8006a82:	e064      	b.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 fa04 	bl	8006e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699a      	ldr	r2, [r3, #24]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	699a      	ldr	r2, [r3, #24]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6999      	ldr	r1, [r3, #24]
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	021a      	lsls	r2, r3, #8
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	430a      	orrs	r2, r1
 8006ac2:	619a      	str	r2, [r3, #24]
      break;
 8006ac4:	e043      	b.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68b9      	ldr	r1, [r7, #8]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f000 fa4d 	bl	8006f6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f042 0208 	orr.w	r2, r2, #8
 8006ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f022 0204 	bic.w	r2, r2, #4
 8006af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	69d9      	ldr	r1, [r3, #28]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	691a      	ldr	r2, [r3, #16]
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	61da      	str	r2, [r3, #28]
      break;
 8006b04:	e023      	b.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fa97 	bl	8007040 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	69da      	ldr	r2, [r3, #28]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69d9      	ldr	r1, [r3, #28]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	691b      	ldr	r3, [r3, #16]
 8006b3c:	021a      	lsls	r2, r3, #8
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	430a      	orrs	r2, r1
 8006b44:	61da      	str	r2, [r3, #28]
      break;
 8006b46:	e002      	b.n	8006b4e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b4c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_ConfigClockSource+0x1c>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e0b4      	b.n	8006ce6 <HAL_TIM_ConfigClockSource+0x186>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2202      	movs	r2, #2
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ba2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bb4:	d03e      	beq.n	8006c34 <HAL_TIM_ConfigClockSource+0xd4>
 8006bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bba:	f200 8087 	bhi.w	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bc2:	f000 8086 	beq.w	8006cd2 <HAL_TIM_ConfigClockSource+0x172>
 8006bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bca:	d87f      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bcc:	2b70      	cmp	r3, #112	; 0x70
 8006bce:	d01a      	beq.n	8006c06 <HAL_TIM_ConfigClockSource+0xa6>
 8006bd0:	2b70      	cmp	r3, #112	; 0x70
 8006bd2:	d87b      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bd4:	2b60      	cmp	r3, #96	; 0x60
 8006bd6:	d050      	beq.n	8006c7a <HAL_TIM_ConfigClockSource+0x11a>
 8006bd8:	2b60      	cmp	r3, #96	; 0x60
 8006bda:	d877      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bdc:	2b50      	cmp	r3, #80	; 0x50
 8006bde:	d03c      	beq.n	8006c5a <HAL_TIM_ConfigClockSource+0xfa>
 8006be0:	2b50      	cmp	r3, #80	; 0x50
 8006be2:	d873      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d058      	beq.n	8006c9a <HAL_TIM_ConfigClockSource+0x13a>
 8006be8:	2b40      	cmp	r3, #64	; 0x40
 8006bea:	d86f      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bec:	2b30      	cmp	r3, #48	; 0x30
 8006bee:	d064      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x15a>
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d86b      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bf4:	2b20      	cmp	r3, #32
 8006bf6:	d060      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x15a>
 8006bf8:	2b20      	cmp	r3, #32
 8006bfa:	d867      	bhi.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d05c      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x15a>
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d05a      	beq.n	8006cba <HAL_TIM_ConfigClockSource+0x15a>
 8006c04:	e062      	b.n	8006ccc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c16:	f000 fad8 	bl	80071ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	609a      	str	r2, [r3, #8]
      break;
 8006c32:	e04f      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c44:	f000 fac1 	bl	80071ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	689a      	ldr	r2, [r3, #8]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c56:	609a      	str	r2, [r3, #8]
      break;
 8006c58:	e03c      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c66:	461a      	mov	r2, r3
 8006c68:	f000 fa38 	bl	80070dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	2150      	movs	r1, #80	; 0x50
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 fa8f 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 8006c78:	e02c      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c86:	461a      	mov	r2, r3
 8006c88:	f000 fa56 	bl	8007138 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2160      	movs	r1, #96	; 0x60
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fa7f 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 8006c98:	e01c      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	f000 fa18 	bl	80070dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2140      	movs	r1, #64	; 0x40
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fa6f 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 8006cb8:	e00c      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f000 fa66 	bl	8007196 <TIM_ITRx_SetConfig>
      break;
 8006cca:	e003      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd0:	e000      	b.n	8006cd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	4a2f      	ldr	r2, [pc, #188]	; (8006dc0 <TIM_Base_SetConfig+0xd0>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d00b      	beq.n	8006d20 <TIM_Base_SetConfig+0x30>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d0e:	d007      	beq.n	8006d20 <TIM_Base_SetConfig+0x30>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4a2c      	ldr	r2, [pc, #176]	; (8006dc4 <TIM_Base_SetConfig+0xd4>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d003      	beq.n	8006d20 <TIM_Base_SetConfig+0x30>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a2b      	ldr	r2, [pc, #172]	; (8006dc8 <TIM_Base_SetConfig+0xd8>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d108      	bne.n	8006d32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a22      	ldr	r2, [pc, #136]	; (8006dc0 <TIM_Base_SetConfig+0xd0>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d00b      	beq.n	8006d52 <TIM_Base_SetConfig+0x62>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d40:	d007      	beq.n	8006d52 <TIM_Base_SetConfig+0x62>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a1f      	ldr	r2, [pc, #124]	; (8006dc4 <TIM_Base_SetConfig+0xd4>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d003      	beq.n	8006d52 <TIM_Base_SetConfig+0x62>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <TIM_Base_SetConfig+0xd8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d108      	bne.n	8006d64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	695b      	ldr	r3, [r3, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a0d      	ldr	r2, [pc, #52]	; (8006dc0 <TIM_Base_SetConfig+0xd0>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	691a      	ldr	r2, [r3, #16]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	f003 0301 	and.w	r3, r3, #1
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d005      	beq.n	8006db6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	691b      	ldr	r3, [r3, #16]
 8006dae:	f023 0201 	bic.w	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	611a      	str	r2, [r3, #16]
  }
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bc80      	pop	{r7}
 8006dbe:	4770      	bx	lr
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40000400 	.word	0x40000400
 8006dc8:	40000800 	.word	0x40000800

08006dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	f023 0201 	bic.w	r2, r3, #1
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f023 0302 	bic.w	r3, r3, #2
 8006e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <TIM_OC1_SetConfig+0xc8>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d10c      	bne.n	8006e42 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f023 0308 	bic.w	r3, r3, #8
 8006e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f023 0304 	bic.w	r3, r3, #4
 8006e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a13      	ldr	r2, [pc, #76]	; (8006e94 <TIM_OC1_SetConfig+0xc8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d111      	bne.n	8006e6e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bc80      	pop	{r7}
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40012c00 	.word	0x40012c00

08006e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	f023 0210 	bic.w	r2, r3, #16
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	f023 0320 	bic.w	r3, r3, #32
 8006ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	697a      	ldr	r2, [r7, #20]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	4a1d      	ldr	r2, [pc, #116]	; (8006f68 <TIM_OC2_SetConfig+0xd0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d10d      	bne.n	8006f14 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	697a      	ldr	r2, [r7, #20]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <TIM_OC2_SetConfig+0xd0>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d113      	bne.n	8006f44 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	695b      	ldr	r3, [r3, #20]
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	699b      	ldr	r3, [r3, #24]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	693a      	ldr	r2, [r7, #16]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	693a      	ldr	r2, [r7, #16]
 8006f48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	621a      	str	r2, [r3, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	371c      	adds	r7, #28
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bc80      	pop	{r7}
 8006f66:	4770      	bx	lr
 8006f68:	40012c00 	.word	0x40012c00

08006f6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b087      	sub	sp, #28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a1b      	ldr	r3, [r3, #32]
 8006f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0303 	bic.w	r3, r3, #3
 8006fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a1d      	ldr	r2, [pc, #116]	; (800703c <TIM_OC3_SetConfig+0xd0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d10d      	bne.n	8006fe6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	021b      	lsls	r3, r3, #8
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a14      	ldr	r2, [pc, #80]	; (800703c <TIM_OC3_SetConfig+0xd0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d113      	bne.n	8007016 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ff4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ffc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	695b      	ldr	r3, [r3, #20]
 8007002:	011b      	lsls	r3, r3, #4
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	011b      	lsls	r3, r3, #4
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4313      	orrs	r3, r2
 8007014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	685a      	ldr	r2, [r3, #4]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	621a      	str	r2, [r3, #32]
}
 8007030:	bf00      	nop
 8007032:	371c      	adds	r7, #28
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	40012c00 	.word	0x40012c00

08007040 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007040:	b480      	push	{r7}
 8007042:	b087      	sub	sp, #28
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a1b      	ldr	r3, [r3, #32]
 8007054:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007076:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800708a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	031b      	lsls	r3, r3, #12
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	4313      	orrs	r3, r2
 8007096:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <TIM_OC4_SetConfig+0x98>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d109      	bne.n	80070b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80070a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	695b      	ldr	r3, [r3, #20]
 80070ac:	019b      	lsls	r3, r3, #6
 80070ae:	697a      	ldr	r2, [r7, #20]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bc80      	pop	{r7}
 80070d6:	4770      	bx	lr
 80070d8:	40012c00 	.word	0x40012c00

080070dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	f023 0201 	bic.w	r2, r3, #1
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	699b      	ldr	r3, [r3, #24]
 80070fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007106:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	011b      	lsls	r3, r3, #4
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	4313      	orrs	r3, r2
 8007110:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f023 030a 	bic.w	r3, r3, #10
 8007118:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	4313      	orrs	r3, r2
 8007120:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	697a      	ldr	r2, [r7, #20]
 800712c:	621a      	str	r2, [r3, #32]
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	bc80      	pop	{r7}
 8007136:	4770      	bx	lr

08007138 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6a1b      	ldr	r3, [r3, #32]
 8007148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	f023 0210 	bic.w	r2, r3, #16
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	031b      	lsls	r3, r3, #12
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007174:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	4313      	orrs	r3, r2
 800717e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	697a      	ldr	r2, [r7, #20]
 800718a:	621a      	str	r2, [r3, #32]
}
 800718c:	bf00      	nop
 800718e:	371c      	adds	r7, #28
 8007190:	46bd      	mov	sp, r7
 8007192:	bc80      	pop	{r7}
 8007194:	4770      	bx	lr

08007196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007196:	b480      	push	{r7}
 8007198:	b085      	sub	sp, #20
 800719a:	af00      	add	r7, sp, #0
 800719c:	6078      	str	r0, [r7, #4]
 800719e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	f043 0307 	orr.w	r3, r3, #7
 80071b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	609a      	str	r2, [r3, #8]
}
 80071c0:	bf00      	nop
 80071c2:	3714      	adds	r7, #20
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bc80      	pop	{r7}
 80071c8:	4770      	bx	lr

080071ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b087      	sub	sp, #28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	021a      	lsls	r2, r3, #8
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	431a      	orrs	r2, r3
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	609a      	str	r2, [r3, #8]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	bc80      	pop	{r7}
 8007206:	4770      	bx	lr

08007208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800721c:	2302      	movs	r3, #2
 800721e:	e046      	b.n	80072ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007246:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	4313      	orrs	r3, r2
 8007250:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a16      	ldr	r2, [pc, #88]	; (80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d00e      	beq.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d009      	beq.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a12      	ldr	r2, [pc, #72]	; (80072bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d004      	beq.n	8007282 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d10c      	bne.n	800729c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007288:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	68ba      	ldr	r2, [r7, #8]
 8007290:	4313      	orrs	r3, r2
 8007292:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072ac:	2300      	movs	r3, #0
}
 80072ae:	4618      	mov	r0, r3
 80072b0:	3714      	adds	r7, #20
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bc80      	pop	{r7}
 80072b6:	4770      	bx	lr
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40000400 	.word	0x40000400
 80072c0:	40000800 	.word	0x40000800

080072c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072ce:	2300      	movs	r3, #0
 80072d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d101      	bne.n	80072e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80072dc:	2302      	movs	r3, #2
 80072de:	e03d      	b.n	800735c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	4313      	orrs	r3, r2
 8007302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	4313      	orrs	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	695b      	ldr	r3, [r3, #20]
 8007338:	4313      	orrs	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	4313      	orrs	r3, r2
 8007348:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3714      	adds	r7, #20
 8007360:	46bd      	mov	sp, r7
 8007362:	bc80      	pop	{r7}
 8007364:	4770      	bx	lr

08007366 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d101      	bne.n	8007378 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	e042      	b.n	80073fe <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d106      	bne.n	8007392 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f7f9 fe5f 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2224      	movs	r2, #36	; 0x24
 8007396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073a8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 f972 	bl	8007694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691a      	ldr	r2, [r3, #16]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073be:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695a      	ldr	r2, [r3, #20]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073ce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80073de:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2220      	movs	r2, #32
 80073ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2220      	movs	r2, #32
 80073f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b08a      	sub	sp, #40	; 0x28
 800740a:	af02      	add	r7, sp, #8
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	603b      	str	r3, [r7, #0]
 8007412:	4613      	mov	r3, r2
 8007414:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007420:	b2db      	uxtb	r3, r3
 8007422:	2b20      	cmp	r3, #32
 8007424:	d175      	bne.n	8007512 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <HAL_UART_Transmit+0x2c>
 800742c:	88fb      	ldrh	r3, [r7, #6]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e06e      	b.n	8007514 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2200      	movs	r2, #0
 800743a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2221      	movs	r2, #33	; 0x21
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007444:	f7f9 ff78 	bl	8001338 <HAL_GetTick>
 8007448:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	88fa      	ldrh	r2, [r7, #6]
 800744e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	88fa      	ldrh	r2, [r7, #6]
 8007454:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745e:	d108      	bne.n	8007472 <HAL_UART_Transmit+0x6c>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	61bb      	str	r3, [r7, #24]
 8007470:	e003      	b.n	800747a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007476:	2300      	movs	r3, #0
 8007478:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800747a:	e02e      	b.n	80074da <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2200      	movs	r2, #0
 8007484:	2180      	movs	r1, #128	; 0x80
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f000 f848 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 800748c:	4603      	mov	r3, r0
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2220      	movs	r2, #32
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e03a      	b.n	8007514 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	461a      	mov	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80074b2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	3302      	adds	r3, #2
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	e007      	b.n	80074cc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	781a      	ldrb	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	3301      	adds	r3, #1
 80074ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	3b01      	subs	r3, #1
 80074d4:	b29a      	uxth	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80074de:	b29b      	uxth	r3, r3
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1cb      	bne.n	800747c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	2140      	movs	r1, #64	; 0x40
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f814 	bl	800751c <UART_WaitOnFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2220      	movs	r2, #32
 80074fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8007502:	2303      	movs	r3, #3
 8007504:	e006      	b.n	8007514 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2220      	movs	r2, #32
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800750e:	2300      	movs	r3, #0
 8007510:	e000      	b.n	8007514 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007512:	2302      	movs	r3, #2
  }
}
 8007514:	4618      	mov	r0, r3
 8007516:	3720      	adds	r7, #32
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	603b      	str	r3, [r7, #0]
 8007528:	4613      	mov	r3, r2
 800752a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800752c:	e03b      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d037      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007536:	f7f9 feff 	bl	8001338 <HAL_GetTick>
 800753a:	4602      	mov	r2, r0
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	6a3a      	ldr	r2, [r7, #32]
 8007542:	429a      	cmp	r2, r3
 8007544:	d302      	bcc.n	800754c <UART_WaitOnFlagUntilTimeout+0x30>
 8007546:	6a3b      	ldr	r3, [r7, #32]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e03a      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0304 	and.w	r3, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	d023      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b80      	cmp	r3, #128	; 0x80
 8007562:	d020      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d01d      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b08      	cmp	r3, #8
 8007576:	d116      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	617b      	str	r3, [r7, #20]
 800758c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f000 f81d 	bl	80075ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2208      	movs	r2, #8
 8007598:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e00f      	b.n	80075c6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	4013      	ands	r3, r2
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	bf0c      	ite	eq
 80075b6:	2301      	moveq	r3, #1
 80075b8:	2300      	movne	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	79fb      	ldrb	r3, [r7, #7]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d0b4      	beq.n	800752e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075ce:	b480      	push	{r7}
 80075d0:	b095      	sub	sp, #84	; 0x54
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	330c      	adds	r3, #12
 80075dc:	637b      	str	r3, [r7, #52]	; 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	330c      	adds	r3, #12
 80075f4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80075f6:	643a      	str	r2, [r7, #64]	; 0x40
 80075f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e5      	bne.n	80075d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3314      	adds	r3, #20
 8007610:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6a3b      	ldr	r3, [r7, #32]
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	61fb      	str	r3, [r7, #28]
   return(result);
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	64bb      	str	r3, [r7, #72]	; 0x48
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3314      	adds	r3, #20
 8007628:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800762a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800762c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	2b01      	cmp	r3, #1
 8007644:	d119      	bne.n	800767a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	330c      	adds	r3, #12
 800764c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	e853 3f00 	ldrex	r3, [r3]
 8007654:	60bb      	str	r3, [r7, #8]
   return(result);
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f023 0310 	bic.w	r3, r3, #16
 800765c:	647b      	str	r3, [r7, #68]	; 0x44
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	330c      	adds	r3, #12
 8007664:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007666:	61ba      	str	r2, [r7, #24]
 8007668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766a:	6979      	ldr	r1, [r7, #20]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	e841 2300 	strex	r3, r2, [r1]
 8007672:	613b      	str	r3, [r7, #16]
   return(result);
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1e5      	bne.n	8007646 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2220      	movs	r2, #32
 800767e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007688:	bf00      	nop
 800768a:	3754      	adds	r7, #84	; 0x54
 800768c:	46bd      	mov	sp, r7
 800768e:	bc80      	pop	{r7}
 8007690:	4770      	bx	lr
	...

08007694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691b      	ldr	r3, [r3, #16]
 80076a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68da      	ldr	r2, [r3, #12]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	689a      	ldr	r2, [r3, #8]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4313      	orrs	r3, r2
 80076c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80076ce:	f023 030c 	bic.w	r3, r3, #12
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	6812      	ldr	r2, [r2, #0]
 80076d6:	68b9      	ldr	r1, [r7, #8]
 80076d8:	430b      	orrs	r3, r1
 80076da:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	699a      	ldr	r2, [r3, #24]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a2c      	ldr	r2, [pc, #176]	; (80077a8 <UART_SetConfig+0x114>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d103      	bne.n	8007704 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80076fc:	f7fe fb20 	bl	8005d40 <HAL_RCC_GetPCLK2Freq>
 8007700:	60f8      	str	r0, [r7, #12]
 8007702:	e002      	b.n	800770a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007704:	f7fe fb08 	bl	8005d18 <HAL_RCC_GetPCLK1Freq>
 8007708:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800770a:	68fa      	ldr	r2, [r7, #12]
 800770c:	4613      	mov	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	4413      	add	r3, r2
 8007712:	009a      	lsls	r2, r3, #2
 8007714:	441a      	add	r2, r3
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	009b      	lsls	r3, r3, #2
 800771c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007720:	4a22      	ldr	r2, [pc, #136]	; (80077ac <UART_SetConfig+0x118>)
 8007722:	fba2 2303 	umull	r2, r3, r2, r3
 8007726:	095b      	lsrs	r3, r3, #5
 8007728:	0119      	lsls	r1, r3, #4
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4613      	mov	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	4413      	add	r3, r2
 8007732:	009a      	lsls	r2, r3, #2
 8007734:	441a      	add	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <UART_SetConfig+0x118>)
 8007742:	fba3 0302 	umull	r0, r3, r3, r2
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	2064      	movs	r0, #100	; 0x64
 800774a:	fb00 f303 	mul.w	r3, r0, r3
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	011b      	lsls	r3, r3, #4
 8007752:	3332      	adds	r3, #50	; 0x32
 8007754:	4a15      	ldr	r2, [pc, #84]	; (80077ac <UART_SetConfig+0x118>)
 8007756:	fba2 2303 	umull	r2, r3, r2, r3
 800775a:	095b      	lsrs	r3, r3, #5
 800775c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007760:	4419      	add	r1, r3
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4613      	mov	r3, r2
 8007766:	009b      	lsls	r3, r3, #2
 8007768:	4413      	add	r3, r2
 800776a:	009a      	lsls	r2, r3, #2
 800776c:	441a      	add	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	fbb2 f2f3 	udiv	r2, r2, r3
 8007778:	4b0c      	ldr	r3, [pc, #48]	; (80077ac <UART_SetConfig+0x118>)
 800777a:	fba3 0302 	umull	r0, r3, r3, r2
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	2064      	movs	r0, #100	; 0x64
 8007782:	fb00 f303 	mul.w	r3, r0, r3
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	011b      	lsls	r3, r3, #4
 800778a:	3332      	adds	r3, #50	; 0x32
 800778c:	4a07      	ldr	r2, [pc, #28]	; (80077ac <UART_SetConfig+0x118>)
 800778e:	fba2 2303 	umull	r2, r3, r2, r3
 8007792:	095b      	lsrs	r3, r3, #5
 8007794:	f003 020f 	and.w	r2, r3, #15
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	440a      	add	r2, r1
 800779e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	40013800 	.word	0x40013800
 80077ac:	51eb851f 	.word	0x51eb851f

080077b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077b0:	b480      	push	{r7}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	4638      	mov	r0, r7
 80077ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3714      	adds	r7, #20
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bc80      	pop	{r7}
 80077c8:	4770      	bx	lr

080077ca <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b085      	sub	sp, #20
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077da:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80077de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bc80      	pop	{r7}
 80077f4:	4770      	bx	lr

080077f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80077f6:	b480      	push	{r7}
 80077f8:	b085      	sub	sp, #20
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80077fe:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8007802:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800780a:	b29a      	uxth	r2, r3
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	b29b      	uxth	r3, r3
 8007810:	43db      	mvns	r3, r3
 8007812:	b29b      	uxth	r3, r3
 8007814:	4013      	ands	r3, r2
 8007816:	b29a      	uxth	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr

0800782a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	460b      	mov	r3, r1
 8007834:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8007836:	2300      	movs	r3, #0
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	bc80      	pop	{r7}
 8007840:	4770      	bx	lr

08007842 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007842:	b480      	push	{r7}
 8007844:	b085      	sub	sp, #20
 8007846:	af00      	add	r7, sp, #0
 8007848:	60f8      	str	r0, [r7, #12]
 800784a:	4638      	mov	r0, r7
 800784c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2201      	movs	r2, #1
 8007854:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3714      	adds	r7, #20
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800787c:	b480      	push	{r7}
 800787e:	b09d      	sub	sp, #116	; 0x74
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007886:	2300      	movs	r3, #0
 8007888:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	4413      	add	r3, r2
 8007896:	881b      	ldrh	r3, [r3, #0]
 8007898:	b29b      	uxth	r3, r3
 800789a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800789e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d81f      	bhi.n	80078ee <USB_ActivateEndpoint+0x72>
 80078ae:	a201      	add	r2, pc, #4	; (adr r2, 80078b4 <USB_ActivateEndpoint+0x38>)
 80078b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078e1 	.word	0x080078e1
 80078bc:	080078f7 	.word	0x080078f7
 80078c0:	080078d3 	.word	0x080078d3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80078c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80078d0:	e012      	b.n	80078f8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80078d2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078d6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80078da:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80078de:	e00b      	b.n	80078f8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80078e0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80078e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078e8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80078ec:	e004      	b.n	80078f8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80078f4:	e000      	b.n	80078f8 <USB_ActivateEndpoint+0x7c>
      break;
 80078f6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	441a      	add	r2, r3
 8007902:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007906:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800790a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800790e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007916:	b29b      	uxth	r3, r3
 8007918:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	b29b      	uxth	r3, r3
 8007928:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800792c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007930:	b29a      	uxth	r2, r3
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	b29b      	uxth	r3, r3
 8007938:	4313      	orrs	r3, r2
 800793a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	441a      	add	r2, r3
 8007948:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800794c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007950:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007954:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800795c:	b29b      	uxth	r3, r3
 800795e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	7b1b      	ldrb	r3, [r3, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f040 8178 	bne.w	8007c5a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b00      	cmp	r3, #0
 8007970:	f000 8084 	beq.w	8007a7c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800797e:	b29b      	uxth	r3, r3
 8007980:	461a      	mov	r2, r3
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	4413      	add	r3, r2
 8007986:	61bb      	str	r3, [r7, #24]
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	781b      	ldrb	r3, [r3, #0]
 800798c:	011a      	lsls	r2, r3, #4
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	88db      	ldrh	r3, [r3, #6]
 800799c:	085b      	lsrs	r3, r3, #1
 800799e:	b29b      	uxth	r3, r3
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80079a8:	687a      	ldr	r2, [r7, #4]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	827b      	strh	r3, [r7, #18]
 80079b6:	8a7b      	ldrh	r3, [r7, #18]
 80079b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d01b      	beq.n	80079f8 <USB_ActivateEndpoint+0x17c>
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	4413      	add	r3, r2
 80079ca:	881b      	ldrh	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d6:	823b      	strh	r3, [r7, #16]
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	781b      	ldrb	r3, [r3, #0]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	441a      	add	r2, r3
 80079e2:	8a3b      	ldrh	r3, [r7, #16]
 80079e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	78db      	ldrb	r3, [r3, #3]
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d020      	beq.n	8007a42 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	009b      	lsls	r3, r3, #2
 8007a08:	4413      	add	r3, r2
 8007a0a:	881b      	ldrh	r3, [r3, #0]
 8007a0c:	b29b      	uxth	r3, r3
 8007a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a16:	81bb      	strh	r3, [r7, #12]
 8007a18:	89bb      	ldrh	r3, [r7, #12]
 8007a1a:	f083 0320 	eor.w	r3, r3, #32
 8007a1e:	81bb      	strh	r3, [r7, #12]
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	441a      	add	r2, r3
 8007a2a:	89bb      	ldrh	r3, [r7, #12]
 8007a2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	8013      	strh	r3, [r2, #0]
 8007a40:	e2d5      	b.n	8007fee <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a58:	81fb      	strh	r3, [r7, #14]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	441a      	add	r2, r3
 8007a64:	89fb      	ldrh	r3, [r7, #14]
 8007a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	8013      	strh	r3, [r2, #0]
 8007a7a:	e2b8      	b.n	8007fee <USB_ActivateEndpoint+0x772>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	4413      	add	r3, r2
 8007a8e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	011a      	lsls	r2, r3, #4
 8007a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	88db      	ldrh	r3, [r3, #6]
 8007aa4:	085b      	lsrs	r3, r3, #1
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	005b      	lsls	r3, r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aae:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	461a      	mov	r2, r3
 8007abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac0:	4413      	add	r3, r2
 8007ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	011a      	lsls	r2, r3, #4
 8007aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007acc:	4413      	add	r3, r2
 8007ace:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	881b      	ldrh	r3, [r3, #0]
 8007ad8:	b29b      	uxth	r3, r3
 8007ada:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ade:	b29a      	uxth	r2, r3
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	801a      	strh	r2, [r3, #0]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	2b3e      	cmp	r3, #62	; 0x3e
 8007aea:	d91d      	bls.n	8007b28 <USB_ActivateEndpoint+0x2ac>
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	095b      	lsrs	r3, r3, #5
 8007af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	f003 031f 	and.w	r3, r3, #31
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d102      	bne.n	8007b06 <USB_ActivateEndpoint+0x28a>
 8007b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b02:	3b01      	subs	r3, #1
 8007b04:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	029b      	lsls	r3, r3, #10
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4313      	orrs	r3, r2
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	801a      	strh	r2, [r3, #0]
 8007b26:	e026      	b.n	8007b76 <USB_ActivateEndpoint+0x2fa>
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <USB_ActivateEndpoint+0x2ca>
 8007b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b32:	881b      	ldrh	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b42:	801a      	strh	r2, [r3, #0]
 8007b44:	e017      	b.n	8007b76 <USB_ActivateEndpoint+0x2fa>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	085b      	lsrs	r3, r3, #1
 8007b4c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d002      	beq.n	8007b60 <USB_ActivateEndpoint+0x2e4>
 8007b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b62:	881b      	ldrh	r3, [r3, #0]
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b68:	b29b      	uxth	r3, r3
 8007b6a:	029b      	lsls	r3, r3, #10
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b74:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	881b      	ldrh	r3, [r3, #0]
 8007b82:	847b      	strh	r3, [r7, #34]	; 0x22
 8007b84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d01b      	beq.n	8007bc6 <USB_ActivateEndpoint+0x34a>
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	4413      	add	r3, r2
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba4:	843b      	strh	r3, [r7, #32]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	441a      	add	r2, r3
 8007bb0:	8c3b      	ldrh	r3, [r7, #32]
 8007bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bc2:	b29b      	uxth	r3, r3
 8007bc4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d124      	bne.n	8007c18 <USB_ActivateEndpoint+0x39c>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be4:	83bb      	strh	r3, [r7, #28]
 8007be6:	8bbb      	ldrh	r3, [r7, #28]
 8007be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bec:	83bb      	strh	r3, [r7, #28]
 8007bee:	8bbb      	ldrh	r3, [r7, #28]
 8007bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bf4:	83bb      	strh	r3, [r7, #28]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	441a      	add	r2, r3
 8007c00:	8bbb      	ldrh	r3, [r7, #28]
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]
 8007c16:	e1ea      	b.n	8007fee <USB_ActivateEndpoint+0x772>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	83fb      	strh	r3, [r7, #30]
 8007c30:	8bfb      	ldrh	r3, [r7, #30]
 8007c32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c36:	83fb      	strh	r3, [r7, #30]
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	8bfb      	ldrh	r3, [r7, #30]
 8007c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8013      	strh	r3, [r2, #0]
 8007c58:	e1c9      	b.n	8007fee <USB_ActivateEndpoint+0x772>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	78db      	ldrb	r3, [r3, #3]
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d11e      	bne.n	8007ca0 <USB_ActivateEndpoint+0x424>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	009b      	lsls	r3, r3, #2
 8007c6a:	4413      	add	r3, r2
 8007c6c:	881b      	ldrh	r3, [r3, #0]
 8007c6e:	b29b      	uxth	r3, r3
 8007c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c78:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	781b      	ldrb	r3, [r3, #0]
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	441a      	add	r2, r3
 8007c86:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c92:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	8013      	strh	r3, [r2, #0]
 8007c9e:	e01d      	b.n	8007cdc <USB_ActivateEndpoint+0x460>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	881b      	ldrh	r3, [r3, #0]
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cb6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	441a      	add	r2, r3
 8007cc4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cd8:	b29b      	uxth	r3, r3
 8007cda:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	461a      	mov	r2, r3
 8007cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cec:	4413      	add	r3, r2
 8007cee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	011a      	lsls	r2, r3, #4
 8007cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	891b      	ldrh	r3, [r3, #8]
 8007d04:	085b      	lsrs	r3, r3, #1
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d0e:	801a      	strh	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	657b      	str	r3, [r7, #84]	; 0x54
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d20:	4413      	add	r3, r2
 8007d22:	657b      	str	r3, [r7, #84]	; 0x54
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	011a      	lsls	r2, r3, #4
 8007d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d2c:	4413      	add	r3, r2
 8007d2e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8007d32:	653b      	str	r3, [r7, #80]	; 0x50
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	895b      	ldrh	r3, [r3, #10]
 8007d38:	085b      	lsrs	r3, r3, #1
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	005b      	lsls	r3, r3, #1
 8007d3e:	b29a      	uxth	r2, r3
 8007d40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d42:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	785b      	ldrb	r3, [r3, #1]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f040 8093 	bne.w	8007e74 <USB_ActivateEndpoint+0x5f8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	009b      	lsls	r3, r3, #2
 8007d56:	4413      	add	r3, r2
 8007d58:	881b      	ldrh	r3, [r3, #0]
 8007d5a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007d5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01b      	beq.n	8007da2 <USB_ActivateEndpoint+0x526>
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	009b      	lsls	r3, r3, #2
 8007d8a:	441a      	add	r2, r3
 8007d8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	4413      	add	r3, r2
 8007dac:	881b      	ldrh	r3, [r3, #0]
 8007dae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007db0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d01b      	beq.n	8007df2 <USB_ActivateEndpoint+0x576>
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	4413      	add	r3, r2
 8007dc4:	881b      	ldrh	r3, [r3, #0]
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dd0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dea:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	009b      	lsls	r3, r3, #2
 8007dfa:	4413      	add	r3, r2
 8007dfc:	881b      	ldrh	r3, [r3, #0]
 8007dfe:	b29b      	uxth	r3, r3
 8007e00:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e08:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e0a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e0c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e10:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e18:	873b      	strh	r3, [r7, #56]	; 0x38
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	441a      	add	r2, r3
 8007e24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007e26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e50:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]
 8007e72:	e0bc      	b.n	8007fee <USB_ActivateEndpoint+0x772>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01d      	beq.n	8007ecc <USB_ActivateEndpoint+0x650>
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	441a      	add	r2, r3
 8007eb4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007eb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ebc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	881b      	ldrh	r3, [r3, #0]
 8007ed8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007edc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d01d      	beq.n	8007f24 <USB_ActivateEndpoint+0x6a8>
 8007ee8:	687a      	ldr	r2, [r7, #4]
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	009b      	lsls	r3, r3, #2
 8007ef0:	4413      	add	r3, r2
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	441a      	add	r2, r3
 8007f0c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f1c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	78db      	ldrb	r3, [r3, #3]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d024      	beq.n	8007f76 <USB_ActivateEndpoint+0x6fa>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f42:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f4a:	f083 0320 	eor.w	r3, r3, #32
 8007f4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	441a      	add	r2, r3
 8007f5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	8013      	strh	r3, [r2, #0]
 8007f74:	e01d      	b.n	8007fb2 <USB_ActivateEndpoint+0x736>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	009b      	lsls	r3, r3, #2
 8007f7e:	4413      	add	r3, r2
 8007f80:	881b      	ldrh	r3, [r3, #0]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f8c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	009b      	lsls	r3, r3, #2
 8007f98:	441a      	add	r2, r3
 8007f9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007faa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	881b      	ldrh	r3, [r3, #0]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007fc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	781b      	ldrb	r3, [r3, #0]
 8007fd2:	009b      	lsls	r3, r3, #2
 8007fd4:	441a      	add	r2, r3
 8007fd6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007fee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3774      	adds	r7, #116	; 0x74
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr

08007ffc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b08d      	sub	sp, #52	; 0x34
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	7b1b      	ldrb	r3, [r3, #12]
 800800a:	2b00      	cmp	r3, #0
 800800c:	f040 808e 	bne.w	800812c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	785b      	ldrb	r3, [r3, #1]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d044      	beq.n	80080a2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4413      	add	r3, r2
 8008022:	881b      	ldrh	r3, [r3, #0]
 8008024:	81bb      	strh	r3, [r7, #12]
 8008026:	89bb      	ldrh	r3, [r7, #12]
 8008028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800802c:	2b00      	cmp	r3, #0
 800802e:	d01b      	beq.n	8008068 <USB_DeactivateEndpoint+0x6c>
 8008030:	687a      	ldr	r2, [r7, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	009b      	lsls	r3, r3, #2
 8008038:	4413      	add	r3, r2
 800803a:	881b      	ldrh	r3, [r3, #0]
 800803c:	b29b      	uxth	r3, r3
 800803e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008046:	817b      	strh	r3, [r7, #10]
 8008048:	687a      	ldr	r2, [r7, #4]
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	009b      	lsls	r3, r3, #2
 8008050:	441a      	add	r2, r3
 8008052:	897b      	ldrh	r3, [r7, #10]
 8008054:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008058:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800805c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008060:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008064:	b29b      	uxth	r3, r3
 8008066:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	881b      	ldrh	r3, [r3, #0]
 8008074:	b29b      	uxth	r3, r3
 8008076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800807a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800807e:	813b      	strh	r3, [r7, #8]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	009b      	lsls	r3, r3, #2
 8008088:	441a      	add	r2, r3
 800808a:	893b      	ldrh	r3, [r7, #8]
 800808c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008090:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008094:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800809c:	b29b      	uxth	r3, r3
 800809e:	8013      	strh	r3, [r2, #0]
 80080a0:	e192      	b.n	80083c8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	4413      	add	r3, r2
 80080ac:	881b      	ldrh	r3, [r3, #0]
 80080ae:	827b      	strh	r3, [r7, #18]
 80080b0:	8a7b      	ldrh	r3, [r7, #18]
 80080b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d01b      	beq.n	80080f2 <USB_DeactivateEndpoint+0xf6>
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	823b      	strh	r3, [r7, #16]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	441a      	add	r2, r3
 80080dc:	8a3b      	ldrh	r3, [r7, #16]
 80080de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	4413      	add	r3, r2
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	b29b      	uxth	r3, r3
 8008100:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008108:	81fb      	strh	r3, [r7, #14]
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	441a      	add	r2, r3
 8008114:	89fb      	ldrh	r3, [r7, #14]
 8008116:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800811a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800811e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008122:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008126:	b29b      	uxth	r3, r3
 8008128:	8013      	strh	r3, [r2, #0]
 800812a:	e14d      	b.n	80083c8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	2b00      	cmp	r3, #0
 8008132:	f040 80a5 	bne.w	8008280 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	881b      	ldrh	r3, [r3, #0]
 8008142:	843b      	strh	r3, [r7, #32]
 8008144:	8c3b      	ldrh	r3, [r7, #32]
 8008146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d01b      	beq.n	8008186 <USB_DeactivateEndpoint+0x18a>
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	4413      	add	r3, r2
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008164:	83fb      	strh	r3, [r7, #30]
 8008166:	687a      	ldr	r2, [r7, #4]
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	441a      	add	r2, r3
 8008170:	8bfb      	ldrh	r3, [r7, #30]
 8008172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800817e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008182:	b29b      	uxth	r3, r3
 8008184:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	881b      	ldrh	r3, [r3, #0]
 8008192:	83bb      	strh	r3, [r7, #28]
 8008194:	8bbb      	ldrh	r3, [r7, #28]
 8008196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800819a:	2b00      	cmp	r3, #0
 800819c:	d01b      	beq.n	80081d6 <USB_DeactivateEndpoint+0x1da>
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	009b      	lsls	r3, r3, #2
 80081a6:	4413      	add	r3, r2
 80081a8:	881b      	ldrh	r3, [r3, #0]
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b4:	837b      	strh	r3, [r7, #26]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	781b      	ldrb	r3, [r3, #0]
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	441a      	add	r2, r3
 80081c0:	8b7b      	ldrh	r3, [r7, #26]
 80081c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ce:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	009b      	lsls	r3, r3, #2
 80081de:	4413      	add	r3, r2
 80081e0:	881b      	ldrh	r3, [r3, #0]
 80081e2:	b29b      	uxth	r3, r3
 80081e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ec:	833b      	strh	r3, [r7, #24]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	441a      	add	r2, r3
 80081f8:	8b3b      	ldrh	r3, [r7, #24]
 80081fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008202:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008206:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800820a:	b29b      	uxth	r3, r3
 800820c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	4413      	add	r3, r2
 8008218:	881b      	ldrh	r3, [r3, #0]
 800821a:	b29b      	uxth	r3, r3
 800821c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008224:	82fb      	strh	r3, [r7, #22]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	441a      	add	r2, r3
 8008230:	8afb      	ldrh	r3, [r7, #22]
 8008232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800823e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008242:	b29b      	uxth	r3, r3
 8008244:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4413      	add	r3, r2
 8008250:	881b      	ldrh	r3, [r3, #0]
 8008252:	b29b      	uxth	r3, r3
 8008254:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008258:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800825c:	82bb      	strh	r3, [r7, #20]
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	781b      	ldrb	r3, [r3, #0]
 8008264:	009b      	lsls	r3, r3, #2
 8008266:	441a      	add	r2, r3
 8008268:	8abb      	ldrh	r3, [r7, #20]
 800826a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800826e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008272:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800827a:	b29b      	uxth	r3, r3
 800827c:	8013      	strh	r3, [r2, #0]
 800827e:	e0a3      	b.n	80083c8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	4413      	add	r3, r2
 800828a:	881b      	ldrh	r3, [r3, #0]
 800828c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800828e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008290:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01b      	beq.n	80082d0 <USB_DeactivateEndpoint+0x2d4>
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	009b      	lsls	r3, r3, #2
 80082a0:	4413      	add	r3, r2
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082ae:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	441a      	add	r2, r3
 80082ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80082bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082d0:	687a      	ldr	r2, [r7, #4]
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	009b      	lsls	r3, r3, #2
 80082d8:	4413      	add	r3, r2
 80082da:	881b      	ldrh	r3, [r3, #0]
 80082dc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80082de:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80082e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01b      	beq.n	8008320 <USB_DeactivateEndpoint+0x324>
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	853b      	strh	r3, [r7, #40]	; 0x28
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	009b      	lsls	r3, r3, #2
 8008308:	441a      	add	r2, r3
 800830a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800830c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008310:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008314:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008318:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800831c:	b29b      	uxth	r3, r3
 800831e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	4413      	add	r3, r2
 800832a:	881b      	ldrh	r3, [r3, #0]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008336:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	441a      	add	r2, r3
 8008342:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008344:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008348:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800834c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008354:	b29b      	uxth	r3, r3
 8008356:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	881b      	ldrh	r3, [r3, #0]
 8008364:	b29b      	uxth	r3, r3
 8008366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800836a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800836e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	441a      	add	r2, r3
 800837a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800837c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008384:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800838c:	b29b      	uxth	r3, r3
 800838e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008390:	687a      	ldr	r2, [r7, #4]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	4413      	add	r3, r2
 800839a:	881b      	ldrh	r3, [r3, #0]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	847b      	strh	r3, [r7, #34]	; 0x22
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	441a      	add	r2, r3
 80083b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80083b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3734      	adds	r7, #52	; 0x34
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bc80      	pop	{r7}
 80083d2:	4770      	bx	lr

080083d4 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b0c2      	sub	sp, #264	; 0x108
 80083d8:	af00      	add	r7, sp, #0
 80083da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083e2:	6018      	str	r0, [r3, #0]
 80083e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ec:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80083ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	785b      	ldrb	r3, [r3, #1]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	f040 86b7 	bne.w	800916e <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008400:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008404:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	699a      	ldr	r2, [r3, #24]
 800840c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	691b      	ldr	r3, [r3, #16]
 8008418:	429a      	cmp	r2, r3
 800841a:	d908      	bls.n	800842e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	691b      	ldr	r3, [r3, #16]
 8008428:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800842c:	e007      	b.n	800843e <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800842e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008432:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800843e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008442:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	7b1b      	ldrb	r3, [r3, #12]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d13a      	bne.n	80084c4 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800844e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008452:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	6959      	ldr	r1, [r3, #20]
 800845a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800845e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	88da      	ldrh	r2, [r3, #6]
 8008466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846a:	b29b      	uxth	r3, r3
 800846c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008470:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008474:	6800      	ldr	r0, [r0, #0]
 8008476:	f001 fc9c 	bl	8009db2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800847a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800847e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
 8008486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800848a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008494:	b29b      	uxth	r3, r3
 8008496:	461a      	mov	r2, r3
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	4413      	add	r3, r2
 800849c:	613b      	str	r3, [r7, #16]
 800849e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	011a      	lsls	r2, r3, #4
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	4413      	add	r3, r2
 80084b0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80084b4:	60fb      	str	r3, [r7, #12]
 80084b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	f000 be1f 	b.w	8009102 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80084c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	78db      	ldrb	r3, [r3, #3]
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	f040 8462 	bne.w	8008d9a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80084d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	6a1a      	ldr	r2, [r3, #32]
 80084e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	691b      	ldr	r3, [r3, #16]
 80084ee:	429a      	cmp	r2, r3
 80084f0:	f240 83df 	bls.w	8008cb2 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80084f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	4413      	add	r3, r2
 800850e:	881b      	ldrh	r3, [r3, #0]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800851a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800851e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008522:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008526:	681a      	ldr	r2, [r3, #0]
 8008528:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800852c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800853c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008540:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008544:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854c:	b29b      	uxth	r3, r3
 800854e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008560:	1ad2      	subs	r2, r2, r3
 8008562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008566:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800856e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008572:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4413      	add	r3, r2
 8008588:	881b      	ldrh	r3, [r3, #0]
 800858a:	b29b      	uxth	r3, r3
 800858c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 81c7 	beq.w	8008924 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	633b      	str	r3, [r7, #48]	; 0x30
 80085a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	785b      	ldrb	r3, [r3, #1]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d177      	bne.n	80086a2 <USB_EPStartXfer+0x2ce>
 80085b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80085be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	461a      	mov	r2, r3
 80085d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d2:	4413      	add	r3, r2
 80085d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80085d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	011a      	lsls	r2, r3, #4
 80085e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e6:	4413      	add	r3, r2
 80085e8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80085ec:	627b      	str	r3, [r7, #36]	; 0x24
 80085ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f0:	881b      	ldrh	r3, [r3, #0]
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085f8:	b29a      	uxth	r2, r3
 80085fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085fc:	801a      	strh	r2, [r3, #0]
 80085fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008602:	2b3e      	cmp	r3, #62	; 0x3e
 8008604:	d921      	bls.n	800864a <USB_EPStartXfer+0x276>
 8008606:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008610:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	2b00      	cmp	r3, #0
 800861a:	d104      	bne.n	8008626 <USB_EPStartXfer+0x252>
 800861c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008620:	3b01      	subs	r3, #1
 8008622:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008628:	881b      	ldrh	r3, [r3, #0]
 800862a:	b29a      	uxth	r2, r3
 800862c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008630:	b29b      	uxth	r3, r3
 8008632:	029b      	lsls	r3, r3, #10
 8008634:	b29b      	uxth	r3, r3
 8008636:	4313      	orrs	r3, r2
 8008638:	b29b      	uxth	r3, r3
 800863a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800863e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008642:	b29a      	uxth	r2, r3
 8008644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008646:	801a      	strh	r2, [r3, #0]
 8008648:	e050      	b.n	80086ec <USB_EPStartXfer+0x318>
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10a      	bne.n	8008668 <USB_EPStartXfer+0x294>
 8008652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	b29b      	uxth	r3, r3
 8008658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800865c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008660:	b29a      	uxth	r2, r3
 8008662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008664:	801a      	strh	r2, [r3, #0]
 8008666:	e041      	b.n	80086ec <USB_EPStartXfer+0x318>
 8008668:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800866c:	085b      	lsrs	r3, r3, #1
 800866e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d004      	beq.n	8008688 <USB_EPStartXfer+0x2b4>
 800867e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008682:	3301      	adds	r3, #1
 8008684:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	881b      	ldrh	r3, [r3, #0]
 800868c:	b29a      	uxth	r2, r3
 800868e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008692:	b29b      	uxth	r3, r3
 8008694:	029b      	lsls	r3, r3, #10
 8008696:	b29b      	uxth	r3, r3
 8008698:	4313      	orrs	r3, r2
 800869a:	b29a      	uxth	r2, r3
 800869c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869e:	801a      	strh	r2, [r3, #0]
 80086a0:	e024      	b.n	80086ec <USB_EPStartXfer+0x318>
 80086a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	785b      	ldrb	r3, [r3, #1]
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d11c      	bne.n	80086ec <USB_EPStartXfer+0x318>
 80086b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	461a      	mov	r2, r3
 80086c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c6:	4413      	add	r3, r2
 80086c8:	633b      	str	r3, [r7, #48]	; 0x30
 80086ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	781b      	ldrb	r3, [r3, #0]
 80086d6:	011a      	lsls	r2, r3, #4
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	4413      	add	r3, r2
 80086dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80086e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e6:	b29a      	uxth	r2, r3
 80086e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80086ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	895b      	ldrh	r3, [r3, #10]
 80086f8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6959      	ldr	r1, [r3, #20]
 8008708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800870c:	b29b      	uxth	r3, r3
 800870e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008712:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008716:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	f001 fb49 	bl	8009db2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008720:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008724:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	695a      	ldr	r2, [r3, #20]
 800872c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008730:	441a      	add	r2, r3
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800873e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008742:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	6a1a      	ldr	r2, [r3, #32]
 800874a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	429a      	cmp	r2, r3
 8008758:	d90f      	bls.n	800877a <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800875a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800875e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6a1a      	ldr	r2, [r3, #32]
 8008766:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876a:	1ad2      	subs	r2, r2, r3
 800876c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	621a      	str	r2, [r3, #32]
 8008778:	e00e      	b.n	8008798 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800877a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800877e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6a1b      	ldr	r3, [r3, #32]
 8008786:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800878a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800878e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2200      	movs	r2, #0
 8008796:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008798:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800879c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	785b      	ldrb	r3, [r3, #1]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d177      	bne.n	8008898 <USB_EPStartXfer+0x4c4>
 80087a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	61bb      	str	r3, [r7, #24]
 80087b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087c2:	b29b      	uxth	r3, r3
 80087c4:	461a      	mov	r2, r3
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	4413      	add	r3, r2
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	781b      	ldrb	r3, [r3, #0]
 80087d8:	011a      	lsls	r2, r3, #4
 80087da:	69bb      	ldr	r3, [r7, #24]
 80087dc:	4413      	add	r3, r2
 80087de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80087e2:	617b      	str	r3, [r7, #20]
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	881b      	ldrh	r3, [r3, #0]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ee:	b29a      	uxth	r2, r3
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	801a      	strh	r2, [r3, #0]
 80087f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087f8:	2b3e      	cmp	r3, #62	; 0x3e
 80087fa:	d921      	bls.n	8008840 <USB_EPStartXfer+0x46c>
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008800:	095b      	lsrs	r3, r3, #5
 8008802:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800880a:	f003 031f 	and.w	r3, r3, #31
 800880e:	2b00      	cmp	r3, #0
 8008810:	d104      	bne.n	800881c <USB_EPStartXfer+0x448>
 8008812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008816:	3b01      	subs	r3, #1
 8008818:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	881b      	ldrh	r3, [r3, #0]
 8008820:	b29a      	uxth	r2, r3
 8008822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008826:	b29b      	uxth	r3, r3
 8008828:	029b      	lsls	r3, r3, #10
 800882a:	b29b      	uxth	r3, r3
 800882c:	4313      	orrs	r3, r2
 800882e:	b29b      	uxth	r3, r3
 8008830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008838:	b29a      	uxth	r2, r3
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	801a      	strh	r2, [r3, #0]
 800883e:	e056      	b.n	80088ee <USB_EPStartXfer+0x51a>
 8008840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10a      	bne.n	800885e <USB_EPStartXfer+0x48a>
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	881b      	ldrh	r3, [r3, #0]
 800884c:	b29b      	uxth	r3, r3
 800884e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008856:	b29a      	uxth	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	801a      	strh	r2, [r3, #0]
 800885c:	e047      	b.n	80088ee <USB_EPStartXfer+0x51a>
 800885e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008862:	085b      	lsrs	r3, r3, #1
 8008864:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d004      	beq.n	800887e <USB_EPStartXfer+0x4aa>
 8008874:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008878:	3301      	adds	r3, #1
 800887a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	881b      	ldrh	r3, [r3, #0]
 8008882:	b29a      	uxth	r2, r3
 8008884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008888:	b29b      	uxth	r3, r3
 800888a:	029b      	lsls	r3, r3, #10
 800888c:	b29b      	uxth	r3, r3
 800888e:	4313      	orrs	r3, r2
 8008890:	b29a      	uxth	r2, r3
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	801a      	strh	r2, [r3, #0]
 8008896:	e02a      	b.n	80088ee <USB_EPStartXfer+0x51a>
 8008898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800889c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d122      	bne.n	80088ee <USB_EPStartXfer+0x51a>
 80088a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	623b      	str	r3, [r7, #32]
 80088b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088c2:	b29b      	uxth	r3, r3
 80088c4:	461a      	mov	r2, r3
 80088c6:	6a3b      	ldr	r3, [r7, #32]
 80088c8:	4413      	add	r3, r2
 80088ca:	623b      	str	r3, [r7, #32]
 80088cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	011a      	lsls	r2, r3, #4
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	4413      	add	r3, r2
 80088de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088e2:	61fb      	str	r3, [r7, #28]
 80088e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e8:	b29a      	uxth	r2, r3
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80088ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	891b      	ldrh	r3, [r3, #8]
 80088fa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80088fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008902:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6959      	ldr	r1, [r3, #20]
 800890a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890e:	b29b      	uxth	r3, r3
 8008910:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008914:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008918:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800891c:	6800      	ldr	r0, [r0, #0]
 800891e:	f001 fa48 	bl	8009db2 <USB_WritePMA>
 8008922:	e3ee      	b.n	8009102 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	785b      	ldrb	r3, [r3, #1]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d177      	bne.n	8008a24 <USB_EPStartXfer+0x650>
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800894e:	b29b      	uxth	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008954:	4413      	add	r3, r2
 8008956:	64bb      	str	r3, [r7, #72]	; 0x48
 8008958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800895c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	011a      	lsls	r2, r3, #4
 8008966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008968:	4413      	add	r3, r2
 800896a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
 8008970:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	b29b      	uxth	r3, r3
 8008976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800897a:	b29a      	uxth	r2, r3
 800897c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800897e:	801a      	strh	r2, [r3, #0]
 8008980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008984:	2b3e      	cmp	r3, #62	; 0x3e
 8008986:	d921      	bls.n	80089cc <USB_EPStartXfer+0x5f8>
 8008988:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800898c:	095b      	lsrs	r3, r3, #5
 800898e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008996:	f003 031f 	and.w	r3, r3, #31
 800899a:	2b00      	cmp	r3, #0
 800899c:	d104      	bne.n	80089a8 <USB_EPStartXfer+0x5d4>
 800899e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089a2:	3b01      	subs	r3, #1
 80089a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b29b      	uxth	r3, r3
 80089bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089c8:	801a      	strh	r2, [r3, #0]
 80089ca:	e056      	b.n	8008a7a <USB_EPStartXfer+0x6a6>
 80089cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <USB_EPStartXfer+0x616>
 80089d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089d6:	881b      	ldrh	r3, [r3, #0]
 80089d8:	b29b      	uxth	r3, r3
 80089da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089e2:	b29a      	uxth	r2, r3
 80089e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089e6:	801a      	strh	r2, [r3, #0]
 80089e8:	e047      	b.n	8008a7a <USB_EPStartXfer+0x6a6>
 80089ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089ee:	085b      	lsrs	r3, r3, #1
 80089f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80089f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d004      	beq.n	8008a0a <USB_EPStartXfer+0x636>
 8008a00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a04:	3301      	adds	r3, #1
 8008a06:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a0c:	881b      	ldrh	r3, [r3, #0]
 8008a0e:	b29a      	uxth	r2, r3
 8008a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008a14:	b29b      	uxth	r3, r3
 8008a16:	029b      	lsls	r3, r3, #10
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	b29a      	uxth	r2, r3
 8008a1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a20:	801a      	strh	r2, [r3, #0]
 8008a22:	e02a      	b.n	8008a7a <USB_EPStartXfer+0x6a6>
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	785b      	ldrb	r3, [r3, #1]
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d122      	bne.n	8008a7a <USB_EPStartXfer+0x6a6>
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	653b      	str	r3, [r7, #80]	; 0x50
 8008a40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	461a      	mov	r2, r3
 8008a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a54:	4413      	add	r3, r2
 8008a56:	653b      	str	r3, [r7, #80]	; 0x50
 8008a58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	011a      	lsls	r2, r3, #4
 8008a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a68:	4413      	add	r3, r2
 8008a6a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a74:	b29a      	uxth	r2, r3
 8008a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a78:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008a7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	891b      	ldrh	r3, [r3, #8]
 8008a86:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6959      	ldr	r1, [r3, #20]
 8008a96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008aa0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008aa4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008aa8:	6800      	ldr	r0, [r0, #0]
 8008aaa:	f001 f982 	bl	8009db2 <USB_WritePMA>
            ep->xfer_buff += len;
 8008aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695a      	ldr	r2, [r3, #20]
 8008aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008abe:	441a      	add	r2, r3
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	6a1a      	ldr	r2, [r3, #32]
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d90f      	bls.n	8008b08 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008ae8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6a1a      	ldr	r2, [r3, #32]
 8008af4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008af8:	1ad2      	subs	r2, r2, r3
 8008afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	621a      	str	r2, [r3, #32]
 8008b06:	e00e      	b.n	8008b26 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2200      	movs	r2, #0
 8008b24:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008b26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	643b      	str	r3, [r7, #64]	; 0x40
 8008b32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	785b      	ldrb	r3, [r3, #1]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d177      	bne.n	8008c32 <USB_EPStartXfer+0x85e>
 8008b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b62:	4413      	add	r3, r2
 8008b64:	63bb      	str	r3, [r7, #56]	; 0x38
 8008b66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	011a      	lsls	r2, r3, #4
 8008b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b76:	4413      	add	r3, r2
 8008b78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b80:	881b      	ldrh	r3, [r3, #0]
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b88:	b29a      	uxth	r2, r3
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	801a      	strh	r2, [r3, #0]
 8008b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b92:	2b3e      	cmp	r3, #62	; 0x3e
 8008b94:	d921      	bls.n	8008bda <USB_EPStartXfer+0x806>
 8008b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b9a:	095b      	lsrs	r3, r3, #5
 8008b9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ba4:	f003 031f 	and.w	r3, r3, #31
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d104      	bne.n	8008bb6 <USB_EPStartXfer+0x7e2>
 8008bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29a      	uxth	r2, r3
 8008bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bc0:	b29b      	uxth	r3, r3
 8008bc2:	029b      	lsls	r3, r3, #10
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd6:	801a      	strh	r2, [r3, #0]
 8008bd8:	e050      	b.n	8008c7c <USB_EPStartXfer+0x8a8>
 8008bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d10a      	bne.n	8008bf8 <USB_EPStartXfer+0x824>
 8008be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	b29b      	uxth	r3, r3
 8008be8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008bec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	801a      	strh	r2, [r3, #0]
 8008bf6:	e041      	b.n	8008c7c <USB_EPStartXfer+0x8a8>
 8008bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bfc:	085b      	lsrs	r3, r3, #1
 8008bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d004      	beq.n	8008c18 <USB_EPStartXfer+0x844>
 8008c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c12:	3301      	adds	r3, #1
 8008c14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	881b      	ldrh	r3, [r3, #0]
 8008c1c:	b29a      	uxth	r2, r3
 8008c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	029b      	lsls	r3, r3, #10
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	b29a      	uxth	r2, r3
 8008c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2e:	801a      	strh	r2, [r3, #0]
 8008c30:	e024      	b.n	8008c7c <USB_EPStartXfer+0x8a8>
 8008c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d11c      	bne.n	8008c7c <USB_EPStartXfer+0x8a8>
 8008c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c56:	4413      	add	r3, r2
 8008c58:	643b      	str	r3, [r7, #64]	; 0x40
 8008c5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	011a      	lsls	r2, r3, #4
 8008c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008c70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c76:	b29a      	uxth	r2, r3
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008c7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	895b      	ldrh	r3, [r3, #10]
 8008c88:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	6959      	ldr	r1, [r3, #20]
 8008c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ca2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ca6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008caa:	6800      	ldr	r0, [r0, #0]
 8008cac:	f001 f881 	bl	8009db2 <USB_WritePMA>
 8008cb0:	e227      	b.n	8009102 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008cb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008cc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4413      	add	r3, r2
 8008cdc:	881b      	ldrh	r3, [r3, #0]
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ce8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008cec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	441a      	add	r2, r3
 8008d06:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008d0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	461a      	mov	r2, r3
 8008d3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d3e:	4413      	add	r3, r2
 8008d40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	011a      	lsls	r2, r3, #4
 8008d50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d52:	4413      	add	r3, r2
 8008d54:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008d58:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008d64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	891b      	ldrh	r3, [r3, #8]
 8008d70:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6959      	ldr	r1, [r3, #20]
 8008d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d8a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d8e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d92:	6800      	ldr	r0, [r0, #0]
 8008d94:	f001 f80d 	bl	8009db2 <USB_WritePMA>
 8008d98:	e1b3      	b.n	8009102 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	6a1a      	ldr	r2, [r3, #32]
 8008da6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008daa:	1ad2      	subs	r2, r2, r3
 8008dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	781b      	ldrb	r3, [r3, #0]
 8008dce:	009b      	lsls	r3, r3, #2
 8008dd0:	4413      	add	r3, r2
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	b29b      	uxth	r3, r3
 8008dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	f000 80c6 	beq.w	8008f6c <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	673b      	str	r3, [r7, #112]	; 0x70
 8008dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008df0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	785b      	ldrb	r3, [r3, #1]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d177      	bne.n	8008eec <USB_EPStartXfer+0xb18>
 8008dfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	461a      	mov	r2, r3
 8008e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e1c:	4413      	add	r3, r2
 8008e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	011a      	lsls	r2, r3, #4
 8008e2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e30:	4413      	add	r3, r2
 8008e32:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008e36:	667b      	str	r3, [r7, #100]	; 0x64
 8008e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	b29b      	uxth	r3, r3
 8008e3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008e42:	b29a      	uxth	r2, r3
 8008e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e46:	801a      	strh	r2, [r3, #0]
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4c:	2b3e      	cmp	r3, #62	; 0x3e
 8008e4e:	d921      	bls.n	8008e94 <USB_EPStartXfer+0xac0>
 8008e50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e54:	095b      	lsrs	r3, r3, #5
 8008e56:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e5e:	f003 031f 	and.w	r3, r3, #31
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <USB_EPStartXfer+0xa9c>
 8008e66:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b29a      	uxth	r2, r3
 8008e76:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	029b      	lsls	r3, r3, #10
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	4313      	orrs	r3, r2
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8c:	b29a      	uxth	r2, r3
 8008e8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e050      	b.n	8008f36 <USB_EPStartXfer+0xb62>
 8008e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <USB_EPStartXfer+0xade>
 8008e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008ea6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008eaa:	b29a      	uxth	r2, r3
 8008eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eae:	801a      	strh	r2, [r3, #0]
 8008eb0:	e041      	b.n	8008f36 <USB_EPStartXfer+0xb62>
 8008eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d004      	beq.n	8008ed2 <USB_EPStartXfer+0xafe>
 8008ec8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008ecc:	3301      	adds	r3, #1
 8008ece:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ed4:	881b      	ldrh	r3, [r3, #0]
 8008ed6:	b29a      	uxth	r2, r3
 8008ed8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	029b      	lsls	r3, r3, #10
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ee8:	801a      	strh	r2, [r3, #0]
 8008eea:	e024      	b.n	8008f36 <USB_EPStartXfer+0xb62>
 8008eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	785b      	ldrb	r3, [r3, #1]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d11c      	bne.n	8008f36 <USB_EPStartXfer+0xb62>
 8008efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f10:	4413      	add	r3, r2
 8008f12:	673b      	str	r3, [r7, #112]	; 0x70
 8008f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	011a      	lsls	r2, r3, #4
 8008f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f24:	4413      	add	r3, r2
 8008f26:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8008f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f30:	b29a      	uxth	r2, r3
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	895b      	ldrh	r3, [r3, #10]
 8008f42:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6959      	ldr	r1, [r3, #20]
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008f5c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f60:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f64:	6800      	ldr	r0, [r0, #0]
 8008f66:	f000 ff24 	bl	8009db2 <USB_WritePMA>
 8008f6a:	e0ca      	b.n	8009102 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	785b      	ldrb	r3, [r3, #1]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d177      	bne.n	800906c <USB_EPStartXfer+0xc98>
 8008f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f9c:	4413      	add	r3, r2
 8008f9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	011a      	lsls	r2, r3, #4
 8008fae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008fb6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fba:	881b      	ldrh	r3, [r3, #0]
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	801a      	strh	r2, [r3, #0]
 8008fc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fcc:	2b3e      	cmp	r3, #62	; 0x3e
 8008fce:	d921      	bls.n	8009014 <USB_EPStartXfer+0xc40>
 8008fd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fde:	f003 031f 	and.w	r3, r3, #31
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d104      	bne.n	8008ff0 <USB_EPStartXfer+0xc1c>
 8008fe6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fea:	3b01      	subs	r3, #1
 8008fec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ff0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ff2:	881b      	ldrh	r3, [r3, #0]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	029b      	lsls	r3, r3, #10
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	4313      	orrs	r3, r2
 8009002:	b29b      	uxth	r3, r3
 8009004:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009008:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800900c:	b29a      	uxth	r2, r3
 800900e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009010:	801a      	strh	r2, [r3, #0]
 8009012:	e05c      	b.n	80090ce <USB_EPStartXfer+0xcfa>
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009018:	2b00      	cmp	r3, #0
 800901a:	d10a      	bne.n	8009032 <USB_EPStartXfer+0xc5e>
 800901c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800901e:	881b      	ldrh	r3, [r3, #0]
 8009020:	b29b      	uxth	r3, r3
 8009022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800902a:	b29a      	uxth	r2, r3
 800902c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800902e:	801a      	strh	r2, [r3, #0]
 8009030:	e04d      	b.n	80090ce <USB_EPStartXfer+0xcfa>
 8009032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800903c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b00      	cmp	r3, #0
 8009046:	d004      	beq.n	8009052 <USB_EPStartXfer+0xc7e>
 8009048:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800904c:	3301      	adds	r3, #1
 800904e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009054:	881b      	ldrh	r3, [r3, #0]
 8009056:	b29a      	uxth	r2, r3
 8009058:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800905c:	b29b      	uxth	r3, r3
 800905e:	029b      	lsls	r3, r3, #10
 8009060:	b29b      	uxth	r3, r3
 8009062:	4313      	orrs	r3, r2
 8009064:	b29a      	uxth	r2, r3
 8009066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009068:	801a      	strh	r2, [r3, #0]
 800906a:	e030      	b.n	80090ce <USB_EPStartXfer+0xcfa>
 800906c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009070:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	785b      	ldrb	r3, [r3, #1]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d128      	bne.n	80090ce <USB_EPStartXfer+0xcfa>
 800907c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009080:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800908a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009098:	b29b      	uxth	r3, r3
 800909a:	461a      	mov	r2, r3
 800909c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090a0:	4413      	add	r3, r2
 80090a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	011a      	lsls	r2, r3, #4
 80090b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090b8:	4413      	add	r3, r2
 80090ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80090be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090c6:	b29a      	uxth	r2, r3
 80090c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80090cc:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80090ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	891b      	ldrh	r3, [r3, #8]
 80090da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6959      	ldr	r1, [r3, #20]
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80090f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80090f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80090fc:	6800      	ldr	r0, [r0, #0]
 80090fe:	f000 fe58 	bl	8009db2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009102:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009106:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	4413      	add	r3, r2
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29b      	uxth	r3, r3
 8009120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009124:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009128:	817b      	strh	r3, [r7, #10]
 800912a:	897b      	ldrh	r3, [r7, #10]
 800912c:	f083 0310 	eor.w	r3, r3, #16
 8009130:	817b      	strh	r3, [r7, #10]
 8009132:	897b      	ldrh	r3, [r7, #10]
 8009134:	f083 0320 	eor.w	r3, r3, #32
 8009138:	817b      	strh	r3, [r7, #10]
 800913a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800913e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	441a      	add	r2, r3
 8009154:	897b      	ldrh	r3, [r7, #10]
 8009156:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800915a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009162:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009166:	b29b      	uxth	r3, r3
 8009168:	8013      	strh	r3, [r2, #0]
 800916a:	f000 bcde 	b.w	8009b2a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800916e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009172:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	7b1b      	ldrb	r3, [r3, #12]
 800917a:	2b00      	cmp	r3, #0
 800917c:	f040 80bb 	bne.w	80092f6 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009180:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009184:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	699a      	ldr	r2, [r3, #24]
 800918c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009190:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	429a      	cmp	r2, r3
 800919a:	d917      	bls.n	80091cc <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800919c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80091ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	699a      	ldr	r2, [r3, #24]
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091bc:	1ad2      	subs	r2, r2, r3
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	619a      	str	r2, [r3, #24]
 80091ca:	e00e      	b.n	80091ea <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80091cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80091dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	2200      	movs	r2, #0
 80091e8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80091ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80091f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009206:	b29b      	uxth	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800920e:	4413      	add	r3, r2
 8009210:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009214:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009218:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	011a      	lsls	r2, r3, #4
 8009222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009226:	4413      	add	r3, r2
 8009228:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800922c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800923c:	b29a      	uxth	r2, r3
 800923e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009242:	801a      	strh	r2, [r3, #0]
 8009244:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009248:	2b3e      	cmp	r3, #62	; 0x3e
 800924a:	d924      	bls.n	8009296 <USB_EPStartXfer+0xec2>
 800924c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009250:	095b      	lsrs	r3, r3, #5
 8009252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800925a:	f003 031f 	and.w	r3, r3, #31
 800925e:	2b00      	cmp	r3, #0
 8009260:	d104      	bne.n	800926c <USB_EPStartXfer+0xe98>
 8009262:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009266:	3b01      	subs	r3, #1
 8009268:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800926c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009270:	881b      	ldrh	r3, [r3, #0]
 8009272:	b29a      	uxth	r2, r3
 8009274:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009278:	b29b      	uxth	r3, r3
 800927a:	029b      	lsls	r3, r3, #10
 800927c:	b29b      	uxth	r3, r3
 800927e:	4313      	orrs	r3, r2
 8009280:	b29b      	uxth	r3, r3
 8009282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800928a:	b29a      	uxth	r2, r3
 800928c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009290:	801a      	strh	r2, [r3, #0]
 8009292:	f000 bc10 	b.w	8009ab6 <USB_EPStartXfer+0x16e2>
 8009296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800929a:	2b00      	cmp	r3, #0
 800929c:	d10c      	bne.n	80092b8 <USB_EPStartXfer+0xee4>
 800929e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b4:	801a      	strh	r2, [r3, #0]
 80092b6:	e3fe      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
 80092b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092bc:	085b      	lsrs	r3, r3, #1
 80092be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d004      	beq.n	80092d8 <USB_EPStartXfer+0xf04>
 80092ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092d2:	3301      	adds	r3, #1
 80092d4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092dc:	881b      	ldrh	r3, [r3, #0]
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	029b      	lsls	r3, r3, #10
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	4313      	orrs	r3, r2
 80092ec:	b29a      	uxth	r2, r3
 80092ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092f2:	801a      	strh	r2, [r3, #0]
 80092f4:	e3df      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80092f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	78db      	ldrb	r3, [r3, #3]
 8009302:	2b02      	cmp	r3, #2
 8009304:	f040 8218 	bne.w	8009738 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009308:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800930c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	785b      	ldrb	r3, [r3, #1]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f040 809d 	bne.w	8009454 <USB_EPStartXfer+0x1080>
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009328:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009336:	b29b      	uxth	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800933e:	4413      	add	r3, r2
 8009340:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	011a      	lsls	r2, r3, #4
 8009352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009356:	4413      	add	r3, r2
 8009358:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800935c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800936c:	b29a      	uxth	r2, r3
 800936e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009372:	801a      	strh	r2, [r3, #0]
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	691b      	ldr	r3, [r3, #16]
 8009380:	2b3e      	cmp	r3, #62	; 0x3e
 8009382:	d92b      	bls.n	80093dc <USB_EPStartXfer+0x1008>
 8009384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 031f 	and.w	r3, r3, #31
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d104      	bne.n	80093b4 <USB_EPStartXfer+0xfe0>
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	3b01      	subs	r3, #1
 80093b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	029b      	lsls	r3, r3, #10
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	b29b      	uxth	r3, r3
 80093ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093d2:	b29a      	uxth	r2, r3
 80093d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093d8:	801a      	strh	r2, [r3, #0]
 80093da:	e070      	b.n	80094be <USB_EPStartXfer+0x10ea>
 80093dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10c      	bne.n	8009406 <USB_EPStartXfer+0x1032>
 80093ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093f0:	881b      	ldrh	r3, [r3, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009402:	801a      	strh	r2, [r3, #0]
 8009404:	e05b      	b.n	80094be <USB_EPStartXfer+0x10ea>
 8009406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800941c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	f003 0301 	and.w	r3, r3, #1
 8009428:	2b00      	cmp	r3, #0
 800942a:	d004      	beq.n	8009436 <USB_EPStartXfer+0x1062>
 800942c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009430:	3301      	adds	r3, #1
 8009432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	b29a      	uxth	r2, r3
 800943e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009442:	b29b      	uxth	r3, r3
 8009444:	029b      	lsls	r3, r3, #10
 8009446:	b29b      	uxth	r3, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	b29a      	uxth	r2, r3
 800944c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009450:	801a      	strh	r2, [r3, #0]
 8009452:	e034      	b.n	80094be <USB_EPStartXfer+0x10ea>
 8009454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d12c      	bne.n	80094be <USB_EPStartXfer+0x10ea>
 8009464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009468:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009480:	b29b      	uxth	r3, r3
 8009482:	461a      	mov	r2, r3
 8009484:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009488:	4413      	add	r3, r2
 800948a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800948e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	011a      	lsls	r2, r3, #4
 800949c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80094a0:	4413      	add	r3, r2
 80094a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80094a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80094aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80094cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 809d 	bne.w	8009618 <USB_EPStartXfer+0x1244>
 80094de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	461a      	mov	r2, r3
 80094fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009502:	4413      	add	r3, r2
 8009504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	011a      	lsls	r2, r3, #4
 8009516:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800951a:	4413      	add	r3, r2
 800951c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	b29b      	uxth	r3, r3
 800952c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009530:	b29a      	uxth	r2, r3
 8009532:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	2b3e      	cmp	r3, #62	; 0x3e
 8009546:	d92b      	bls.n	80095a0 <USB_EPStartXfer+0x11cc>
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800955a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 031f 	and.w	r3, r3, #31
 800956a:	2b00      	cmp	r3, #0
 800956c:	d104      	bne.n	8009578 <USB_EPStartXfer+0x11a4>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	3b01      	subs	r3, #1
 8009574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29a      	uxth	r2, r3
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	b29b      	uxth	r3, r3
 8009586:	029b      	lsls	r3, r3, #10
 8009588:	b29b      	uxth	r3, r3
 800958a:	4313      	orrs	r3, r2
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009596:	b29a      	uxth	r2, r3
 8009598:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800959c:	801a      	strh	r2, [r3, #0]
 800959e:	e069      	b.n	8009674 <USB_EPStartXfer+0x12a0>
 80095a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10c      	bne.n	80095ca <USB_EPStartXfer+0x11f6>
 80095b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80095bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095c6:	801a      	strh	r2, [r3, #0]
 80095c8:	e054      	b.n	8009674 <USB_EPStartXfer+0x12a0>
 80095ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	691b      	ldr	r3, [r3, #16]
 80095d6:	085b      	lsrs	r3, r3, #1
 80095d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <USB_EPStartXfer+0x1226>
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f4:	3301      	adds	r3, #1
 80095f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80095fe:	881b      	ldrh	r3, [r3, #0]
 8009600:	b29a      	uxth	r2, r3
 8009602:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009606:	b29b      	uxth	r3, r3
 8009608:	029b      	lsls	r3, r3, #10
 800960a:	b29b      	uxth	r3, r3
 800960c:	4313      	orrs	r3, r2
 800960e:	b29a      	uxth	r2, r3
 8009610:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009614:	801a      	strh	r2, [r3, #0]
 8009616:	e02d      	b.n	8009674 <USB_EPStartXfer+0x12a0>
 8009618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800961c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	785b      	ldrb	r3, [r3, #1]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d125      	bne.n	8009674 <USB_EPStartXfer+0x12a0>
 8009628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009636:	b29b      	uxth	r3, r3
 8009638:	461a      	mov	r2, r3
 800963a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800963e:	4413      	add	r3, r2
 8009640:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009648:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	011a      	lsls	r2, r3, #4
 8009652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009656:	4413      	add	r3, r2
 8009658:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800965c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009660:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009664:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	b29a      	uxth	r2, r3
 800966e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009672:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	2b00      	cmp	r3, #0
 8009682:	f000 8218 	beq.w	8009ab6 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009686:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800968a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	781b      	ldrb	r3, [r3, #0]
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096a6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80096aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d005      	beq.n	80096be <USB_EPStartXfer+0x12ea>
 80096b2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80096b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d10d      	bne.n	80096da <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80096c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f040 81f5 	bne.w	8009ab6 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80096cc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80096d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f040 81ee 	bne.w	8009ab6 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80096da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009700:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009712:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	781b      	ldrb	r3, [r3, #0]
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	441a      	add	r2, r3
 800971e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800972a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800972e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009732:	b29b      	uxth	r3, r3
 8009734:	8013      	strh	r3, [r2, #0]
 8009736:	e1be      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009738:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800973c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	78db      	ldrb	r3, [r3, #3]
 8009744:	2b01      	cmp	r3, #1
 8009746:	f040 81b4 	bne.w	8009ab2 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800974a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800974e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	699a      	ldr	r2, [r3, #24]
 8009756:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800975a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	429a      	cmp	r2, r3
 8009764:	d917      	bls.n	8009796 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009776:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	699a      	ldr	r2, [r3, #24]
 8009782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009786:	1ad2      	subs	r2, r2, r3
 8009788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	619a      	str	r2, [r3, #24]
 8009794:	e00e      	b.n	80097b4 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 80097a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	2200      	movs	r2, #0
 80097b2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80097b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f040 8085 	bne.w	80098d0 <USB_EPStartXfer+0x14fc>
 80097c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	461a      	mov	r2, r3
 80097e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80097ea:	4413      	add	r3, r2
 80097ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80097f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	011a      	lsls	r2, r3, #4
 80097fe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009802:	4413      	add	r3, r2
 8009804:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800980c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009810:	881b      	ldrh	r3, [r3, #0]
 8009812:	b29b      	uxth	r3, r3
 8009814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009824:	2b3e      	cmp	r3, #62	; 0x3e
 8009826:	d923      	bls.n	8009870 <USB_EPStartXfer+0x149c>
 8009828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800982c:	095b      	lsrs	r3, r3, #5
 800982e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009832:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009836:	f003 031f 	and.w	r3, r3, #31
 800983a:	2b00      	cmp	r3, #0
 800983c:	d104      	bne.n	8009848 <USB_EPStartXfer+0x1474>
 800983e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009842:	3b01      	subs	r3, #1
 8009844:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009848:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	b29a      	uxth	r2, r3
 8009850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009854:	b29b      	uxth	r3, r3
 8009856:	029b      	lsls	r3, r3, #10
 8009858:	b29b      	uxth	r3, r3
 800985a:	4313      	orrs	r3, r2
 800985c:	b29b      	uxth	r3, r3
 800985e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009866:	b29a      	uxth	r2, r3
 8009868:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800986c:	801a      	strh	r2, [r3, #0]
 800986e:	e060      	b.n	8009932 <USB_EPStartXfer+0x155e>
 8009870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009874:	2b00      	cmp	r3, #0
 8009876:	d10c      	bne.n	8009892 <USB_EPStartXfer+0x14be>
 8009878:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800987c:	881b      	ldrh	r3, [r3, #0]
 800987e:	b29b      	uxth	r3, r3
 8009880:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009884:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009888:	b29a      	uxth	r2, r3
 800988a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800988e:	801a      	strh	r2, [r3, #0]
 8009890:	e04f      	b.n	8009932 <USB_EPStartXfer+0x155e>
 8009892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009896:	085b      	lsrs	r3, r3, #1
 8009898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d004      	beq.n	80098b2 <USB_EPStartXfer+0x14de>
 80098a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098ac:	3301      	adds	r3, #1
 80098ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80098b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098b6:	881b      	ldrh	r3, [r3, #0]
 80098b8:	b29a      	uxth	r2, r3
 80098ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098be:	b29b      	uxth	r3, r3
 80098c0:	029b      	lsls	r3, r3, #10
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	4313      	orrs	r3, r2
 80098c6:	b29a      	uxth	r2, r3
 80098c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	e030      	b.n	8009932 <USB_EPStartXfer+0x155e>
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	785b      	ldrb	r3, [r3, #1]
 80098dc:	2b01      	cmp	r3, #1
 80098de:	d128      	bne.n	8009932 <USB_EPStartXfer+0x155e>
 80098e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80098ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	461a      	mov	r2, r3
 8009900:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009904:	4413      	add	r3, r2
 8009906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800990a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	781b      	ldrb	r3, [r3, #0]
 8009916:	011a      	lsls	r2, r3, #4
 8009918:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800991c:	4413      	add	r3, r2
 800991e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009922:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992a:	b29a      	uxth	r2, r3
 800992c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009930:	801a      	strh	r2, [r3, #0]
 8009932:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009936:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	785b      	ldrb	r3, [r3, #1]
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8085 	bne.w	8009a5c <USB_EPStartXfer+0x1688>
 8009952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009960:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009964:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800996e:	b29b      	uxth	r3, r3
 8009970:	461a      	mov	r2, r3
 8009972:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009976:	4413      	add	r3, r2
 8009978:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	781b      	ldrb	r3, [r3, #0]
 8009988:	011a      	lsls	r2, r3, #4
 800998a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800998e:	4413      	add	r3, r2
 8009990:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009998:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099a4:	b29a      	uxth	r2, r3
 80099a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099aa:	801a      	strh	r2, [r3, #0]
 80099ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b0:	2b3e      	cmp	r3, #62	; 0x3e
 80099b2:	d923      	bls.n	80099fc <USB_EPStartXfer+0x1628>
 80099b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099b8:	095b      	lsrs	r3, r3, #5
 80099ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099c2:	f003 031f 	and.w	r3, r3, #31
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d104      	bne.n	80099d4 <USB_EPStartXfer+0x1600>
 80099ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099ce:	3b01      	subs	r3, #1
 80099d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099d8:	881b      	ldrh	r3, [r3, #0]
 80099da:	b29a      	uxth	r2, r3
 80099dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099e0:	b29b      	uxth	r3, r3
 80099e2:	029b      	lsls	r3, r3, #10
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	4313      	orrs	r3, r2
 80099e8:	b29b      	uxth	r3, r3
 80099ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f2:	b29a      	uxth	r2, r3
 80099f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099f8:	801a      	strh	r2, [r3, #0]
 80099fa:	e05c      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
 80099fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10c      	bne.n	8009a1e <USB_EPStartXfer+0x164a>
 8009a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a14:	b29a      	uxth	r2, r3
 8009a16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a1a:	801a      	strh	r2, [r3, #0]
 8009a1c:	e04b      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
 8009a1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a22:	085b      	lsrs	r3, r3, #1
 8009a24:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a2c:	f003 0301 	and.w	r3, r3, #1
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d004      	beq.n	8009a3e <USB_EPStartXfer+0x166a>
 8009a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a38:	3301      	adds	r3, #1
 8009a3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009a3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a42:	881b      	ldrh	r3, [r3, #0]
 8009a44:	b29a      	uxth	r2, r3
 8009a46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	029b      	lsls	r3, r3, #10
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	4313      	orrs	r3, r2
 8009a52:	b29a      	uxth	r2, r3
 8009a54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a58:	801a      	strh	r2, [r3, #0]
 8009a5a:	e02c      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
 8009a5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	785b      	ldrb	r3, [r3, #1]
 8009a68:	2b01      	cmp	r3, #1
 8009a6a:	d124      	bne.n	8009ab6 <USB_EPStartXfer+0x16e2>
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a7a:	b29b      	uxth	r3, r3
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a82:	4413      	add	r3, r2
 8009a84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	781b      	ldrb	r3, [r3, #0]
 8009a94:	011a      	lsls	r2, r3, #4
 8009a96:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8009aa0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009aa8:	b29a      	uxth	r2, r3
 8009aaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009aae:	801a      	strh	r2, [r3, #0]
 8009ab0:	e001      	b.n	8009ab6 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e03a      	b.n	8009b2c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009adc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009ae0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009ae4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ae8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009aec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009af0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009af4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009af8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	441a      	add	r2, r3
 8009b12:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009b16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b26:	b29b      	uxth	r3, r3
 8009b28:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b085      	sub	sp, #20
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	785b      	ldrb	r3, [r3, #1]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d020      	beq.n	8009b8a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b5e:	81bb      	strh	r3, [r7, #12]
 8009b60:	89bb      	ldrh	r3, [r7, #12]
 8009b62:	f083 0310 	eor.w	r3, r3, #16
 8009b66:	81bb      	strh	r3, [r7, #12]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	441a      	add	r2, r3
 8009b72:	89bb      	ldrh	r3, [r7, #12]
 8009b74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	8013      	strh	r3, [r2, #0]
 8009b88:	e01f      	b.n	8009bca <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba0:	81fb      	strh	r3, [r7, #14]
 8009ba2:	89fb      	ldrh	r3, [r7, #14]
 8009ba4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ba8:	81fb      	strh	r3, [r7, #14]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	441a      	add	r2, r3
 8009bb4:	89fb      	ldrh	r3, [r7, #14]
 8009bb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3714      	adds	r7, #20
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bc80      	pop	{r7}
 8009bd4:	4770      	bx	lr

08009bd6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b087      	sub	sp, #28
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
 8009bde:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	7b1b      	ldrb	r3, [r3, #12]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f040 809d 	bne.w	8009d24 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	785b      	ldrb	r3, [r3, #1]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d04c      	beq.n	8009c8c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	4413      	add	r3, r2
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	823b      	strh	r3, [r7, #16]
 8009c00:	8a3b      	ldrh	r3, [r7, #16]
 8009c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d01b      	beq.n	8009c42 <USB_EPClearStall+0x6c>
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c20:	81fb      	strh	r3, [r7, #14]
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	78db      	ldrb	r3, [r3, #3]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d06c      	beq.n	8009d24 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	009b      	lsls	r3, r3, #2
 8009c52:	4413      	add	r3, r2
 8009c54:	881b      	ldrh	r3, [r3, #0]
 8009c56:	b29b      	uxth	r3, r3
 8009c58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c60:	81bb      	strh	r3, [r7, #12]
 8009c62:	89bb      	ldrh	r3, [r7, #12]
 8009c64:	f083 0320 	eor.w	r3, r3, #32
 8009c68:	81bb      	strh	r3, [r7, #12]
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	781b      	ldrb	r3, [r3, #0]
 8009c70:	009b      	lsls	r3, r3, #2
 8009c72:	441a      	add	r2, r3
 8009c74:	89bb      	ldrh	r3, [r7, #12]
 8009c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	8013      	strh	r3, [r2, #0]
 8009c8a:	e04b      	b.n	8009d24 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4413      	add	r3, r2
 8009c96:	881b      	ldrh	r3, [r3, #0]
 8009c98:	82fb      	strh	r3, [r7, #22]
 8009c9a:	8afb      	ldrh	r3, [r7, #22]
 8009c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d01b      	beq.n	8009cdc <USB_EPClearStall+0x106>
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cba:	82bb      	strh	r3, [r7, #20]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	441a      	add	r2, r3
 8009cc6:	8abb      	ldrh	r3, [r7, #20]
 8009cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf2:	827b      	strh	r3, [r7, #18]
 8009cf4:	8a7b      	ldrh	r3, [r7, #18]
 8009cf6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cfa:	827b      	strh	r3, [r7, #18]
 8009cfc:	8a7b      	ldrh	r3, [r7, #18]
 8009cfe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d02:	827b      	strh	r3, [r7, #18]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	441a      	add	r2, r3
 8009d0e:	8a7b      	ldrh	r3, [r7, #18]
 8009d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009d24:	2300      	movs	r3, #0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	371c      	adds	r7, #28
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr

08009d30 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	460b      	mov	r3, r1
 8009d3a:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009d3c:	78fb      	ldrb	r3, [r7, #3]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2280      	movs	r2, #128	; 0x80
 8009d46:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bc80      	pop	{r7}
 8009d54:	4770      	bx	lr

08009d56 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009d56:	b480      	push	{r7}
 8009d58:	b083      	sub	sp, #12
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr

08009d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8009d6a:	b480      	push	{r7}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	370c      	adds	r7, #12
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bc80      	pop	{r7}
 8009d7c:	4770      	bx	lr

08009d7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d90:	68fb      	ldr	r3, [r7, #12]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bc80      	pop	{r7}
 8009d9a:	4770      	bx	lr

08009d9c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bc80      	pop	{r7}
 8009db0:	4770      	bx	lr

08009db2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009db2:	b480      	push	{r7}
 8009db4:	b08b      	sub	sp, #44	; 0x2c
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	80fb      	strh	r3, [r7, #6]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009dc8:	88bb      	ldrh	r3, [r7, #4]
 8009dca:	3301      	adds	r3, #1
 8009dcc:	085b      	lsrs	r3, r3, #1
 8009dce:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dd8:	88fb      	ldrh	r3, [r7, #6]
 8009dda:	005a      	lsls	r2, r3, #1
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	4413      	add	r3, r2
 8009de0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
 8009dea:	e01e      	b.n	8009e2a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	3301      	adds	r3, #1
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	b21a      	sxth	r2, r3
 8009dfc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009e00:	4313      	orrs	r3, r2
 8009e02:	b21b      	sxth	r3, r3
 8009e04:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009e06:	6a3b      	ldr	r3, [r7, #32]
 8009e08:	8a7a      	ldrh	r2, [r7, #18]
 8009e0a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009e0c:	6a3b      	ldr	r3, [r7, #32]
 8009e0e:	3302      	adds	r3, #2
 8009e10:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	3302      	adds	r3, #2
 8009e16:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009e1e:	69fb      	ldr	r3, [r7, #28]
 8009e20:	3301      	adds	r3, #1
 8009e22:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	3b01      	subs	r3, #1
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d1dd      	bne.n	8009dec <USB_WritePMA+0x3a>
  }
}
 8009e30:	bf00      	nop
 8009e32:	bf00      	nop
 8009e34:	372c      	adds	r7, #44	; 0x2c
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bc80      	pop	{r7}
 8009e3a:	4770      	bx	lr

08009e3c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b08b      	sub	sp, #44	; 0x2c
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	4611      	mov	r1, r2
 8009e48:	461a      	mov	r2, r3
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	80fb      	strh	r3, [r7, #6]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009e52:	88bb      	ldrh	r3, [r7, #4]
 8009e54:	085b      	lsrs	r3, r3, #1
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009e62:	88fb      	ldrh	r3, [r7, #6]
 8009e64:	005a      	lsls	r2, r3, #1
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e6e:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009e70:	69bb      	ldr	r3, [r7, #24]
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
 8009e74:	e01b      	b.n	8009eae <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009e76:	6a3b      	ldr	r3, [r7, #32]
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009e7e:	6a3b      	ldr	r3, [r7, #32]
 8009e80:	3302      	adds	r3, #2
 8009e82:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	0a1b      	lsrs	r3, r3, #8
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009ea2:	6a3b      	ldr	r3, [r7, #32]
 8009ea4:	3302      	adds	r3, #2
 8009ea6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	3b01      	subs	r3, #1
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e0      	bne.n	8009e76 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009eb4:	88bb      	ldrh	r3, [r7, #4]
 8009eb6:	f003 0301 	and.w	r3, r3, #1
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d007      	beq.n	8009ed0 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009ec0:	6a3b      	ldr	r3, [r7, #32]
 8009ec2:	881b      	ldrh	r3, [r3, #0]
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	b2da      	uxtb	r2, r3
 8009ecc:	69fb      	ldr	r3, [r7, #28]
 8009ece:	701a      	strb	r2, [r3, #0]
  }
}
 8009ed0:	bf00      	nop
 8009ed2:	372c      	adds	r7, #44	; 0x2c
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bc80      	pop	{r7}
 8009ed8:	4770      	bx	lr

08009eda <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b084      	sub	sp, #16
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	7c1b      	ldrb	r3, [r3, #16]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d115      	bne.n	8009f1e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ef2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ef6:	2202      	movs	r2, #2
 8009ef8:	2181      	movs	r1, #129	; 0x81
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f001 fe31 	bl	800bb62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 fe27 	bl	800bb62 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2201      	movs	r2, #1
 8009f18:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8009f1c:	e012      	b.n	8009f44 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009f1e:	2340      	movs	r3, #64	; 0x40
 8009f20:	2202      	movs	r2, #2
 8009f22:	2181      	movs	r1, #129	; 0x81
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fe1c 	bl	800bb62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009f30:	2340      	movs	r3, #64	; 0x40
 8009f32:	2202      	movs	r2, #2
 8009f34:	2101      	movs	r1, #1
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fe13 	bl	800bb62 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2201      	movs	r2, #1
 8009f40:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009f44:	2308      	movs	r3, #8
 8009f46:	2203      	movs	r2, #3
 8009f48:	2182      	movs	r1, #130	; 0x82
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fe09 	bl	800bb62 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009f56:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009f5a:	f001 ff29 	bl	800bdb0 <USBD_static_malloc>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d102      	bne.n	8009f76 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8009f70:	2301      	movs	r3, #1
 8009f72:	73fb      	strb	r3, [r7, #15]
 8009f74:	e026      	b.n	8009fc4 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f7c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2200      	movs	r2, #0
 8009f94:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	7c1b      	ldrb	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d109      	bne.n	8009fb4 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009faa:	2101      	movs	r1, #1
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 fec8 	bl	800bd42 <USBD_LL_PrepareReceive>
 8009fb2:	e007      	b.n	8009fc4 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009fba:	2340      	movs	r3, #64	; 0x40
 8009fbc:	2101      	movs	r1, #1
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f001 febf 	bl	800bd42 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3710      	adds	r7, #16
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b084      	sub	sp, #16
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009fde:	2181      	movs	r1, #129	; 0x81
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fde4 	bl	800bbae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009fec:	2101      	movs	r1, #1
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f001 fddd 	bl	800bbae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009ffc:	2182      	movs	r1, #130	; 0x82
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f001 fdd5 	bl	800bbae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2200      	movs	r2, #0
 800a008:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00e      	beq.n	800a032 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a024:	4618      	mov	r0, r3
 800a026:	f001 fecf 	bl	800bdc8 <USBD_static_free>
    pdev->pClassData = NULL;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2200      	movs	r2, #0
 800a02e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800a032:	7bfb      	ldrb	r3, [r7, #15]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3710      	adds	r7, #16
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b086      	sub	sp, #24
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
 800a044:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a04c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800a052:	2300      	movs	r3, #0
 800a054:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800a056:	2300      	movs	r3, #0
 800a058:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	781b      	ldrb	r3, [r3, #0]
 800a05e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a062:	2b00      	cmp	r3, #0
 800a064:	d039      	beq.n	800a0da <USBD_CDC_Setup+0x9e>
 800a066:	2b20      	cmp	r3, #32
 800a068:	d17f      	bne.n	800a16a <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	88db      	ldrh	r3, [r3, #6]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d029      	beq.n	800a0c6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800a072:	683b      	ldr	r3, [r7, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	b25b      	sxtb	r3, r3
 800a078:	2b00      	cmp	r3, #0
 800a07a:	da11      	bge.n	800a0a0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a088:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a08a:	683a      	ldr	r2, [r7, #0]
 800a08c:	88d2      	ldrh	r2, [r2, #6]
 800a08e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a090:	6939      	ldr	r1, [r7, #16]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	88db      	ldrh	r3, [r3, #6]
 800a096:	461a      	mov	r2, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f001 f9da 	bl	800b452 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a09e:	e06b      	b.n	800a178 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800a0a0:	683b      	ldr	r3, [r7, #0]
 800a0a2:	785a      	ldrb	r2, [r3, #1]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	88db      	ldrh	r3, [r3, #6]
 800a0ae:	b2da      	uxtb	r2, r3
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a0b6:	6939      	ldr	r1, [r7, #16]
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	88db      	ldrh	r3, [r3, #6]
 800a0bc:	461a      	mov	r2, r3
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f001 f9f5 	bl	800b4ae <USBD_CtlPrepareRx>
      break;
 800a0c4:	e058      	b.n	800a178 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	7850      	ldrb	r0, [r2, #1]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	4798      	blx	r3
      break;
 800a0d8:	e04e      	b.n	800a178 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	785b      	ldrb	r3, [r3, #1]
 800a0de:	2b0b      	cmp	r3, #11
 800a0e0:	d02e      	beq.n	800a140 <USBD_CDC_Setup+0x104>
 800a0e2:	2b0b      	cmp	r3, #11
 800a0e4:	dc38      	bgt.n	800a158 <USBD_CDC_Setup+0x11c>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <USBD_CDC_Setup+0xb4>
 800a0ea:	2b0a      	cmp	r3, #10
 800a0ec:	d014      	beq.n	800a118 <USBD_CDC_Setup+0xdc>
 800a0ee:	e033      	b.n	800a158 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d107      	bne.n	800a10a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a0fa:	f107 030c 	add.w	r3, r7, #12
 800a0fe:	2202      	movs	r2, #2
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f001 f9a5 	bl	800b452 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a108:	e02e      	b.n	800a168 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 f936 	bl	800b37e <USBD_CtlError>
            ret = USBD_FAIL;
 800a112:	2302      	movs	r3, #2
 800a114:	75fb      	strb	r3, [r7, #23]
          break;
 800a116:	e027      	b.n	800a168 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a11e:	2b03      	cmp	r3, #3
 800a120:	d107      	bne.n	800a132 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a122:	f107 030f 	add.w	r3, r7, #15
 800a126:	2201      	movs	r2, #1
 800a128:	4619      	mov	r1, r3
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f001 f991 	bl	800b452 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a130:	e01a      	b.n	800a168 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800a132:	6839      	ldr	r1, [r7, #0]
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 f922 	bl	800b37e <USBD_CtlError>
            ret = USBD_FAIL;
 800a13a:	2302      	movs	r3, #2
 800a13c:	75fb      	strb	r3, [r7, #23]
          break;
 800a13e:	e013      	b.n	800a168 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a146:	2b03      	cmp	r3, #3
 800a148:	d00d      	beq.n	800a166 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 800a14a:	6839      	ldr	r1, [r7, #0]
 800a14c:	6878      	ldr	r0, [r7, #4]
 800a14e:	f001 f916 	bl	800b37e <USBD_CtlError>
            ret = USBD_FAIL;
 800a152:	2302      	movs	r3, #2
 800a154:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a156:	e006      	b.n	800a166 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800a158:	6839      	ldr	r1, [r7, #0]
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f001 f90f 	bl	800b37e <USBD_CtlError>
          ret = USBD_FAIL;
 800a160:	2302      	movs	r3, #2
 800a162:	75fb      	strb	r3, [r7, #23]
          break;
 800a164:	e000      	b.n	800a168 <USBD_CDC_Setup+0x12c>
          break;
 800a166:	bf00      	nop
      }
      break;
 800a168:	e006      	b.n	800a178 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800a16a:	6839      	ldr	r1, [r7, #0]
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f001 f906 	bl	800b37e <USBD_CtlError>
      ret = USBD_FAIL;
 800a172:	2302      	movs	r3, #2
 800a174:	75fb      	strb	r3, [r7, #23]
      break;
 800a176:	bf00      	nop
  }

  return ret;
 800a178:	7dfb      	ldrb	r3, [r7, #23]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a182:	b580      	push	{r7, lr}
 800a184:	b084      	sub	sp, #16
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	460b      	mov	r3, r1
 800a18c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a194:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a19c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d03a      	beq.n	800a21e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a1a8:	78fa      	ldrb	r2, [r7, #3]
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4613      	mov	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	440b      	add	r3, r1
 800a1b6:	331c      	adds	r3, #28
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d029      	beq.n	800a212 <USBD_CDC_DataIn+0x90>
 800a1be:	78fa      	ldrb	r2, [r7, #3]
 800a1c0:	6879      	ldr	r1, [r7, #4]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	4413      	add	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	440b      	add	r3, r1
 800a1cc:	331c      	adds	r3, #28
 800a1ce:	681a      	ldr	r2, [r3, #0]
 800a1d0:	78f9      	ldrb	r1, [r7, #3]
 800a1d2:	68b8      	ldr	r0, [r7, #8]
 800a1d4:	460b      	mov	r3, r1
 800a1d6:	009b      	lsls	r3, r3, #2
 800a1d8:	440b      	add	r3, r1
 800a1da:	00db      	lsls	r3, r3, #3
 800a1dc:	4403      	add	r3, r0
 800a1de:	3320      	adds	r3, #32
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1e6:	fb01 f303 	mul.w	r3, r1, r3
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d110      	bne.n	800a212 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a1f0:	78fa      	ldrb	r2, [r7, #3]
 800a1f2:	6879      	ldr	r1, [r7, #4]
 800a1f4:	4613      	mov	r3, r2
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	009b      	lsls	r3, r3, #2
 800a1fc:	440b      	add	r3, r1
 800a1fe:	331c      	adds	r3, #28
 800a200:	2200      	movs	r2, #0
 800a202:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a204:	78f9      	ldrb	r1, [r7, #3]
 800a206:	2300      	movs	r3, #0
 800a208:	2200      	movs	r2, #0
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f001 fd76 	bl	800bcfc <USBD_LL_Transmit>
 800a210:	e003      	b.n	800a21a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	2200      	movs	r2, #0
 800a216:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a21a:	2300      	movs	r3, #0
 800a21c:	e000      	b.n	800a220 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a21e:	2302      	movs	r3, #2
  }
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}

0800a228 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	6078      	str	r0, [r7, #4]
 800a230:	460b      	mov	r3, r1
 800a232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a23a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 fda1 	bl	800bd88 <USBD_LL_GetRxDataSize>
 800a246:	4602      	mov	r2, r0
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00d      	beq.n	800a274 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	68fa      	ldr	r2, [r7, #12]
 800a262:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a266:	68fa      	ldr	r2, [r7, #12]
 800a268:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a26c:	4611      	mov	r1, r2
 800a26e:	4798      	blx	r3

    return USBD_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a274:	2302      	movs	r3, #2
  }
}
 800a276:	4618      	mov	r0, r3
 800a278:	3710      	adds	r7, #16
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b084      	sub	sp, #16
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a294:	2b00      	cmp	r3, #0
 800a296:	d015      	beq.n	800a2c4 <USBD_CDC_EP0_RxReady+0x46>
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a29e:	2bff      	cmp	r3, #255	; 0xff
 800a2a0:	d010      	beq.n	800a2c4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a2b0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a2b2:	68fa      	ldr	r2, [r7, #12]
 800a2b4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a2b8:	b292      	uxth	r2, r2
 800a2ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	22ff      	movs	r2, #255	; 0xff
 800a2c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2243      	movs	r2, #67	; 0x43
 800a2dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a2de:	4b03      	ldr	r3, [pc, #12]	; (800a2ec <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bc80      	pop	{r7}
 800a2e8:	4770      	bx	lr
 800a2ea:	bf00      	nop
 800a2ec:	20000094 	.word	0x20000094

0800a2f0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2243      	movs	r2, #67	; 0x43
 800a2fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a2fe:	4b03      	ldr	r3, [pc, #12]	; (800a30c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a300:	4618      	mov	r0, r3
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	bc80      	pop	{r7}
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20000050 	.word	0x20000050

0800a310 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2243      	movs	r2, #67	; 0x43
 800a31c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a31e:	4b03      	ldr	r3, [pc, #12]	; (800a32c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bc80      	pop	{r7}
 800a328:	4770      	bx	lr
 800a32a:	bf00      	nop
 800a32c:	200000d8 	.word	0x200000d8

0800a330 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	220a      	movs	r2, #10
 800a33c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a33e:	4b03      	ldr	r3, [pc, #12]	; (800a34c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bc80      	pop	{r7}
 800a348:	4770      	bx	lr
 800a34a:	bf00      	nop
 800a34c:	2000000c 	.word	0x2000000c

0800a350 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a350:	b480      	push	{r7}
 800a352:	b085      	sub	sp, #20
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a35a:	2302      	movs	r3, #2
 800a35c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d005      	beq.n	800a370 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	683a      	ldr	r2, [r7, #0]
 800a368:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a370:	7bfb      	ldrb	r3, [r7, #15]
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	bc80      	pop	{r7}
 800a37a:	4770      	bx	lr

0800a37c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b087      	sub	sp, #28
 800a380:	af00      	add	r7, sp, #0
 800a382:	60f8      	str	r0, [r7, #12]
 800a384:	60b9      	str	r1, [r7, #8]
 800a386:	4613      	mov	r3, r2
 800a388:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a39a:	88fa      	ldrh	r2, [r7, #6]
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	371c      	adds	r7, #28
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bc80      	pop	{r7}
 800a3ac:	4770      	bx	lr

0800a3ae <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b085      	sub	sp, #20
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3be:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3714      	adds	r7, #20
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bc80      	pop	{r7}
 800a3d2:	4770      	bx	lr

0800a3d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d017      	beq.n	800a41e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	7c1b      	ldrb	r3, [r3, #16]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d109      	bne.n	800a40a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a400:	2101      	movs	r1, #1
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f001 fc9d 	bl	800bd42 <USBD_LL_PrepareReceive>
 800a408:	e007      	b.n	800a41a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a410:	2340      	movs	r3, #64	; 0x40
 800a412:	2101      	movs	r1, #1
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 fc94 	bl	800bd42 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e000      	b.n	800a420 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a41e:	2302      	movs	r3, #2
  }
}
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b084      	sub	sp, #16
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d101      	bne.n	800a440 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a43c:	2302      	movs	r3, #2
 800a43e:	e01a      	b.n	800a476 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d003      	beq.n	800a452 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2200      	movs	r2, #0
 800a44e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d003      	beq.n	800a460 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	68ba      	ldr	r2, [r7, #8]
 800a45c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	79fa      	ldrb	r2, [r7, #7]
 800a46c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f001 fb02 	bl	800ba78 <USBD_LL_Init>

  return USBD_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3710      	adds	r7, #16
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}

0800a47e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a47e:	b480      	push	{r7}
 800a480:	b085      	sub	sp, #20
 800a482:	af00      	add	r7, sp, #0
 800a484:	6078      	str	r0, [r7, #4]
 800a486:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a488:	2300      	movs	r3, #0
 800a48a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d006      	beq.n	800a4a0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	683a      	ldr	r2, [r7, #0]
 800a496:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800a49a:	2300      	movs	r3, #0
 800a49c:	73fb      	strb	r3, [r7, #15]
 800a49e:	e001      	b.n	800a4a4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3714      	adds	r7, #20
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bc80      	pop	{r7}
 800a4ae:	4770      	bx	lr

0800a4b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f001 fb37 	bl	800bb2c <USBD_LL_Start>

  return USBD_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bc80      	pop	{r7}
 800a4da:	4770      	bx	lr

0800a4dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d00c      	beq.n	800a510 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	4611      	mov	r1, r2
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	4798      	blx	r3
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d101      	bne.n	800a510 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a50c:	2300      	movs	r3, #0
 800a50e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a510:	7bfb      	ldrb	r3, [r7, #15]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3710      	adds	r7, #16
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
 800a522:	460b      	mov	r3, r1
 800a524:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	78fa      	ldrb	r2, [r7, #3]
 800a530:	4611      	mov	r1, r2
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3

  return USBD_OK;
 800a536:	2300      	movs	r3, #0
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b082      	sub	sp, #8
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a550:	6839      	ldr	r1, [r7, #0]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 fed7 	bl	800b306 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2201      	movs	r2, #1
 800a55c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a566:	461a      	mov	r2, r3
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a574:	f003 031f 	and.w	r3, r3, #31
 800a578:	2b02      	cmp	r3, #2
 800a57a:	d016      	beq.n	800a5aa <USBD_LL_SetupStage+0x6a>
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d81c      	bhi.n	800a5ba <USBD_LL_SetupStage+0x7a>
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <USBD_LL_SetupStage+0x4a>
 800a584:	2b01      	cmp	r3, #1
 800a586:	d008      	beq.n	800a59a <USBD_LL_SetupStage+0x5a>
 800a588:	e017      	b.n	800a5ba <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a590:	4619      	mov	r1, r3
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	f000 f9ca 	bl	800a92c <USBD_StdDevReq>
      break;
 800a598:	e01a      	b.n	800a5d0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa2c 	bl	800aa00 <USBD_StdItfReq>
      break;
 800a5a8:	e012      	b.n	800a5d0 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fa6c 	bl	800aa90 <USBD_StdEPReq>
      break;
 800a5b8:	e00a      	b.n	800a5d0 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800a5c0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f001 fb0f 	bl	800bbec <USBD_LL_StallEP>
      break;
 800a5ce:	bf00      	nop
  }

  return USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	60f8      	str	r0, [r7, #12]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	607a      	str	r2, [r7, #4]
 800a5e6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a5e8:	7afb      	ldrb	r3, [r7, #11]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d14b      	bne.n	800a686 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a5f4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a5fc:	2b03      	cmp	r3, #3
 800a5fe:	d134      	bne.n	800a66a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	68da      	ldr	r2, [r3, #12]
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d919      	bls.n	800a640 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	1ad2      	subs	r2, r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	68da      	ldr	r2, [r3, #12]
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a622:	429a      	cmp	r2, r3
 800a624:	d203      	bcs.n	800a62e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	e002      	b.n	800a634 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800a632:	b29b      	uxth	r3, r3
 800a634:	461a      	mov	r2, r3
 800a636:	6879      	ldr	r1, [r7, #4]
 800a638:	68f8      	ldr	r0, [r7, #12]
 800a63a:	f000 ff56 	bl	800b4ea <USBD_CtlContinueRx>
 800a63e:	e038      	b.n	800a6b2 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a646:	691b      	ldr	r3, [r3, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00a      	beq.n	800a662 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a652:	2b03      	cmp	r3, #3
 800a654:	d105      	bne.n	800a662 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a65c:	691b      	ldr	r3, [r3, #16]
 800a65e:	68f8      	ldr	r0, [r7, #12]
 800a660:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 ff53 	bl	800b50e <USBD_CtlSendStatus>
 800a668:	e023      	b.n	800a6b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a670:	2b05      	cmp	r3, #5
 800a672:	d11e      	bne.n	800a6b2 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2200      	movs	r2, #0
 800a678:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800a67c:	2100      	movs	r1, #0
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f001 fab4 	bl	800bbec <USBD_LL_StallEP>
 800a684:	e015      	b.n	800a6b2 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00d      	beq.n	800a6ae <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d108      	bne.n	800a6ae <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6a2:	699b      	ldr	r3, [r3, #24]
 800a6a4:	7afa      	ldrb	r2, [r7, #11]
 800a6a6:	4611      	mov	r1, r2
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	4798      	blx	r3
 800a6ac:	e001      	b.n	800a6b2 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e000      	b.n	800a6b4 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a6b2:	2300      	movs	r3, #0
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d17f      	bne.n	800a7d0 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	3314      	adds	r3, #20
 800a6d4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d15c      	bne.n	800a79a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	68da      	ldr	r2, [r3, #12]
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d915      	bls.n	800a718 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	68da      	ldr	r2, [r3, #12]
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	1ad2      	subs	r2, r2, r3
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	461a      	mov	r2, r3
 800a702:	6879      	ldr	r1, [r7, #4]
 800a704:	68f8      	ldr	r0, [r7, #12]
 800a706:	f000 fec0 	bl	800b48a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a70a:	2300      	movs	r3, #0
 800a70c:	2200      	movs	r2, #0
 800a70e:	2100      	movs	r1, #0
 800a710:	68f8      	ldr	r0, [r7, #12]
 800a712:	f001 fb16 	bl	800bd42 <USBD_LL_PrepareReceive>
 800a716:	e04e      	b.n	800a7b6 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	6912      	ldr	r2, [r2, #16]
 800a720:	fbb3 f1f2 	udiv	r1, r3, r2
 800a724:	fb01 f202 	mul.w	r2, r1, r2
 800a728:	1a9b      	subs	r3, r3, r2
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d11c      	bne.n	800a768 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	689a      	ldr	r2, [r3, #8]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a736:	429a      	cmp	r2, r3
 800a738:	d316      	bcc.n	800a768 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	689a      	ldr	r2, [r3, #8]
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a744:	429a      	cmp	r2, r3
 800a746:	d20f      	bcs.n	800a768 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a748:	2200      	movs	r2, #0
 800a74a:	2100      	movs	r1, #0
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 fe9c 	bl	800b48a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	2200      	movs	r2, #0
 800a756:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a75a:	2300      	movs	r3, #0
 800a75c:	2200      	movs	r2, #0
 800a75e:	2100      	movs	r1, #0
 800a760:	68f8      	ldr	r0, [r7, #12]
 800a762:	f001 faee 	bl	800bd42 <USBD_LL_PrepareReceive>
 800a766:	e026      	b.n	800a7b6 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a77a:	2b03      	cmp	r3, #3
 800a77c:	d105      	bne.n	800a78a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	68f8      	ldr	r0, [r7, #12]
 800a788:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a78a:	2180      	movs	r1, #128	; 0x80
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f001 fa2d 	bl	800bbec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f000 fece 	bl	800b534 <USBD_CtlReceiveStatus>
 800a798:	e00d      	b.n	800a7b6 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a7a0:	2b04      	cmp	r3, #4
 800a7a2:	d004      	beq.n	800a7ae <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d103      	bne.n	800a7b6 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a7ae:	2180      	movs	r1, #128	; 0x80
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f001 fa1b 	bl	800bbec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d11d      	bne.n	800a7fc <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fe81 	bl	800a4c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7ce:	e015      	b.n	800a7fc <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00d      	beq.n	800a7f8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a7e2:	2b03      	cmp	r3, #3
 800a7e4:	d108      	bne.n	800a7f8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ec:	695b      	ldr	r3, [r3, #20]
 800a7ee:	7afa      	ldrb	r2, [r7, #11]
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	68f8      	ldr	r0, [r7, #12]
 800a7f4:	4798      	blx	r3
 800a7f6:	e001      	b.n	800a7fc <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e000      	b.n	800a7fe <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3718      	adds	r7, #24
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b082      	sub	sp, #8
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a80e:	2340      	movs	r3, #64	; 0x40
 800a810:	2200      	movs	r2, #0
 800a812:	2100      	movs	r1, #0
 800a814:	6878      	ldr	r0, [r7, #4]
 800a816:	f001 f9a4 	bl	800bb62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2240      	movs	r2, #64	; 0x40
 800a826:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a82a:	2340      	movs	r3, #64	; 0x40
 800a82c:	2200      	movs	r2, #0
 800a82e:	2180      	movs	r1, #128	; 0x80
 800a830:	6878      	ldr	r0, [r7, #4]
 800a832:	f001 f996 	bl	800bb62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2240      	movs	r2, #64	; 0x40
 800a840:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	6852      	ldr	r2, [r2, #4]
 800a876:	b2d2      	uxtb	r2, r2
 800a878:	4611      	mov	r1, r2
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	4798      	blx	r3
  }

  return USBD_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	3708      	adds	r7, #8
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}

0800a888 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	78fa      	ldrb	r2, [r7, #3]
 800a898:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bc80      	pop	{r7}
 800a8a4:	4770      	bx	lr

0800a8a6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2204      	movs	r2, #4
 800a8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bc80      	pop	{r7}
 800a8cc:	4770      	bx	lr

0800a8ce <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8dc:	2b04      	cmp	r3, #4
 800a8de:	d105      	bne.n	800a8ec <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a8ec:	2300      	movs	r3, #0
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	370c      	adds	r7, #12
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bc80      	pop	{r7}
 800a8f6:	4770      	bx	lr

0800a8f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a906:	2b03      	cmp	r3, #3
 800a908:	d10b      	bne.n	800a922 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d005      	beq.n	800a922 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a922:	2300      	movs	r3, #0
}
 800a924:	4618      	mov	r0, r3
 800a926:	3708      	adds	r7, #8
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b084      	sub	sp, #16
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a936:	2300      	movs	r3, #0
 800a938:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d005      	beq.n	800a952 <USBD_StdDevReq+0x26>
 800a946:	2b40      	cmp	r3, #64	; 0x40
 800a948:	d84f      	bhi.n	800a9ea <USBD_StdDevReq+0xbe>
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d009      	beq.n	800a962 <USBD_StdDevReq+0x36>
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d14b      	bne.n	800a9ea <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a958:	689b      	ldr	r3, [r3, #8]
 800a95a:	6839      	ldr	r1, [r7, #0]
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	4798      	blx	r3
      break;
 800a960:	e048      	b.n	800a9f4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2b09      	cmp	r3, #9
 800a968:	d839      	bhi.n	800a9de <USBD_StdDevReq+0xb2>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <USBD_StdDevReq+0x44>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a9c1 	.word	0x0800a9c1
 800a974:	0800a9d5 	.word	0x0800a9d5
 800a978:	0800a9df 	.word	0x0800a9df
 800a97c:	0800a9cb 	.word	0x0800a9cb
 800a980:	0800a9df 	.word	0x0800a9df
 800a984:	0800a9a3 	.word	0x0800a9a3
 800a988:	0800a999 	.word	0x0800a999
 800a98c:	0800a9df 	.word	0x0800a9df
 800a990:	0800a9b7 	.word	0x0800a9b7
 800a994:	0800a9ad 	.word	0x0800a9ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a998:	6839      	ldr	r1, [r7, #0]
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f9dc 	bl	800ad58 <USBD_GetDescriptor>
          break;
 800a9a0:	e022      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a9a2:	6839      	ldr	r1, [r7, #0]
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f000 fb3f 	bl	800b028 <USBD_SetAddress>
          break;
 800a9aa:	e01d      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fb7e 	bl	800b0b0 <USBD_SetConfig>
          break;
 800a9b4:	e018      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a9b6:	6839      	ldr	r1, [r7, #0]
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f000 fc07 	bl	800b1cc <USBD_GetConfig>
          break;
 800a9be:	e013      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fc37 	bl	800b236 <USBD_GetStatus>
          break;
 800a9c8:	e00e      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a9ca:	6839      	ldr	r1, [r7, #0]
 800a9cc:	6878      	ldr	r0, [r7, #4]
 800a9ce:	f000 fc65 	bl	800b29c <USBD_SetFeature>
          break;
 800a9d2:	e009      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fc74 	bl	800b2c4 <USBD_ClrFeature>
          break;
 800a9dc:	e004      	b.n	800a9e8 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a9de:	6839      	ldr	r1, [r7, #0]
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 fccc 	bl	800b37e <USBD_CtlError>
          break;
 800a9e6:	bf00      	nop
      }
      break;
 800a9e8:	e004      	b.n	800a9f4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a9ea:	6839      	ldr	r1, [r7, #0]
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 fcc6 	bl	800b37e <USBD_CtlError>
      break;
 800a9f2:	bf00      	nop
  }

  return ret;
 800a9f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3710      	adds	r7, #16
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop

0800aa00 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
 800aa08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa0a:	2300      	movs	r3, #0
 800aa0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa16:	2b40      	cmp	r3, #64	; 0x40
 800aa18:	d005      	beq.n	800aa26 <USBD_StdItfReq+0x26>
 800aa1a:	2b40      	cmp	r3, #64	; 0x40
 800aa1c:	d82e      	bhi.n	800aa7c <USBD_StdItfReq+0x7c>
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d001      	beq.n	800aa26 <USBD_StdItfReq+0x26>
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	d12a      	bne.n	800aa7c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa2c:	3b01      	subs	r3, #1
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d81d      	bhi.n	800aa6e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	889b      	ldrh	r3, [r3, #4]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	2b01      	cmp	r3, #1
 800aa3a:	d813      	bhi.n	800aa64 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa42:	689b      	ldr	r3, [r3, #8]
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	4798      	blx	r3
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	88db      	ldrh	r3, [r3, #6]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d110      	bne.n	800aa78 <USBD_StdItfReq+0x78>
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10d      	bne.n	800aa78 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 fd56 	bl	800b50e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aa62:	e009      	b.n	800aa78 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800aa64:	6839      	ldr	r1, [r7, #0]
 800aa66:	6878      	ldr	r0, [r7, #4]
 800aa68:	f000 fc89 	bl	800b37e <USBD_CtlError>
          break;
 800aa6c:	e004      	b.n	800aa78 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fc84 	bl	800b37e <USBD_CtlError>
          break;
 800aa76:	e000      	b.n	800aa7a <USBD_StdItfReq+0x7a>
          break;
 800aa78:	bf00      	nop
      }
      break;
 800aa7a:	e004      	b.n	800aa86 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fc7d 	bl	800b37e <USBD_CtlError>
      break;
 800aa84:	bf00      	nop
  }

  return USBD_OK;
 800aa86:	2300      	movs	r3, #0
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	889b      	ldrh	r3, [r3, #4]
 800aaa2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aaac:	2b40      	cmp	r3, #64	; 0x40
 800aaae:	d007      	beq.n	800aac0 <USBD_StdEPReq+0x30>
 800aab0:	2b40      	cmp	r3, #64	; 0x40
 800aab2:	f200 8146 	bhi.w	800ad42 <USBD_StdEPReq+0x2b2>
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00a      	beq.n	800aad0 <USBD_StdEPReq+0x40>
 800aaba:	2b20      	cmp	r3, #32
 800aabc:	f040 8141 	bne.w	800ad42 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac6:	689b      	ldr	r3, [r3, #8]
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	4798      	blx	r3
      break;
 800aace:	e13d      	b.n	800ad4c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aad8:	2b20      	cmp	r3, #32
 800aada:	d10a      	bne.n	800aaf2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	6839      	ldr	r1, [r7, #0]
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	4798      	blx	r3
 800aaea:	4603      	mov	r3, r0
 800aaec:	73fb      	strb	r3, [r7, #15]

        return ret;
 800aaee:	7bfb      	ldrb	r3, [r7, #15]
 800aaf0:	e12d      	b.n	800ad4e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	785b      	ldrb	r3, [r3, #1]
 800aaf6:	2b03      	cmp	r3, #3
 800aaf8:	d007      	beq.n	800ab0a <USBD_StdEPReq+0x7a>
 800aafa:	2b03      	cmp	r3, #3
 800aafc:	f300 811b 	bgt.w	800ad36 <USBD_StdEPReq+0x2a6>
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d072      	beq.n	800abea <USBD_StdEPReq+0x15a>
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d03a      	beq.n	800ab7e <USBD_StdEPReq+0xee>
 800ab08:	e115      	b.n	800ad36 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab10:	2b02      	cmp	r3, #2
 800ab12:	d002      	beq.n	800ab1a <USBD_StdEPReq+0x8a>
 800ab14:	2b03      	cmp	r3, #3
 800ab16:	d015      	beq.n	800ab44 <USBD_StdEPReq+0xb4>
 800ab18:	e02b      	b.n	800ab72 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab1a:	7bbb      	ldrb	r3, [r7, #14]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00c      	beq.n	800ab3a <USBD_StdEPReq+0xaa>
 800ab20:	7bbb      	ldrb	r3, [r7, #14]
 800ab22:	2b80      	cmp	r3, #128	; 0x80
 800ab24:	d009      	beq.n	800ab3a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	4619      	mov	r1, r3
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f001 f85e 	bl	800bbec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ab30:	2180      	movs	r1, #128	; 0x80
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f001 f85a 	bl	800bbec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ab38:	e020      	b.n	800ab7c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800ab3a:	6839      	ldr	r1, [r7, #0]
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 fc1e 	bl	800b37e <USBD_CtlError>
              break;
 800ab42:	e01b      	b.n	800ab7c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	885b      	ldrh	r3, [r3, #2]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d10e      	bne.n	800ab6a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800ab4c:	7bbb      	ldrb	r3, [r7, #14]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <USBD_StdEPReq+0xda>
 800ab52:	7bbb      	ldrb	r3, [r7, #14]
 800ab54:	2b80      	cmp	r3, #128	; 0x80
 800ab56:	d008      	beq.n	800ab6a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	88db      	ldrh	r3, [r3, #6]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d104      	bne.n	800ab6a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	4619      	mov	r1, r3
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	f001 f841 	bl	800bbec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fccf 	bl	800b50e <USBD_CtlSendStatus>

              break;
 800ab70:	e004      	b.n	800ab7c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800ab72:	6839      	ldr	r1, [r7, #0]
 800ab74:	6878      	ldr	r0, [r7, #4]
 800ab76:	f000 fc02 	bl	800b37e <USBD_CtlError>
              break;
 800ab7a:	bf00      	nop
          }
          break;
 800ab7c:	e0e0      	b.n	800ad40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab84:	2b02      	cmp	r3, #2
 800ab86:	d002      	beq.n	800ab8e <USBD_StdEPReq+0xfe>
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d015      	beq.n	800abb8 <USBD_StdEPReq+0x128>
 800ab8c:	e026      	b.n	800abdc <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab8e:	7bbb      	ldrb	r3, [r7, #14]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00c      	beq.n	800abae <USBD_StdEPReq+0x11e>
 800ab94:	7bbb      	ldrb	r3, [r7, #14]
 800ab96:	2b80      	cmp	r3, #128	; 0x80
 800ab98:	d009      	beq.n	800abae <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f001 f824 	bl	800bbec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800aba4:	2180      	movs	r1, #128	; 0x80
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f001 f820 	bl	800bbec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800abac:	e01c      	b.n	800abe8 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800abae:	6839      	ldr	r1, [r7, #0]
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fbe4 	bl	800b37e <USBD_CtlError>
              break;
 800abb6:	e017      	b.n	800abe8 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	885b      	ldrh	r3, [r3, #2]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d112      	bne.n	800abe6 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800abc0:	7bbb      	ldrb	r3, [r7, #14]
 800abc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d004      	beq.n	800abd4 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800abca:	7bbb      	ldrb	r3, [r7, #14]
 800abcc:	4619      	mov	r1, r3
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f001 f82b 	bl	800bc2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800abd4:	6878      	ldr	r0, [r7, #4]
 800abd6:	f000 fc9a 	bl	800b50e <USBD_CtlSendStatus>
              }
              break;
 800abda:	e004      	b.n	800abe6 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fbcd 	bl	800b37e <USBD_CtlError>
              break;
 800abe4:	e000      	b.n	800abe8 <USBD_StdEPReq+0x158>
              break;
 800abe6:	bf00      	nop
          }
          break;
 800abe8:	e0aa      	b.n	800ad40 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d002      	beq.n	800abfa <USBD_StdEPReq+0x16a>
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d032      	beq.n	800ac5e <USBD_StdEPReq+0x1ce>
 800abf8:	e097      	b.n	800ad2a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abfa:	7bbb      	ldrb	r3, [r7, #14]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d007      	beq.n	800ac10 <USBD_StdEPReq+0x180>
 800ac00:	7bbb      	ldrb	r3, [r7, #14]
 800ac02:	2b80      	cmp	r3, #128	; 0x80
 800ac04:	d004      	beq.n	800ac10 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800ac06:	6839      	ldr	r1, [r7, #0]
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 fbb8 	bl	800b37e <USBD_CtlError>
                break;
 800ac0e:	e091      	b.n	800ad34 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	da0b      	bge.n	800ac30 <USBD_StdEPReq+0x1a0>
 800ac18:	7bbb      	ldrb	r3, [r7, #14]
 800ac1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ac1e:	4613      	mov	r3, r2
 800ac20:	009b      	lsls	r3, r3, #2
 800ac22:	4413      	add	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	3310      	adds	r3, #16
 800ac28:	687a      	ldr	r2, [r7, #4]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	3304      	adds	r3, #4
 800ac2e:	e00b      	b.n	800ac48 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac36:	4613      	mov	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	4413      	add	r3, r2
 800ac46:	3304      	adds	r3, #4
 800ac48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ac4a:	68bb      	ldr	r3, [r7, #8]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	2202      	movs	r2, #2
 800ac54:	4619      	mov	r1, r3
 800ac56:	6878      	ldr	r0, [r7, #4]
 800ac58:	f000 fbfb 	bl	800b452 <USBD_CtlSendData>
              break;
 800ac5c:	e06a      	b.n	800ad34 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ac5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	da11      	bge.n	800ac8a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ac66:	7bbb      	ldrb	r3, [r7, #14]
 800ac68:	f003 020f 	and.w	r2, r3, #15
 800ac6c:	6879      	ldr	r1, [r7, #4]
 800ac6e:	4613      	mov	r3, r2
 800ac70:	009b      	lsls	r3, r3, #2
 800ac72:	4413      	add	r3, r2
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	440b      	add	r3, r1
 800ac78:	3318      	adds	r3, #24
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d117      	bne.n	800acb0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800ac80:	6839      	ldr	r1, [r7, #0]
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb7b 	bl	800b37e <USBD_CtlError>
                  break;
 800ac88:	e054      	b.n	800ad34 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ac8a:	7bbb      	ldrb	r3, [r7, #14]
 800ac8c:	f003 020f 	and.w	r2, r3, #15
 800ac90:	6879      	ldr	r1, [r7, #4]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	440b      	add	r3, r1
 800ac9c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d104      	bne.n	800acb0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 fb68 	bl	800b37e <USBD_CtlError>
                  break;
 800acae:	e041      	b.n	800ad34 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	da0b      	bge.n	800acd0 <USBD_StdEPReq+0x240>
 800acb8:	7bbb      	ldrb	r3, [r7, #14]
 800acba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acbe:	4613      	mov	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	4413      	add	r3, r2
 800acc4:	009b      	lsls	r3, r3, #2
 800acc6:	3310      	adds	r3, #16
 800acc8:	687a      	ldr	r2, [r7, #4]
 800acca:	4413      	add	r3, r2
 800accc:	3304      	adds	r3, #4
 800acce:	e00b      	b.n	800ace8 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acd0:	7bbb      	ldrb	r3, [r7, #14]
 800acd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acd6:	4613      	mov	r3, r2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d002      	beq.n	800acf6 <USBD_StdEPReq+0x266>
 800acf0:	7bbb      	ldrb	r3, [r7, #14]
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d103      	bne.n	800acfe <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]
 800acfc:	e00e      	b.n	800ad1c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800acfe:	7bbb      	ldrb	r3, [r7, #14]
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 ffb0 	bl	800bc68 <USBD_LL_IsStallEP>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d003      	beq.n	800ad16 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	2201      	movs	r2, #1
 800ad12:	601a      	str	r2, [r3, #0]
 800ad14:	e002      	b.n	800ad1c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	2202      	movs	r2, #2
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fb95 	bl	800b452 <USBD_CtlSendData>
              break;
 800ad28:	e004      	b.n	800ad34 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fb26 	bl	800b37e <USBD_CtlError>
              break;
 800ad32:	bf00      	nop
          }
          break;
 800ad34:	e004      	b.n	800ad40 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800ad36:	6839      	ldr	r1, [r7, #0]
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fb20 	bl	800b37e <USBD_CtlError>
          break;
 800ad3e:	bf00      	nop
      }
      break;
 800ad40:	e004      	b.n	800ad4c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800ad42:	6839      	ldr	r1, [r7, #0]
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fb1a 	bl	800b37e <USBD_CtlError>
      break;
 800ad4a:	bf00      	nop
  }

  return ret;
 800ad4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3710      	adds	r7, #16
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ad62:	2300      	movs	r3, #0
 800ad64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	885b      	ldrh	r3, [r3, #2]
 800ad72:	0a1b      	lsrs	r3, r3, #8
 800ad74:	b29b      	uxth	r3, r3
 800ad76:	3b01      	subs	r3, #1
 800ad78:	2b06      	cmp	r3, #6
 800ad7a:	f200 8128 	bhi.w	800afce <USBD_GetDescriptor+0x276>
 800ad7e:	a201      	add	r2, pc, #4	; (adr r2, 800ad84 <USBD_GetDescriptor+0x2c>)
 800ad80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad84:	0800ada1 	.word	0x0800ada1
 800ad88:	0800adb9 	.word	0x0800adb9
 800ad8c:	0800adf9 	.word	0x0800adf9
 800ad90:	0800afcf 	.word	0x0800afcf
 800ad94:	0800afcf 	.word	0x0800afcf
 800ad98:	0800af6f 	.word	0x0800af6f
 800ad9c:	0800af9b 	.word	0x0800af9b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
      break;
 800adb6:	e112      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	7c1b      	ldrb	r3, [r3, #16]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d10d      	bne.n	800addc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc8:	f107 0208 	add.w	r2, r7, #8
 800adcc:	4610      	mov	r0, r2
 800adce:	4798      	blx	r3
 800add0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3301      	adds	r3, #1
 800add6:	2202      	movs	r2, #2
 800add8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800adda:	e100      	b.n	800afde <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ade2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ade4:	f107 0208 	add.w	r2, r7, #8
 800ade8:	4610      	mov	r0, r2
 800adea:	4798      	blx	r3
 800adec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	3301      	adds	r3, #1
 800adf2:	2202      	movs	r2, #2
 800adf4:	701a      	strb	r2, [r3, #0]
      break;
 800adf6:	e0f2      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	885b      	ldrh	r3, [r3, #2]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	2b05      	cmp	r3, #5
 800ae00:	f200 80ac 	bhi.w	800af5c <USBD_GetDescriptor+0x204>
 800ae04:	a201      	add	r2, pc, #4	; (adr r2, 800ae0c <USBD_GetDescriptor+0xb4>)
 800ae06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0a:	bf00      	nop
 800ae0c:	0800ae25 	.word	0x0800ae25
 800ae10:	0800ae59 	.word	0x0800ae59
 800ae14:	0800ae8d 	.word	0x0800ae8d
 800ae18:	0800aec1 	.word	0x0800aec1
 800ae1c:	0800aef5 	.word	0x0800aef5
 800ae20:	0800af29 	.word	0x0800af29
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00b      	beq.n	800ae48 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	687a      	ldr	r2, [r7, #4]
 800ae3a:	7c12      	ldrb	r2, [r2, #16]
 800ae3c:	f107 0108 	add.w	r1, r7, #8
 800ae40:	4610      	mov	r0, r2
 800ae42:	4798      	blx	r3
 800ae44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae46:	e091      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae48:	6839      	ldr	r1, [r7, #0]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fa97 	bl	800b37e <USBD_CtlError>
            err++;
 800ae50:	7afb      	ldrb	r3, [r7, #11]
 800ae52:	3301      	adds	r3, #1
 800ae54:	72fb      	strb	r3, [r7, #11]
          break;
 800ae56:	e089      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d00b      	beq.n	800ae7c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	687a      	ldr	r2, [r7, #4]
 800ae6e:	7c12      	ldrb	r2, [r2, #16]
 800ae70:	f107 0108 	add.w	r1, r7, #8
 800ae74:	4610      	mov	r0, r2
 800ae76:	4798      	blx	r3
 800ae78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae7a:	e077      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ae7c:	6839      	ldr	r1, [r7, #0]
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f000 fa7d 	bl	800b37e <USBD_CtlError>
            err++;
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	3301      	adds	r3, #1
 800ae88:	72fb      	strb	r3, [r7, #11]
          break;
 800ae8a:	e06f      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d00b      	beq.n	800aeb0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	7c12      	ldrb	r2, [r2, #16]
 800aea4:	f107 0108 	add.w	r1, r7, #8
 800aea8:	4610      	mov	r0, r2
 800aeaa:	4798      	blx	r3
 800aeac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aeae:	e05d      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 fa63 	bl	800b37e <USBD_CtlError>
            err++;
 800aeb8:	7afb      	ldrb	r3, [r7, #11]
 800aeba:	3301      	adds	r3, #1
 800aebc:	72fb      	strb	r3, [r7, #11]
          break;
 800aebe:	e055      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aec6:	691b      	ldr	r3, [r3, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00b      	beq.n	800aee4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	687a      	ldr	r2, [r7, #4]
 800aed6:	7c12      	ldrb	r2, [r2, #16]
 800aed8:	f107 0108 	add.w	r1, r7, #8
 800aedc:	4610      	mov	r0, r2
 800aede:	4798      	blx	r3
 800aee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aee2:	e043      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 fa49 	bl	800b37e <USBD_CtlError>
            err++;
 800aeec:	7afb      	ldrb	r3, [r7, #11]
 800aeee:	3301      	adds	r3, #1
 800aef0:	72fb      	strb	r3, [r7, #11]
          break;
 800aef2:	e03b      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00b      	beq.n	800af18 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af06:	695b      	ldr	r3, [r3, #20]
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	7c12      	ldrb	r2, [r2, #16]
 800af0c:	f107 0108 	add.w	r1, r7, #8
 800af10:	4610      	mov	r0, r2
 800af12:	4798      	blx	r3
 800af14:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af16:	e029      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	f000 fa2f 	bl	800b37e <USBD_CtlError>
            err++;
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	3301      	adds	r3, #1
 800af24:	72fb      	strb	r3, [r7, #11]
          break;
 800af26:	e021      	b.n	800af6c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af2e:	699b      	ldr	r3, [r3, #24]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00b      	beq.n	800af4c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800af3a:	699b      	ldr	r3, [r3, #24]
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	7c12      	ldrb	r2, [r2, #16]
 800af40:	f107 0108 	add.w	r1, r7, #8
 800af44:	4610      	mov	r0, r2
 800af46:	4798      	blx	r3
 800af48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af4a:	e00f      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 fa15 	bl	800b37e <USBD_CtlError>
            err++;
 800af54:	7afb      	ldrb	r3, [r7, #11]
 800af56:	3301      	adds	r3, #1
 800af58:	72fb      	strb	r3, [r7, #11]
          break;
 800af5a:	e007      	b.n	800af6c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 fa0d 	bl	800b37e <USBD_CtlError>
          err++;
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	3301      	adds	r3, #1
 800af68:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800af6a:	e038      	b.n	800afde <USBD_GetDescriptor+0x286>
 800af6c:	e037      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	7c1b      	ldrb	r3, [r3, #16]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d109      	bne.n	800af8a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af7e:	f107 0208 	add.w	r2, r7, #8
 800af82:	4610      	mov	r0, r2
 800af84:	4798      	blx	r3
 800af86:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800af88:	e029      	b.n	800afde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f9f6 	bl	800b37e <USBD_CtlError>
        err++;
 800af92:	7afb      	ldrb	r3, [r7, #11]
 800af94:	3301      	adds	r3, #1
 800af96:	72fb      	strb	r3, [r7, #11]
      break;
 800af98:	e021      	b.n	800afde <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	7c1b      	ldrb	r3, [r3, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d10d      	bne.n	800afbe <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afaa:	f107 0208 	add.w	r2, r7, #8
 800afae:	4610      	mov	r0, r2
 800afb0:	4798      	blx	r3
 800afb2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	3301      	adds	r3, #1
 800afb8:	2207      	movs	r2, #7
 800afba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800afbc:	e00f      	b.n	800afde <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800afbe:	6839      	ldr	r1, [r7, #0]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f9dc 	bl	800b37e <USBD_CtlError>
        err++;
 800afc6:	7afb      	ldrb	r3, [r7, #11]
 800afc8:	3301      	adds	r3, #1
 800afca:	72fb      	strb	r3, [r7, #11]
      break;
 800afcc:	e007      	b.n	800afde <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 f9d4 	bl	800b37e <USBD_CtlError>
      err++;
 800afd6:	7afb      	ldrb	r3, [r7, #11]
 800afd8:	3301      	adds	r3, #1
 800afda:	72fb      	strb	r3, [r7, #11]
      break;
 800afdc:	bf00      	nop
  }

  if (err != 0U)
 800afde:	7afb      	ldrb	r3, [r7, #11]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d11c      	bne.n	800b01e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800afe4:	893b      	ldrh	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d011      	beq.n	800b00e <USBD_GetDescriptor+0x2b6>
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	88db      	ldrh	r3, [r3, #6]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d00d      	beq.n	800b00e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	88da      	ldrh	r2, [r3, #6]
 800aff6:	893b      	ldrh	r3, [r7, #8]
 800aff8:	4293      	cmp	r3, r2
 800affa:	bf28      	it	cs
 800affc:	4613      	movcs	r3, r2
 800affe:	b29b      	uxth	r3, r3
 800b000:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b002:	893b      	ldrh	r3, [r7, #8]
 800b004:	461a      	mov	r2, r3
 800b006:	68f9      	ldr	r1, [r7, #12]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fa22 	bl	800b452 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	88db      	ldrh	r3, [r3, #6]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d104      	bne.n	800b020 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa79 	bl	800b50e <USBD_CtlSendStatus>
 800b01c:	e000      	b.n	800b020 <USBD_GetDescriptor+0x2c8>
    return;
 800b01e:	bf00      	nop
    }
  }
}
 800b020:	3710      	adds	r7, #16
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop

0800b028 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b084      	sub	sp, #16
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
 800b030:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	889b      	ldrh	r3, [r3, #4]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d130      	bne.n	800b09c <USBD_SetAddress+0x74>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	88db      	ldrh	r3, [r3, #6]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d12c      	bne.n	800b09c <USBD_SetAddress+0x74>
 800b042:	683b      	ldr	r3, [r7, #0]
 800b044:	885b      	ldrh	r3, [r3, #2]
 800b046:	2b7f      	cmp	r3, #127	; 0x7f
 800b048:	d828      	bhi.n	800b09c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	885b      	ldrh	r3, [r3, #2]
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b054:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b05c:	2b03      	cmp	r3, #3
 800b05e:	d104      	bne.n	800b06a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 f98b 	bl	800b37e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b068:	e01d      	b.n	800b0a6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	7bfa      	ldrb	r2, [r7, #15]
 800b06e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b072:	7bfb      	ldrb	r3, [r7, #15]
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f000 fe21 	bl	800bcbe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 fa46 	bl	800b50e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d004      	beq.n	800b092 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2202      	movs	r2, #2
 800b08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b090:	e009      	b.n	800b0a6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	2201      	movs	r2, #1
 800b096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09a:	e004      	b.n	800b0a6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b09c:	6839      	ldr	r1, [r7, #0]
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f96d 	bl	800b37e <USBD_CtlError>
  }
}
 800b0a4:	bf00      	nop
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
	...

0800b0b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	885b      	ldrh	r3, [r3, #2]
 800b0be:	b2da      	uxtb	r2, r3
 800b0c0:	4b41      	ldr	r3, [pc, #260]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b0c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b0c4:	4b40      	ldr	r3, [pc, #256]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d904      	bls.n	800b0d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800b0cc:	6839      	ldr	r1, [r7, #0]
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f000 f955 	bl	800b37e <USBD_CtlError>
 800b0d4:	e075      	b.n	800b1c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d002      	beq.n	800b0e6 <USBD_SetConfig+0x36>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d023      	beq.n	800b12c <USBD_SetConfig+0x7c>
 800b0e4:	e062      	b.n	800b1ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b0e6:	4b38      	ldr	r3, [pc, #224]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d01a      	beq.n	800b124 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800b0ee:	4b36      	ldr	r3, [pc, #216]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2203      	movs	r2, #3
 800b0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b100:	4b31      	ldr	r3, [pc, #196]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b102:	781b      	ldrb	r3, [r3, #0]
 800b104:	4619      	mov	r1, r3
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7ff f9e8 	bl	800a4dc <USBD_SetClassConfig>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d104      	bne.n	800b11c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f932 	bl	800b37e <USBD_CtlError>
            return;
 800b11a:	e052      	b.n	800b1c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f000 f9f6 	bl	800b50e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b122:	e04e      	b.n	800b1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f000 f9f2 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b12a:	e04a      	b.n	800b1c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b12c:	4b26      	ldr	r3, [pc, #152]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d112      	bne.n	800b15a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2202      	movs	r2, #2
 800b138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800b13c:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b146:	4b20      	ldr	r3, [pc, #128]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f7ff f9e4 	bl	800a51a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f000 f9db 	bl	800b50e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b158:	e033      	b.n	800b1c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800b15a:	4b1b      	ldr	r3, [pc, #108]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	461a      	mov	r2, r3
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	429a      	cmp	r2, r3
 800b166:	d01d      	beq.n	800b1a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f7ff f9d2 	bl	800a51a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b176:	4b14      	ldr	r3, [pc, #80]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b178:	781b      	ldrb	r3, [r3, #0]
 800b17a:	461a      	mov	r2, r3
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b180:	4b11      	ldr	r3, [pc, #68]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b182:	781b      	ldrb	r3, [r3, #0]
 800b184:	4619      	mov	r1, r3
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f7ff f9a8 	bl	800a4dc <USBD_SetClassConfig>
 800b18c:	4603      	mov	r3, r0
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d104      	bne.n	800b19c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 f8f2 	bl	800b37e <USBD_CtlError>
            return;
 800b19a:	e012      	b.n	800b1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 f9b6 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b1a2:	e00e      	b.n	800b1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 f9b2 	bl	800b50e <USBD_CtlSendStatus>
        break;
 800b1aa:	e00a      	b.n	800b1c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f8e5 	bl	800b37e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b1b4:	4b04      	ldr	r3, [pc, #16]	; (800b1c8 <USBD_SetConfig+0x118>)
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff f9ad 	bl	800a51a <USBD_ClrClassConfig>
        break;
 800b1c0:	bf00      	nop
    }
  }
}
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	200004a4 	.word	0x200004a4

0800b1cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	88db      	ldrh	r3, [r3, #6]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d004      	beq.n	800b1e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b1de:	6839      	ldr	r1, [r7, #0]
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f8cc 	bl	800b37e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b1e6:	e022      	b.n	800b22e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ee:	2b02      	cmp	r3, #2
 800b1f0:	dc02      	bgt.n	800b1f8 <USBD_GetConfig+0x2c>
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dc03      	bgt.n	800b1fe <USBD_GetConfig+0x32>
 800b1f6:	e015      	b.n	800b224 <USBD_GetConfig+0x58>
 800b1f8:	2b03      	cmp	r3, #3
 800b1fa:	d00b      	beq.n	800b214 <USBD_GetConfig+0x48>
 800b1fc:	e012      	b.n	800b224 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	3308      	adds	r3, #8
 800b208:	2201      	movs	r2, #1
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f920 	bl	800b452 <USBD_CtlSendData>
        break;
 800b212:	e00c      	b.n	800b22e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	3304      	adds	r3, #4
 800b218:	2201      	movs	r2, #1
 800b21a:	4619      	mov	r1, r3
 800b21c:	6878      	ldr	r0, [r7, #4]
 800b21e:	f000 f918 	bl	800b452 <USBD_CtlSendData>
        break;
 800b222:	e004      	b.n	800b22e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 f8a9 	bl	800b37e <USBD_CtlError>
        break;
 800b22c:	bf00      	nop
}
 800b22e:	bf00      	nop
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b236:	b580      	push	{r7, lr}
 800b238:	b082      	sub	sp, #8
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
 800b23e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b246:	3b01      	subs	r3, #1
 800b248:	2b02      	cmp	r3, #2
 800b24a:	d81e      	bhi.n	800b28a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	88db      	ldrh	r3, [r3, #6]
 800b250:	2b02      	cmp	r3, #2
 800b252:	d004      	beq.n	800b25e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800b254:	6839      	ldr	r1, [r7, #0]
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 f891 	bl	800b37e <USBD_CtlError>
        break;
 800b25c:	e01a      	b.n	800b294 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2201      	movs	r2, #1
 800b262:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d005      	beq.n	800b27a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	68db      	ldr	r3, [r3, #12]
 800b272:	f043 0202 	orr.w	r2, r3, #2
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	330c      	adds	r3, #12
 800b27e:	2202      	movs	r2, #2
 800b280:	4619      	mov	r1, r3
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 f8e5 	bl	800b452 <USBD_CtlSendData>
      break;
 800b288:	e004      	b.n	800b294 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800b28a:	6839      	ldr	r1, [r7, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f000 f876 	bl	800b37e <USBD_CtlError>
      break;
 800b292:	bf00      	nop
  }
}
 800b294:	bf00      	nop
 800b296:	3708      	adds	r7, #8
 800b298:	46bd      	mov	sp, r7
 800b29a:	bd80      	pop	{r7, pc}

0800b29c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
 800b2a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	885b      	ldrh	r3, [r3, #2]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d106      	bne.n	800b2bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f000 f929 	bl	800b50e <USBD_CtlSendStatus>
  }
}
 800b2bc:	bf00      	nop
 800b2be:	3708      	adds	r7, #8
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	bd80      	pop	{r7, pc}

0800b2c4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b2c4:	b580      	push	{r7, lr}
 800b2c6:	b082      	sub	sp, #8
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d4:	3b01      	subs	r3, #1
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d80b      	bhi.n	800b2f2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	885b      	ldrh	r3, [r3, #2]
 800b2de:	2b01      	cmp	r3, #1
 800b2e0:	d10c      	bne.n	800b2fc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f000 f90f 	bl	800b50e <USBD_CtlSendStatus>
      }
      break;
 800b2f0:	e004      	b.n	800b2fc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800b2f2:	6839      	ldr	r1, [r7, #0]
 800b2f4:	6878      	ldr	r0, [r7, #4]
 800b2f6:	f000 f842 	bl	800b37e <USBD_CtlError>
      break;
 800b2fa:	e000      	b.n	800b2fe <USBD_ClrFeature+0x3a>
      break;
 800b2fc:	bf00      	nop
  }
}
 800b2fe:	bf00      	nop
 800b300:	3708      	adds	r7, #8
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b306:	b480      	push	{r7}
 800b308:	b083      	sub	sp, #12
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	6078      	str	r0, [r7, #4]
 800b30e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	781a      	ldrb	r2, [r3, #0]
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	785a      	ldrb	r2, [r3, #1]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	3302      	adds	r3, #2
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	b29a      	uxth	r2, r3
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	3303      	adds	r3, #3
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	b29b      	uxth	r3, r3
 800b330:	021b      	lsls	r3, r3, #8
 800b332:	b29b      	uxth	r3, r3
 800b334:	4413      	add	r3, r2
 800b336:	b29a      	uxth	r2, r3
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	3304      	adds	r3, #4
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	b29a      	uxth	r2, r3
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	3305      	adds	r3, #5
 800b348:	781b      	ldrb	r3, [r3, #0]
 800b34a:	b29b      	uxth	r3, r3
 800b34c:	021b      	lsls	r3, r3, #8
 800b34e:	b29b      	uxth	r3, r3
 800b350:	4413      	add	r3, r2
 800b352:	b29a      	uxth	r2, r3
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	3306      	adds	r3, #6
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	b29a      	uxth	r2, r3
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	3307      	adds	r3, #7
 800b364:	781b      	ldrb	r3, [r3, #0]
 800b366:	b29b      	uxth	r3, r3
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	4413      	add	r3, r2
 800b36e:	b29a      	uxth	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	80da      	strh	r2, [r3, #6]

}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	bc80      	pop	{r7}
 800b37c:	4770      	bx	lr

0800b37e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
 800b386:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800b388:	2180      	movs	r1, #128	; 0x80
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fc2e 	bl	800bbec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800b390:	2100      	movs	r1, #0
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 fc2a 	bl	800bbec <USBD_LL_StallEP>
}
 800b398:	bf00      	nop
 800b39a:	3708      	adds	r7, #8
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}

0800b3a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d032      	beq.n	800b41c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f000 f834 	bl	800b424 <USBD_GetLen>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	3301      	adds	r3, #1
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	005b      	lsls	r3, r3, #1
 800b3c4:	b29a      	uxth	r2, r3
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	1c5a      	adds	r2, r3, #1
 800b3ce:	75fa      	strb	r2, [r7, #23]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	687a      	ldr	r2, [r7, #4]
 800b3d8:	7812      	ldrb	r2, [r2, #0]
 800b3da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b3dc:	7dfb      	ldrb	r3, [r7, #23]
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	75fa      	strb	r2, [r7, #23]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	68bb      	ldr	r3, [r7, #8]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	2203      	movs	r2, #3
 800b3ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b3ec:	e012      	b.n	800b414 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	60fa      	str	r2, [r7, #12]
 800b3f4:	7dfa      	ldrb	r2, [r7, #23]
 800b3f6:	1c51      	adds	r1, r2, #1
 800b3f8:	75f9      	strb	r1, [r7, #23]
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	440a      	add	r2, r1
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b404:	7dfb      	ldrb	r3, [r7, #23]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	75fa      	strb	r2, [r7, #23]
 800b40a:	461a      	mov	r2, r3
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4413      	add	r3, r2
 800b410:	2200      	movs	r2, #0
 800b412:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d1e8      	bne.n	800b3ee <USBD_GetString+0x4e>
    }
  }
}
 800b41c:	bf00      	nop
 800b41e:	3718      	adds	r7, #24
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}

0800b424 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b42c:	2300      	movs	r3, #0
 800b42e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800b430:	e005      	b.n	800b43e <USBD_GetLen+0x1a>
  {
    len++;
 800b432:	7bfb      	ldrb	r3, [r7, #15]
 800b434:	3301      	adds	r3, #1
 800b436:	73fb      	strb	r3, [r7, #15]
    buf++;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	3301      	adds	r3, #1
 800b43c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	781b      	ldrb	r3, [r3, #0]
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1f5      	bne.n	800b432 <USBD_GetLen+0xe>
  }

  return len;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bc80      	pop	{r7}
 800b450:	4770      	bx	lr

0800b452 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	60f8      	str	r0, [r7, #12]
 800b45a:	60b9      	str	r1, [r7, #8]
 800b45c:	4613      	mov	r3, r2
 800b45e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	2202      	movs	r2, #2
 800b464:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b468:	88fa      	ldrh	r2, [r7, #6]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b46e:	88fa      	ldrh	r2, [r7, #6]
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b474:	88fb      	ldrh	r3, [r7, #6]
 800b476:	68ba      	ldr	r2, [r7, #8]
 800b478:	2100      	movs	r1, #0
 800b47a:	68f8      	ldr	r0, [r7, #12]
 800b47c:	f000 fc3e 	bl	800bcfc <USBD_LL_Transmit>

  return USBD_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800b48a:	b580      	push	{r7, lr}
 800b48c:	b084      	sub	sp, #16
 800b48e:	af00      	add	r7, sp, #0
 800b490:	60f8      	str	r0, [r7, #12]
 800b492:	60b9      	str	r1, [r7, #8]
 800b494:	4613      	mov	r3, r2
 800b496:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b498:	88fb      	ldrh	r3, [r7, #6]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	2100      	movs	r1, #0
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f000 fc2c 	bl	800bcfc <USBD_LL_Transmit>

  return USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	4613      	mov	r3, r2
 800b4ba:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2203      	movs	r2, #3
 800b4c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b4c4:	88fa      	ldrh	r2, [r7, #6]
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800b4cc:	88fa      	ldrh	r2, [r7, #6]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4d4:	88fb      	ldrh	r3, [r7, #6]
 800b4d6:	68ba      	ldr	r2, [r7, #8]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fc31 	bl	800bd42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3710      	adds	r7, #16
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b084      	sub	sp, #16
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b4f8:	88fb      	ldrh	r3, [r7, #6]
 800b4fa:	68ba      	ldr	r2, [r7, #8]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	68f8      	ldr	r0, [r7, #12]
 800b500:	f000 fc1f 	bl	800bd42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b504:	2300      	movs	r3, #0
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}

0800b50e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b50e:	b580      	push	{r7, lr}
 800b510:	b082      	sub	sp, #8
 800b512:	af00      	add	r7, sp, #0
 800b514:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2204      	movs	r2, #4
 800b51a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b51e:	2300      	movs	r3, #0
 800b520:	2200      	movs	r2, #0
 800b522:	2100      	movs	r1, #0
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f000 fbe9 	bl	800bcfc <USBD_LL_Transmit>

  return USBD_OK;
 800b52a:	2300      	movs	r3, #0
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}

0800b534 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b082      	sub	sp, #8
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2205      	movs	r2, #5
 800b540:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fbf9 	bl	800bd42 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b550:	2300      	movs	r3, #0
}
 800b552:	4618      	mov	r0, r3
 800b554:	3708      	adds	r7, #8
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
	...

0800b55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b560:	2200      	movs	r2, #0
 800b562:	4912      	ldr	r1, [pc, #72]	; (800b5ac <MX_USB_DEVICE_Init+0x50>)
 800b564:	4812      	ldr	r0, [pc, #72]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b566:	f7fe ff5f 	bl	800a428 <USBD_Init>
 800b56a:	4603      	mov	r3, r0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d001      	beq.n	800b574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b570:	f7f5 fb4e 	bl	8000c10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b574:	490f      	ldr	r1, [pc, #60]	; (800b5b4 <MX_USB_DEVICE_Init+0x58>)
 800b576:	480e      	ldr	r0, [pc, #56]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b578:	f7fe ff81 	bl	800a47e <USBD_RegisterClass>
 800b57c:	4603      	mov	r3, r0
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d001      	beq.n	800b586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b582:	f7f5 fb45 	bl	8000c10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b586:	490c      	ldr	r1, [pc, #48]	; (800b5b8 <MX_USB_DEVICE_Init+0x5c>)
 800b588:	4809      	ldr	r0, [pc, #36]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b58a:	f7fe fee1 	bl	800a350 <USBD_CDC_RegisterInterface>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b594:	f7f5 fb3c 	bl	8000c10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b598:	4805      	ldr	r0, [pc, #20]	; (800b5b0 <MX_USB_DEVICE_Init+0x54>)
 800b59a:	f7fe ff89 	bl	800a4b0 <USBD_Start>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d001      	beq.n	800b5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b5a4:	f7f5 fb34 	bl	8000c10 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b5a8:	bf00      	nop
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	2000012c 	.word	0x2000012c
 800b5b0:	200004a8 	.word	0x200004a8
 800b5b4:	20000018 	.word	0x20000018
 800b5b8:	2000011c 	.word	0x2000011c

0800b5bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	4905      	ldr	r1, [pc, #20]	; (800b5d8 <CDC_Init_FS+0x1c>)
 800b5c4:	4805      	ldr	r0, [pc, #20]	; (800b5dc <CDC_Init_FS+0x20>)
 800b5c6:	f7fe fed9 	bl	800a37c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b5ca:	4905      	ldr	r1, [pc, #20]	; (800b5e0 <CDC_Init_FS+0x24>)
 800b5cc:	4803      	ldr	r0, [pc, #12]	; (800b5dc <CDC_Init_FS+0x20>)
 800b5ce:	f7fe feee 	bl	800a3ae <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b5d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	20000b6c 	.word	0x20000b6c
 800b5dc:	200004a8 	.word	0x200004a8
 800b5e0:	2000076c 	.word	0x2000076c

0800b5e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b5e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	bc80      	pop	{r7}
 800b5f0:	4770      	bx	lr
	...

0800b5f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b083      	sub	sp, #12
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6039      	str	r1, [r7, #0]
 800b5fe:	71fb      	strb	r3, [r7, #7]
 800b600:	4613      	mov	r3, r2
 800b602:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b604:	79fb      	ldrb	r3, [r7, #7]
 800b606:	2b23      	cmp	r3, #35	; 0x23
 800b608:	d84a      	bhi.n	800b6a0 <CDC_Control_FS+0xac>
 800b60a:	a201      	add	r2, pc, #4	; (adr r2, 800b610 <CDC_Control_FS+0x1c>)
 800b60c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b610:	0800b6a1 	.word	0x0800b6a1
 800b614:	0800b6a1 	.word	0x0800b6a1
 800b618:	0800b6a1 	.word	0x0800b6a1
 800b61c:	0800b6a1 	.word	0x0800b6a1
 800b620:	0800b6a1 	.word	0x0800b6a1
 800b624:	0800b6a1 	.word	0x0800b6a1
 800b628:	0800b6a1 	.word	0x0800b6a1
 800b62c:	0800b6a1 	.word	0x0800b6a1
 800b630:	0800b6a1 	.word	0x0800b6a1
 800b634:	0800b6a1 	.word	0x0800b6a1
 800b638:	0800b6a1 	.word	0x0800b6a1
 800b63c:	0800b6a1 	.word	0x0800b6a1
 800b640:	0800b6a1 	.word	0x0800b6a1
 800b644:	0800b6a1 	.word	0x0800b6a1
 800b648:	0800b6a1 	.word	0x0800b6a1
 800b64c:	0800b6a1 	.word	0x0800b6a1
 800b650:	0800b6a1 	.word	0x0800b6a1
 800b654:	0800b6a1 	.word	0x0800b6a1
 800b658:	0800b6a1 	.word	0x0800b6a1
 800b65c:	0800b6a1 	.word	0x0800b6a1
 800b660:	0800b6a1 	.word	0x0800b6a1
 800b664:	0800b6a1 	.word	0x0800b6a1
 800b668:	0800b6a1 	.word	0x0800b6a1
 800b66c:	0800b6a1 	.word	0x0800b6a1
 800b670:	0800b6a1 	.word	0x0800b6a1
 800b674:	0800b6a1 	.word	0x0800b6a1
 800b678:	0800b6a1 	.word	0x0800b6a1
 800b67c:	0800b6a1 	.word	0x0800b6a1
 800b680:	0800b6a1 	.word	0x0800b6a1
 800b684:	0800b6a1 	.word	0x0800b6a1
 800b688:	0800b6a1 	.word	0x0800b6a1
 800b68c:	0800b6a1 	.word	0x0800b6a1
 800b690:	0800b6a1 	.word	0x0800b6a1
 800b694:	0800b6a1 	.word	0x0800b6a1
 800b698:	0800b6a1 	.word	0x0800b6a1
 800b69c:	0800b6a1 	.word	0x0800b6a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6a0:	bf00      	nop
  }

  return (USBD_OK);
 800b6a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	370c      	adds	r7, #12
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bc80      	pop	{r7}
 800b6ac:	4770      	bx	lr
 800b6ae:	bf00      	nop

0800b6b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b082      	sub	sp, #8
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
 800b6b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6ba:	6879      	ldr	r1, [r7, #4]
 800b6bc:	4805      	ldr	r0, [pc, #20]	; (800b6d4 <CDC_Receive_FS+0x24>)
 800b6be:	f7fe fe76 	bl	800a3ae <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6c2:	4804      	ldr	r0, [pc, #16]	; (800b6d4 <CDC_Receive_FS+0x24>)
 800b6c4:	f7fe fe86 	bl	800a3d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b6c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}
 800b6d2:	bf00      	nop
 800b6d4:	200004a8 	.word	0x200004a8

0800b6d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	6039      	str	r1, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2212      	movs	r2, #18
 800b6e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b6ea:	4b03      	ldr	r3, [pc, #12]	; (800b6f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	370c      	adds	r7, #12
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bc80      	pop	{r7}
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	20000148 	.word	0x20000148

0800b6fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	4603      	mov	r3, r0
 800b704:	6039      	str	r1, [r7, #0]
 800b706:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	2204      	movs	r2, #4
 800b70c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b70e:	4b03      	ldr	r3, [pc, #12]	; (800b71c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b710:	4618      	mov	r0, r3
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	bc80      	pop	{r7}
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	2000015c 	.word	0x2000015c

0800b720 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	4603      	mov	r3, r0
 800b728:	6039      	str	r1, [r7, #0]
 800b72a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d105      	bne.n	800b73e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	4907      	ldr	r1, [pc, #28]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
 800b736:	4808      	ldr	r0, [pc, #32]	; (800b758 <USBD_FS_ProductStrDescriptor+0x38>)
 800b738:	f7ff fe32 	bl	800b3a0 <USBD_GetString>
 800b73c:	e004      	b.n	800b748 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	4904      	ldr	r1, [pc, #16]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
 800b742:	4805      	ldr	r0, [pc, #20]	; (800b758 <USBD_FS_ProductStrDescriptor+0x38>)
 800b744:	f7ff fe2c 	bl	800b3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b748:	4b02      	ldr	r3, [pc, #8]	; (800b754 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	20000f6c 	.word	0x20000f6c
 800b758:	0800c8a0 	.word	0x0800c8a0

0800b75c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	4603      	mov	r3, r0
 800b764:	6039      	str	r1, [r7, #0]
 800b766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	4904      	ldr	r1, [pc, #16]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b76c:	4804      	ldr	r0, [pc, #16]	; (800b780 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b76e:	f7ff fe17 	bl	800b3a0 <USBD_GetString>
  return USBD_StrDesc;
 800b772:	4b02      	ldr	r3, [pc, #8]	; (800b77c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b774:	4618      	mov	r0, r3
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}
 800b77c:	20000f6c 	.word	0x20000f6c
 800b780:	0800c8b8 	.word	0x0800c8b8

0800b784 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b784:	b580      	push	{r7, lr}
 800b786:	b082      	sub	sp, #8
 800b788:	af00      	add	r7, sp, #0
 800b78a:	4603      	mov	r3, r0
 800b78c:	6039      	str	r1, [r7, #0]
 800b78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	221a      	movs	r2, #26
 800b794:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b796:	f000 f843 	bl	800b820 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b79a:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3708      	adds	r7, #8
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}
 800b7a4:	20000160 	.word	0x20000160

0800b7a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b082      	sub	sp, #8
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	6039      	str	r1, [r7, #0]
 800b7b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b7b4:	79fb      	ldrb	r3, [r7, #7]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d105      	bne.n	800b7c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	4907      	ldr	r1, [pc, #28]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7be:	4808      	ldr	r0, [pc, #32]	; (800b7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7c0:	f7ff fdee 	bl	800b3a0 <USBD_GetString>
 800b7c4:	e004      	b.n	800b7d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	4904      	ldr	r1, [pc, #16]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
 800b7ca:	4805      	ldr	r0, [pc, #20]	; (800b7e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b7cc:	f7ff fde8 	bl	800b3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7d0:	4b02      	ldr	r3, [pc, #8]	; (800b7dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3708      	adds	r7, #8
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	bd80      	pop	{r7, pc}
 800b7da:	bf00      	nop
 800b7dc:	20000f6c 	.word	0x20000f6c
 800b7e0:	0800c8cc 	.word	0x0800c8cc

0800b7e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b082      	sub	sp, #8
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	6039      	str	r1, [r7, #0]
 800b7ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f0:	79fb      	ldrb	r3, [r7, #7]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d105      	bne.n	800b802 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	4907      	ldr	r1, [pc, #28]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b7fa:	4808      	ldr	r0, [pc, #32]	; (800b81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b7fc:	f7ff fdd0 	bl	800b3a0 <USBD_GetString>
 800b800:	e004      	b.n	800b80c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b802:	683a      	ldr	r2, [r7, #0]
 800b804:	4904      	ldr	r1, [pc, #16]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b806:	4805      	ldr	r0, [pc, #20]	; (800b81c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b808:	f7ff fdca 	bl	800b3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b80c:	4b02      	ldr	r3, [pc, #8]	; (800b818 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}
 800b816:	bf00      	nop
 800b818:	20000f6c 	.word	0x20000f6c
 800b81c:	0800c8d8 	.word	0x0800c8d8

0800b820 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b826:	4b0f      	ldr	r3, [pc, #60]	; (800b864 <Get_SerialNum+0x44>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b82c:	4b0e      	ldr	r3, [pc, #56]	; (800b868 <Get_SerialNum+0x48>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b832:	4b0e      	ldr	r3, [pc, #56]	; (800b86c <Get_SerialNum+0x4c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	4413      	add	r3, r2
 800b83e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d009      	beq.n	800b85a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b846:	2208      	movs	r2, #8
 800b848:	4909      	ldr	r1, [pc, #36]	; (800b870 <Get_SerialNum+0x50>)
 800b84a:	68f8      	ldr	r0, [r7, #12]
 800b84c:	f000 f814 	bl	800b878 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b850:	2204      	movs	r2, #4
 800b852:	4908      	ldr	r1, [pc, #32]	; (800b874 <Get_SerialNum+0x54>)
 800b854:	68b8      	ldr	r0, [r7, #8]
 800b856:	f000 f80f 	bl	800b878 <IntToUnicode>
  }
}
 800b85a:	bf00      	nop
 800b85c:	3710      	adds	r7, #16
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	bf00      	nop
 800b864:	1ffff7e8 	.word	0x1ffff7e8
 800b868:	1ffff7ec 	.word	0x1ffff7ec
 800b86c:	1ffff7f0 	.word	0x1ffff7f0
 800b870:	20000162 	.word	0x20000162
 800b874:	20000172 	.word	0x20000172

0800b878 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b878:	b480      	push	{r7}
 800b87a:	b087      	sub	sp, #28
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	4613      	mov	r3, r2
 800b884:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b88a:	2300      	movs	r3, #0
 800b88c:	75fb      	strb	r3, [r7, #23]
 800b88e:	e027      	b.n	800b8e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	0f1b      	lsrs	r3, r3, #28
 800b894:	2b09      	cmp	r3, #9
 800b896:	d80b      	bhi.n	800b8b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	0f1b      	lsrs	r3, r3, #28
 800b89c:	b2da      	uxtb	r2, r3
 800b89e:	7dfb      	ldrb	r3, [r7, #23]
 800b8a0:	005b      	lsls	r3, r3, #1
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	440b      	add	r3, r1
 800b8a8:	3230      	adds	r2, #48	; 0x30
 800b8aa:	b2d2      	uxtb	r2, r2
 800b8ac:	701a      	strb	r2, [r3, #0]
 800b8ae:	e00a      	b.n	800b8c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	0f1b      	lsrs	r3, r3, #28
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	005b      	lsls	r3, r3, #1
 800b8ba:	4619      	mov	r1, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	440b      	add	r3, r1
 800b8c0:	3237      	adds	r2, #55	; 0x37
 800b8c2:	b2d2      	uxtb	r2, r2
 800b8c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	011b      	lsls	r3, r3, #4
 800b8ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b8cc:	7dfb      	ldrb	r3, [r7, #23]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	68ba      	ldr	r2, [r7, #8]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8da:	7dfb      	ldrb	r3, [r7, #23]
 800b8dc:	3301      	adds	r3, #1
 800b8de:	75fb      	strb	r3, [r7, #23]
 800b8e0:	7dfa      	ldrb	r2, [r7, #23]
 800b8e2:	79fb      	ldrb	r3, [r7, #7]
 800b8e4:	429a      	cmp	r2, r3
 800b8e6:	d3d3      	bcc.n	800b890 <IntToUnicode+0x18>
  }
}
 800b8e8:	bf00      	nop
 800b8ea:	bf00      	nop
 800b8ec:	371c      	adds	r7, #28
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bc80      	pop	{r7}
 800b8f2:	4770      	bx	lr

0800b8f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b084      	sub	sp, #16
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a0d      	ldr	r2, [pc, #52]	; (800b938 <HAL_PCD_MspInit+0x44>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d113      	bne.n	800b92e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b906:	4b0d      	ldr	r3, [pc, #52]	; (800b93c <HAL_PCD_MspInit+0x48>)
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	4a0c      	ldr	r2, [pc, #48]	; (800b93c <HAL_PCD_MspInit+0x48>)
 800b90c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b910:	61d3      	str	r3, [r2, #28]
 800b912:	4b0a      	ldr	r3, [pc, #40]	; (800b93c <HAL_PCD_MspInit+0x48>)
 800b914:	69db      	ldr	r3, [r3, #28]
 800b916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800b91e:	2200      	movs	r2, #0
 800b920:	2100      	movs	r1, #0
 800b922:	2014      	movs	r0, #20
 800b924:	f7f6 fb45 	bl	8001fb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800b928:	2014      	movs	r0, #20
 800b92a:	f7f6 fb5e 	bl	8001fea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b92e:	bf00      	nop
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	40005c00 	.word	0x40005c00
 800b93c:	40021000 	.word	0x40021000

0800b940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b954:	4619      	mov	r1, r3
 800b956:	4610      	mov	r0, r2
 800b958:	f7fe fdf2 	bl	800a540 <USBD_LL_SetupStage>
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b082      	sub	sp, #8
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	460b      	mov	r3, r1
 800b96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800b976:	78fa      	ldrb	r2, [r7, #3]
 800b978:	6879      	ldr	r1, [r7, #4]
 800b97a:	4613      	mov	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4413      	add	r3, r2
 800b980:	00db      	lsls	r3, r3, #3
 800b982:	440b      	add	r3, r1
 800b984:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b988:	681a      	ldr	r2, [r3, #0]
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	4619      	mov	r1, r3
 800b98e:	f7fe fe24 	bl	800a5da <USBD_LL_DataOutStage>
}
 800b992:	bf00      	nop
 800b994:	3708      	adds	r7, #8
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}

0800b99a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b99a:	b580      	push	{r7, lr}
 800b99c:	b082      	sub	sp, #8
 800b99e:	af00      	add	r7, sp, #0
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8d3 02d4 	ldr.w	r0, [r3, #724]	; 0x2d4
 800b9ac:	78fa      	ldrb	r2, [r7, #3]
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	440b      	add	r3, r1
 800b9ba:	3324      	adds	r3, #36	; 0x24
 800b9bc:	681a      	ldr	r2, [r3, #0]
 800b9be:	78fb      	ldrb	r3, [r7, #3]
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f7fe fe7b 	bl	800a6bc <USBD_LL_DataInStage>
}
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}

0800b9ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9dc:	4618      	mov	r0, r3
 800b9de:	f7fe ff8b 	bl	800a8f8 <USBD_LL_SOF>
}
 800b9e2:	bf00      	nop
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}

0800b9ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9ea:	b580      	push	{r7, lr}
 800b9ec:	b084      	sub	sp, #16
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b9f2:	2301      	movs	r3, #1
 800b9f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	799b      	ldrb	r3, [r3, #6]
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d001      	beq.n	800ba02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b9fe:	f7f5 f907 	bl	8000c10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba08:	7bfa      	ldrb	r2, [r7, #15]
 800ba0a:	4611      	mov	r1, r2
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	f7fe ff3b 	bl	800a888 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f7fe fef4 	bl	800a806 <USBD_LL_Reset>
}
 800ba1e:	bf00      	nop
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
	...

0800ba28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b082      	sub	sp, #8
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba36:	4618      	mov	r0, r3
 800ba38:	f7fe ff35 	bl	800a8a6 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7a9b      	ldrb	r3, [r3, #10]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d005      	beq.n	800ba50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <HAL_PCD_SuspendCallback+0x30>)
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	4a03      	ldr	r2, [pc, #12]	; (800ba58 <HAL_PCD_SuspendCallback+0x30>)
 800ba4a:	f043 0306 	orr.w	r3, r3, #6
 800ba4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	e000ed00 	.word	0xe000ed00

0800ba5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fe ff2f 	bl	800a8ce <USBD_LL_Resume>
}
 800ba70:	bf00      	nop
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}

0800ba78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b082      	sub	sp, #8
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800ba80:	4a28      	ldr	r2, [pc, #160]	; (800bb24 <USBD_LL_Init+0xac>)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	4a26      	ldr	r2, [pc, #152]	; (800bb24 <USBD_LL_Init+0xac>)
 800ba8c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800ba90:	4b24      	ldr	r3, [pc, #144]	; (800bb24 <USBD_LL_Init+0xac>)
 800ba92:	4a25      	ldr	r2, [pc, #148]	; (800bb28 <USBD_LL_Init+0xb0>)
 800ba94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800ba96:	4b23      	ldr	r3, [pc, #140]	; (800bb24 <USBD_LL_Init+0xac>)
 800ba98:	2208      	movs	r2, #8
 800ba9a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800ba9c:	4b21      	ldr	r3, [pc, #132]	; (800bb24 <USBD_LL_Init+0xac>)
 800ba9e:	2202      	movs	r2, #2
 800baa0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800baa2:	4b20      	ldr	r3, [pc, #128]	; (800bb24 <USBD_LL_Init+0xac>)
 800baa4:	2200      	movs	r2, #0
 800baa6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800baa8:	4b1e      	ldr	r3, [pc, #120]	; (800bb24 <USBD_LL_Init+0xac>)
 800baaa:	2200      	movs	r2, #0
 800baac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800baae:	4b1d      	ldr	r3, [pc, #116]	; (800bb24 <USBD_LL_Init+0xac>)
 800bab0:	2200      	movs	r2, #0
 800bab2:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bab4:	481b      	ldr	r0, [pc, #108]	; (800bb24 <USBD_LL_Init+0xac>)
 800bab6:	f7f7 fff8 	bl	8003aaa <HAL_PCD_Init>
 800baba:	4603      	mov	r3, r0
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800bac0:	f7f5 f8a6 	bl	8000c10 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baca:	2318      	movs	r3, #24
 800bacc:	2200      	movs	r2, #0
 800bace:	2100      	movs	r1, #0
 800bad0:	f7f9 fd0a 	bl	80054e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bada:	2358      	movs	r3, #88	; 0x58
 800badc:	2200      	movs	r2, #0
 800bade:	2180      	movs	r1, #128	; 0x80
 800bae0:	f7f9 fd02 	bl	80054e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800baea:	23c0      	movs	r3, #192	; 0xc0
 800baec:	2200      	movs	r2, #0
 800baee:	2181      	movs	r1, #129	; 0x81
 800baf0:	f7f9 fcfa 	bl	80054e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bafa:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bafe:	2200      	movs	r2, #0
 800bb00:	2101      	movs	r1, #1
 800bb02:	f7f9 fcf1 	bl	80054e8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb10:	2200      	movs	r2, #0
 800bb12:	2182      	movs	r1, #130	; 0x82
 800bb14:	f7f9 fce8 	bl	80054e8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb18:	2300      	movs	r3, #0
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	2000116c 	.word	0x2000116c
 800bb28:	40005c00 	.word	0x40005c00

0800bb2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb34:	2300      	movs	r3, #0
 800bb36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bb42:	4618      	mov	r0, r3
 800bb44:	f7f8 f8a7 	bl	8003c96 <HAL_PCD_Start>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb4c:	7bfb      	ldrb	r3, [r7, #15]
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f000 f94e 	bl	800bdf0 <USBD_Get_USB_Status>
 800bb54:	4603      	mov	r3, r0
 800bb56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	4608      	mov	r0, r1
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	461a      	mov	r2, r3
 800bb70:	4603      	mov	r3, r0
 800bb72:	70fb      	strb	r3, [r7, #3]
 800bb74:	460b      	mov	r3, r1
 800bb76:	70bb      	strb	r3, [r7, #2]
 800bb78:	4613      	mov	r3, r2
 800bb7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bb8a:	78bb      	ldrb	r3, [r7, #2]
 800bb8c:	883a      	ldrh	r2, [r7, #0]
 800bb8e:	78f9      	ldrb	r1, [r7, #3]
 800bb90:	f7f8 f9fb 	bl	8003f8a <HAL_PCD_EP_Open>
 800bb94:	4603      	mov	r3, r0
 800bb96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb98:	7bfb      	ldrb	r3, [r7, #15]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f000 f928 	bl	800bdf0 <USBD_Get_USB_Status>
 800bba0:	4603      	mov	r3, r0
 800bba2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3710      	adds	r7, #16
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}

0800bbae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbae:	b580      	push	{r7, lr}
 800bbb0:	b084      	sub	sp, #16
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bbc8:	78fa      	ldrb	r2, [r7, #3]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f8 fa39 	bl	8004044 <HAL_PCD_EP_Close>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f000 f909 	bl	800bdf0 <USBD_Get_USB_Status>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbe2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3710      	adds	r7, #16
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	bd80      	pop	{r7, pc}

0800bbec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc06:	78fa      	ldrb	r2, [r7, #3]
 800bc08:	4611      	mov	r1, r2
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f7f8 fae1 	bl	80041d2 <HAL_PCD_EP_SetStall>
 800bc10:	4603      	mov	r3, r0
 800bc12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc14:	7bfb      	ldrb	r3, [r7, #15]
 800bc16:	4618      	mov	r0, r3
 800bc18:	f000 f8ea 	bl	800bdf0 <USBD_Get_USB_Status>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc20:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b084      	sub	sp, #16
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
 800bc32:	460b      	mov	r3, r1
 800bc34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	4611      	mov	r1, r2
 800bc48:	4618      	mov	r0, r3
 800bc4a:	f7f8 fb22 	bl	8004292 <HAL_PCD_EP_ClrStall>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 f8cb 	bl	800bdf0 <USBD_Get_USB_Status>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc68:	b480      	push	{r7}
 800bc6a:	b085      	sub	sp, #20
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
 800bc70:	460b      	mov	r3, r1
 800bc72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bc7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bc7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	da0b      	bge.n	800bc9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bc84:	78fb      	ldrb	r3, [r7, #3]
 800bc86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc8a:	68f9      	ldr	r1, [r7, #12]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	009b      	lsls	r3, r3, #2
 800bc90:	4413      	add	r3, r2
 800bc92:	00db      	lsls	r3, r3, #3
 800bc94:	440b      	add	r3, r1
 800bc96:	3312      	adds	r3, #18
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	e00b      	b.n	800bcb4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bc9c:	78fb      	ldrb	r3, [r7, #3]
 800bc9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bca2:	68f9      	ldr	r1, [r7, #12]
 800bca4:	4613      	mov	r3, r2
 800bca6:	009b      	lsls	r3, r3, #2
 800bca8:	4413      	add	r3, r2
 800bcaa:	00db      	lsls	r3, r3, #3
 800bcac:	440b      	add	r3, r1
 800bcae:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bcb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bc80      	pop	{r7}
 800bcbc:	4770      	bx	lr

0800bcbe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcbe:	b580      	push	{r7, lr}
 800bcc0:	b084      	sub	sp, #16
 800bcc2:	af00      	add	r7, sp, #0
 800bcc4:	6078      	str	r0, [r7, #4]
 800bcc6:	460b      	mov	r3, r1
 800bcc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcca:	2300      	movs	r3, #0
 800bccc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcd8:	78fa      	ldrb	r2, [r7, #3]
 800bcda:	4611      	mov	r1, r2
 800bcdc:	4618      	mov	r0, r3
 800bcde:	f7f8 f930 	bl	8003f42 <HAL_PCD_SetAddress>
 800bce2:	4603      	mov	r3, r0
 800bce4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bce6:	7bfb      	ldrb	r3, [r7, #15]
 800bce8:	4618      	mov	r0, r3
 800bcea:	f000 f881 	bl	800bdf0 <USBD_Get_USB_Status>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3710      	adds	r7, #16
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b086      	sub	sp, #24
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	461a      	mov	r2, r3
 800bd08:	460b      	mov	r3, r1
 800bd0a:	72fb      	strb	r3, [r7, #11]
 800bd0c:	4613      	mov	r3, r2
 800bd0e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd14:	2300      	movs	r3, #0
 800bd16:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd1e:	893b      	ldrh	r3, [r7, #8]
 800bd20:	7af9      	ldrb	r1, [r7, #11]
 800bd22:	687a      	ldr	r2, [r7, #4]
 800bd24:	f7f8 fa1e 	bl	8004164 <HAL_PCD_EP_Transmit>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd2c:	7dfb      	ldrb	r3, [r7, #23]
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f000 f85e 	bl	800bdf0 <USBD_Get_USB_Status>
 800bd34:	4603      	mov	r3, r0
 800bd36:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd38:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}

0800bd42 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b086      	sub	sp, #24
 800bd46:	af00      	add	r7, sp, #0
 800bd48:	60f8      	str	r0, [r7, #12]
 800bd4a:	607a      	str	r2, [r7, #4]
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	460b      	mov	r3, r1
 800bd50:	72fb      	strb	r3, [r7, #11]
 800bd52:	4613      	mov	r3, r2
 800bd54:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800bd64:	893b      	ldrh	r3, [r7, #8]
 800bd66:	7af9      	ldrb	r1, [r7, #11]
 800bd68:	687a      	ldr	r2, [r7, #4]
 800bd6a:	f7f8 f9b3 	bl	80040d4 <HAL_PCD_EP_Receive>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 f83b 	bl	800bdf0 <USBD_Get_USB_Status>
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd7e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3718      	adds	r7, #24
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd9a:	78fa      	ldrb	r2, [r7, #3]
 800bd9c:	4611      	mov	r1, r2
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7f8 f9c9 	bl	8004136 <HAL_PCD_EP_GetRxCount>
 800bda4:	4603      	mov	r3, r0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3708      	adds	r7, #8
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	bd80      	pop	{r7, pc}
	...

0800bdb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bdb8:	4b02      	ldr	r3, [pc, #8]	; (800bdc4 <USBD_static_malloc+0x14>)
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	370c      	adds	r7, #12
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bc80      	pop	{r7}
 800bdc2:	4770      	bx	lr
 800bdc4:	20001444 	.word	0x20001444

0800bdc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]

}
 800bdd0:	bf00      	nop
 800bdd2:	370c      	adds	r7, #12
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bc80      	pop	{r7}
 800bdd8:	4770      	bx	lr

0800bdda <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdda:	b480      	push	{r7}
 800bddc:	b083      	sub	sp, #12
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	6078      	str	r0, [r7, #4]
 800bde2:	460b      	mov	r3, r1
 800bde4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bc80      	pop	{r7}
 800bdee:	4770      	bx	lr

0800bdf0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b085      	sub	sp, #20
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bdfe:	79fb      	ldrb	r3, [r7, #7]
 800be00:	2b03      	cmp	r3, #3
 800be02:	d817      	bhi.n	800be34 <USBD_Get_USB_Status+0x44>
 800be04:	a201      	add	r2, pc, #4	; (adr r2, 800be0c <USBD_Get_USB_Status+0x1c>)
 800be06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be0a:	bf00      	nop
 800be0c:	0800be1d 	.word	0x0800be1d
 800be10:	0800be23 	.word	0x0800be23
 800be14:	0800be29 	.word	0x0800be29
 800be18:	0800be2f 	.word	0x0800be2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800be1c:	2300      	movs	r3, #0
 800be1e:	73fb      	strb	r3, [r7, #15]
    break;
 800be20:	e00b      	b.n	800be3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800be22:	2302      	movs	r3, #2
 800be24:	73fb      	strb	r3, [r7, #15]
    break;
 800be26:	e008      	b.n	800be3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800be28:	2301      	movs	r3, #1
 800be2a:	73fb      	strb	r3, [r7, #15]
    break;
 800be2c:	e005      	b.n	800be3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800be2e:	2302      	movs	r3, #2
 800be30:	73fb      	strb	r3, [r7, #15]
    break;
 800be32:	e002      	b.n	800be3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800be34:	2302      	movs	r3, #2
 800be36:	73fb      	strb	r3, [r7, #15]
    break;
 800be38:	bf00      	nop
  }
  return usb_status;
 800be3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	bc80      	pop	{r7}
 800be44:	4770      	bx	lr
 800be46:	bf00      	nop

0800be48 <siprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be4e:	b500      	push	{lr}
 800be50:	b09c      	sub	sp, #112	; 0x70
 800be52:	ab1d      	add	r3, sp, #116	; 0x74
 800be54:	9002      	str	r0, [sp, #8]
 800be56:	9006      	str	r0, [sp, #24]
 800be58:	9107      	str	r1, [sp, #28]
 800be5a:	9104      	str	r1, [sp, #16]
 800be5c:	4808      	ldr	r0, [pc, #32]	; (800be80 <siprintf+0x38>)
 800be5e:	4909      	ldr	r1, [pc, #36]	; (800be84 <siprintf+0x3c>)
 800be60:	f853 2b04 	ldr.w	r2, [r3], #4
 800be64:	9105      	str	r1, [sp, #20]
 800be66:	6800      	ldr	r0, [r0, #0]
 800be68:	a902      	add	r1, sp, #8
 800be6a:	9301      	str	r3, [sp, #4]
 800be6c:	f000 f98e 	bl	800c18c <_svfiprintf_r>
 800be70:	2200      	movs	r2, #0
 800be72:	9b02      	ldr	r3, [sp, #8]
 800be74:	701a      	strb	r2, [r3, #0]
 800be76:	b01c      	add	sp, #112	; 0x70
 800be78:	f85d eb04 	ldr.w	lr, [sp], #4
 800be7c:	b003      	add	sp, #12
 800be7e:	4770      	bx	lr
 800be80:	200001c8 	.word	0x200001c8
 800be84:	ffff0208 	.word	0xffff0208

0800be88 <memset>:
 800be88:	4603      	mov	r3, r0
 800be8a:	4402      	add	r2, r0
 800be8c:	4293      	cmp	r3, r2
 800be8e:	d100      	bne.n	800be92 <memset+0xa>
 800be90:	4770      	bx	lr
 800be92:	f803 1b01 	strb.w	r1, [r3], #1
 800be96:	e7f9      	b.n	800be8c <memset+0x4>

0800be98 <__errno>:
 800be98:	4b01      	ldr	r3, [pc, #4]	; (800bea0 <__errno+0x8>)
 800be9a:	6818      	ldr	r0, [r3, #0]
 800be9c:	4770      	bx	lr
 800be9e:	bf00      	nop
 800bea0:	200001c8 	.word	0x200001c8

0800bea4 <__libc_init_array>:
 800bea4:	b570      	push	{r4, r5, r6, lr}
 800bea6:	2600      	movs	r6, #0
 800bea8:	4d0c      	ldr	r5, [pc, #48]	; (800bedc <__libc_init_array+0x38>)
 800beaa:	4c0d      	ldr	r4, [pc, #52]	; (800bee0 <__libc_init_array+0x3c>)
 800beac:	1b64      	subs	r4, r4, r5
 800beae:	10a4      	asrs	r4, r4, #2
 800beb0:	42a6      	cmp	r6, r4
 800beb2:	d109      	bne.n	800bec8 <__libc_init_array+0x24>
 800beb4:	f000 fc7a 	bl	800c7ac <_init>
 800beb8:	2600      	movs	r6, #0
 800beba:	4d0a      	ldr	r5, [pc, #40]	; (800bee4 <__libc_init_array+0x40>)
 800bebc:	4c0a      	ldr	r4, [pc, #40]	; (800bee8 <__libc_init_array+0x44>)
 800bebe:	1b64      	subs	r4, r4, r5
 800bec0:	10a4      	asrs	r4, r4, #2
 800bec2:	42a6      	cmp	r6, r4
 800bec4:	d105      	bne.n	800bed2 <__libc_init_array+0x2e>
 800bec6:	bd70      	pop	{r4, r5, r6, pc}
 800bec8:	f855 3b04 	ldr.w	r3, [r5], #4
 800becc:	4798      	blx	r3
 800bece:	3601      	adds	r6, #1
 800bed0:	e7ee      	b.n	800beb0 <__libc_init_array+0xc>
 800bed2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bed6:	4798      	blx	r3
 800bed8:	3601      	adds	r6, #1
 800beda:	e7f2      	b.n	800bec2 <__libc_init_array+0x1e>
 800bedc:	0800c95c 	.word	0x0800c95c
 800bee0:	0800c95c 	.word	0x0800c95c
 800bee4:	0800c95c 	.word	0x0800c95c
 800bee8:	0800c960 	.word	0x0800c960

0800beec <__retarget_lock_acquire_recursive>:
 800beec:	4770      	bx	lr

0800beee <__retarget_lock_release_recursive>:
 800beee:	4770      	bx	lr

0800bef0 <_free_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4605      	mov	r5, r0
 800bef4:	2900      	cmp	r1, #0
 800bef6:	d040      	beq.n	800bf7a <_free_r+0x8a>
 800bef8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800befc:	1f0c      	subs	r4, r1, #4
 800befe:	2b00      	cmp	r3, #0
 800bf00:	bfb8      	it	lt
 800bf02:	18e4      	addlt	r4, r4, r3
 800bf04:	f000 f8dc 	bl	800c0c0 <__malloc_lock>
 800bf08:	4a1c      	ldr	r2, [pc, #112]	; (800bf7c <_free_r+0x8c>)
 800bf0a:	6813      	ldr	r3, [r2, #0]
 800bf0c:	b933      	cbnz	r3, 800bf1c <_free_r+0x2c>
 800bf0e:	6063      	str	r3, [r4, #4]
 800bf10:	6014      	str	r4, [r2, #0]
 800bf12:	4628      	mov	r0, r5
 800bf14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf18:	f000 b8d8 	b.w	800c0cc <__malloc_unlock>
 800bf1c:	42a3      	cmp	r3, r4
 800bf1e:	d908      	bls.n	800bf32 <_free_r+0x42>
 800bf20:	6820      	ldr	r0, [r4, #0]
 800bf22:	1821      	adds	r1, r4, r0
 800bf24:	428b      	cmp	r3, r1
 800bf26:	bf01      	itttt	eq
 800bf28:	6819      	ldreq	r1, [r3, #0]
 800bf2a:	685b      	ldreq	r3, [r3, #4]
 800bf2c:	1809      	addeq	r1, r1, r0
 800bf2e:	6021      	streq	r1, [r4, #0]
 800bf30:	e7ed      	b.n	800bf0e <_free_r+0x1e>
 800bf32:	461a      	mov	r2, r3
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	b10b      	cbz	r3, 800bf3c <_free_r+0x4c>
 800bf38:	42a3      	cmp	r3, r4
 800bf3a:	d9fa      	bls.n	800bf32 <_free_r+0x42>
 800bf3c:	6811      	ldr	r1, [r2, #0]
 800bf3e:	1850      	adds	r0, r2, r1
 800bf40:	42a0      	cmp	r0, r4
 800bf42:	d10b      	bne.n	800bf5c <_free_r+0x6c>
 800bf44:	6820      	ldr	r0, [r4, #0]
 800bf46:	4401      	add	r1, r0
 800bf48:	1850      	adds	r0, r2, r1
 800bf4a:	4283      	cmp	r3, r0
 800bf4c:	6011      	str	r1, [r2, #0]
 800bf4e:	d1e0      	bne.n	800bf12 <_free_r+0x22>
 800bf50:	6818      	ldr	r0, [r3, #0]
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	4408      	add	r0, r1
 800bf56:	6010      	str	r0, [r2, #0]
 800bf58:	6053      	str	r3, [r2, #4]
 800bf5a:	e7da      	b.n	800bf12 <_free_r+0x22>
 800bf5c:	d902      	bls.n	800bf64 <_free_r+0x74>
 800bf5e:	230c      	movs	r3, #12
 800bf60:	602b      	str	r3, [r5, #0]
 800bf62:	e7d6      	b.n	800bf12 <_free_r+0x22>
 800bf64:	6820      	ldr	r0, [r4, #0]
 800bf66:	1821      	adds	r1, r4, r0
 800bf68:	428b      	cmp	r3, r1
 800bf6a:	bf01      	itttt	eq
 800bf6c:	6819      	ldreq	r1, [r3, #0]
 800bf6e:	685b      	ldreq	r3, [r3, #4]
 800bf70:	1809      	addeq	r1, r1, r0
 800bf72:	6021      	streq	r1, [r4, #0]
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	6054      	str	r4, [r2, #4]
 800bf78:	e7cb      	b.n	800bf12 <_free_r+0x22>
 800bf7a:	bd38      	pop	{r3, r4, r5, pc}
 800bf7c:	200017a4 	.word	0x200017a4

0800bf80 <sbrk_aligned>:
 800bf80:	b570      	push	{r4, r5, r6, lr}
 800bf82:	4e0e      	ldr	r6, [pc, #56]	; (800bfbc <sbrk_aligned+0x3c>)
 800bf84:	460c      	mov	r4, r1
 800bf86:	6831      	ldr	r1, [r6, #0]
 800bf88:	4605      	mov	r5, r0
 800bf8a:	b911      	cbnz	r1, 800bf92 <sbrk_aligned+0x12>
 800bf8c:	f000 fbaa 	bl	800c6e4 <_sbrk_r>
 800bf90:	6030      	str	r0, [r6, #0]
 800bf92:	4621      	mov	r1, r4
 800bf94:	4628      	mov	r0, r5
 800bf96:	f000 fba5 	bl	800c6e4 <_sbrk_r>
 800bf9a:	1c43      	adds	r3, r0, #1
 800bf9c:	d00a      	beq.n	800bfb4 <sbrk_aligned+0x34>
 800bf9e:	1cc4      	adds	r4, r0, #3
 800bfa0:	f024 0403 	bic.w	r4, r4, #3
 800bfa4:	42a0      	cmp	r0, r4
 800bfa6:	d007      	beq.n	800bfb8 <sbrk_aligned+0x38>
 800bfa8:	1a21      	subs	r1, r4, r0
 800bfaa:	4628      	mov	r0, r5
 800bfac:	f000 fb9a 	bl	800c6e4 <_sbrk_r>
 800bfb0:	3001      	adds	r0, #1
 800bfb2:	d101      	bne.n	800bfb8 <sbrk_aligned+0x38>
 800bfb4:	f04f 34ff 	mov.w	r4, #4294967295
 800bfb8:	4620      	mov	r0, r4
 800bfba:	bd70      	pop	{r4, r5, r6, pc}
 800bfbc:	200017a8 	.word	0x200017a8

0800bfc0 <_malloc_r>:
 800bfc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc4:	1ccd      	adds	r5, r1, #3
 800bfc6:	f025 0503 	bic.w	r5, r5, #3
 800bfca:	3508      	adds	r5, #8
 800bfcc:	2d0c      	cmp	r5, #12
 800bfce:	bf38      	it	cc
 800bfd0:	250c      	movcc	r5, #12
 800bfd2:	2d00      	cmp	r5, #0
 800bfd4:	4607      	mov	r7, r0
 800bfd6:	db01      	blt.n	800bfdc <_malloc_r+0x1c>
 800bfd8:	42a9      	cmp	r1, r5
 800bfda:	d905      	bls.n	800bfe8 <_malloc_r+0x28>
 800bfdc:	230c      	movs	r3, #12
 800bfde:	2600      	movs	r6, #0
 800bfe0:	603b      	str	r3, [r7, #0]
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c0bc <_malloc_r+0xfc>
 800bfec:	f000 f868 	bl	800c0c0 <__malloc_lock>
 800bff0:	f8d8 3000 	ldr.w	r3, [r8]
 800bff4:	461c      	mov	r4, r3
 800bff6:	bb5c      	cbnz	r4, 800c050 <_malloc_r+0x90>
 800bff8:	4629      	mov	r1, r5
 800bffa:	4638      	mov	r0, r7
 800bffc:	f7ff ffc0 	bl	800bf80 <sbrk_aligned>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	4604      	mov	r4, r0
 800c004:	d155      	bne.n	800c0b2 <_malloc_r+0xf2>
 800c006:	f8d8 4000 	ldr.w	r4, [r8]
 800c00a:	4626      	mov	r6, r4
 800c00c:	2e00      	cmp	r6, #0
 800c00e:	d145      	bne.n	800c09c <_malloc_r+0xdc>
 800c010:	2c00      	cmp	r4, #0
 800c012:	d048      	beq.n	800c0a6 <_malloc_r+0xe6>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	4631      	mov	r1, r6
 800c018:	4638      	mov	r0, r7
 800c01a:	eb04 0903 	add.w	r9, r4, r3
 800c01e:	f000 fb61 	bl	800c6e4 <_sbrk_r>
 800c022:	4581      	cmp	r9, r0
 800c024:	d13f      	bne.n	800c0a6 <_malloc_r+0xe6>
 800c026:	6821      	ldr	r1, [r4, #0]
 800c028:	4638      	mov	r0, r7
 800c02a:	1a6d      	subs	r5, r5, r1
 800c02c:	4629      	mov	r1, r5
 800c02e:	f7ff ffa7 	bl	800bf80 <sbrk_aligned>
 800c032:	3001      	adds	r0, #1
 800c034:	d037      	beq.n	800c0a6 <_malloc_r+0xe6>
 800c036:	6823      	ldr	r3, [r4, #0]
 800c038:	442b      	add	r3, r5
 800c03a:	6023      	str	r3, [r4, #0]
 800c03c:	f8d8 3000 	ldr.w	r3, [r8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d038      	beq.n	800c0b6 <_malloc_r+0xf6>
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	42a2      	cmp	r2, r4
 800c048:	d12b      	bne.n	800c0a2 <_malloc_r+0xe2>
 800c04a:	2200      	movs	r2, #0
 800c04c:	605a      	str	r2, [r3, #4]
 800c04e:	e00f      	b.n	800c070 <_malloc_r+0xb0>
 800c050:	6822      	ldr	r2, [r4, #0]
 800c052:	1b52      	subs	r2, r2, r5
 800c054:	d41f      	bmi.n	800c096 <_malloc_r+0xd6>
 800c056:	2a0b      	cmp	r2, #11
 800c058:	d917      	bls.n	800c08a <_malloc_r+0xca>
 800c05a:	1961      	adds	r1, r4, r5
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	6025      	str	r5, [r4, #0]
 800c060:	bf18      	it	ne
 800c062:	6059      	strne	r1, [r3, #4]
 800c064:	6863      	ldr	r3, [r4, #4]
 800c066:	bf08      	it	eq
 800c068:	f8c8 1000 	streq.w	r1, [r8]
 800c06c:	5162      	str	r2, [r4, r5]
 800c06e:	604b      	str	r3, [r1, #4]
 800c070:	4638      	mov	r0, r7
 800c072:	f104 060b 	add.w	r6, r4, #11
 800c076:	f000 f829 	bl	800c0cc <__malloc_unlock>
 800c07a:	f026 0607 	bic.w	r6, r6, #7
 800c07e:	1d23      	adds	r3, r4, #4
 800c080:	1af2      	subs	r2, r6, r3
 800c082:	d0ae      	beq.n	800bfe2 <_malloc_r+0x22>
 800c084:	1b9b      	subs	r3, r3, r6
 800c086:	50a3      	str	r3, [r4, r2]
 800c088:	e7ab      	b.n	800bfe2 <_malloc_r+0x22>
 800c08a:	42a3      	cmp	r3, r4
 800c08c:	6862      	ldr	r2, [r4, #4]
 800c08e:	d1dd      	bne.n	800c04c <_malloc_r+0x8c>
 800c090:	f8c8 2000 	str.w	r2, [r8]
 800c094:	e7ec      	b.n	800c070 <_malloc_r+0xb0>
 800c096:	4623      	mov	r3, r4
 800c098:	6864      	ldr	r4, [r4, #4]
 800c09a:	e7ac      	b.n	800bff6 <_malloc_r+0x36>
 800c09c:	4634      	mov	r4, r6
 800c09e:	6876      	ldr	r6, [r6, #4]
 800c0a0:	e7b4      	b.n	800c00c <_malloc_r+0x4c>
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	e7cc      	b.n	800c040 <_malloc_r+0x80>
 800c0a6:	230c      	movs	r3, #12
 800c0a8:	4638      	mov	r0, r7
 800c0aa:	603b      	str	r3, [r7, #0]
 800c0ac:	f000 f80e 	bl	800c0cc <__malloc_unlock>
 800c0b0:	e797      	b.n	800bfe2 <_malloc_r+0x22>
 800c0b2:	6025      	str	r5, [r4, #0]
 800c0b4:	e7dc      	b.n	800c070 <_malloc_r+0xb0>
 800c0b6:	605b      	str	r3, [r3, #4]
 800c0b8:	deff      	udf	#255	; 0xff
 800c0ba:	bf00      	nop
 800c0bc:	200017a4 	.word	0x200017a4

0800c0c0 <__malloc_lock>:
 800c0c0:	4801      	ldr	r0, [pc, #4]	; (800c0c8 <__malloc_lock+0x8>)
 800c0c2:	f7ff bf13 	b.w	800beec <__retarget_lock_acquire_recursive>
 800c0c6:	bf00      	nop
 800c0c8:	200017a0 	.word	0x200017a0

0800c0cc <__malloc_unlock>:
 800c0cc:	4801      	ldr	r0, [pc, #4]	; (800c0d4 <__malloc_unlock+0x8>)
 800c0ce:	f7ff bf0e 	b.w	800beee <__retarget_lock_release_recursive>
 800c0d2:	bf00      	nop
 800c0d4:	200017a0 	.word	0x200017a0

0800c0d8 <__ssputs_r>:
 800c0d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0dc:	461f      	mov	r7, r3
 800c0de:	688e      	ldr	r6, [r1, #8]
 800c0e0:	4682      	mov	sl, r0
 800c0e2:	42be      	cmp	r6, r7
 800c0e4:	460c      	mov	r4, r1
 800c0e6:	4690      	mov	r8, r2
 800c0e8:	680b      	ldr	r3, [r1, #0]
 800c0ea:	d82c      	bhi.n	800c146 <__ssputs_r+0x6e>
 800c0ec:	898a      	ldrh	r2, [r1, #12]
 800c0ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c0f2:	d026      	beq.n	800c142 <__ssputs_r+0x6a>
 800c0f4:	6965      	ldr	r5, [r4, #20]
 800c0f6:	6909      	ldr	r1, [r1, #16]
 800c0f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0fc:	eba3 0901 	sub.w	r9, r3, r1
 800c100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c104:	1c7b      	adds	r3, r7, #1
 800c106:	444b      	add	r3, r9
 800c108:	106d      	asrs	r5, r5, #1
 800c10a:	429d      	cmp	r5, r3
 800c10c:	bf38      	it	cc
 800c10e:	461d      	movcc	r5, r3
 800c110:	0553      	lsls	r3, r2, #21
 800c112:	d527      	bpl.n	800c164 <__ssputs_r+0x8c>
 800c114:	4629      	mov	r1, r5
 800c116:	f7ff ff53 	bl	800bfc0 <_malloc_r>
 800c11a:	4606      	mov	r6, r0
 800c11c:	b360      	cbz	r0, 800c178 <__ssputs_r+0xa0>
 800c11e:	464a      	mov	r2, r9
 800c120:	6921      	ldr	r1, [r4, #16]
 800c122:	f000 fafd 	bl	800c720 <memcpy>
 800c126:	89a3      	ldrh	r3, [r4, #12]
 800c128:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c12c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c130:	81a3      	strh	r3, [r4, #12]
 800c132:	6126      	str	r6, [r4, #16]
 800c134:	444e      	add	r6, r9
 800c136:	6026      	str	r6, [r4, #0]
 800c138:	463e      	mov	r6, r7
 800c13a:	6165      	str	r5, [r4, #20]
 800c13c:	eba5 0509 	sub.w	r5, r5, r9
 800c140:	60a5      	str	r5, [r4, #8]
 800c142:	42be      	cmp	r6, r7
 800c144:	d900      	bls.n	800c148 <__ssputs_r+0x70>
 800c146:	463e      	mov	r6, r7
 800c148:	4632      	mov	r2, r6
 800c14a:	4641      	mov	r1, r8
 800c14c:	6820      	ldr	r0, [r4, #0]
 800c14e:	f000 faaf 	bl	800c6b0 <memmove>
 800c152:	2000      	movs	r0, #0
 800c154:	68a3      	ldr	r3, [r4, #8]
 800c156:	1b9b      	subs	r3, r3, r6
 800c158:	60a3      	str	r3, [r4, #8]
 800c15a:	6823      	ldr	r3, [r4, #0]
 800c15c:	4433      	add	r3, r6
 800c15e:	6023      	str	r3, [r4, #0]
 800c160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c164:	462a      	mov	r2, r5
 800c166:	f000 fae9 	bl	800c73c <_realloc_r>
 800c16a:	4606      	mov	r6, r0
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d1e0      	bne.n	800c132 <__ssputs_r+0x5a>
 800c170:	4650      	mov	r0, sl
 800c172:	6921      	ldr	r1, [r4, #16]
 800c174:	f7ff febc 	bl	800bef0 <_free_r>
 800c178:	230c      	movs	r3, #12
 800c17a:	f8ca 3000 	str.w	r3, [sl]
 800c17e:	89a3      	ldrh	r3, [r4, #12]
 800c180:	f04f 30ff 	mov.w	r0, #4294967295
 800c184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c188:	81a3      	strh	r3, [r4, #12]
 800c18a:	e7e9      	b.n	800c160 <__ssputs_r+0x88>

0800c18c <_svfiprintf_r>:
 800c18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c190:	4698      	mov	r8, r3
 800c192:	898b      	ldrh	r3, [r1, #12]
 800c194:	4607      	mov	r7, r0
 800c196:	061b      	lsls	r3, r3, #24
 800c198:	460d      	mov	r5, r1
 800c19a:	4614      	mov	r4, r2
 800c19c:	b09d      	sub	sp, #116	; 0x74
 800c19e:	d50e      	bpl.n	800c1be <_svfiprintf_r+0x32>
 800c1a0:	690b      	ldr	r3, [r1, #16]
 800c1a2:	b963      	cbnz	r3, 800c1be <_svfiprintf_r+0x32>
 800c1a4:	2140      	movs	r1, #64	; 0x40
 800c1a6:	f7ff ff0b 	bl	800bfc0 <_malloc_r>
 800c1aa:	6028      	str	r0, [r5, #0]
 800c1ac:	6128      	str	r0, [r5, #16]
 800c1ae:	b920      	cbnz	r0, 800c1ba <_svfiprintf_r+0x2e>
 800c1b0:	230c      	movs	r3, #12
 800c1b2:	603b      	str	r3, [r7, #0]
 800c1b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b8:	e0d0      	b.n	800c35c <_svfiprintf_r+0x1d0>
 800c1ba:	2340      	movs	r3, #64	; 0x40
 800c1bc:	616b      	str	r3, [r5, #20]
 800c1be:	2300      	movs	r3, #0
 800c1c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c1c2:	2320      	movs	r3, #32
 800c1c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c1c8:	2330      	movs	r3, #48	; 0x30
 800c1ca:	f04f 0901 	mov.w	r9, #1
 800c1ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1d2:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800c374 <_svfiprintf_r+0x1e8>
 800c1d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1da:	4623      	mov	r3, r4
 800c1dc:	469a      	mov	sl, r3
 800c1de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1e2:	b10a      	cbz	r2, 800c1e8 <_svfiprintf_r+0x5c>
 800c1e4:	2a25      	cmp	r2, #37	; 0x25
 800c1e6:	d1f9      	bne.n	800c1dc <_svfiprintf_r+0x50>
 800c1e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c1ec:	d00b      	beq.n	800c206 <_svfiprintf_r+0x7a>
 800c1ee:	465b      	mov	r3, fp
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4629      	mov	r1, r5
 800c1f4:	4638      	mov	r0, r7
 800c1f6:	f7ff ff6f 	bl	800c0d8 <__ssputs_r>
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f000 80a9 	beq.w	800c352 <_svfiprintf_r+0x1c6>
 800c200:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c202:	445a      	add	r2, fp
 800c204:	9209      	str	r2, [sp, #36]	; 0x24
 800c206:	f89a 3000 	ldrb.w	r3, [sl]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 80a1 	beq.w	800c352 <_svfiprintf_r+0x1c6>
 800c210:	2300      	movs	r3, #0
 800c212:	f04f 32ff 	mov.w	r2, #4294967295
 800c216:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c21a:	f10a 0a01 	add.w	sl, sl, #1
 800c21e:	9304      	str	r3, [sp, #16]
 800c220:	9307      	str	r3, [sp, #28]
 800c222:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c226:	931a      	str	r3, [sp, #104]	; 0x68
 800c228:	4654      	mov	r4, sl
 800c22a:	2205      	movs	r2, #5
 800c22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c230:	4850      	ldr	r0, [pc, #320]	; (800c374 <_svfiprintf_r+0x1e8>)
 800c232:	f000 fa67 	bl	800c704 <memchr>
 800c236:	9a04      	ldr	r2, [sp, #16]
 800c238:	b9d8      	cbnz	r0, 800c272 <_svfiprintf_r+0xe6>
 800c23a:	06d0      	lsls	r0, r2, #27
 800c23c:	bf44      	itt	mi
 800c23e:	2320      	movmi	r3, #32
 800c240:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c244:	0711      	lsls	r1, r2, #28
 800c246:	bf44      	itt	mi
 800c248:	232b      	movmi	r3, #43	; 0x2b
 800c24a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c24e:	f89a 3000 	ldrb.w	r3, [sl]
 800c252:	2b2a      	cmp	r3, #42	; 0x2a
 800c254:	d015      	beq.n	800c282 <_svfiprintf_r+0xf6>
 800c256:	4654      	mov	r4, sl
 800c258:	2000      	movs	r0, #0
 800c25a:	f04f 0c0a 	mov.w	ip, #10
 800c25e:	9a07      	ldr	r2, [sp, #28]
 800c260:	4621      	mov	r1, r4
 800c262:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c266:	3b30      	subs	r3, #48	; 0x30
 800c268:	2b09      	cmp	r3, #9
 800c26a:	d94d      	bls.n	800c308 <_svfiprintf_r+0x17c>
 800c26c:	b1b0      	cbz	r0, 800c29c <_svfiprintf_r+0x110>
 800c26e:	9207      	str	r2, [sp, #28]
 800c270:	e014      	b.n	800c29c <_svfiprintf_r+0x110>
 800c272:	eba0 0308 	sub.w	r3, r0, r8
 800c276:	fa09 f303 	lsl.w	r3, r9, r3
 800c27a:	4313      	orrs	r3, r2
 800c27c:	46a2      	mov	sl, r4
 800c27e:	9304      	str	r3, [sp, #16]
 800c280:	e7d2      	b.n	800c228 <_svfiprintf_r+0x9c>
 800c282:	9b03      	ldr	r3, [sp, #12]
 800c284:	1d19      	adds	r1, r3, #4
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	9103      	str	r1, [sp, #12]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	bfbb      	ittet	lt
 800c28e:	425b      	neglt	r3, r3
 800c290:	f042 0202 	orrlt.w	r2, r2, #2
 800c294:	9307      	strge	r3, [sp, #28]
 800c296:	9307      	strlt	r3, [sp, #28]
 800c298:	bfb8      	it	lt
 800c29a:	9204      	strlt	r2, [sp, #16]
 800c29c:	7823      	ldrb	r3, [r4, #0]
 800c29e:	2b2e      	cmp	r3, #46	; 0x2e
 800c2a0:	d10c      	bne.n	800c2bc <_svfiprintf_r+0x130>
 800c2a2:	7863      	ldrb	r3, [r4, #1]
 800c2a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c2a6:	d134      	bne.n	800c312 <_svfiprintf_r+0x186>
 800c2a8:	9b03      	ldr	r3, [sp, #12]
 800c2aa:	3402      	adds	r4, #2
 800c2ac:	1d1a      	adds	r2, r3, #4
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	9203      	str	r2, [sp, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	bfb8      	it	lt
 800c2b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c2ba:	9305      	str	r3, [sp, #20]
 800c2bc:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c378 <_svfiprintf_r+0x1ec>
 800c2c0:	2203      	movs	r2, #3
 800c2c2:	4650      	mov	r0, sl
 800c2c4:	7821      	ldrb	r1, [r4, #0]
 800c2c6:	f000 fa1d 	bl	800c704 <memchr>
 800c2ca:	b138      	cbz	r0, 800c2dc <_svfiprintf_r+0x150>
 800c2cc:	2240      	movs	r2, #64	; 0x40
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	eba0 000a 	sub.w	r0, r0, sl
 800c2d4:	4082      	lsls	r2, r0
 800c2d6:	4313      	orrs	r3, r2
 800c2d8:	3401      	adds	r4, #1
 800c2da:	9304      	str	r3, [sp, #16]
 800c2dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e0:	2206      	movs	r2, #6
 800c2e2:	4826      	ldr	r0, [pc, #152]	; (800c37c <_svfiprintf_r+0x1f0>)
 800c2e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2e8:	f000 fa0c 	bl	800c704 <memchr>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d038      	beq.n	800c362 <_svfiprintf_r+0x1d6>
 800c2f0:	4b23      	ldr	r3, [pc, #140]	; (800c380 <_svfiprintf_r+0x1f4>)
 800c2f2:	bb1b      	cbnz	r3, 800c33c <_svfiprintf_r+0x1b0>
 800c2f4:	9b03      	ldr	r3, [sp, #12]
 800c2f6:	3307      	adds	r3, #7
 800c2f8:	f023 0307 	bic.w	r3, r3, #7
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	9303      	str	r3, [sp, #12]
 800c300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c302:	4433      	add	r3, r6
 800c304:	9309      	str	r3, [sp, #36]	; 0x24
 800c306:	e768      	b.n	800c1da <_svfiprintf_r+0x4e>
 800c308:	460c      	mov	r4, r1
 800c30a:	2001      	movs	r0, #1
 800c30c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c310:	e7a6      	b.n	800c260 <_svfiprintf_r+0xd4>
 800c312:	2300      	movs	r3, #0
 800c314:	f04f 0c0a 	mov.w	ip, #10
 800c318:	4619      	mov	r1, r3
 800c31a:	3401      	adds	r4, #1
 800c31c:	9305      	str	r3, [sp, #20]
 800c31e:	4620      	mov	r0, r4
 800c320:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c324:	3a30      	subs	r2, #48	; 0x30
 800c326:	2a09      	cmp	r2, #9
 800c328:	d903      	bls.n	800c332 <_svfiprintf_r+0x1a6>
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d0c6      	beq.n	800c2bc <_svfiprintf_r+0x130>
 800c32e:	9105      	str	r1, [sp, #20]
 800c330:	e7c4      	b.n	800c2bc <_svfiprintf_r+0x130>
 800c332:	4604      	mov	r4, r0
 800c334:	2301      	movs	r3, #1
 800c336:	fb0c 2101 	mla	r1, ip, r1, r2
 800c33a:	e7f0      	b.n	800c31e <_svfiprintf_r+0x192>
 800c33c:	ab03      	add	r3, sp, #12
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	462a      	mov	r2, r5
 800c342:	4638      	mov	r0, r7
 800c344:	4b0f      	ldr	r3, [pc, #60]	; (800c384 <_svfiprintf_r+0x1f8>)
 800c346:	a904      	add	r1, sp, #16
 800c348:	f3af 8000 	nop.w
 800c34c:	1c42      	adds	r2, r0, #1
 800c34e:	4606      	mov	r6, r0
 800c350:	d1d6      	bne.n	800c300 <_svfiprintf_r+0x174>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	065b      	lsls	r3, r3, #25
 800c356:	f53f af2d 	bmi.w	800c1b4 <_svfiprintf_r+0x28>
 800c35a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c35c:	b01d      	add	sp, #116	; 0x74
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	ab03      	add	r3, sp, #12
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	462a      	mov	r2, r5
 800c368:	4638      	mov	r0, r7
 800c36a:	4b06      	ldr	r3, [pc, #24]	; (800c384 <_svfiprintf_r+0x1f8>)
 800c36c:	a904      	add	r1, sp, #16
 800c36e:	f000 f87d 	bl	800c46c <_printf_i>
 800c372:	e7eb      	b.n	800c34c <_svfiprintf_r+0x1c0>
 800c374:	0800c926 	.word	0x0800c926
 800c378:	0800c92c 	.word	0x0800c92c
 800c37c:	0800c930 	.word	0x0800c930
 800c380:	00000000 	.word	0x00000000
 800c384:	0800c0d9 	.word	0x0800c0d9

0800c388 <_printf_common>:
 800c388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c38c:	4616      	mov	r6, r2
 800c38e:	4699      	mov	r9, r3
 800c390:	688a      	ldr	r2, [r1, #8]
 800c392:	690b      	ldr	r3, [r1, #16]
 800c394:	4607      	mov	r7, r0
 800c396:	4293      	cmp	r3, r2
 800c398:	bfb8      	it	lt
 800c39a:	4613      	movlt	r3, r2
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c3a2:	460c      	mov	r4, r1
 800c3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c3a8:	b10a      	cbz	r2, 800c3ae <_printf_common+0x26>
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	6033      	str	r3, [r6, #0]
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	0699      	lsls	r1, r3, #26
 800c3b2:	bf42      	ittt	mi
 800c3b4:	6833      	ldrmi	r3, [r6, #0]
 800c3b6:	3302      	addmi	r3, #2
 800c3b8:	6033      	strmi	r3, [r6, #0]
 800c3ba:	6825      	ldr	r5, [r4, #0]
 800c3bc:	f015 0506 	ands.w	r5, r5, #6
 800c3c0:	d106      	bne.n	800c3d0 <_printf_common+0x48>
 800c3c2:	f104 0a19 	add.w	sl, r4, #25
 800c3c6:	68e3      	ldr	r3, [r4, #12]
 800c3c8:	6832      	ldr	r2, [r6, #0]
 800c3ca:	1a9b      	subs	r3, r3, r2
 800c3cc:	42ab      	cmp	r3, r5
 800c3ce:	dc2b      	bgt.n	800c428 <_printf_common+0xa0>
 800c3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c3d4:	1e13      	subs	r3, r2, #0
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	bf18      	it	ne
 800c3da:	2301      	movne	r3, #1
 800c3dc:	0692      	lsls	r2, r2, #26
 800c3de:	d430      	bmi.n	800c442 <_printf_common+0xba>
 800c3e0:	4649      	mov	r1, r9
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3e8:	47c0      	blx	r8
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	d023      	beq.n	800c436 <_printf_common+0xae>
 800c3ee:	6823      	ldr	r3, [r4, #0]
 800c3f0:	6922      	ldr	r2, [r4, #16]
 800c3f2:	f003 0306 	and.w	r3, r3, #6
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	bf14      	ite	ne
 800c3fa:	2500      	movne	r5, #0
 800c3fc:	6833      	ldreq	r3, [r6, #0]
 800c3fe:	f04f 0600 	mov.w	r6, #0
 800c402:	bf08      	it	eq
 800c404:	68e5      	ldreq	r5, [r4, #12]
 800c406:	f104 041a 	add.w	r4, r4, #26
 800c40a:	bf08      	it	eq
 800c40c:	1aed      	subeq	r5, r5, r3
 800c40e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c412:	bf08      	it	eq
 800c414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c418:	4293      	cmp	r3, r2
 800c41a:	bfc4      	itt	gt
 800c41c:	1a9b      	subgt	r3, r3, r2
 800c41e:	18ed      	addgt	r5, r5, r3
 800c420:	42b5      	cmp	r5, r6
 800c422:	d11a      	bne.n	800c45a <_printf_common+0xd2>
 800c424:	2000      	movs	r0, #0
 800c426:	e008      	b.n	800c43a <_printf_common+0xb2>
 800c428:	2301      	movs	r3, #1
 800c42a:	4652      	mov	r2, sl
 800c42c:	4649      	mov	r1, r9
 800c42e:	4638      	mov	r0, r7
 800c430:	47c0      	blx	r8
 800c432:	3001      	adds	r0, #1
 800c434:	d103      	bne.n	800c43e <_printf_common+0xb6>
 800c436:	f04f 30ff 	mov.w	r0, #4294967295
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	3501      	adds	r5, #1
 800c440:	e7c1      	b.n	800c3c6 <_printf_common+0x3e>
 800c442:	2030      	movs	r0, #48	; 0x30
 800c444:	18e1      	adds	r1, r4, r3
 800c446:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c44a:	1c5a      	adds	r2, r3, #1
 800c44c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c450:	4422      	add	r2, r4
 800c452:	3302      	adds	r3, #2
 800c454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c458:	e7c2      	b.n	800c3e0 <_printf_common+0x58>
 800c45a:	2301      	movs	r3, #1
 800c45c:	4622      	mov	r2, r4
 800c45e:	4649      	mov	r1, r9
 800c460:	4638      	mov	r0, r7
 800c462:	47c0      	blx	r8
 800c464:	3001      	adds	r0, #1
 800c466:	d0e6      	beq.n	800c436 <_printf_common+0xae>
 800c468:	3601      	adds	r6, #1
 800c46a:	e7d9      	b.n	800c420 <_printf_common+0x98>

0800c46c <_printf_i>:
 800c46c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c470:	7e0f      	ldrb	r7, [r1, #24]
 800c472:	4691      	mov	r9, r2
 800c474:	2f78      	cmp	r7, #120	; 0x78
 800c476:	4680      	mov	r8, r0
 800c478:	460c      	mov	r4, r1
 800c47a:	469a      	mov	sl, r3
 800c47c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c47e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c482:	d807      	bhi.n	800c494 <_printf_i+0x28>
 800c484:	2f62      	cmp	r7, #98	; 0x62
 800c486:	d80a      	bhi.n	800c49e <_printf_i+0x32>
 800c488:	2f00      	cmp	r7, #0
 800c48a:	f000 80d5 	beq.w	800c638 <_printf_i+0x1cc>
 800c48e:	2f58      	cmp	r7, #88	; 0x58
 800c490:	f000 80c1 	beq.w	800c616 <_printf_i+0x1aa>
 800c494:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c498:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c49c:	e03a      	b.n	800c514 <_printf_i+0xa8>
 800c49e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c4a2:	2b15      	cmp	r3, #21
 800c4a4:	d8f6      	bhi.n	800c494 <_printf_i+0x28>
 800c4a6:	a101      	add	r1, pc, #4	; (adr r1, 800c4ac <_printf_i+0x40>)
 800c4a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4ac:	0800c505 	.word	0x0800c505
 800c4b0:	0800c519 	.word	0x0800c519
 800c4b4:	0800c495 	.word	0x0800c495
 800c4b8:	0800c495 	.word	0x0800c495
 800c4bc:	0800c495 	.word	0x0800c495
 800c4c0:	0800c495 	.word	0x0800c495
 800c4c4:	0800c519 	.word	0x0800c519
 800c4c8:	0800c495 	.word	0x0800c495
 800c4cc:	0800c495 	.word	0x0800c495
 800c4d0:	0800c495 	.word	0x0800c495
 800c4d4:	0800c495 	.word	0x0800c495
 800c4d8:	0800c61f 	.word	0x0800c61f
 800c4dc:	0800c545 	.word	0x0800c545
 800c4e0:	0800c5d9 	.word	0x0800c5d9
 800c4e4:	0800c495 	.word	0x0800c495
 800c4e8:	0800c495 	.word	0x0800c495
 800c4ec:	0800c641 	.word	0x0800c641
 800c4f0:	0800c495 	.word	0x0800c495
 800c4f4:	0800c545 	.word	0x0800c545
 800c4f8:	0800c495 	.word	0x0800c495
 800c4fc:	0800c495 	.word	0x0800c495
 800c500:	0800c5e1 	.word	0x0800c5e1
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	1d1a      	adds	r2, r3, #4
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	602a      	str	r2, [r5, #0]
 800c50c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c510:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c514:	2301      	movs	r3, #1
 800c516:	e0a0      	b.n	800c65a <_printf_i+0x1ee>
 800c518:	6820      	ldr	r0, [r4, #0]
 800c51a:	682b      	ldr	r3, [r5, #0]
 800c51c:	0607      	lsls	r7, r0, #24
 800c51e:	f103 0104 	add.w	r1, r3, #4
 800c522:	6029      	str	r1, [r5, #0]
 800c524:	d501      	bpl.n	800c52a <_printf_i+0xbe>
 800c526:	681e      	ldr	r6, [r3, #0]
 800c528:	e003      	b.n	800c532 <_printf_i+0xc6>
 800c52a:	0646      	lsls	r6, r0, #25
 800c52c:	d5fb      	bpl.n	800c526 <_printf_i+0xba>
 800c52e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c532:	2e00      	cmp	r6, #0
 800c534:	da03      	bge.n	800c53e <_printf_i+0xd2>
 800c536:	232d      	movs	r3, #45	; 0x2d
 800c538:	4276      	negs	r6, r6
 800c53a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c53e:	230a      	movs	r3, #10
 800c540:	4859      	ldr	r0, [pc, #356]	; (800c6a8 <_printf_i+0x23c>)
 800c542:	e012      	b.n	800c56a <_printf_i+0xfe>
 800c544:	682b      	ldr	r3, [r5, #0]
 800c546:	6820      	ldr	r0, [r4, #0]
 800c548:	1d19      	adds	r1, r3, #4
 800c54a:	6029      	str	r1, [r5, #0]
 800c54c:	0605      	lsls	r5, r0, #24
 800c54e:	d501      	bpl.n	800c554 <_printf_i+0xe8>
 800c550:	681e      	ldr	r6, [r3, #0]
 800c552:	e002      	b.n	800c55a <_printf_i+0xee>
 800c554:	0641      	lsls	r1, r0, #25
 800c556:	d5fb      	bpl.n	800c550 <_printf_i+0xe4>
 800c558:	881e      	ldrh	r6, [r3, #0]
 800c55a:	2f6f      	cmp	r7, #111	; 0x6f
 800c55c:	bf0c      	ite	eq
 800c55e:	2308      	moveq	r3, #8
 800c560:	230a      	movne	r3, #10
 800c562:	4851      	ldr	r0, [pc, #324]	; (800c6a8 <_printf_i+0x23c>)
 800c564:	2100      	movs	r1, #0
 800c566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c56a:	6865      	ldr	r5, [r4, #4]
 800c56c:	2d00      	cmp	r5, #0
 800c56e:	bfa8      	it	ge
 800c570:	6821      	ldrge	r1, [r4, #0]
 800c572:	60a5      	str	r5, [r4, #8]
 800c574:	bfa4      	itt	ge
 800c576:	f021 0104 	bicge.w	r1, r1, #4
 800c57a:	6021      	strge	r1, [r4, #0]
 800c57c:	b90e      	cbnz	r6, 800c582 <_printf_i+0x116>
 800c57e:	2d00      	cmp	r5, #0
 800c580:	d04b      	beq.n	800c61a <_printf_i+0x1ae>
 800c582:	4615      	mov	r5, r2
 800c584:	fbb6 f1f3 	udiv	r1, r6, r3
 800c588:	fb03 6711 	mls	r7, r3, r1, r6
 800c58c:	5dc7      	ldrb	r7, [r0, r7]
 800c58e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c592:	4637      	mov	r7, r6
 800c594:	42bb      	cmp	r3, r7
 800c596:	460e      	mov	r6, r1
 800c598:	d9f4      	bls.n	800c584 <_printf_i+0x118>
 800c59a:	2b08      	cmp	r3, #8
 800c59c:	d10b      	bne.n	800c5b6 <_printf_i+0x14a>
 800c59e:	6823      	ldr	r3, [r4, #0]
 800c5a0:	07de      	lsls	r6, r3, #31
 800c5a2:	d508      	bpl.n	800c5b6 <_printf_i+0x14a>
 800c5a4:	6923      	ldr	r3, [r4, #16]
 800c5a6:	6861      	ldr	r1, [r4, #4]
 800c5a8:	4299      	cmp	r1, r3
 800c5aa:	bfde      	ittt	le
 800c5ac:	2330      	movle	r3, #48	; 0x30
 800c5ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c5b2:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c5b6:	1b52      	subs	r2, r2, r5
 800c5b8:	6122      	str	r2, [r4, #16]
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	4621      	mov	r1, r4
 800c5be:	4640      	mov	r0, r8
 800c5c0:	f8cd a000 	str.w	sl, [sp]
 800c5c4:	aa03      	add	r2, sp, #12
 800c5c6:	f7ff fedf 	bl	800c388 <_printf_common>
 800c5ca:	3001      	adds	r0, #1
 800c5cc:	d14a      	bne.n	800c664 <_printf_i+0x1f8>
 800c5ce:	f04f 30ff 	mov.w	r0, #4294967295
 800c5d2:	b004      	add	sp, #16
 800c5d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d8:	6823      	ldr	r3, [r4, #0]
 800c5da:	f043 0320 	orr.w	r3, r3, #32
 800c5de:	6023      	str	r3, [r4, #0]
 800c5e0:	2778      	movs	r7, #120	; 0x78
 800c5e2:	4832      	ldr	r0, [pc, #200]	; (800c6ac <_printf_i+0x240>)
 800c5e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c5e8:	6823      	ldr	r3, [r4, #0]
 800c5ea:	6829      	ldr	r1, [r5, #0]
 800c5ec:	061f      	lsls	r7, r3, #24
 800c5ee:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5f2:	d402      	bmi.n	800c5fa <_printf_i+0x18e>
 800c5f4:	065f      	lsls	r7, r3, #25
 800c5f6:	bf48      	it	mi
 800c5f8:	b2b6      	uxthmi	r6, r6
 800c5fa:	07df      	lsls	r7, r3, #31
 800c5fc:	bf48      	it	mi
 800c5fe:	f043 0320 	orrmi.w	r3, r3, #32
 800c602:	6029      	str	r1, [r5, #0]
 800c604:	bf48      	it	mi
 800c606:	6023      	strmi	r3, [r4, #0]
 800c608:	b91e      	cbnz	r6, 800c612 <_printf_i+0x1a6>
 800c60a:	6823      	ldr	r3, [r4, #0]
 800c60c:	f023 0320 	bic.w	r3, r3, #32
 800c610:	6023      	str	r3, [r4, #0]
 800c612:	2310      	movs	r3, #16
 800c614:	e7a6      	b.n	800c564 <_printf_i+0xf8>
 800c616:	4824      	ldr	r0, [pc, #144]	; (800c6a8 <_printf_i+0x23c>)
 800c618:	e7e4      	b.n	800c5e4 <_printf_i+0x178>
 800c61a:	4615      	mov	r5, r2
 800c61c:	e7bd      	b.n	800c59a <_printf_i+0x12e>
 800c61e:	682b      	ldr	r3, [r5, #0]
 800c620:	6826      	ldr	r6, [r4, #0]
 800c622:	1d18      	adds	r0, r3, #4
 800c624:	6961      	ldr	r1, [r4, #20]
 800c626:	6028      	str	r0, [r5, #0]
 800c628:	0635      	lsls	r5, r6, #24
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	d501      	bpl.n	800c632 <_printf_i+0x1c6>
 800c62e:	6019      	str	r1, [r3, #0]
 800c630:	e002      	b.n	800c638 <_printf_i+0x1cc>
 800c632:	0670      	lsls	r0, r6, #25
 800c634:	d5fb      	bpl.n	800c62e <_printf_i+0x1c2>
 800c636:	8019      	strh	r1, [r3, #0]
 800c638:	2300      	movs	r3, #0
 800c63a:	4615      	mov	r5, r2
 800c63c:	6123      	str	r3, [r4, #16]
 800c63e:	e7bc      	b.n	800c5ba <_printf_i+0x14e>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	2100      	movs	r1, #0
 800c644:	1d1a      	adds	r2, r3, #4
 800c646:	602a      	str	r2, [r5, #0]
 800c648:	681d      	ldr	r5, [r3, #0]
 800c64a:	6862      	ldr	r2, [r4, #4]
 800c64c:	4628      	mov	r0, r5
 800c64e:	f000 f859 	bl	800c704 <memchr>
 800c652:	b108      	cbz	r0, 800c658 <_printf_i+0x1ec>
 800c654:	1b40      	subs	r0, r0, r5
 800c656:	6060      	str	r0, [r4, #4]
 800c658:	6863      	ldr	r3, [r4, #4]
 800c65a:	6123      	str	r3, [r4, #16]
 800c65c:	2300      	movs	r3, #0
 800c65e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c662:	e7aa      	b.n	800c5ba <_printf_i+0x14e>
 800c664:	462a      	mov	r2, r5
 800c666:	4649      	mov	r1, r9
 800c668:	4640      	mov	r0, r8
 800c66a:	6923      	ldr	r3, [r4, #16]
 800c66c:	47d0      	blx	sl
 800c66e:	3001      	adds	r0, #1
 800c670:	d0ad      	beq.n	800c5ce <_printf_i+0x162>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	079b      	lsls	r3, r3, #30
 800c676:	d413      	bmi.n	800c6a0 <_printf_i+0x234>
 800c678:	68e0      	ldr	r0, [r4, #12]
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	4298      	cmp	r0, r3
 800c67e:	bfb8      	it	lt
 800c680:	4618      	movlt	r0, r3
 800c682:	e7a6      	b.n	800c5d2 <_printf_i+0x166>
 800c684:	2301      	movs	r3, #1
 800c686:	4632      	mov	r2, r6
 800c688:	4649      	mov	r1, r9
 800c68a:	4640      	mov	r0, r8
 800c68c:	47d0      	blx	sl
 800c68e:	3001      	adds	r0, #1
 800c690:	d09d      	beq.n	800c5ce <_printf_i+0x162>
 800c692:	3501      	adds	r5, #1
 800c694:	68e3      	ldr	r3, [r4, #12]
 800c696:	9903      	ldr	r1, [sp, #12]
 800c698:	1a5b      	subs	r3, r3, r1
 800c69a:	42ab      	cmp	r3, r5
 800c69c:	dcf2      	bgt.n	800c684 <_printf_i+0x218>
 800c69e:	e7eb      	b.n	800c678 <_printf_i+0x20c>
 800c6a0:	2500      	movs	r5, #0
 800c6a2:	f104 0619 	add.w	r6, r4, #25
 800c6a6:	e7f5      	b.n	800c694 <_printf_i+0x228>
 800c6a8:	0800c937 	.word	0x0800c937
 800c6ac:	0800c948 	.word	0x0800c948

0800c6b0 <memmove>:
 800c6b0:	4288      	cmp	r0, r1
 800c6b2:	b510      	push	{r4, lr}
 800c6b4:	eb01 0402 	add.w	r4, r1, r2
 800c6b8:	d902      	bls.n	800c6c0 <memmove+0x10>
 800c6ba:	4284      	cmp	r4, r0
 800c6bc:	4623      	mov	r3, r4
 800c6be:	d807      	bhi.n	800c6d0 <memmove+0x20>
 800c6c0:	1e43      	subs	r3, r0, #1
 800c6c2:	42a1      	cmp	r1, r4
 800c6c4:	d008      	beq.n	800c6d8 <memmove+0x28>
 800c6c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6ce:	e7f8      	b.n	800c6c2 <memmove+0x12>
 800c6d0:	4601      	mov	r1, r0
 800c6d2:	4402      	add	r2, r0
 800c6d4:	428a      	cmp	r2, r1
 800c6d6:	d100      	bne.n	800c6da <memmove+0x2a>
 800c6d8:	bd10      	pop	{r4, pc}
 800c6da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6e2:	e7f7      	b.n	800c6d4 <memmove+0x24>

0800c6e4 <_sbrk_r>:
 800c6e4:	b538      	push	{r3, r4, r5, lr}
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	4d05      	ldr	r5, [pc, #20]	; (800c700 <_sbrk_r+0x1c>)
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	4608      	mov	r0, r1
 800c6ee:	602b      	str	r3, [r5, #0]
 800c6f0:	f7f4 fd68 	bl	80011c4 <_sbrk>
 800c6f4:	1c43      	adds	r3, r0, #1
 800c6f6:	d102      	bne.n	800c6fe <_sbrk_r+0x1a>
 800c6f8:	682b      	ldr	r3, [r5, #0]
 800c6fa:	b103      	cbz	r3, 800c6fe <_sbrk_r+0x1a>
 800c6fc:	6023      	str	r3, [r4, #0]
 800c6fe:	bd38      	pop	{r3, r4, r5, pc}
 800c700:	2000179c 	.word	0x2000179c

0800c704 <memchr>:
 800c704:	4603      	mov	r3, r0
 800c706:	b510      	push	{r4, lr}
 800c708:	b2c9      	uxtb	r1, r1
 800c70a:	4402      	add	r2, r0
 800c70c:	4293      	cmp	r3, r2
 800c70e:	4618      	mov	r0, r3
 800c710:	d101      	bne.n	800c716 <memchr+0x12>
 800c712:	2000      	movs	r0, #0
 800c714:	e003      	b.n	800c71e <memchr+0x1a>
 800c716:	7804      	ldrb	r4, [r0, #0]
 800c718:	3301      	adds	r3, #1
 800c71a:	428c      	cmp	r4, r1
 800c71c:	d1f6      	bne.n	800c70c <memchr+0x8>
 800c71e:	bd10      	pop	{r4, pc}

0800c720 <memcpy>:
 800c720:	440a      	add	r2, r1
 800c722:	4291      	cmp	r1, r2
 800c724:	f100 33ff 	add.w	r3, r0, #4294967295
 800c728:	d100      	bne.n	800c72c <memcpy+0xc>
 800c72a:	4770      	bx	lr
 800c72c:	b510      	push	{r4, lr}
 800c72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c732:	4291      	cmp	r1, r2
 800c734:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c738:	d1f9      	bne.n	800c72e <memcpy+0xe>
 800c73a:	bd10      	pop	{r4, pc}

0800c73c <_realloc_r>:
 800c73c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c740:	4680      	mov	r8, r0
 800c742:	4614      	mov	r4, r2
 800c744:	460e      	mov	r6, r1
 800c746:	b921      	cbnz	r1, 800c752 <_realloc_r+0x16>
 800c748:	4611      	mov	r1, r2
 800c74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c74e:	f7ff bc37 	b.w	800bfc0 <_malloc_r>
 800c752:	b92a      	cbnz	r2, 800c760 <_realloc_r+0x24>
 800c754:	f7ff fbcc 	bl	800bef0 <_free_r>
 800c758:	4625      	mov	r5, r4
 800c75a:	4628      	mov	r0, r5
 800c75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c760:	f000 f81b 	bl	800c79a <_malloc_usable_size_r>
 800c764:	4284      	cmp	r4, r0
 800c766:	4607      	mov	r7, r0
 800c768:	d802      	bhi.n	800c770 <_realloc_r+0x34>
 800c76a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c76e:	d812      	bhi.n	800c796 <_realloc_r+0x5a>
 800c770:	4621      	mov	r1, r4
 800c772:	4640      	mov	r0, r8
 800c774:	f7ff fc24 	bl	800bfc0 <_malloc_r>
 800c778:	4605      	mov	r5, r0
 800c77a:	2800      	cmp	r0, #0
 800c77c:	d0ed      	beq.n	800c75a <_realloc_r+0x1e>
 800c77e:	42bc      	cmp	r4, r7
 800c780:	4622      	mov	r2, r4
 800c782:	4631      	mov	r1, r6
 800c784:	bf28      	it	cs
 800c786:	463a      	movcs	r2, r7
 800c788:	f7ff ffca 	bl	800c720 <memcpy>
 800c78c:	4631      	mov	r1, r6
 800c78e:	4640      	mov	r0, r8
 800c790:	f7ff fbae 	bl	800bef0 <_free_r>
 800c794:	e7e1      	b.n	800c75a <_realloc_r+0x1e>
 800c796:	4635      	mov	r5, r6
 800c798:	e7df      	b.n	800c75a <_realloc_r+0x1e>

0800c79a <_malloc_usable_size_r>:
 800c79a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c79e:	1f18      	subs	r0, r3, #4
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	bfbc      	itt	lt
 800c7a4:	580b      	ldrlt	r3, [r1, r0]
 800c7a6:	18c0      	addlt	r0, r0, r3
 800c7a8:	4770      	bx	lr
	...

0800c7ac <_init>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	bf00      	nop
 800c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	469e      	mov	lr, r3
 800c7b6:	4770      	bx	lr

0800c7b8 <_fini>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr
